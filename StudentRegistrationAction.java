package com.app.feejunction.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Entity;
import javax.ws.rs.client.Invocation;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.Response;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringUtils;
//import com.a.b.Logger;
import org.apache.struts2.ServletActionContext;
import org.json.JSONArray;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.app.feejunction.bean.*;
import com.app.feejunction.helper.ChecksumGenerator;
import com.app.feejunction.helper.TPSLConstants;
import com.app.feejunction.service.CourseDetailsService;
import com.app.feejunction.service.InstituteMasterActionService;
import com.app.feejunction.service.LoginActionService;
import com.app.feejunction.service.PaymentService;
import com.app.feejunction.service.StudentDataService;
import com.app.feejunction.service.StudentRegistrationService;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.google.gson.Gson;
import com.ingenico.secure.api.util.InvalidHexDataException;
import com.ingenico.secure.client.api.gateway.APIResponse;
import com.ingenico.secure.client.api.gateway.SecureAPIBuilder;
import com.ingenico.secure.client.api.gateway.SecureAPIConnection;
import com.opensymphony.xwork2.ActionContext;
import com.tpsl.util.ErrorPropertyReader;
//import com.tpsl.util.FormValidationUtil;
import com.tpsl.util.PropertyReader;
//import com.tpsl.util.SecureAPIUtility;
import com.tpsl.util.ValidationErrorHandler;

public class StudentRegistrationAction extends FJAction {
	// private static final Logger logger =
	// Logger.getLogger(StudentRegistrationAction.class);
	private static final Logger logger = LoggerFactory.getLogger(StudentRegistrationAction.class);
	private static final Logger audit = LoggerFactory.getLogger("audit");
	private StudentRegistrationFormBean appData = new StudentRegistrationFormBean();
	private CourseDetailsBean courseData = new CourseDetailsBean();
	private Map<String, StudentRegistrationFormBean> studentDataMap;
	private Map<String, String> stateMapList = null;
	private String studentId;
	private String studentRegistrationId;
	StudentRegistrationFormBean studentRegistrationFormBean = new StudentRegistrationFormBean();
	String studentName = "";
	private String delstudentId;
	private BhuLoginActionFormBean bhuData;
	private GNLULoginActionFormBean gnluData;
	private RamaCollageFormBean ramaData;
	private IITBActionFormBean iitbData;
	private IMSUniversityFormBean imsUniversityFormBean;
	private YMCAOnlineFormBean ymcaOnlineFormBean;
	private GpullaReadyFormBean gpullaReadyFormBean;
	private UnisonFormBean unisonFormBean;
	private WBUTUniversityFormBean wbutUniversityFormBean;
	private CampionSchoolFormBean campionSchoolFormBean;
	private NITOnlineFormBean nitOnlineFormBean;
	private HaryanaFormBean haryanaFormBean;
	private BengalCollegeOnlineFormBean bengalCollegeOnlineFormBean;
	private InputStream fileInputStream;
	private StringBuffer buffer;
	private BSEFormBean bseFormBean;
	private WelhamSchoolFormBean welhamSchoolFormBean;
	private NIPROnlineFormBean niprOnlineFormBean;
	private CandEntryForm candEntryForm;
	private UGIOnlineFormBean ugiOnlineFormBean;
	private MGRMedicalOnlineFormBean mgrMedicalOnlineFormBean;
	private DOONOnlineFormBean doonOnlineFormBean;
	private JRSTOnlineFormBean jrstOnlineFormBean;
	private MGCOnlineFormBean mgcOnlineFormBean;
	private NISMOnlineFormBean nismOnlineFormBean;
	private DOTUOnlineFormBean dotuOnlineFormBean;
	private RPTMOnlineFormBean rptmOnlineFormBean;
	private KaushalyaFormBean kaushalyaFormBean;
	private RungtanlineFormBean rungtanlineFormBean;
	private ChristineOnlineFormBean christineOnlineFormBean;
	private MATSFeesForm matsFeesForm;
	private SharpmindsOnlineFormBean sharpmindsOnlineFormBean;
	private BSPROnlineFormBean bsprOnlineFormBean;
	private EtoosOnlineFormBean etoosOnlineFormBean;
	private BKLIOnlineFormBean bkliOnlineFormBean;
	private IIBMSFormBean iibmsFormBean;
	private JayotiFormBean jayotiFormBean;
	private INTLOnlineFormBean intlOnlineFormBean;
	private PrincipalAIAFormBean principalOnlineFormBean;
	private OrigenceOnlineFormBean origenceOnlineFormBean;
	private NATLOnlineFormBean natlOnlineFormBean;
	private LanOnlineFormBean lanOnlineFormBean;
	private DTEFormBean dteFormBean;
	private RungtaCollegeFormBean rungtaCollegeFormBean;
	private GPSOnlineFormBean gpsOnlineFormBean;
	private TOLANIFormBean tolaniFormBean;
	private SHIVFormBean shivFormBean;
	private HydroPowerOnlineFormBean hydroPowerOnlineFormBean;
	private SWARAFormBean swaraFormBean;
	private AmbikapurOnlineFormBean ambikaPurOnlineFormBean;
	private KRISHAKFormBean krishakFormBean;
	private ShepaOnlineFormBean shepaOnlineFormBean;
	private WeidnerOnlineFormBean weidnerOnlineFormBean;
	private FinolexOnlineFormBean finolexOnlineFormBean;

	private HNBGUFormBean HNBGUFormBean;
	private ICBROnlineFormBean icbrOnlineFormBean;
	private MahadeviYadavOnlineFormBean mahadeviYadavOnlineFormBean;
	private ABHAYFormBean abhayFormBean;
	private RAJFormBean rajFormBean;
	private OERCOnlineFormBean oercOnlineFormBean;
	private OERCPOnlineFormBean oercpOnlineFormBean;
	private MicronOnlineFormBean micronOnlineFormBean;
	private SheetlaOnlineFormBean sheetlaOnlineFormBean;
	private GaharwarOnlineFormBean gaharwarOnlineFormBean;
	private LuciOnlineFormBean luciOnlineFormBean;
	private ChaudharyCollegeOnlineBean chaudharyCollegeOnlineBean;
	private GSFCOnlineFormBean gsfcOnlineFormBean;
	private ChaudharyADMISSIONOnlineBean chaudharyADMISSIONOnlineBean;
	private StandfordOnlineFormBean standfordOnlineFormBean;
	private String InstCode;
	private NLUOnlineFormBean nluOnlineFormBean;
	private DPSCOnlineFormBean dpscOnlineFormBean;
	private AmericanOnlineFormBean americanOnlineFormBean;
	private PathFinderOnlineFormBean pathFinderOnlineFormBean;
	private FeesForm feesForm;
	private CUOHaryanaOnlineFormBean cuoHaryanaOnlineFormBean;
	private ChaudharyMiscellanousOnlineBean chaudharyMiscellanousOnlineBean;
	private RoyalDentalOnlineFormBean royalDentalOnlineFormBean;

	private VishalInstOnlineFormBean vishalInstOnlineFormBean;
	private LancersOnlineFormBean lancersOnlineFormBean;
	private DpsBudgamOnlineFormBean DpsBudgamOnlineFormBean;
	private KrishnaLawOnlineFormBean KrishnaLawOnlineFormBean;
	private BiyaniOnlineFormBean biyaniOnlineFormBean;
	private KulluOnlineFormBean kulluOnlineFormBean;
	private JBCIOnlineFormBean jbciOnlineFormBean;
	private NaiminathOnlineFormBean naiminathOnlineFormBean;
	private SPHSchoolOnlineFormBean sphSchoolOnlineFormBean;
	private SSJainSubodhOnlineFormBean jainSubodhOnlineFormBean;
	private TeamworkEducationOnlineFormBean teamworkEducationOnlineFormBean;
	private GOENKAOnlineFormBean goenkaOnlineFormBean;
	private GRCosmicOnlineFormBean grCosmicOnlineFormBean;
	private VenkatEduOnlineFormBean venkatEduOnlineFormBean;
	private MahaEduOnlineFormBean mahaEduOnlineFormBean;
	private SmartrepEductionOnlineFormBean smartrepEductionOnlineFormBean;
	private AsianOnlineFormBean asianOnlineFormBean;
	private RajsthanOnlineFormBean rajsthanOnlineFormBean;
	private SuccessEaseFormBean successEaseFormBeanFormBean;
	private KashiInstituteFormBean kashiInstituteFormBean;
	private IICSEductionOnlineFormBean iicsEductionOnlineFormBean;
	private JawaharOnlineFormBean jawaharOnlineFormBean;
	private HorizonOnlineFormBean horizonOnlineFormBean;
	private BrainStormFormBean brainStormFormBean;
	private DelhiSchoolOnlineFormBean delhiSchoolOnlineFormBean;
	private SISFormBean sisFormBean;
	private IceonlineFormBean iceFormBean;
	private IEIIndiaOnlineFormBean ieiIndiaFormBean;
	private BhartiConceptFormBean bhartiConceptFormBean;
	// private RoorkeeOnlineFornBean roorkeeOnlineFornBean;
	private TrinityOnlineFormBean trinityOnlineFormBean;
	private NavJagritiOnlineFormBean navJagritiBean;
	private DpsPanipatOnlineFormBean dpsPanipatOnlineFormBean;
	private DAVSchoolOnlineFormBean davschoolOnlineFormBean;
	private NoidaApsOnlineFormBean noidaApsOnlineFormBean;
	private SriAurobindoSchoolOnlineFormBean sriAurobindoSchoolOnlineFormBean;
	private DpsBudgamRegistrationOnlineFormBean dpsBudgamRegistrationOnlineFormBean;
	private InderPrasthaOnlineFormBean inderPrasthaOnlineFormBean;

	private InderPrasthaNewOnlineFormBean inderPrasthaNewOnlineFormBean;
	private InderPrasthaExistOnlineFormBean inderPrasthaExistOnlineFormBean;

	public InderPrasthaExistOnlineFormBean getInderPrasthaExistOnlineFormBean() {
		return inderPrasthaExistOnlineFormBean;
	}

	public void setInderPrasthaExistOnlineFormBean(InderPrasthaExistOnlineFormBean inderPrasthaExistOnlineFormBean) {
		this.inderPrasthaExistOnlineFormBean = inderPrasthaExistOnlineFormBean;
	}

	public InderPrasthaNewOnlineFormBean getInderPrasthaNewOnlineFormBean() {
		return inderPrasthaNewOnlineFormBean;
	}

	public void setInderPrasthaNewOnlineFormBean(InderPrasthaNewOnlineFormBean inderPrasthaNewOnlineFormBean) {
		this.inderPrasthaNewOnlineFormBean = inderPrasthaNewOnlineFormBean;
	}

	public InderPrasthaOnlineFormBean getInderPrasthaOnlineFormBean() {
		return inderPrasthaOnlineFormBean;
	}

	public void setInderPrasthaOnlineFormBean(InderPrasthaOnlineFormBean inderPrasthaOnlineFormBean) {
		this.inderPrasthaOnlineFormBean = inderPrasthaOnlineFormBean;
	}

	public DpsBudgamRegistrationOnlineFormBean getDpsBudgamRegistrationOnlineFormBean() {
		return dpsBudgamRegistrationOnlineFormBean;
	}

	public void setDpsBudgamRegistrationOnlineFormBean(
			DpsBudgamRegistrationOnlineFormBean dpsBudgamRegistrationOnlineFormBean) {
		this.dpsBudgamRegistrationOnlineFormBean = dpsBudgamRegistrationOnlineFormBean;
	}

	public SriAurobindoSchoolOnlineFormBean getSriAurobindoSchoolOnlineFormBean() {
		return sriAurobindoSchoolOnlineFormBean;
	}

	public void setSriAurobindoSchoolOnlineFormBean(SriAurobindoSchoolOnlineFormBean sriAurobindoSchoolOnlineFormBean) {
		this.sriAurobindoSchoolOnlineFormBean = sriAurobindoSchoolOnlineFormBean;
	}

	public NoidaApsOnlineFormBean getNoidaApsOnlineFormBean() {
		return noidaApsOnlineFormBean;
	}

	public void setNoidaApsOnlineFormBean(NoidaApsOnlineFormBean noidaApsOnlineFormBean) {
		this.noidaApsOnlineFormBean = noidaApsOnlineFormBean;
	}

	public DpsPanipatOnlineFormBean getDpsPanipatOnlineFormBean() {
		return dpsPanipatOnlineFormBean;
	}

	public void setDpsPanipatOnlineFormBean(DpsPanipatOnlineFormBean dpsPanipatOnlineFormBean) {
		this.dpsPanipatOnlineFormBean = dpsPanipatOnlineFormBean;
	}

	public SISFormBean getSisFormBean() {
		return sisFormBean;
	}

	public void setSisFormBean(SISFormBean sisFormBean) {
		this.sisFormBean = sisFormBean;
	}

	public DelhiSchoolOnlineFormBean getDelhiSchoolOnlineFormBean() {
		return delhiSchoolOnlineFormBean;
	}

	public void setDelhiSchoolOnlineFormBean(DelhiSchoolOnlineFormBean delhiSchoolOnlineFormBean) {
		this.delhiSchoolOnlineFormBean = delhiSchoolOnlineFormBean;
	}

	public BrainStormFormBean getBrainStormFormBean() {
		return brainStormFormBean;
	}

	public void setBrainStormFormBean(BrainStormFormBean brainStormFormBean) {
		this.brainStormFormBean = brainStormFormBean;
	}

	public HorizonOnlineFormBean getHorizonOnlineFormBean() {
		return horizonOnlineFormBean;
	}

	public void setHorizonOnlineFormBean(HorizonOnlineFormBean horizonOnlineFormBean) {
		this.horizonOnlineFormBean = horizonOnlineFormBean;
	}

	public JawaharOnlineFormBean getJawaharOnlineFormBean() {
		return jawaharOnlineFormBean;
	}

	public void setJawaharOnlineFormBean(JawaharOnlineFormBean jawaharOnlineFormBean) {
		this.jawaharOnlineFormBean = jawaharOnlineFormBean;
	}

	public IICSEductionOnlineFormBean getIicsEductionOnlineFormBean() {
		return iicsEductionOnlineFormBean;
	}

	public void setIicsEductionOnlineFormBean(IICSEductionOnlineFormBean iicsEductionOnlineFormBean) {
		this.iicsEductionOnlineFormBean = iicsEductionOnlineFormBean;
	}

	public KashiInstituteFormBean getKashiInstituteFormBean() {
		return kashiInstituteFormBean;
	}

	public void setKashiInstituteFormBean(KashiInstituteFormBean kashiInstituteFormBean) {
		this.kashiInstituteFormBean = kashiInstituteFormBean;
	}

	public RajsthanOnlineFormBean getRajsthanOnlineFormBean() {
		return rajsthanOnlineFormBean;
	}

	public void setRajsthanOnlineFormBean(RajsthanOnlineFormBean rajsthanOnlineFormBean) {
		this.rajsthanOnlineFormBean = rajsthanOnlineFormBean;
	}

	public SuccessEaseFormBean getSuccessEaseFormBeanFormBean() {
		return successEaseFormBeanFormBean;
	}

	public void setSuccessEaseFormBeanFormBean(SuccessEaseFormBean successEaseFormBeanFormBean) {
		this.successEaseFormBeanFormBean = successEaseFormBeanFormBean;
	}

	public AsianOnlineFormBean getAsianOnlineFormBean() {
		return asianOnlineFormBean;
	}

	public void setAsianOnlineFormBean(AsianOnlineFormBean asianOnlineFormBean) {
		this.asianOnlineFormBean = asianOnlineFormBean;
	}

	public SmartrepEductionOnlineFormBean getSmartrepEductionOnlineFormBean() {
		return smartrepEductionOnlineFormBean;
	}

	public void setSmartrepEductionOnlineFormBean(SmartrepEductionOnlineFormBean smartrepEductionOnlineFormBean) {
		this.smartrepEductionOnlineFormBean = smartrepEductionOnlineFormBean;
	}

	public MahaEduOnlineFormBean getMahaEduOnlineFormBean() {
		return mahaEduOnlineFormBean;
	}

	public void setMahaEduOnlineFormBean(MahaEduOnlineFormBean mahaEduOnlineFormBean) {
		this.mahaEduOnlineFormBean = mahaEduOnlineFormBean;
	}

	public VenkatEduOnlineFormBean getVenkatEduOnlineFormBean() {
		return venkatEduOnlineFormBean;
	}

	public void setVenkatEduOnlineFormBean(VenkatEduOnlineFormBean venkatEduOnlineFormBean) {
		this.venkatEduOnlineFormBean = venkatEduOnlineFormBean;
	}

	public GRCosmicOnlineFormBean getGrCosmicOnlineFormBean() {
		return grCosmicOnlineFormBean;
	}

	public void setGrCosmicOnlineFormBean(GRCosmicOnlineFormBean grCosmicOnlineFormBean) {
		this.grCosmicOnlineFormBean = grCosmicOnlineFormBean;
	}

	public GOENKAOnlineFormBean getGoenkaOnlineFormBean() {
		return goenkaOnlineFormBean;
	}

	public void setGoenkaOnlineFormBean(GOENKAOnlineFormBean goenkaOnlineFormBean) {
		this.goenkaOnlineFormBean = goenkaOnlineFormBean;
	}

	public TeamworkEducationOnlineFormBean getTeamworkEducationOnlineFormBean() {
		return teamworkEducationOnlineFormBean;
	}

	public void setTeamworkEducationOnlineFormBean(TeamworkEducationOnlineFormBean teamworkEducationOnlineFormBean) {
		this.teamworkEducationOnlineFormBean = teamworkEducationOnlineFormBean;
	}

	public SSJainSubodhOnlineFormBean getJainSubodhOnlineFormBean() {
		return jainSubodhOnlineFormBean;
	}

	public void setJainSubodhOnlineFormBean(SSJainSubodhOnlineFormBean jainSubodhOnlineFormBean) {
		this.jainSubodhOnlineFormBean = jainSubodhOnlineFormBean;
	}

	public SPHSchoolOnlineFormBean getSphSchoolOnlineFormBean() {
		return sphSchoolOnlineFormBean;
	}

	public void setSphSchoolOnlineFormBean(SPHSchoolOnlineFormBean sphSchoolOnlineFormBean) {
		this.sphSchoolOnlineFormBean = sphSchoolOnlineFormBean;
	}

	public NaiminathOnlineFormBean getNaiminathOnlineFormBean() {
		return naiminathOnlineFormBean;
	}

	public void setNaiminathOnlineFormBean(NaiminathOnlineFormBean naiminathOnlineFormBean) {
		this.naiminathOnlineFormBean = naiminathOnlineFormBean;
	}

	public JBCIOnlineFormBean getJbciOnlineFormBean() {
		return jbciOnlineFormBean;
	}

	public void setJbciOnlineFormBean(JBCIOnlineFormBean jbciOnlineFormBean) {
		this.jbciOnlineFormBean = jbciOnlineFormBean;
	}

	public KulluOnlineFormBean getKulluOnlineFormBean() {
		return kulluOnlineFormBean;
	}

	public void setKulluOnlineFormBean(KulluOnlineFormBean kulluOnlineFormBean) {
		this.kulluOnlineFormBean = kulluOnlineFormBean;
	}

	public BiyaniOnlineFormBean getBiyaniOnlineFormBean() {
		return biyaniOnlineFormBean;
	}

	public void setBiyaniOnlineFormBean(BiyaniOnlineFormBean biyaniOnlineFormBean) {
		this.biyaniOnlineFormBean = biyaniOnlineFormBean;
	}

	public KrishnaLawOnlineFormBean getKrishnaLawOnlineFormBean() {
		return KrishnaLawOnlineFormBean;
	}

	public void setKrishnaLawOnlineFormBean(KrishnaLawOnlineFormBean krishnaLawOnlineFormBean) {
		KrishnaLawOnlineFormBean = krishnaLawOnlineFormBean;
	}

	public DpsBudgamOnlineFormBean getDpsBudgamOnlineFormBean() {
		return DpsBudgamOnlineFormBean;
	}

	public void setDpsBudgamOnlineFormBean(DpsBudgamOnlineFormBean dpsBudgamOnlineFormBean) {
		DpsBudgamOnlineFormBean = dpsBudgamOnlineFormBean;
	}

	public LancersOnlineFormBean getLancersOnlineFormBean() {
		return lancersOnlineFormBean;
	}

	public void setLancersOnlineFormBean(LancersOnlineFormBean lancersOnlineFormBean) {
		this.lancersOnlineFormBean = lancersOnlineFormBean;
	}

	public VishalInstOnlineFormBean getVishalInstOnlineFormBean() {
		return vishalInstOnlineFormBean;
	}

	public void setVishalInstOnlineFormBean(VishalInstOnlineFormBean vishalInstOnlineFormBean) {
		this.vishalInstOnlineFormBean = vishalInstOnlineFormBean;
	}

	public RoyalDentalOnlineFormBean getRoyalDentalOnlineFormBean() {
		return royalDentalOnlineFormBean;
	}

	public void setRoyalDentalOnlineFormBean(RoyalDentalOnlineFormBean royalDentalOnlineFormBean) {
		this.royalDentalOnlineFormBean = royalDentalOnlineFormBean;
	}

	public ChaudharyMiscellanousOnlineBean getChaudharyMiscellanousOnlineBean() {
		return chaudharyMiscellanousOnlineBean;
	}

	public void setChaudharyMiscellanousOnlineBean(ChaudharyMiscellanousOnlineBean chaudharyMiscellanousOnlineBean) {
		this.chaudharyMiscellanousOnlineBean = chaudharyMiscellanousOnlineBean;
	}

	public CUOHaryanaOnlineFormBean getCuoHaryanaOnlineFormBean() {
		return cuoHaryanaOnlineFormBean;
	}

	public void setCuoHaryanaOnlineFormBean(CUOHaryanaOnlineFormBean cuoHaryanaOnlineFormBean) {
		this.cuoHaryanaOnlineFormBean = cuoHaryanaOnlineFormBean;
	}

	public FeesForm getFeesForm() {
		return feesForm;
	}

	public void setFeesForm(FeesForm feesForm) {
		this.feesForm = feesForm;
	}

	public PathFinderOnlineFormBean getPathFinderOnlineFormBean() {
		return pathFinderOnlineFormBean;
	}

	public void setPathFinderOnlineFormBean(PathFinderOnlineFormBean pathFinderOnlineFormBean) {
		this.pathFinderOnlineFormBean = pathFinderOnlineFormBean;
	}

	public AmericanOnlineFormBean getAmericanOnlineFormBean() {
		return americanOnlineFormBean;
	}

	public void setAmericanOnlineFormBean(AmericanOnlineFormBean americanOnlineFormBean) {
		this.americanOnlineFormBean = americanOnlineFormBean;
	}

	public DPSCOnlineFormBean getDpscOnlineFormBean() {
		return dpscOnlineFormBean;
	}

	public void setDpscOnlineFormBean(DPSCOnlineFormBean dpscOnlineFormBean) {
		this.dpscOnlineFormBean = dpscOnlineFormBean;
	}

	public NLUOnlineFormBean getNluOnlineFormBean() {
		return nluOnlineFormBean;
	}

	public void setNluOnlineFormBean(NLUOnlineFormBean nluOnlineFormBean) {
		this.nluOnlineFormBean = nluOnlineFormBean;
	}

	public String getInstCode() {
		return InstCode;
	}

	public void setInstCode(String instCode) {
		InstCode = instCode;
	}

	public ChaudharyADMISSIONOnlineBean getChaudharyADMISSIONOnlineBean() {
		return chaudharyADMISSIONOnlineBean;

	}

	public void setChaudharyADMISSIONOnlineBean(ChaudharyADMISSIONOnlineBean chaudharyADMISSIONOnlineBean) {
		this.chaudharyADMISSIONOnlineBean = chaudharyADMISSIONOnlineBean;
	}

	public GSFCOnlineFormBean getGsfcOnlineFormBean() {
		return gsfcOnlineFormBean;
	}

	public void setGsfcOnlineFormBean(GSFCOnlineFormBean gsfcOnlineFormBean) {
		this.gsfcOnlineFormBean = gsfcOnlineFormBean;
	}

	public ChaudharyCollegeOnlineBean getChaudharyCollegeOnlineBean() {
		return chaudharyCollegeOnlineBean;
	}

	public void setChaudharyCollegeOnlineBean(ChaudharyCollegeOnlineBean chaudharyCollegeOnlineBean) {
		this.chaudharyCollegeOnlineBean = chaudharyCollegeOnlineBean;
	}

	public LuciOnlineFormBean getLuciOnlineFormBean() {
		return luciOnlineFormBean;
	}

	public void setLuciOnlineFormBean(LuciOnlineFormBean luciOnlineFormBean) {
		this.luciOnlineFormBean = luciOnlineFormBean;
	}

	public GaharwarOnlineFormBean getGaharwarOnlineFormBean() {
		return gaharwarOnlineFormBean;
	}

	public void setGaharwarOnlineFormBean(GaharwarOnlineFormBean gaharwarOnlineFormBean) {
		this.gaharwarOnlineFormBean = gaharwarOnlineFormBean;
	}

	public SheetlaOnlineFormBean getSheetlaOnlineFormBean() {
		return sheetlaOnlineFormBean;
	}

	public void setSheetlaOnlineFormBean(SheetlaOnlineFormBean sheetlaOnlineFormBean) {
		this.sheetlaOnlineFormBean = sheetlaOnlineFormBean;
	}

	public StandfordOnlineFormBean getStandfordOnlineFormBean() {
		return standfordOnlineFormBean;
	}

	public void setStandfordOnlineFormBean(StandfordOnlineFormBean standfordOnlineFormBean) {
		this.standfordOnlineFormBean = standfordOnlineFormBean;
	}

	public MicronOnlineFormBean getMicronOnlineFormBean() {
		return micronOnlineFormBean;
	}

	public void setMicronOnlineFormBean(MicronOnlineFormBean micronOnlineFormBean) {
		this.micronOnlineFormBean = micronOnlineFormBean;
	}

	public OERCPOnlineFormBean getOercpOnlineFormBean() {
		return oercpOnlineFormBean;
	}

	public void setOercpOnlineFormBean(OERCPOnlineFormBean oercpOnlineFormBean) {
		this.oercpOnlineFormBean = oercpOnlineFormBean;
	}

	public OERCOnlineFormBean getOercOnlineFormBean() {
		return oercOnlineFormBean;
	}

	public void setOercOnlineFormBean(OERCOnlineFormBean oercOnlineFormBean) {
		this.oercOnlineFormBean = oercOnlineFormBean;
	}

	public RAJFormBean getRajFormBean() {
		return rajFormBean;
	}

	public void setRajFormBean(RAJFormBean rajFormBean) {
		this.rajFormBean = rajFormBean;
	}

	public ABHAYFormBean getAbhayFormBean() {
		return abhayFormBean;
	}

	public void setAbhayFormBean(ABHAYFormBean abhayFormBean) {
		this.abhayFormBean = abhayFormBean;
	}

	public MahadeviYadavOnlineFormBean getMahadeviYadavOnlineFormBean() {
		return mahadeviYadavOnlineFormBean;
	}

	public void setMahadeviYadavOnlineFormBean(MahadeviYadavOnlineFormBean mahadeviYadavOnlineFormBean) {
		this.mahadeviYadavOnlineFormBean = mahadeviYadavOnlineFormBean;
	}

	public ICBROnlineFormBean getIcbrOnlineFormBean() {
		return icbrOnlineFormBean;
	}

	public void setIcbrOnlineFormBean(ICBROnlineFormBean icbrOnlineFormBean) {
		this.icbrOnlineFormBean = icbrOnlineFormBean;
	}

	public FinolexOnlineFormBean getFinolexOnlineFormBean() {
		return finolexOnlineFormBean;
	}

	public void setFinolexOnlineFormBean(FinolexOnlineFormBean finolexOnlineFormBean) {
		this.finolexOnlineFormBean = finolexOnlineFormBean;
	}

	public WeidnerOnlineFormBean getWeidnerOnlineFormBean() {
		return weidnerOnlineFormBean;
	}

	public void setWeidnerOnlineFormBean(WeidnerOnlineFormBean weidnerOnlineFormBean) {
		this.weidnerOnlineFormBean = weidnerOnlineFormBean;
	}

	public KRISHAKFormBean getKrishakFormBean() {
		return krishakFormBean;
	}

	public void setKrishakFormBean(KRISHAKFormBean krishakFormBean) {
		this.krishakFormBean = krishakFormBean;
	}

	public ShepaOnlineFormBean getShepaOnlineFormBean() {
		return shepaOnlineFormBean;
	}

	public void setShepaOnlineFormBean(ShepaOnlineFormBean shepaOnlineFormBean) {
		this.shepaOnlineFormBean = shepaOnlineFormBean;
	}

	public AmbikapurOnlineFormBean getAmbikaPurOnlineFormBean() {
		return ambikaPurOnlineFormBean;
	}

	public void setAmbikaPurOnlineFormBean(AmbikapurOnlineFormBean ambikaPurOnlineFormBean) {
		this.ambikaPurOnlineFormBean = ambikaPurOnlineFormBean;
	}

	public SWARAFormBean getSwaraFormBean() {
		return swaraFormBean;
	}

	public void setSwaraFormBean(SWARAFormBean swaraFormBean) {
		this.swaraFormBean = swaraFormBean;
	}

	public HydroPowerOnlineFormBean getHydroPowerOnlineFormBean() {
		return hydroPowerOnlineFormBean;
	}

	public void setHydroPowerOnlineFormBean(HydroPowerOnlineFormBean hydroPowerOnlineFormBean) {
		this.hydroPowerOnlineFormBean = hydroPowerOnlineFormBean;
	}

	public SHIVFormBean getShivFormBean() {
		return shivFormBean;
	}

	public void setShivFormBean(SHIVFormBean shivFormBean) {
		this.shivFormBean = shivFormBean;
	}

	public TOLANIFormBean getTolaniFormBean() {
		return tolaniFormBean;
	}

	public void setTolaniFormBean(TOLANIFormBean tolaniFormBean) {
		this.tolaniFormBean = tolaniFormBean;
	}

	public GPSOnlineFormBean getGpsOnlineFormBean() {
		return gpsOnlineFormBean;
	}

	public void setGpsOnlineFormBean(GPSOnlineFormBean gpsOnlineFormBean) {
		this.gpsOnlineFormBean = gpsOnlineFormBean;
	}

	public RungtaCollegeFormBean getRungtaCollegeFormBean() {
		return rungtaCollegeFormBean;
	}

	public void setRungtaCollegeFormBean(RungtaCollegeFormBean rungtaCollegeFormBean) {
		this.rungtaCollegeFormBean = rungtaCollegeFormBean;
	}

	public DTEFormBean getDteFormBean() {
		return dteFormBean;
	}

	public void setDteFormBean(DTEFormBean dteFormBean) {
		this.dteFormBean = dteFormBean;
	}

	public LanOnlineFormBean getLanOnlineFormBean() {
		return lanOnlineFormBean;
	}

	public void setLanOnlineFormBean(LanOnlineFormBean lanOnlineFormBean) {
		this.lanOnlineFormBean = lanOnlineFormBean;
	}

	public NATLOnlineFormBean getNatlOnlineFormBean() {
		return natlOnlineFormBean;
	}

	public void setNatlOnlineFormBean(NATLOnlineFormBean natlOnlineFormBean) {
		this.natlOnlineFormBean = natlOnlineFormBean;
	}

	public OrigenceOnlineFormBean getOrigenceOnlineFormBean() {
		return origenceOnlineFormBean;
	}

	public void setOrigenceOnlineFormBean(OrigenceOnlineFormBean origenceOnlineFormBean) {
		this.origenceOnlineFormBean = origenceOnlineFormBean;
	}

	public INTLOnlineFormBean getIntlOnlineFormBean() {
		return intlOnlineFormBean;
	}

	public void setIntlOnlineFormBean(INTLOnlineFormBean intlOnlineFormBean) {
		this.intlOnlineFormBean = intlOnlineFormBean;
	}

	public PrincipalAIAFormBean getPrincipalOnlineFormBean() {
		return principalOnlineFormBean;
	}

	public void setPrincipalOnlineFormBean(PrincipalAIAFormBean principalOnlineFormBean) {
		this.principalOnlineFormBean = principalOnlineFormBean;
	}

	public JayotiFormBean getJayotiFormBean() {
		return jayotiFormBean;
	}

	public void setJayotiFormBean(JayotiFormBean jayotiFormBean) {
		this.jayotiFormBean = jayotiFormBean;
	}

	public PPAFormBean getPpaFormBean() {
		return ppaFormBean;
	}

	public void setPpaFormBean(PPAFormBean ppaFormBean) {
		this.ppaFormBean = ppaFormBean;
	}

	private PPAFormBean ppaFormBean;

	public IIBMSFormBean getIibmsFormBean() {
		return iibmsFormBean;
	}

	public void setIibmsFormBean(IIBMSFormBean iibmsFormBean) {
		this.iibmsFormBean = iibmsFormBean;
	}

	public BKLIOnlineFormBean getBkliOnlineFormBean() {
		return bkliOnlineFormBean;
	}

	public void setBkliOnlineFormBean(BKLIOnlineFormBean bkliOnlineFormBean) {
		this.bkliOnlineFormBean = bkliOnlineFormBean;
	}

	public BSPROnlineFormBean getBsprOnlineFormBean() {
		return bsprOnlineFormBean;
	}

	public void setBsprOnlineFormBean(BSPROnlineFormBean bsprOnlineFormBean) {
		this.bsprOnlineFormBean = bsprOnlineFormBean;
	}

	public SharpmindsOnlineFormBean getSharpmindsOnlineFormBean() {
		return sharpmindsOnlineFormBean;
	}

	public void setSharpmindsOnlineFormBean(SharpmindsOnlineFormBean sharpmindsOnlineFormBean) {
		this.sharpmindsOnlineFormBean = sharpmindsOnlineFormBean;

	}

	public MATSFeesForm getMatsFeesForm() {
		return matsFeesForm;
	}

	public void setMatsFeesForm(MATSFeesForm matsFeesForm) {
		this.matsFeesForm = matsFeesForm;
	}

	public ChristineOnlineFormBean getChristineOnlineFormBean() {
		return christineOnlineFormBean;
	}

	public void setChristineOnlineFormBean(ChristineOnlineFormBean christineOnlineFormBean) {
		this.christineOnlineFormBean = christineOnlineFormBean;
	}

	public RungtanlineFormBean getRungtanlineFormBean() {
		return rungtanlineFormBean;
	}

	public void setRungtanlineFormBean(RungtanlineFormBean rungtanlineFormBean) {
		this.rungtanlineFormBean = rungtanlineFormBean;
	}

	public KaushalyaFormBean getKaushalyaFormBean() {
		return kaushalyaFormBean;
	}

	public void setKaushalyaFormBean(KaushalyaFormBean kaushalyaFormBean) {
		this.kaushalyaFormBean = kaushalyaFormBean;
	}

	public RPTMOnlineFormBean getRptmOnlineFormBean() {
		return rptmOnlineFormBean;
	}

	public void setRptmOnlineFormBean(RPTMOnlineFormBean rptmOnlineFormBean) {
		this.rptmOnlineFormBean = rptmOnlineFormBean;
	}

	public DOTUOnlineFormBean getDotuOnlineFormBean() {
		return dotuOnlineFormBean;
	}

	public void setDotuOnlineFormBean(DOTUOnlineFormBean dotuOnlineFormBean) {
		this.dotuOnlineFormBean = dotuOnlineFormBean;
	}

	public NISMOnlineFormBean getNismOnlineFormBean() {
		return nismOnlineFormBean;
	}

	public void setNismOnlineFormBean(NISMOnlineFormBean nismOnlineFormBean) {
		this.nismOnlineFormBean = nismOnlineFormBean;
	}

	public MGCOnlineFormBean getMgcOnlineFormBean() {
		return mgcOnlineFormBean;
	}

	public void setMgcOnlineFormBean(MGCOnlineFormBean mgcOnlineFormBean) {
		this.mgcOnlineFormBean = mgcOnlineFormBean;
	}

	public JRSTOnlineFormBean getJrstOnlineFormBean() {
		return jrstOnlineFormBean;
	}

	public void setJrstOnlineFormBean(JRSTOnlineFormBean jrstOnlineFormBean) {
		this.jrstOnlineFormBean = jrstOnlineFormBean;
	}

	public DOONOnlineFormBean getDoonOnlineFormBean() {
		return doonOnlineFormBean;
	}

	public void setDoonOnlineFormBean(DOONOnlineFormBean doonOnlineFormBean) {
		this.doonOnlineFormBean = doonOnlineFormBean;
	}

	public UGIOnlineFormBean getUgiOnlineFormBean() {
		return ugiOnlineFormBean;
	}

	public void setUgiOnlineFormBean(UGIOnlineFormBean ugiOnlineFormBean) {
		this.ugiOnlineFormBean = ugiOnlineFormBean;
	}

	public BSEFormBean getBseFormBean() {
		return bseFormBean;
	}

	public CandEntryForm getCandEntryForm() {
		return candEntryForm;
	}

	public void setCandEntryForm(CandEntryForm candEntryForm) {
		this.candEntryForm = candEntryForm;
	}

	public void setBseFormBean(BSEFormBean bseFormBean) {
		this.bseFormBean = bseFormBean;
	}

	public MGRMedicalOnlineFormBean getMgrMedicalOnlineFormBean() {
		return mgrMedicalOnlineFormBean;
	}

	public void setMgrMedicalOnlineFormBean(MGRMedicalOnlineFormBean mgrMedicalOnlineFormBean) {
		this.mgrMedicalOnlineFormBean = mgrMedicalOnlineFormBean;
	}

	public NIPROnlineFormBean getNiprOnlineFormBean() {
		return niprOnlineFormBean;
	}

	public void setNiprOnlineFormBean(NIPROnlineFormBean niprOnlineFormBean) {
		this.niprOnlineFormBean = niprOnlineFormBean;
	}

	public WelhamSchoolFormBean getWelhamSchoolFormBean() {
		return welhamSchoolFormBean;
	}

	public void setWelhamSchoolFormBean(WelhamSchoolFormBean welhamSchoolFormBean) {
		this.welhamSchoolFormBean = welhamSchoolFormBean;
	}

	public InputStream getFileInputStream() {
		return fileInputStream;
	}

	public void setFileInputStream(InputStream fileInputStream) {
		this.fileInputStream = fileInputStream;
	}

	public StringBuffer getBuffer() {
		return buffer;
	}

	public void setBuffer(StringBuffer buffer) {
		this.buffer = buffer;
	}

	public Map<String, String> getStateMapList() {
		return stateMapList;
	}

	public void setStateMapList(Map<String, String> stateMapList) {
		this.stateMapList = stateMapList;
	}

	public BengalCollegeOnlineFormBean getBengalCollegeOnlineFormBean() {
		return bengalCollegeOnlineFormBean;
	}

	public void setBengalCollegeOnlineFormBean(BengalCollegeOnlineFormBean bengalCollegeOnlineFormBean) {
		this.bengalCollegeOnlineFormBean = bengalCollegeOnlineFormBean;
	}

	public HaryanaFormBean getHaryanaFormBean() {
		return haryanaFormBean;
	}

	public void setHaryanaFormBean(HaryanaFormBean haryanaFormBean) {
		this.haryanaFormBean = haryanaFormBean;
	}

	public CampionSchoolFormBean getCampionSchoolFormBean() {
		return campionSchoolFormBean;
	}

	public void setCampionSchoolFormBean(CampionSchoolFormBean campionSchoolFormBean) {
		this.campionSchoolFormBean = campionSchoolFormBean;
	}

	public NITOnlineFormBean getNitOnlineFormBean() {
		return nitOnlineFormBean;
	}

	public void setNitOnlineFormBean(NITOnlineFormBean nitOnlineFormBean) {
		this.nitOnlineFormBean = nitOnlineFormBean;
	}

	public GpullaReadyFormBean getGpullaReadyFormBean() {
		return gpullaReadyFormBean;
	}

	public YMCAOnlineFormBean getYmcaOnlineFormBean() {
		return ymcaOnlineFormBean;
	}

	public void setYmcaOnlineFormBean(YMCAOnlineFormBean ymcaOnlineFormBean) {
		this.ymcaOnlineFormBean = ymcaOnlineFormBean;
	}

	public void setGpullaReadyFormBean(GpullaReadyFormBean gpullaReadyFormBean) {
		this.gpullaReadyFormBean = gpullaReadyFormBean;
	}

	public WBUTUniversityFormBean getWbutUniversityFormBean() {
		return wbutUniversityFormBean;
	}

	public void setWbutUniversityFormBean(WBUTUniversityFormBean wbutUniversityFormBean) {
		this.wbutUniversityFormBean = wbutUniversityFormBean;
	}

	public IMSUniversityFormBean getImsUniversityFormBean() {
		return imsUniversityFormBean;
	}

	public void setImsUniversityFormBean(IMSUniversityFormBean imsUniversityFormBean) {
		this.imsUniversityFormBean = imsUniversityFormBean;
	}

	public IITBActionFormBean getIitbData() {
		return iitbData;
	}

	public void setIitbData(IITBActionFormBean iitbData) {
		this.iitbData = iitbData;
	}

	public RamaCollageFormBean getRamaData() {
		return ramaData;
	}

	public void setRamaData(RamaCollageFormBean ramaData) {
		this.ramaData = ramaData;
	}

	public UnisonFormBean getUnisonFormBean() {
		return unisonFormBean;
	}

	public void setUnisonFormBean(UnisonFormBean unisonFormBean) {
		this.unisonFormBean = unisonFormBean;
	}

	public EtoosOnlineFormBean getEtoosOnlineFormBean() {
		return etoosOnlineFormBean;
	}

	public void setEtoosOnlineFormBean(EtoosOnlineFormBean etoosOnlineFormBean) {
		this.etoosOnlineFormBean = etoosOnlineFormBean;
	}

	private Map studentData;

	public Map getStudentData() {
		return studentData;
	}

	public void setStudentData(Map studentData) {
		this.studentData = studentData;
	}

	public GNLULoginActionFormBean getGnluData() {
		return gnluData;
	}

	public void setGnluData(GNLULoginActionFormBean gnluData) {
		this.gnluData = gnluData;
	}

	public DAVSchoolOnlineFormBean getDavschoolOnlineFormBean() {
		return davschoolOnlineFormBean;
	}

	public void setDavschoolOnlineFormBean(DAVSchoolOnlineFormBean davschoolOnlineFormBean) {
		this.davschoolOnlineFormBean = davschoolOnlineFormBean;
	}

	private InstituteConfigBean instituteConfigBean = new InstituteConfigBean();
	FeesPayChargesFormBean feesPayChargesFormBean = new FeesPayChargesFormBean();
	private List<String> feesPayList;
	private PaymentRequestBean appData1;
	private String strPaymentType;

	public String getStrPaymentType() {
		return strPaymentType;
	}

	public void setStrPaymentType(String strPaymentType) {
		this.strPaymentType = strPaymentType;
	}

	public PaymentRequestBean getAppData1() {
		return appData1;
	}

	public void setAppData1(PaymentRequestBean appData1) {
		this.appData1 = appData1;
	}

	public List<String> getFeesPayList() {
		return feesPayList;
	}

	public void setFeesPayList(List<String> feesPayList) {
		this.feesPayList = feesPayList;
	}

	public InstituteConfigBean getInstituteConfigBean() {
		return instituteConfigBean;
	}

	public void setInstituteConfigBean(InstituteConfigBean instituteConfigBean) {
		this.instituteConfigBean = instituteConfigBean;
	}

	public BhuLoginActionFormBean getBhuData() {
		return bhuData;
	}

	public void setBhuData(BhuLoginActionFormBean bhuData) {
		this.bhuData = bhuData;
	}

	public String getDelstudentId() {
		return delstudentId;
	}

	public void setDelstudentId(String delstudentId) {
		this.delstudentId = delstudentId;
	}

	public String getStudentName() {
		return studentName;
	}

	public void setStudentName(String studentName) {
		this.studentName = studentName;
	}

	public StudentRegistrationFormBean getStudentRegistrationFormBean() {
		return studentRegistrationFormBean;
	}

	public void setStudentRegistrationFormBean(StudentRegistrationFormBean studentRegistrationFormBean) {
		this.studentRegistrationFormBean = studentRegistrationFormBean;
	}

	/**
	 * @return the studentDataMap
	 */
	public Map<String, StudentRegistrationFormBean> getStudentDataMap() {
		return studentDataMap;
	}

	/**
	 * @param studentDataMap the studentDataMap to set
	 */
	public void setStudentDataMap(Map<String, StudentRegistrationFormBean> studentDataMap) {
		this.studentDataMap = studentDataMap;
	}

	public StudentRegistrationFormBean getAppData() {
		return appData;
	}

	public void setAppData(StudentRegistrationFormBean appData) {
		this.appData = appData;
	}

	public CourseDetailsBean getCourseData() {
		return courseData;
	}

	public String getStudentId() {
		return studentId;
	}

	public void setStudentId(String studentId) {
		this.studentId = studentId;
	}

	public void setCourseData(CourseDetailsBean courseData) {
		this.courseData = courseData;
	}

	public String getStudentRegistrationId() {
		return studentRegistrationId;
	}

	public void setStudentRegistrationId(String studentRegistrationId) {
		this.studentRegistrationId = studentRegistrationId;
	}

	public HNBGUFormBean getHNBGUFormBean() {
		return HNBGUFormBean;
	}

	public void setHNBGUFormBean(HNBGUFormBean HNBGUFormBean) {
		this.HNBGUFormBean = HNBGUFormBean;
	}

	public IceonlineFormBean getIceFormBean() {
		return iceFormBean;
	}

	public void setIceFormBean(IceonlineFormBean iceFormBean) {
		this.iceFormBean = iceFormBean;
	}

	public IEIIndiaOnlineFormBean getIeiIndiaFormBean() {
		return ieiIndiaFormBean;
	}

	public void setIeiIndiaFormBean(IEIIndiaOnlineFormBean ieiIndiaFormBean) {
		this.ieiIndiaFormBean = ieiIndiaFormBean;
	}

	public BhartiConceptFormBean getBhartiConceptFormBean() {
		return bhartiConceptFormBean;
	}

	public void setBhartiConceptFormBean(BhartiConceptFormBean bhartiConceptFormBean) {
		this.bhartiConceptFormBean = bhartiConceptFormBean;
	}

	public TrinityOnlineFormBean getTrinityOnlineFormBean() {
		return trinityOnlineFormBean;
	}

	public void setTrinityOnlineFormBean(TrinityOnlineFormBean trinityOnlineFormBean) {
		this.trinityOnlineFormBean = trinityOnlineFormBean;
	}
	/*
	 * public RoorkeeOnlineFornBean getRoorkeeOnlineFornBean() { return
	 * roorkeeOnlineFornBean; } public void
	 * setRoorkeeOnlineFornBean(RoorkeeOnlineFornBean roorkeeOnlineFornBean) {
	 * this.roorkeeOnlineFornBean = roorkeeOnlineFornBean; }
	 */

	public NavJagritiOnlineFormBean getNavJagritiBean() {
		return navJagritiBean;
	}

	public void setNavJagritiBean(NavJagritiOnlineFormBean navJagritiBean) {
		this.navJagritiBean = navJagritiBean;
	}

	/*
	 * FOR EDIT STUDENTS
	 */
	public String loadStudentDetails() {
		setStudentDataMap(fetchRegStudents());
		logger.info("getStudentDataMap():\t" + getStudentDataMap().size());
		return EDIT_STUDENT;
	}
//Not used.....

	public String editStudentDetails() {

		logger.info("~~~~~~~~~ " + this.getStudentId() + " ~~~~~~~~~~");
		logger.info("studentId():\t" + this.studentId);
		StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
		getAppData().setStrID(getStudentId());
		String responseString = studentRegistrationService.editStudentDetails(getAppData());
		if (responseString != null && !"".equalsIgnoreCase(responseString)) {
			addActionMessage(ErrorPropertyReader.getProperty("student.data.updated.successfully"));
		} else {
			addActionError(ErrorPropertyReader.getProperty("failed.to.update.student.data"));
			return SUCCESS;
		}
		setStudentDataMap(fetchRegStudents());
		logger.info("getStudentDataMap():\t" + getStudentDataMap().size());
		// to reset data
		setAppData(null);
		setStudentId("");
		return SUCCESS;
	}

	/*
	 * FOR EDIT STUDENTS
	 */
	public String load() {
		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		CourseDetailsService courseDetailsService = new CourseDetailsService();
		Map instituteBranchMap = courseDetailsService.getBillerBranchList(billerId);
		if (instituteBranchMap != null && !instituteBranchMap.isEmpty()) {
			// logger.info(instituteBranchMap);

			getCourseData().setMapInstituteBranchList(instituteBranchMap);
			if (instituteBranchMap.size() == 1) {
				logger.info("Institute Branch Size is 1 ...so taking default branch");
				getCourseData().setMapCourseList(courseDetailsService.getCourseList(billerId, "Q"));
			}
		} else {
			logger.info("branch MAP is empty");
		}
		getUserSessionMap().put("COURSEDATA", getCourseData());
		return REGISTER_STUDENT;
	}

	public String loadAddStudent() {

		InstituteMasterFormBean instituteMasterFormBean = (InstituteMasterFormBean) getUserSessionMap().get("INSTDATA");
		if (TPSLConstants.TRUE.equalsIgnoreCase("true")) {
			return super.ASSOCIATE_STUDENT;
		} else {
			logger.info("Am Inside Add new Student");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			CourseDetailsService courseDetailsService = new CourseDetailsService();
			Map instituteBranchMap = courseDetailsService.getBillerBranchList(billerId);
			if (instituteBranchMap != null && !instituteBranchMap.isEmpty()) {
				// logger.info(instituteBranchMap);

				getCourseData().setMapInstituteBranchList(instituteBranchMap);
				if (instituteBranchMap.size() == 1) {
					logger.info("Institute Branch Size is 1 ...so taking default branch");
					getCourseData().setMapCourseList(courseDetailsService.getCourseList(billerId, "Q"));
				}
			} else {
				logger.info("branch MAP is empty");
			}
			getUserSessionMap().put("COURSEDATA", getCourseData());
			return ADD_STUDENT;
		}

	}

	public String studentRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			getAppData().setStudentRegistrationId(registeredUserId);
			getAppData().setStudentAlias(getAppData().getStudentName());
			setCourseData((CourseDetailsBean) getUserSessionMap().get("COURSEDATA"));
			getUserSessionMap().put("APPDATA", getAppData());
			getAppData();
			logger.info("AppData:\t" + getCourseData().getMapCourseList());

			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			/* getAppData().setStrID("TEST"); */
			String responseString = studentRegistrationService.insertStudentDetails(getAppData());
			if (responseString != null && !"".equalsIgnoreCase(responseString)
					&& "success".equalsIgnoreCase(responseString)) {
				addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
			} else if ("NA".equalsIgnoreCase(responseString)) {
				addActionError(ErrorPropertyReader.getProperty("no.course.configured.select.another.combination"));
				return "failure";
			} else {
				addActionError(ErrorPropertyReader.getProperty("failed.to.add.student.data"));
				return "failure";
			}
			return SUCCESS;

		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}
	}

	public String loadViewStudentDetails1() {
		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		CourseDetailsService courseDetailsService = new CourseDetailsService();
		Map instituteBranchMap = courseDetailsService.getBillerBranchList(billerId);
		if (instituteBranchMap != null && !instituteBranchMap.isEmpty()) {
			// logger.info(instituteBranchMap);
			getCourseData().setMapInstituteBranchList(instituteBranchMap);
			if (instituteBranchMap.size() == 1) {
				logger.info("Institute Branch Size is 1 ...so taking default branch");
				getCourseData().setMapCourseList(courseDetailsService.getCourseList(billerId, "Q"));
			}
			getUserSessionMap().put("COURSEDATA", getCourseData());
			setStudentDataMap(fetchRegStudents());
			getUserSessionMap().put("_studentDataMap", getStudentDataMap());
			return SUCCESS;
		} else {
			logger.info("branch MAP is empty");
			addActionError("There is no configuration available");
		}
		return SUCCESS;
	}

	public String deleteStudentRegistration() throws Exception {
		logger.info("@@@@@@@@@Before Going to Delete###############");
		StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
		String key = studentRegistrationService.deleteStudentDetails(getStudentId());

		if (key != null && key.equalsIgnoreCase("Successfully Deleted")) {
			addActionMessage(ErrorPropertyReader.getProperty("student.data.deleted.successfully"));
		} else {
			addActionError(ErrorPropertyReader.getProperty("failed.to.delete.student.data"));
			// return "deletefail";
			return SUCCESS;
		}
		setStudentDataMap(fetchRegStudents());
		// return DELETE_STUDENT;
		return SUCCESS;
	}

	public String cancel() {
		InstituteMasterFormBean instituteMasterFormBean = (InstituteMasterFormBean) getUserSessionMap().get("INSTDATA");
		if (TPSLConstants.TRUE.equalsIgnoreCase("true")) {
			return super.ASSOCIATE_STUDENT;
		} else {
			return super.ADD_STUDENT;
		}
	}

	public String studentAssociation() {
		logger.info("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		logger.info("this.getStudentRegistrationId() : - " + this.getStudentRegistrationId());
		logger.info("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		FJBean fjBean = (FJBean) getUserSessionMap().get("BASEDATA");
		logger.info("fjBean.getRegisteredUserId() : - " + fjBean.getRegisteredUserId());
		logger.info("fjBean.getLoginID() : - " + fjBean.getLoginID());
		logger.info("fjBean.getBillerId() : - " + fjBean.getBillerId());
		StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
		// String statusUpdate =
		// studentRegistrationService.associateStudent(this.getStudentRegistrationId(),fjBean.getRegisteredUserId(),fjBean.getLoginID());
		String statusUpdate = "success";
		if ("success".equalsIgnoreCase(statusUpdate)) {
			addActionMessage("Student Associated successfully...");
		} else {
			addActionError("failure while associating the student");
		}
		return super.ASSOCIATE_STUDENT;
	}

	public String studentAssociation1() {
		logger.info("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		logger.info("this.getStudentRegistrationId() : - " + this.getStudentRegistrationId());
		logger.info("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		FJBean fjBean = (FJBean) getUserSessionMap().get("BASEDATA");
		logger.info("fjBean.getRegisteredUserId() : - " + fjBean.getRegisteredUserId());
		logger.info("fjBean.getLoginID() : - " + fjBean.getLoginID());
		logger.info("fjBean.getBillerId() : - " + fjBean.getBillerId());
		StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
		String statusUpdate = studentRegistrationService.associateStudent(this.getStudentRegistrationId(),
				fjBean.getRegisteredUserId(), fjBean.getLoginID());

		setCourseData((CourseDetailsBean) getUserSessionMap().get("COURSEDATA"));

		studentRegistrationFormBean = super.getRegisteredStudentDetails(this.getStudentRegistrationId());
		studentName = studentRegistrationFormBean.getStudentFirstName();

		if ("success".equalsIgnoreCase(statusUpdate)) {
			addActionMessage("Student Associated successfully...");
		} else {
			addActionError("failure while associating the student");
		}
		return SUCCESS;
	}

	public String memberRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("ParticipantName : - " + getBhuData().getParticipantName());
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			instituteConfigBean = (InstituteConfigBean) getUserSessionMap().get("INSTCONFIG");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			getBhuData().setRegisteredUserId(registeredUserId);
			setCourseData((CourseDetailsBean) getUserSessionMap().get("COURSEDATA"));
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
//			String responseString = studentRegistrationService.insertMemberRegDetails(getBhuData());
//
//			if (responseString != null && !"".equalsIgnoreCase(responseString)
//					&& "success".equalsIgnoreCase(responseString)) {
//				addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
//			} else if (responseString.equalsIgnoreCase("AE")) {
//				LoginActionService loginActionService = new LoginActionService();
//				studentData = null;
//				setStudentData(loginActionService.getMember_Flag());
//				addActionError(getText("member.id.already.exist"));
//				return super.BHUHOME;
//			} else {
//				addActionError(getText("error.occured.contact.administrator"));
//			}

			studentRegistrationFormBean = super.getRegisteredStudentDetails(getBhuData().getStudentRegistrationId());
			studentRegistrationFormBean.setTotalPayableFees(getBhuData().getTot_Amt1());
			studentRegistrationFormBean.setStudentId(getBhuData().getParticipantIOSNo());
			// System.out.println("getBhuData().getTot_Amt1().."+getBhuData().getTot_Amt1());
			super.applyFees(studentRegistrationFormBean);

			QuickPayAction quickPayAction = new QuickPayAction();
			appData1 = new PaymentRequestBean();
			appData1.setStudentRegistrationId(getBhuData().getStudentRegistrationId());

			quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

			getUserSessionMap().put("APPDATA", getAppData1());

		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}
		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.MEMSUCCESS;
	}

	public String gnluRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			getGnluData().setRegisteredUserId(registeredUserId);
			setCourseData((CourseDetailsBean) getUserSessionMap().get("COURSEDATA"));
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

			ObjectMapper obMapper = new ObjectMapper();
			ObjectNode objNode = obMapper.createObjectNode();

			InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
					.getInstituteFormDetails(billerId);

			// Object Node declaration
			objNode.put("application_id", "SMARTHUB");
			objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
			objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
			ObjectNode stdetails = obMapper.createObjectNode();

			SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date date = new Date();

			SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
			Date date1 = sdf.parse(getGnluData().getStdDOB());
			Date date2 = sdf.parse(getGnluData().getFromDate());
			Date date3 = sdf.parse(getGnluData().getToDate());
			stdetails.put("std_first_name", getGnluData().getStdFirstName());
			stdetails.put("std_middle_name", getGnluData().getStdMiddleName());
			stdetails.put("std_last_name", getGnluData().getStdLastName());
			stdetails.put("gender_name", getGnluData().getGender());
			stdetails.put("std_father_name", getGnluData().getStdFatherName());
			stdetails.put("category_name", getGnluData().getCategory());
			stdetails.put("std_nationality", getGnluData().getStdNationality());
			stdetails.put("std_dob", formatter.format(date1));
			// stdetails.put("std_address1",getGnluData().getStdAddress1());
			// stdetails.put("std_address1".getStdAddress1()!=""?getGnluData().getStdAddress1:"
			// ");
			stdetails.put("std_address1", getGnluData().getStdAddress1() != "" ? getGnluData().getStdAddress1() : "  ");
			stdetails.put("std_address2", getGnluData().getStdAddress2() != "" ? getGnluData().getStdAddress2() : "  ");
			// stdetails.put("std_address2",getGnluData().getStdAddress2());
			stdetails.put("std_city", getGnluData().getStdCity());
			stdetails.put("std_state", getGnluData().getStdState());
			stdetails.put("std_pinCode", Long.parseLong(getGnluData().getStdPinCode()));
			;
			stdetails.put("std_country", getGnluData().getStdCountry());
			stdetails.put("std_mobile", Long.parseLong(getGnluData().getStdMobile()));
			// stdetails.put("std_landLine",getGnluData().getStdLandLine());
			if (getGnluData().getStdLandLine() != "") {
				stdetails.put("std_landLine", getGnluData().getStdLandLine());
			} else {
				stdetails.put("std_landLine", " ");
			}
			stdetails.put("std_emailId", getGnluData().getStdEmailId());
			stdetails.put("board_name", getGnluData().getBoardName());
			stdetails.put("school_name", getGnluData().getSchoolName());
			stdetails.put("hsc_streamdropdowmn", getGnluData().getStreamDropdowmn());
			stdetails.put("ssc_class", getGnluData().getSscClass());
			stdetails.put("std_percentage", Double.parseDouble(getGnluData().getStdPercentage()));
			stdetails.put("std_university", getGnluData().getStdUniversity());
			stdetails.put("std_degree", getGnluData().getStdDegree());
			stdetails.put("std_college", getGnluData().getStdCollege());
			stdetails.put("graduate_class", getGnluData().getGraduateClass());
			stdetails.put("overall_aggr", getGnluData().getOverallAggr());
			stdetails.put("organization_name", getGnluData().getOrganization());
			stdetails.put("designation_name", getGnluData().getDesignation());
			stdetails.put("nature_responsibility", getGnluData().getNatureResponsibility());
			// stdetails.put("from_date",getGnluData().getFromDate());
			// stdetails.put("to_date",getGnluData().getToDate());
			stdetails.put("from_date", formatter.format(date2));
			stdetails.put("to_date", formatter.format(date3));
			stdetails.put("registered_userid", getGnluData().getRegisteredUserId());
			stdetails.put("amt_1", Double.parseDouble(getGnluData().getAmt1()));
			stdetails.put("registration_no", getGnluData().getRegistrationNo());
			stdetails.put("entrance_exam", getGnluData().getEntranceexam());
			stdetails.put("std_mothername", getGnluData().getStdMotherName());
			stdetails.put("std_dob_nationality", getGnluData().getStdDOBNationality());
			stdetails.put("source_of_info", getGnluData().getSourceOfInfo());
			// stdetails.put("std_address3",getGnluData().getStdAddress3());
			stdetails.put("std_address3", getGnluData().getStdAddress3() != "" ? getGnluData().getStdAddress3() : "  ");
			stdetails.put("std_phone", getGnluData().getStdPhone());
			stdetails.put("parent_phone", getGnluData().getParentPhone());
			// stdetails.put("parent_mobile",Long.parseLong(getGnluData().getParentMobile()));
			// stdetails.put("parent_mobile",getGnluData().getParentMobile());
			if (getGnluData().getParentMobile() != null) {
				stdetails.put("parent_mobile", Long.parseLong(getGnluData().getParentMobile()));
			} else {
				stdetails.put("parent_mobile", 0);
			}
			stdetails.put("std_phone", getGnluData().getStdPhone());
			stdetails.put("parent_emailid", getGnluData().getParentEmailId());
			stdetails.put("medium_of_ssc", getGnluData().getMediumOfSSC());
			stdetails.put("total_sscmark", getGnluData().getTotalSSCMark());
			stdetails.put("obtain_edsscmark", getGnluData().getObtainedSSCMark());
			stdetails.put("hsc_boardname", getGnluData().getHscBoardName());
			stdetails.put("hsc_schoolname", getGnluData().getHscSchoolName());
			stdetails.put("hsc_streamdropdowmn", getGnluData().getHscStreamDropdowmn());
			stdetails.put("medium_ofhsc", getGnluData().getMediumOfHSC());
			stdetails.put("hsc_class", getGnluData().getHscClass());
			stdetails.put("total_hscmark", getGnluData().getTotalHSCMark());
			stdetails.put("obtain_edhscmark", getGnluData().getObtainedHSCMark());
			stdetails.put("hsc_aggpercentage", Double.parseDouble(getGnluData().getHscAggPercentage()));
			stdetails.put("grad_stream", getGnluData().getGradStream());
			stdetails.put("medium_of_grad", getGnluData().getMediumOfGrad());
			stdetails.put("conversion_formula", getGnluData().getConversionFormula());
			stdetails.put("total_gradmark", getGnluData().getTotalGradMark());

			stdetails.put("obtained_gradmark", getGnluData().getObtainedGradMark());
			// stdetails.put("photo_self",getGnluData().getPhoto_Self());
			if (getGnluData().getPhoto_Self() != null) {
				stdetails.put("photo_self", getGnluData().getPhoto_Self());
			} else {
				stdetails.put("photo_self", " ");
			}
			// stdetails.put("photo_proof",getGnluData().getPhoto_Proof());
			if (getGnluData().getPhoto_Proof() != null) {
				stdetails.put("photo_proof", getGnluData().getPhoto_Proof());
			} else {
				stdetails.put("photo_proof", " ");
			}

			stdetails.put("payment_details", Double.parseDouble(getGnluData().getAmt1()));
			stdetails.put("registered_userId", registeredUserId);
			stdetails.put("student_registrationid", "0");
			stdetails.put("application_no", "0");
			stdetails.put("recon_date", formatter.format(date));
			stdetails.put("r_cre_time", formatter.format(date));
			stdetails.put("r_mod_time", formatter.format(date));
			stdetails.put("pg_pmt_status", "A");
			stdetails.put("Acc_Holder_Name", " ");
			stdetails.put("Res_Msg", " ");
			stdetails.put("Payment_Mode", " ");
			stdetails.put("Bank_Name", " ");
			stdetails.put("ALT_ERROR_DESC", " ");
			stdetails.put("Pmt_Id", "");
			stdetails.put("Payment_id", "");
			stdetails.put("PGTxnID", "");
			stdetails.put("BANK_ID", "");
			stdetails.put("Txn_Amt", Double.parseDouble(getGnluData().getAmt1()));

			objNode.put("data", stdetails);

			String jsonString1 = obMapper.writeValueAsString(objNode);

			logger.info("jsonString1" + jsonString1.toString());

			Client client = ClientBuilder.newClient();
			WebTarget webTarget = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH))
					.path("/store-form-data");
			Invocation.Builder invocationBuilder = webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);

			Response response = invocationBuilder.post(Entity.json(jsonString1.toString()));
			logger.info("response" + response.toString());

			if (response.getStatus() != 201) {
				String outputError = response.readEntity(String.class);
				JSONObject json = new JSONObject(outputError);
				String messageerror = json.getString("message");
				
				logger.info("messageerror" + messageerror);
				addActionMessage(messageerror);
				return "faliure";
				// throw new RuntimeException("Failed : HTTP error code : " +
				// response.getStatus());
			}

			logger.info("Output from Server .... \n");
			String output = response.readEntity(String.class);
			JSONObject json = new JSONObject(output);
			String formId = json.getString("form_id");
			logger.info("formId" + formId);

			getUserSessionMap().put("application_id", "SMARTHUB");
			getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
			getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
			getUserSessionMap().put("form_id", formId);

			SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
			smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
			smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
			smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
			smartHubFetchOnlineFormBean.setForm_id(formId);

			String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
			logger.info("jsonString2" + jsonString2);

			WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH))
					.path("/get-form-data");
			Invocation.Builder invocationBuilder1 = webTarget1
					.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);

			Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
			logger.info("responseString", response1.toString());

			if (response1.getStatus() != 200) {
				throw new RuntimeException("Failed : HTTP error code : " + response1.getStatus());
			}
			logger.info("Output from Server .... \n");
			String output1 = response1.readEntity(String.class);

			logger.info("output1" + output1);

			JSONObject jsonObject = new JSONObject(output1);

			JSONArray jsonArray = jsonObject.getJSONArray("message");
			logger.info("jsonArray" + jsonArray);

			JSONObject data = jsonArray.getJSONObject(0);
			JSONObject data1 = data.getJSONObject("data");

			// String stuName=data1.getString("first_name");

			// String roll_no=data1.getString("roll_no");
			// int amt_paid=data1.getInt("amount_tobepaid");
			// Long mobile_number=data1.getLong("studphone_number");

			/*
			 * getDronacharyaGOIOnlineFormBean().setFirstName(stuName);
			 * getDronacharyaGOIOnlineFormBean().setRollNo(roll_no);
			 * getDronacharyaGOIOnlineFormBean().setAmountToBePaid(String.valueOf(amt_paid))
			 * ; getDronacharyaGOIOnlineFormBean().setStudPhoneNumber(String.valueOf(
			 * mobile_number));
			 * getDronacharyaGOIOnlineFormBean().setTotalAmount(String.valueOf(amt_paid));
			 * getDronacharyaGOIOnlineFormBean().setApplicationNo(formId);
			 */

			String stuName = data1.getString("std_first_name");
			String stuName1 = data1.getString("std_middle_name");
			String gendername = data1.getString("gender_name");
			String fathername = data1.getString("std_father_name");
			String categoryname = data1.getString("category_name");
			String nationality = data1.getString("std_nationality");
			String dob = data1.getString("std_dob");
			String address1 = data1.getString("std_address1");
			String address2 = data1.getString("std_address2");
			String city = data1.getString("std_city");
			String state = data1.getString("std_state");
			Long pincode = data1.getLong("std_pinCode");
			String country = data1.getString("std_country");
			Long mobile = data1.getLong("std_mobile");
			Long landline = data1.getLong("std_landLine");
			String emailid = data1.getString("std_emailId");
			int txnamt = data1.getInt("Txn_Amt");
			int paymentdetails = data1.getInt("payment_details");
			// String resigtereduserid=data1.getString("registered_userid");
			// String registrationid=data1.getString("student_registrationid");
			// String applicationno=data1.getString("application_no");
			// String recondate=data1.getString("recon_date");
			// String cretime=data1.getString("r_cre_time");
			// String modtime=data1.getString("r_mod_time");
			// String pmtstatus=data1.getString("pg_pmt_status");
			// String holdername=data1.getString("acc_holder_name");
			// String resmsg=data1.getString("res_msg");
			// String paymentmode=data1.getString("payment_mode");
			// String bankname=data1.getString("bank_name");
			// String errordesc=data1.getString("alt_error_desc");
			// String pmtid=data1.getString("pmt_id");
			// String paymentid=data1.getString("payment_id");
			// String pgtid=data1.getString("pgtxn_id");
			// String bankid=data1.getString("bank_id");
			// String modid=data1.getString("r_mod_id");
			String boardname = data1.getString("board_name");
			String schoolname = data1.getString("school_name");
			String mothername = data1.getString("std_mothername");
			String dobnationality = data1.getString("std_dob_nationality");
			String sourceofinfo = data1.getString("source_of_info");
			String address3 = data1.getString("std_address3");
			String stdphone = data1.getString("std_phone");
			String parentphone = data1.getString("parent_phone");
			// String parentmobile=data1.getString("parent_mobile");
			Long parentmobile = data1.getLong("parent_mobile");
			String parentemailid = data1.getString("parent_emailid");
			String mediumofssc = data1.getString("medium_of_ssc");
			String totalsscmark = data1.getString("total_sscmark");
			String obtainedsscmark = data1.getString("obtain_edsscmark");
			String hscboardname = data1.getString("hsc_boardname");
			String hscschoolname = data1.getString("hsc_schoolname");
			String hscstreamdropdowmn = data1.getString("hsc_streamdropdowmn");
			String mediumofhsc = data1.getString("medium_ofhsc");
			String hscclass = data1.getString("hsc_class");
			String totalhscmark = data1.getString("total_hscmark");
			String obtainedhscmark = data1.getString("obtain_edhscmark");
			int hscggpercentage = data1.getInt("hsc_aggpercentage");
			String gradstream = data1.getString("grad_stream");
			// String streamdropdown=data1.getString("stream_dropdowmn");was not found
			String ssclass = data1.getString("ssc_class");
			int stdpercentage = data1.getInt("std_percentage");
			String stduniversity = data1.getString("std_university");
			String stddegree = data1.getString("std_degree");
			String stdcollege = data1.getString("std_college");
			String graduateclass = data1.getString("graduate_class");
			String overallaggr = data1.getString("overall_aggr");
			String organizationname = data1.getString("organization_name");
			String designationname = data1.getString("designation_name");
			String natureresponsibility = data1.getString("nature_responsibility");
			String fromdate = data1.getString("from_date");
			String todate = data1.getString("to_date");
			String entranceexam = data1.getString("entrance_exam");
			String registrationno = data1.getString("registration_no");
			int amt1 = data1.getInt("amt_1");
			// String studentalias=data1.getString("student_alias");was not found
			String mediumofgrade = data1.getString("medium_of_grad");
			String conversionformula = data1.getString("conversion_formula");
			String totalgrademark = data1.getString("total_gradmark");
			// String headerimagefile=data1.getString("header_imagfile").toString();was not
			// found
			// String storeheaderfile=data1.getString("storeheader_file").toString();
			// String headerimagfilefilename=data1.getString("header_imagfilefilename");Was
			// not found
			// String passportimagfile=data1.getString("passport_imagfile");
			String photoself = data1.getString("photo_self");
			String photoproof = data1.getString("photo_proof");

			getGnluData().setStdFirstName(stuName);
			getGnluData().setStdMiddleName(stuName1);
			getGnluData().setGender(gendername);
			getGnluData().setStdFatherName(fathername);
			getGnluData().setCategory(categoryname);
			getGnluData().setStdNationality(nationality);
			getGnluData().setStdDOB(dob);
			getGnluData().setStdAddress1(address1);
			getGnluData().setStdAddress2(address2);
			getGnluData().setStdCity(city);
			getGnluData().setStdState(state);
			getGnluData().setStdPinCode(String.valueOf(pincode));
			getGnluData().setStdCountry(country);
			getGnluData().setStdMobile(String.valueOf(mobile));
			getGnluData().setStdLandLine(String.valueOf(landline));
			getGnluData().setStdEmailId(emailid);
			// getGnluData().setFirstName(txnamt);
			// getGnluData().setFirstName(paymentdetails);
			// getGnluData().setRegisteredUserId(resigtereduserid);
			// getGnluData().setStudentRegistrationId(registrationid);
			// getGnluData().setFirstName(applicationno);
			// getGnluData().setFirstName(recondate);
			// getGnluData().setFirstName(cretime);
			// getGnluData().setFirstName(modtime);
			// getGnluData().setFirstName(pmtstatus);
			// getGnluData().setFirstName(holdername);
			// getGnluData().setFirstName(resmsg);
			// getGnluData().setFirstName(paymentmode);
			// getGnluData().setFirstName(bankname);
			// getGnluData().setFirstName(errordesc);
			// getGnluData().setFirstName(pmtid);
			// getGnluData().setFirstName(paymentid);
			// getGnluData().setFirstName(pgtid);
			// getGnluData().setFirstName(bankid);
			// getGnluData().setFirstName(modid);
			getGnluData().setBoardName(boardname);
			getGnluData().setSchoolName(schoolname);
			getGnluData().setStdMotherName(mothername);
			getGnluData().setStdDOBNationality(dobnationality);
			getGnluData().setSourceOfInfo(sourceofinfo);
			getGnluData().setStdAddress3(address3);
			getGnluData().setStdPhone(stdphone);
			getGnluData().setParentPhone(parentphone);
			getGnluData().setParentMobile(String.valueOf(parentmobile));
			getGnluData().setParentEmailId(parentemailid);
			getGnluData().setMediumOfSSC(mediumofssc);
			getGnluData().setTotalSSCMark(totalsscmark);
			getGnluData().setObtainedSSCMark(obtainedsscmark);
			getGnluData().setHscBoardName(hscboardname);
			getGnluData().setHscSchoolName(hscschoolname);
			getGnluData().setStreamDropdowmn(hscstreamdropdowmn);
			getGnluData().setMediumOfHSC(mediumofhsc);
			getGnluData().setHscClass(hscclass);
			getGnluData().setTotalHSCMark(totalhscmark);
			getGnluData().setObtainedHSCMark(obtainedhscmark);
			getGnluData().setHscAggPercentage(String.valueOf(hscggpercentage));
			getGnluData().setGradStream(gradstream);
			// getGnluData().setStreamDropdowmn(streamdropdown);was not found
			getGnluData().setSscClass(ssclass);
			getGnluData().setStdPercentage(String.valueOf(stdpercentage));
			getGnluData().setStdUniversity(stduniversity);
			getGnluData().setStdDegree(stddegree);
			getGnluData().setStdCollege(stdcollege);
			getGnluData().setGraduateClass(graduateclass);
			getGnluData().setOverallAggr(overallaggr);
			getGnluData().setOrganization(organizationname);
			getGnluData().setDesignation(designationname);
			getGnluData().setNatureResponsibility(natureresponsibility);
			getGnluData().setFromDate(fromdate);
			getGnluData().setToDate(todate);
			getGnluData().setEntranceexam(entranceexam);
			getGnluData().setRegistrationNo(registrationno);
			// getGnluData().setAmt1(amt1);
			getGnluData().setAmt1(String.valueOf(amt1));
			// getGnluData().setStudentAlias(studentalias);
			getGnluData().setMediumOfGrad(mediumofgrade);
			getGnluData().setConversionFormula(conversionformula);
			getGnluData().setTotalGradMark(totalgrademark);
			// getGnluData().setHeaderImagfile(headerimagfile.toSt);
			// getGnluData().setStoreHeaderFile(storeheaderfile)

			// getGnluData().setHeaderImagfileFileName(headerimagfilefilename);
			// getGnluData().setPassportImagfileFileName(passportimagfile);
			getGnluData().setPhoto_Self(photoself);
			getGnluData().setPhoto_Proof(photoproof);

			// END For Form Engine insertion

			// 5712 DronacharayaGOI Online form Implementation end
			getUserSessionMap().put("ONLINEFORMDATA", getGnluData());
			String responseString = studentRegistrationService.insertGNLUStudentDetails(getGnluData(), billerId);
			logger.info("GNLU GOI RegisterStudent :" + responseString);
			/* getAppData().setStrID("TEST"); */
			addStudentPhotos();
			// String responseString =
			// studentRegistrationService.insertGNLUStudentDetails(getGnluData());

			if (responseString != null && !"".equalsIgnoreCase(responseString)
					&& "success".equalsIgnoreCase(responseString)) {
				addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
			} else if (responseString.equalsIgnoreCase("AE")) {
				LoginActionService loginActionService = new LoginActionService();
				studentData = null;
				setStudentData(loginActionService.getGnlu_category());
				addActionError(getText("member.id.already.exist"));
				return super.GNLUHOME;
			} else {
				addActionError(getText("error.occured.contact.administrator"));
			}

			studentRegistrationFormBean = super.getRegisteredStudentDetails(getGnluData().getStudentRegistrationId());
			studentRegistrationFormBean.setTotalPayableFees(getGnluData().getAmt1());
			studentRegistrationFormBean.setStudentId(getGnluData().getRegistrationNo());
			super.applyFees(studentRegistrationFormBean);

			QuickPayAction quickPayAction = new QuickPayAction();
			appData1 = new PaymentRequestBean();
			appData1.setStudentRegistrationId(getGnluData().getStudentRegistrationId());

			quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

			getUserSessionMap().put("APPDATA", getAppData1());

		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}
		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.GNLUSUCCESS;
	}

	public String addStudentPhotos() throws IOException {
		boolean flag = false;
		String headerImg = "";
		String logoImg_FJG = "";
		String logoImg_FJGA = "";
		String destination = "";
		String osName = System.getProperty("os.name");
		if ("LINUX".equalsIgnoreCase(osName.trim())) {
			destination = "/opt/jboss-eap-6.0/standalone/deployments/XJunction.war/StudentPhotos";
		} else {
			destination = "C:/WorkSpace_for_UploadPhotos/StudentUploadPhotos/WebContent/StudentPhotos";
		}

		if (getGnluData().getHeaderImagfile() != null)// &&
														// !"".equalsIgnoreCase(getInstituteMasterFormBean().getInstituteHeaderImage()))
		{
			getGnluData().setStoreHeaderFile(saveUploadedFile(getGnluData().getHeaderImagfile(),
					getGnluData().getHeaderImagfileFileName(), getGnluData().getRegistrationNo(),
					"SI_" + getGnluData().getStdFirstName(), TPSLConstants.FJA_STATIC_IMAGE_CONTENT_PATH));

			saveUploadedFile(getGnluData().getHeaderImagfile(), getGnluData().getHeaderImagfileFileName(),
					getGnluData().getRegistrationNo(), "SI_" + getGnluData().getStdFirstName(), destination);
			getGnluData().setPhoto_Self(getGnluData().getStoreHeaderFile().getName());
		}
		if (getGnluData().getPassportImagfile() != null)// &&
														// !"".equalsIgnoreCase(getInstituteMasterFormBean().getInstituteHeaderImage()))
		{
			getGnluData().setStoreHeaderFile(saveUploadedFile(getGnluData().getPassportImagfile(),
					getGnluData().getPassportImagfileFileName(), getGnluData().getRegistrationNo(),
					"PI_" + getGnluData().getStdFirstName(), TPSLConstants.FJA_STATIC_IMAGE_CONTENT_PATH));

			saveUploadedFile(getGnluData().getPassportImagfile(), getGnluData().getPassportImagfileFileName(),
					getGnluData().getRegistrationNo(), "PI_" + getGnluData().getStdFirstName(), destination);
			getGnluData().setPhoto_Proof(getGnluData().getStoreHeaderFile().getName());
		}
		return "success";
	}

	public String addStudentPhotosForIIITB(String billerId) throws IOException {
		boolean flag = false;
		String destination = "";
		long uniqueTime = System.currentTimeMillis();
		String osName = System.getProperty("os.name");
		if ("LINUX".equalsIgnoreCase(osName.trim())) {
			destination = "/opt/jboss-eap-6.0/standalone/deployments/XJunction.war/StudentPhotos";
		} else {
			destination = "C:/WorkSpace_for_UploadPhotos/StudentUploadPhotos/WebContent/StudentPhotos";
		}
		if (getIitbData().getPassportImagfile() != null)// &&
														// !"".equalsIgnoreCase(getInstituteMasterFormBean().getInstituteHeaderImage()))
		{
			getIitbData().setStoreHeaderFile(
					saveUploadedFile(getIitbData().getPassportImagfile(), getIitbData().getPassportImagfileFileName(),
							billerId, "IIITB_" + uniqueTime, TPSLConstants.FJA_STATIC_IMAGE_CONTENT_PATH));

			saveUploadedFile(getIitbData().getPassportImagfile(), getIitbData().getPassportImagfileFileName(), billerId,
					"IIITB_" + uniqueTime, destination);
			getIitbData().setPhoto_Proof(getIitbData().getStoreHeaderFile().getName());
		}
		return "success";
	}

	public String addStudentPhotosForYMCA(String billerId) throws IOException {
		String destination = "";
		String osName = System.getProperty("os.name");
		if ("LINUX".equalsIgnoreCase(osName.trim())) {
			destination = "/opt/jboss-eap-6.0/standalone/deployments/XJunction.war/StudentPhotos";
		} else {
			destination = "C:/WorkSpace_for_UploadPhotos/StudentUploadPhotos/WebContent/StudentPhotos";
		}

		if (getYmcaOnlineFormBean().getPassportImagfile() != null)// &&
																	// !"".equalsIgnoreCase(getInstituteMasterFormBean().getInstituteHeaderImage()))
		{
			long uniqueTime = System.currentTimeMillis();
			getYmcaOnlineFormBean().setStoreHeaderFile(saveUploadedFile(getYmcaOnlineFormBean().getPassportImagfile(),
					getYmcaOnlineFormBean().getPassportImagfileFileName(), billerId, "YMCAP_" + uniqueTime,
					TPSLConstants.FJA_STATIC_IMAGE_CONTENT_PATH));

			saveUploadedFile(getYmcaOnlineFormBean().getPassportImagfile(),
					getYmcaOnlineFormBean().getPassportImagfileFileName(), billerId, "YMCAP_" + uniqueTime,
					destination);
			getYmcaOnlineFormBean().setPhoto_Proof(getYmcaOnlineFormBean().getStoreHeaderFile().getName());
		}
		if (getYmcaOnlineFormBean().getCastCertImagfile() != null)// &&
																	// !"".equalsIgnoreCase(getInstituteMasterFormBean().getInstituteHeaderImage()))
		{
			long uniqueTime1 = System.currentTimeMillis();
			getYmcaOnlineFormBean().setStoreHeaderFile(saveUploadedFile(getYmcaOnlineFormBean().getCastCertImagfile(),
					getYmcaOnlineFormBean().getCastCertImagfileFileName(), billerId, "CAST_" + uniqueTime1,
					TPSLConstants.FJA_STATIC_IMAGE_CONTENT_PATH));

			saveUploadedFile(getYmcaOnlineFormBean().getCastCertImagfile(),
					getYmcaOnlineFormBean().getCastCertImagfileFileName(), billerId, "CAST_" + uniqueTime1,
					destination);
			getYmcaOnlineFormBean().setCastCert_Proof(getYmcaOnlineFormBean().getStoreHeaderFile().getName());
		}
		if (getYmcaOnlineFormBean().getSignImagfile() != null)// &&
																// !"".equalsIgnoreCase(getInstituteMasterFormBean().getInstituteHeaderImage()))
		{
			long uniqueTime1 = System.currentTimeMillis();
			getYmcaOnlineFormBean().setStoreHeaderFile(saveUploadedFile(getYmcaOnlineFormBean().getSignImagfile(),
					getYmcaOnlineFormBean().getSignImagfileFileName(), billerId, "Sign_" + uniqueTime1,
					TPSLConstants.FJA_STATIC_IMAGE_CONTENT_PATH));

			saveUploadedFile(getYmcaOnlineFormBean().getSignImagfile(),
					getYmcaOnlineFormBean().getSignImagfileFileName(), billerId, "Sign_" + uniqueTime1, destination);
			getYmcaOnlineFormBean().setSign_Proof(getYmcaOnlineFormBean().getStoreHeaderFile().getName());
		}
		return "success";
	}

	public String addStudentPhotosForHARYANA(String billerId) throws IOException {
		String destination = "";
		String osName = System.getProperty("os.name");
		if ("LINUX".equalsIgnoreCase(osName.trim())) {
			destination = "/opt/jboss-eap-6.0/standalone/deployments/XJunction.war/StudentPhotos";
		} else {
			destination = "C:/WorkSpace_for_UploadPhotos/StudentUploadPhotos/WebContent/StudentPhotos";
		}
		if (getHaryanaFormBean().getPassportImagfile() != null)// &&
																// !"".equalsIgnoreCase(getInstituteMasterFormBean().getInstituteHeaderImage()))
		{
			long uniqueTime1 = System.currentTimeMillis();
			getHaryanaFormBean().setStoreHeaderFile(saveUploadedFile(getHaryanaFormBean().getPassportImagfile(),
					getHaryanaFormBean().getPassportImagfileFileName(), billerId, "Cuoh_" + uniqueTime1,
					TPSLConstants.FJA_STATIC_IMAGE_CONTENT_PATH));

			saveUploadedFile(getHaryanaFormBean().getPassportImagfile(),
					getHaryanaFormBean().getPassportImagfileFileName(), billerId, "Cuoh_" + uniqueTime1, destination);
			getHaryanaFormBean().setPhoto_upload(getHaryanaFormBean().getStoreHeaderFile().getName());
		}
		if (getHaryanaFormBean().getSignImagfile() != null)// &&
															// !"".equalsIgnoreCase(getInstituteMasterFormBean().getInstituteHeaderImage()))
		{
			long uniqueTime1 = System.currentTimeMillis();
			getHaryanaFormBean().setStoreHeaderFile(saveUploadedFile(getHaryanaFormBean().getSignImagfile(),
					getHaryanaFormBean().getSignImagfileFileName(), billerId, "Sign_" + uniqueTime1,
					TPSLConstants.FJA_STATIC_IMAGE_CONTENT_PATH));

			saveUploadedFile(getHaryanaFormBean().getSignImagfile(), getHaryanaFormBean().getSignImagfileFileName(),
					billerId, "Sign_" + uniqueTime1, destination);
			getHaryanaFormBean().setSignature_upload(getHaryanaFormBean().getStoreHeaderFile().getName());
		}
		if (getHaryanaFormBean().getEsmCertImagfile() != null)// &&
																// !"".equalsIgnoreCase(getInstituteMasterFormBean().getInstituteHeaderImage()))
		{
			long uniqueTime1 = System.currentTimeMillis();
			getHaryanaFormBean().setStoreHeaderFile(saveUploadedFile(getHaryanaFormBean().getEsmCertImagfile(),
					getHaryanaFormBean().getEsmCertImagfileFileName(), billerId, "Marks_" + uniqueTime1,
					TPSLConstants.FJA_STATIC_IMAGE_CONTENT_PATH));

			saveUploadedFile(getHaryanaFormBean().getEsmCertImagfile(),
					getHaryanaFormBean().getEsmCertImagfileFileName(), billerId, "Marks_" + uniqueTime1, destination);
			getHaryanaFormBean().setMarksheet_upload(getHaryanaFormBean().getStoreHeaderFile().getName());
		}

		return "success";
	}

	public String addStudentPhotosForBengal(String billerId) throws IOException {
		String destination = "";
		String osName = System.getProperty("os.name");
		if ("LINUX".equalsIgnoreCase(osName.trim())) {
			destination = "/opt/jboss-eap-6.0/standalone/deployments/XJunction.war/StudentPhotos";
		} else {
			destination = "C:/WorkSpace_for_UploadPhotos/StudentUploadPhotos/WebContent/StudentPhotos";
		}

		if (getBengalCollegeOnlineFormBean().getPassportImagfile() != null)// &&
																			// !"".equalsIgnoreCase(getInstituteMasterFormBean().getInstituteHeaderImage()))
		{
			long uniqueTime = System.currentTimeMillis();
			getBengalCollegeOnlineFormBean()
					.setStoreHeaderFile(saveUploadedFile(getBengalCollegeOnlineFormBean().getPassportImagfile(),
							getBengalCollegeOnlineFormBean().getPassportImagfileFileName(), billerId,
							"BCP_" + uniqueTime, TPSLConstants.FJA_STATIC_IMAGE_CONTENT_PATH));

			saveUploadedFile(getBengalCollegeOnlineFormBean().getPassportImagfile(),
					getBengalCollegeOnlineFormBean().getPassportImagfileFileName(), billerId, "BCP_" + uniqueTime,
					destination);
			getBengalCollegeOnlineFormBean()
					.setPhotoProof(getBengalCollegeOnlineFormBean().getStoreHeaderFile().getName());
		}
		if (getBengalCollegeOnlineFormBean().getDocImagfile() != null)// &&
																		// !"".equalsIgnoreCase(getInstituteMasterFormBean().getInstituteHeaderImage()))
		{
			long uniqueTime = System.currentTimeMillis();
			getBengalCollegeOnlineFormBean()
					.setStoreHeaderFile(saveUploadedFile(getBengalCollegeOnlineFormBean().getDocImagfile(),
							getBengalCollegeOnlineFormBean().getDocImagfileFileName(), billerId, "BCD_" + uniqueTime,
							TPSLConstants.FJA_STATIC_IMAGE_CONTENT_PATH));

			saveUploadedFile(getBengalCollegeOnlineFormBean().getDocImagfile(),
					getBengalCollegeOnlineFormBean().getDocImagfileFileName(), billerId, "BCD_" + uniqueTime,
					destination);
			getBengalCollegeOnlineFormBean()
					.setDocProof(getBengalCollegeOnlineFormBean().getStoreHeaderFile().getName());
		}

		return "success";
	}

	private File saveUploadedFile(File uploadfile, String uploadfile_name, String imageSection, String inst_name,
			String destinationDir) throws IOException {
//String destinationDir=TPSLConstants.FJA_STATIC_IMAGE_CONTENT_PATH;
		String[] image_extension = uploadfile_name.split("\\.");
		String file_path = destinationDir + File.separator + inst_name + "_" + imageSection + "."
				+ image_extension[image_extension.length - 1];
		File newFile = new File(file_path);
		FileUtils.copyFile(uploadfile, newFile);
		return newFile;
	}

	public String ramaRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			getRamaData().setRegisteredUserId(registeredUserId);
			setCourseData((CourseDetailsBean) getUserSessionMap().get("COURSEDATA"));
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			String responseString = "";
			String inst_code = (String) getUserSessionMap().get("_institutecode");
			if ("3038".equalsIgnoreCase(inst_code)) {
				responseString = studentRegistrationService.insertIITMStudentDetails(getRamaData(), billerId);
			} else {
				responseString = studentRegistrationService.insertRamaStudentDetails(getRamaData());
			}
			if (responseString != null && !"".equalsIgnoreCase(responseString)
					&& "success".equalsIgnoreCase(responseString)) {
				addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
			} else if (responseString.equalsIgnoreCase("AE")) {
				LoginActionService loginActionService = new LoginActionService();
				studentData = null;
				setStudentData(loginActionService.getRamaCollage_category());
				addActionError(getText("member.id.already.exist"));
				if ("3038".equalsIgnoreCase(inst_code)) {
					return "ramhome2";
				} else {
					return super.RAMHOME;
				}
			} else {
				addActionError(getText("error.occured.contact.administrator"));
			}

			studentRegistrationFormBean = super.getRegisteredStudentDetails(getRamaData().getStudentRegistrationId());
			studentRegistrationFormBean.setTotalPayableFees(getRamaData().getAmt1());
			studentRegistrationFormBean.setStudentId(getRamaData().getApplicationNo());
			super.applyFees(studentRegistrationFormBean);

			QuickPayAction quickPayAction = new QuickPayAction();
			appData1 = new PaymentRequestBean();
			appData1.setStudentRegistrationId(getRamaData().getStudentRegistrationId());

			quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

			getUserSessionMap().put("APPDATA", getAppData1());

		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}
		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.RAMASUCCESS;
	}

	public String imsRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			getImsUniversityFormBean().setRegisteredUserId(registeredUserId);
			setCourseData((CourseDetailsBean) getUserSessionMap().get("COURSEDATA"));
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

			String responseString = studentRegistrationService.insertIMSStudentDetails(getImsUniversityFormBean());

			if (responseString != null && !"".equalsIgnoreCase(responseString)
					&& "success".equalsIgnoreCase(responseString)) {
				addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
			} else {
				addActionError(getText("error.occured.contact.administrator"));
			}

			studentRegistrationFormBean = super.getRegisteredStudentDetails(
					getImsUniversityFormBean().getStudentRegistrationId());
			studentRegistrationFormBean.setTotalPayableFees(getImsUniversityFormBean().getImsAppFee());
			studentRegistrationFormBean.setStudentId(getImsUniversityFormBean().getApplicationNo());
			super.applyFees(studentRegistrationFormBean);

			QuickPayAction quickPayAction = new QuickPayAction();
			appData1 = new PaymentRequestBean();
			appData1.setStudentRegistrationId(getImsUniversityFormBean().getStudentRegistrationId());

			quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

			getUserSessionMap().put("APPDATA", getAppData1());

		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}
		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.IMSSUCCESS;
	}

	public String iitbRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {

			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			getIitbData().setRegisteredUserId(registeredUserId);
			setCourseData((CourseDetailsBean) getUserSessionMap().get("COURSEDATA"));
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			addStudentPhotosForIIITB(billerId);
//			String responseString = studentRegistrationService.insertIITBStudentDetails(getIitbData());
//
//			if (responseString != null && !"".equalsIgnoreCase(responseString)
//					&& "success".equalsIgnoreCase(responseString)) {
//				addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
//			} else if ("NA".equalsIgnoreCase(responseString)) {
//				addActionError(ErrorPropertyReader.getProperty("failed.to.add.student.data"));
//			} else {
//				addActionError(getText("error.occured.contact.administrator"));
//			}
			String autoGenRegisterId = getIitbData().getAutoGenRegisterId();
			List EmpHistoryList = getIitbData().getEmpHistoryList();
			int emphistoryListLength = EmpHistoryList.size();
			for (int i = 0; i < emphistoryListLength; i++) {
				IITBPostEmpHistoryFormBean iitbPostEmpHistoryFormBean = (IITBPostEmpHistoryFormBean) EmpHistoryList
						.get(i);
				if (!"".equalsIgnoreCase(iitbPostEmpHistoryFormBean.getEmplyname())
						|| !"".equalsIgnoreCase(iitbPostEmpHistoryFormBean.getDesignation())
						|| !"".equalsIgnoreCase(iitbPostEmpHistoryFormBean.getCuremp())
						|| !"".equalsIgnoreCase(iitbPostEmpHistoryFormBean.getEmpstdt())
						|| !"".equalsIgnoreCase(iitbPostEmpHistoryFormBean.getEmpenddate())
						|| !"".equalsIgnoreCase(iitbPostEmpHistoryFormBean.getEmpphn())
						|| !"".equalsIgnoreCase(iitbPostEmpHistoryFormBean.getEmpadd())) {
					studentRegistrationService.insertIITBPostHistoryDetails(iitbPostEmpHistoryFormBean,
							autoGenRegisterId);
				}
			}
			List accomplishmentList = getIitbData().getAccomplishmentList();
			int accomplishmentListLength = accomplishmentList.size();
			for (int i = 0; i < accomplishmentListLength; i++) {
				IITBAccomplishmentFormBean iitbAccomplishmentFormBean = (IITBAccomplishmentFormBean) accomplishmentList
						.get(i);
				if (!"".equalsIgnoreCase(iitbAccomplishmentFormBean.getAccomplishtype())
						|| !"".equalsIgnoreCase(iitbAccomplishmentFormBean.getAccomplishment())
						|| !"".equalsIgnoreCase(iitbAccomplishmentFormBean.getAccompdate())
						|| !"".equalsIgnoreCase(iitbAccomplishmentFormBean.getAccompdsctn())
						|| !"".equalsIgnoreCase(iitbAccomplishmentFormBean.getAward())
						|| !"".equalsIgnoreCase(iitbAccomplishmentFormBean.getComments())) {
					studentRegistrationService.insertIITBAccomplishmentDetails(iitbAccomplishmentFormBean,
							autoGenRegisterId);
				}
			}

			studentRegistrationFormBean = super.getRegisteredStudentDetails(getIitbData().getStudentRegistrationId());
			studentRegistrationFormBean.setTotalPayableFees(getIitbData().getAmount());
			studentRegistrationFormBean.setStudentId(getIitbData().getCandidateId());
			studentRegistrationFormBean.setStudentName(getIitbData().getStdtName());
			studentRegistrationFormBean.setStudentEmailId(getIitbData().getStdEmailId());
			super.applyFees(studentRegistrationFormBean);

			QuickPayAction quickPayAction = new QuickPayAction();
			appData1 = new PaymentRequestBean();
			appData1.setStudentRegistrationId(getIitbData().getStudentRegistrationId());

			quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

			getUserSessionMap().put("APPDATA", getAppData1());
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}

		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.IITBSUCCESS;
	}

	public String unisonRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();

			if (getUnisonFormBean().getTotalAmount().equals("0")
					&& getUnisonFormBean().getConvertedAmount().equals("0")) {
				addActionError("Please Enter Amount");
				return "unifailure";
			} else {
				if (AmountValidation(getUnisonFormBean().getTotalAmount(), getUnisonFormBean().getPayment())
						&& AmountValidation(getUnisonFormBean().getConvertedAmount(),
								getUnisonFormBean().getPaymentConverted())) {
					StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

					String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
					getUnisonFormBean().setRegisteredUserId(registeredUserId);
					setCourseData((CourseDetailsBean) getUserSessionMap().get("COURSEDATA"));
					ObjectMapper obMapper = new ObjectMapper();
					ObjectNode objNode = obMapper.createObjectNode();
					InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
							.getInstituteFormDetails(billerId);
					SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
					Date date = new Date();

					// Object Node declaration
					objNode.put("application_id", "SMARTHUB");
					objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
					objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
					ObjectNode stdetails = obMapper.createObjectNode();

					// Getters atarted...
					stdetails.put("newstudent", getUnisonFormBean().getNewStudent() != null ? "Y" : "N");
					stdetails.put("existingstudent", getUnisonFormBean().getExistingStudent() != null ? "Y" : "N");
					stdetails.put("studentname", getUnisonFormBean().getStudentName());
					stdetails.put("fathername", getUnisonFormBean().getFatherName());
					stdetails.put("academicsession", getUnisonFormBean().getAcademicSession());
					stdetails.put("year", getUnisonFormBean().getYear());
					stdetails.put("curriculum", getUnisonFormBean().getCurriculum());
					stdetails.put("sibling", getUnisonFormBean().getSibling());
					stdetails.put("admissionfee",
							getUnisonFormBean().getAdmissionFee() != null ? getUnisonFormBean().getAdmissionFee()
									: "0");
					stdetails.put("joiningkitfees",
							getUnisonFormBean().getJoiningKitFees() != null ? getUnisonFormBean().getJoiningKitFees()
									: "0");
					stdetails.put("registerationfees",
							getUnisonFormBean().getRegisterationFees() != null
									? getUnisonFormBean().getRegisterationFees()
									: "0");
					stdetails.put("imprestdeposit",
							getUnisonFormBean().getImprestDeposit() != null ? getUnisonFormBean().getImprestDeposit()
									: "0");
					stdetails.put("securitydeposit",
							getUnisonFormBean().getSecurityDeposit() != null ? getUnisonFormBean().getSecurityDeposit()
									: "0");

					stdetails.put("schoolfee",
							getUnisonFormBean().getSchoolFee() != null ? getUnisonFormBean().getSchoolFee() : "0");

					stdetails.put("others", getUnisonFormBean().getOthers());
					stdetails.put("amntddepositinr", getUnisonFormBean().getAmntdDepositINR());
					stdetails.put("amntddepositusd", getUnisonFormBean().getAmntdDepositUSD());
					if (getUnisonFormBean().getConversionRate() != "") {
						stdetails.put("conversionrate", getUnisonFormBean().getConversionRate());
					} else {

						stdetails.put("conversionrate", 0);
					}
					stdetails.put("totalamount", Double.parseDouble(getUnisonFormBean().getTotalAmount()));
					if (!getUnisonFormBean().getConvertedAmount().equalsIgnoreCase("NaN")) {
						stdetails.put("convertedamount", Double.parseDouble(getUnisonFormBean().getConvertedAmount()));

					} else {

						stdetails.put("convertedamount", 0);
					}

					stdetails.put("amountwords", getUnisonFormBean().getAmountWords());
					stdetails.put("panno", getUnisonFormBean().getPanNo());
					stdetails.put("phoneno", Long.parseLong(getUnisonFormBean().getPhoneNo()));
					stdetails.put("email", getUnisonFormBean().getEmail());
					stdetails.put("payment", Double.parseDouble(getUnisonFormBean().getTotalAmount()));
					stdetails.put("paymentconverted", getUnisonFormBean().getPaymentConverted());
					stdetails.put("nationality",
							getUnisonFormBean().getNationality() != null ? getUnisonFormBean().getNationality() : " ");

					stdetails.put("txn_amt", Double.parseDouble(getUnisonFormBean().getTotalAmount()));
					stdetails.put("payment_details", Double.parseDouble(getUnisonFormBean().getTotalAmount()));
					stdetails.put("registered_userId", registeredUserId);
					stdetails.put("student_registrationid", "0");
					stdetails.put("application_no", "0");
					stdetails.put("recon_date", formatter.format(date));
					stdetails.put("r_cre_time", formatter.format(date));
					stdetails.put("r_mod_time", formatter.format(date));
					stdetails.put("pg_pmt_status", "A");
					stdetails.put("Acc_Holder_Name", " ");
					stdetails.put("Res_Msg", " ");
					stdetails.put("Payment_Mode", " ");
					stdetails.put("Bank_Name", " ");
					stdetails.put("ALT_ERROR_DESC", " ");
					stdetails.put("Pmt_Id", "");
					stdetails.put("Payment_id", "");
					stdetails.put("PGTxnID", "");
					stdetails.put("BANK_ID", "");
					stdetails.put("Txn_Amt", Double.parseDouble(getUnisonFormBean().getTotalAmount()));

					// Calling API...
					/*
					 * objNode.put("form_data", stdetails); String jsonString1 =
					 * obMapper.writeValueAsString(objNode); logger.info("jsonString1" +
					 * jsonString1.toString());
					 */
					objNode.put("form_data", stdetails);

					String jsonString1 = obMapper.writeValueAsString(objNode);

					logger.info("jsonString1" + jsonString1.toString());

					// code added by priya

					/*** *** *** Initialization start *** *** ***/
					SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

					secureAPIBuilder
							.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
					secureAPIBuilder.setUpstreamServerPort(443);

					secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
					secureAPIBuilder.setVerifyServerSSL(false);

					// String clientId = "actual-smarthub-node-ip";
					// String clientKeyStr =
					// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

					// secureAPIBuilder.setAuthenticationAlias(clientId);

					// byte[] clientKey = hexStringToByteArray(clientKeyStr);
					// secureAPIBuilder.setAuthenticationKey(clientKey);

					SecureAPIConnection secureAPI = secureAPIBuilder.build();
					/*** *** *** Initialization complete *** *** ***/

					// CODE END

					Client client = ClientBuilder.newClient();
					/*
					 * WebTarget webTarget =
					 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
					 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
					 * invocationBuilder =
					 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE); Response
					 * //commented by priya for form engine response =
					 * invocationBuilder.post(Entity.json(jsonString1.toString()));
					 * logger.info("response" + response.toString());
					 */

					// API Response status verification ...
					APIResponse apiResponse = null;

					apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

					System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
							+ apiResponse.getResponseCode());

					String responseBody = apiResponse.getData().toString();

					logger.info("response" + apiResponse.toString());
					if (apiResponse.getResponseCode() != 201) {
						String outputError = apiResponse.getData().toString();
						JSONObject json = new JSONObject(outputError);
						String messageerror = json.getString("message");
						String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
						messageerror=friendlyMessageFromAPIError;
						logger.info("messageerror"+messageerror);
						addActionMessage(messageerror);
						logger.info("messageerror" + messageerror);
						addActionMessage(messageerror);
						return "unifailure";
					}

					logger.info("Output from Server...");
					String output = apiResponse.getData().toString();
					JSONObject json = new JSONObject(output);

					JSONObject data1 = json.getJSONObject("data");
					String formId = data1.getString("form_id");
					logger.info("formId" + formId);

					getUserSessionMap().put("application_id", "SMARTHUB");
					getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
					getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
					getUserSessionMap().put("form_id", formId);

					SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
					smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
					smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
					smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
					smartHubFetchOnlineFormBean.setForm_id(formId);
					String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

					// Pusing data to template ...
					logger.info("jsonString2" + jsonString2);
					/*
					 * WebTarget webTarget1 =
					 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
					 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
					 * Invocation.Builder invocationBuilder1 =
					 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
					 * //commented by priya for form engine Response response1 =
					 * invocationBuilder1.post(Entity.json(jsonString2));
					 * logger.info("responseString", response1.toString());
					 */
					// code added by priya form engine
					APIResponse apiResponse1 = null;

					apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

					System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
							+ apiResponse1.getResponseCode());

					logger.info("responseString", apiResponse1.toString());
					if (apiResponse1.getResponseCode() != 200) {
						throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
					}
					logger.info("Output from Server....");
					String output1 = apiResponse1.getData().toString();
					logger.info("output1" + output1);
					JSONObject jsonObject = new JSONObject(output1);
					//// JSONArray jsonArray = jsonObject.getJSONArray("message");
					JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
					logger.info("jsonArray" + jsonArray);
					JSONObject data = jsonArray.getJSONObject(0);
					JSONObject dataobj = data.getJSONObject("form_data");

					String newstudent = dataobj.getString("newstudent");
					String existingstudent = dataobj.getString("existingstudent");
					String studentname = dataobj.getString("studentname");
					String fathername = dataobj.getString("fathername");
					String academicsession = dataobj.getString("academicsession");
					String year = dataobj.getString("year");
					String curriculum = dataobj.getString("curriculum");
					String sibling = dataobj.getString("sibling");
					String admissionfee = dataobj.getString("admissionfee");
					String joiningkitfees = dataobj.getString("joiningkitfees");
					String registerationfees = dataobj.getString("registerationfees");
					String imprestdeposit = dataobj.getString("imprestdeposit");
					String securitydeposit = dataobj.getString("securitydeposit");
					String schoolfee = dataobj.getString("schoolfee");
					String others = dataobj.getString("others");
					String amntddepositinr = dataobj.getString("amntddepositinr");
					String amntddepositusd = dataobj.getString("amntddepositusd");
					int conversionrate = dataobj.getInt("conversionrate");
					int totalamount = dataobj.getInt("totalamount");
					int convertedamount = dataobj.getInt("convertedamount");
					String amountwords = dataobj.getString("amountwords");
					String panno = dataobj.getString("panno");
					int phoneno = dataobj.getInt("phoneno");
					String email = dataobj.getString("email");
					String registereduserid = dataobj.getString("registered_userId");
					String studentregistrationid = dataobj.getString("student_registrationid");
					String applicationno = dataobj.getString("application_no");
					int payment = dataobj.getInt("payment");
					String paymentconverted = dataobj.getString("paymentconverted");
					String nationality = dataobj.getString("nationality");

					// Calling all Setter methods
					getUnisonFormBean().setNewStudent(newstudent);
					getUnisonFormBean().setExistingStudent(existingstudent);
					getUnisonFormBean().setStudentName(studentname);
					getUnisonFormBean().setFatherName(fathername);
					getUnisonFormBean().setAcademicSession(academicsession);
					getUnisonFormBean().setYear(year);
					getUnisonFormBean().setCurriculum(curriculum);
					getUnisonFormBean().setSibling(sibling);
					getUnisonFormBean().setAdmissionFee(admissionfee);
					getUnisonFormBean().setJoiningKitFees(joiningkitfees);
					getUnisonFormBean().setRegisterationFees(registerationfees);
					getUnisonFormBean().setImprestDeposit(imprestdeposit);
					getUnisonFormBean().setSecurityDeposit(securitydeposit);
					getUnisonFormBean().setSchoolFee(String.valueOf(schoolfee));
					getUnisonFormBean().setOthers(others);
					getUnisonFormBean().setAmntdDepositINR(amntddepositinr);
					getUnisonFormBean().setAmntdDepositUSD(amntddepositusd);
					getUnisonFormBean().setConversionRate(String.valueOf(conversionrate));
					getUnisonFormBean().setTotalAmount(String.valueOf(totalamount));
					getUnisonFormBean().setConvertedAmount(String.valueOf(convertedamount));
					getUnisonFormBean().setAmountWords(amountwords);
					getUnisonFormBean().setPanNo(panno);
					getUnisonFormBean().setPhoneNo(String.valueOf(phoneno));
					getUnisonFormBean().setEmail(email);
					getUnisonFormBean().setRegisteredUserId(registereduserid);
					getUnisonFormBean().setStudentRegistrationId(studentregistrationid);
					getUnisonFormBean().setApplicationNo(applicationno);
					getUnisonFormBean().setPayment(String.valueOf(payment));
					getUnisonFormBean().setPaymentConverted(paymentconverted);
					getUnisonFormBean().setNationality(nationality);

					getUnisonFormBean().setApplicationNo(formId);
					getUserSessionMap().put("ONLINEFORMDATA", getUnisonFormBean());
					mappingUnison(getUnisonFormBean());
					String responseString = studentRegistrationService.insertUnisonStudentDetails(getUnisonFormBean(),
							billerId);

					if (responseString != null && !"".equalsIgnoreCase(responseString)
							&& "success".equalsIgnoreCase(responseString)) {
						addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
					} else {
						addActionError(getText("error.occured.contact.administrator"));
					}

					String amount = "0";
					if ("0".equalsIgnoreCase(getUnisonFormBean().getAmntdDepositINR()))
						amount = getUnisonFormBean().getConvertedAmount();
					else if ("0".equalsIgnoreCase(getUnisonFormBean().getAmntdDepositUSD()))
						amount = getUnisonFormBean().getTotalAmount();
					else
						amount = "0";

					studentRegistrationFormBean = super.getRegisteredStudentDetails(
							getUnisonFormBean().getStudentRegistrationId());
					studentRegistrationFormBean.setTotalPayableFees(amount);
					studentRegistrationFormBean.setStudentId(getUnisonFormBean().getApplicationNo());
					super.applyFees(studentRegistrationFormBean);

					QuickPayAction quickPayAction = new QuickPayAction();
					appData1 = new PaymentRequestBean();
					appData1.setStudentRegistrationId(getUnisonFormBean().getStudentRegistrationId());

					quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

					getUserSessionMap().put("APPDATA", getAppData1());
				} else {
					return "unifailure";
				}

			}

		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}
		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);
		getUserSessionMap().put("unisonformbean", getUnisonFormBean());
		return super.UNISUCCESS;
	}

	private void mappingUnison(UnisonFormBean unisonFormBean2) {

		if ("on".equalsIgnoreCase(unisonFormBean2.getNewStudent())) {
			unisonFormBean2.setNewStudent("Y");
		} else {
			unisonFormBean2.setNewStudent("N");
		}
		if ("on".equalsIgnoreCase(unisonFormBean2.getExistingStudent())) {
			unisonFormBean2.setExistingStudent("Y");
		} else {
			unisonFormBean2.setExistingStudent("N");
		}

		if ("CISCEIndianNationalStudents".equalsIgnoreCase(unisonFormBean2.getCurriculum())
				|| "UniversityofCambridgeIndianNationalStudents".equalsIgnoreCase(unisonFormBean2.getCurriculum())) {
			if ("admissionFee".equalsIgnoreCase(unisonFormBean2.getAdmissionFee())) {
				unisonFormBean2.setAdmissionFee("80000");
			} else {
				unisonFormBean2.setAdmissionFee("0");
			}
			if ("joiningKitFees".equalsIgnoreCase(unisonFormBean2.getJoiningKitFees())) {
				unisonFormBean2.setJoiningKitFees("50000");
			} else {
				unisonFormBean2.setJoiningKitFees("0");
			}
			if ("securityDeposit".equalsIgnoreCase(unisonFormBean2.getSecurityDeposit())) {
				unisonFormBean2.setSecurityDeposit("337500");
			} else {
				unisonFormBean2.setSecurityDeposit("0");
			}
			if ("schoolFee".equalsIgnoreCase(unisonFormBean2.getSchoolFee())) {
				if ("CISCEIndianNationalStudents".equalsIgnoreCase(unisonFormBean2.getCurriculum())) {
					if ("No".equalsIgnoreCase(unisonFormBean2.getSibling())) {
						if ("I Term".equalsIgnoreCase(unisonFormBean2.getYear())
								|| "II Term".equalsIgnoreCase(unisonFormBean2.getYear())) {
							unisonFormBean2.setSchoolFee("337500");
						}
						if ("Full Year".equalsIgnoreCase(unisonFormBean2.getYear())) {
							unisonFormBean2.setSchoolFee("665000");
						}
					}
					if ("Yes".equalsIgnoreCase(unisonFormBean2.getSibling())) {
						if ("I Term".equalsIgnoreCase(unisonFormBean2.getYear())
								|| "II Term".equalsIgnoreCase(unisonFormBean2.getYear())) {
							unisonFormBean2.setSchoolFee("303750");
						}
						if ("Full Year".equalsIgnoreCase(unisonFormBean2.getYear())) {
							unisonFormBean2.setSchoolFee("598500");
						}
					}
				}
				if ("UniversityofCambridgeIndianNationalStudents".equalsIgnoreCase(unisonFormBean2.getCurriculum())) {
					if ("No".equalsIgnoreCase(unisonFormBean2.getSibling())) {
						if ("I Term".equalsIgnoreCase(unisonFormBean2.getYear())) {
							unisonFormBean2.setSchoolFee("387500");
						}
						if ("II Term".equalsIgnoreCase(unisonFormBean2.getYear())) {
							unisonFormBean2.setSchoolFee("337500");
						}
						if ("Full Year".equalsIgnoreCase(unisonFormBean2.getYear())) {
							unisonFormBean2.setSchoolFee("715000");
						}
					}
					if ("Yes".equalsIgnoreCase(unisonFormBean2.getSibling())) {
						if ("I Term".equalsIgnoreCase(unisonFormBean2.getYear())
								|| "II Term".equalsIgnoreCase(unisonFormBean2.getYear())) {
							unisonFormBean2.setSchoolFee("353750");
						}
						if ("Full Year".equalsIgnoreCase(unisonFormBean2.getYear())) {
							unisonFormBean2.setSchoolFee("648500");
						}
					}
				}
			} else {
				unisonFormBean2.setSchoolFee("0");
			}
			if ("registerationFees".equalsIgnoreCase(unisonFormBean2.getRegisterationFees())) {
				unisonFormBean2.setRegisterationFees("20000");
			} else {
				unisonFormBean2.setRegisterationFees("0");
			}

		}

		if ("CISCEForeignNationalStudents".equalsIgnoreCase(unisonFormBean2.getCurriculum())
				|| "UniversityofCambridgeForeignNationalStudents".equalsIgnoreCase(unisonFormBean2.getCurriculum())) {
			if (unisonFormBean2.getImprestDeposit().equals("50000")) {
				unisonFormBean2.setImprestDeposit("1500");
			}
			if ("admissionFee".equalsIgnoreCase(unisonFormBean2.getAdmissionFee())) {
				unisonFormBean2.setAdmissionFee("1500");
			} else {
				unisonFormBean2.setAdmissionFee("0");
			}
			if ("joiningKitFees".equalsIgnoreCase(unisonFormBean2.getJoiningKitFees())) {
				unisonFormBean2.setJoiningKitFees("1000");
			} else {
				unisonFormBean2.setJoiningKitFees("0");
			}
			if ("securityDeposit".equalsIgnoreCase(unisonFormBean2.getSecurityDeposit())) {
				unisonFormBean2.setSecurityDeposit("3000");
			} else {
				unisonFormBean2.setSecurityDeposit("0");
			}
			if ("schoolFee".equalsIgnoreCase(unisonFormBean2.getSchoolFee())) {
				if ("No".equalsIgnoreCase(unisonFormBean2.getSibling())) {
					unisonFormBean2.setSchoolFee("10600");
				}
				if ("Yes".equalsIgnoreCase(unisonFormBean2.getSibling())) {
					unisonFormBean2.setSchoolFee("9540");
				}
			} else {
				unisonFormBean2.setSchoolFee("0");
			}
			if ("registerationFees".equalsIgnoreCase(unisonFormBean2.getRegisterationFees())) {
				unisonFormBean2.setRegisterationFees("500");
			} else {
				unisonFormBean2.setRegisterationFees("0");
			}
		}

		String instCode = (String) getUserSessionMap().get("_institutecode");

		if ("CISCEIndianNationalStudents".equalsIgnoreCase(unisonFormBean2.getCurriculum())) {
			if ("UWSD".equalsIgnoreCase(instCode)) {
				unisonFormBean2.setNationality("Indian");
				unisonFormBean2.setCurriculum("");
			} else
				unisonFormBean2.setCurriculum("Indian Curriculum-CISCE");

		} else if ("UniversityofCambridgeIndianNationalStudents".equalsIgnoreCase(unisonFormBean2.getCurriculum())) {
			unisonFormBean2.setCurriculum("International Curriculum-IGCSE/A level");
		} else if ("CISCEForeignNationalStudents".equalsIgnoreCase(unisonFormBean2.getCurriculum())) {
			if ("UWSD".equalsIgnoreCase(instCode)) {
				unisonFormBean2.setNationality("Overseas");
				unisonFormBean2.setCurriculum("");
			} else
				unisonFormBean2.setCurriculum("CISCE-Foreign National Students");
		} else {
			unisonFormBean2.setCurriculum("University of Cambridge-Foreign National Students");
		}

	}

	private Boolean AmountValidation(String amount, String validator) {

		String fin = ChecksumGenerator.hmacSha1GLA(amount, TPSLConstants.CHECKSUM_KEY);
		if (fin.equals(validator)) {
			return true;
		}
		/*
		 * String[] multiply17=validator.split("[A-Z]"); String
		 * amnt=multiply17[1]+"."+multiply17[2]; BigDecimal bd=new BigDecimal(amnt);
		 * bd=bd.multiply(new BigDecimal("13")); bd=bd.setScale(0,
		 * BigDecimal.ROUND_HALF_UP); String bdstr=bd.toString();
		 * if(bdstr.length()<Integer.parseInt(multiply17[0])){ int
		 * j=Integer.parseInt(multiply17[0])-bdstr.length(); for(int i=0;i<j;i++){
		 * bdstr="0"+bdstr; } } amnt=multiply17[3]+"."+bdstr; bd=new BigDecimal(amnt);
		 * bd=bd.multiply(new BigDecimal("17"));
		 * 
		 * 
		 * BigDecimal bd1=bd.setScale(2,BigDecimal.ROUND_HALF_EVEN); BigDecimal bd2=new
		 * BigDecimal(amount); bd2=bd2.setScale(2,BigDecimal.ROUND_HALF_EVEN);
		 * 
		 * if(bd1.equals(bd2)){ return true; }
		 */
		return false;
	}

	public String wbutRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			List<String> amountList = new ArrayList<String>();
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			getWbutUniversityFormBean().setRegisteredUserId(registeredUserId);
			setCourseData((CourseDetailsBean) getUserSessionMap().get("COURSEDATA"));
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

			amountList = studentRegistrationService.getOnlineInstituteAmountList(billerId);
			if (amountList.size() > 0 && amountList.contains(getWbutUniversityFormBean().getFees())
					|| !amountList.contains(getWbutUniversityFormBean().getFees())) {
				String registeredUserId1 = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
				// getWbutUniversityFormBean().setRegisteredUserId(registeredUserId1);
				setCourseData((CourseDetailsBean) getUserSessionMap().get("COURSEDATA"));
				/*
				 * String responseString = null; String instcode = ((String)
				 * getUserSessionMap().get("_institutecode"));
				 */
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);
				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				// Getters atarted...
				stdetails.put("purpose", getWbutUniversityFormBean().getPurpose());
				stdetails.put("applicationid", getWbutUniversityFormBean().getApplicationID());
				stdetails.put("collegename", getWbutUniversityFormBean().getCollegeName());
				stdetails.put("contactno", Long.parseLong(getWbutUniversityFormBean().getContactNo()));
				stdetails.put("fees", Double.parseDouble(getWbutUniversityFormBean().getFees()));
				stdetails.put("payment_details", Double.parseDouble(getWbutUniversityFormBean().getFees()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getWbutUniversityFormBean().getFees()));

				// Calling API...
				/*
				 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
				 * String jsonString1 = obMapper.writeValueAsString(objNode);
				 * logger.info("jsonString1" + jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * //commented by priya for form engine invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE); Response
				 * response = invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				// API Response status verification ...
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "wbutfailure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine Response response1 =
				 * invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				// JSONArray jsonArray = jsonObject.getJSONArray("message");
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				/*
				 * JSONObject data=jsonArray.getJSONObject(0); JSONObject
				 * data1=data.getJSONObject(PropertyReader.getProperty(TPSLConstants.FORM_DATA))
				 * ;
				 */

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String applicationid = dataobj.getString("applicationid");
				String collegename = dataobj.getString("collegename");
				int contactno = dataobj.getInt("contactno");
				int fees = dataobj.getInt("fees");

				String purpose = dataobj.getString("purpose");

				// Calling all Setter methods
				getWbutUniversityFormBean().setPurpose(purpose);
				getWbutUniversityFormBean().setApplicationID(applicationid);
				getWbutUniversityFormBean().setCollegeName(collegename);
				getWbutUniversityFormBean().setContactNo(String.valueOf(contactno));
				getWbutUniversityFormBean().setFees(String.valueOf(fees));

				getWbutUniversityFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getWbutUniversityFormBean());

				String responseString = studentRegistrationService
						.insertWbuteaStudentDetails(getWbutUniversityFormBean(), billerId);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				}
				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getWbutUniversityFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getWbutUniversityFormBean().getFees());
				studentRegistrationFormBean.setStudentId(getWbutUniversityFormBean().getApplicationNo());

				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getWbutUniversityFormBean().getStudentRegistrationId());

				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				return "wbutfailure";
			}

		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}
		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.WBUTSUCCESS;
	}

	public String gpullaReadyRegistration() {

		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			List<String> amountList = new ArrayList<String>();
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

			amountList = studentRegistrationService.getOnlineInstituteAmountList(billerId);
			if (amountList.size() > 0 && amountList.contains(getGpullaReadyFormBean().getStdHostelFee())) {
				String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
				getGpullaReadyFormBean().setRegisteredUserId(registeredUserId);
				setCourseData((CourseDetailsBean) getUserSessionMap().get("COURSEDATA"));

				String responseString = studentRegistrationService
						.insertgpullaReadyStudentDetails(getGpullaReadyFormBean(), billerId);
				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				}
				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getGpullaReadyFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getGpullaReadyFormBean().getStdHostelFee());
				studentRegistrationFormBean.setStudentId(getGpullaReadyFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getGpullaReadyFormBean().getStudentRegistrationId());

				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				return "gpullareadyfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}

		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.GPULLAREADYSUCCESS;
	}

	public String YMCARegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			List<String> amountList = new ArrayList<String>();
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			getYmcaOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			amountList = studentRegistrationService.getOnlineInstituteAmountList(billerId);
			if (amountList.size() > 0 && amountList.contains(getYmcaOnlineFormBean().getAmount())) {
				addStudentPhotosForYMCA(billerId);
				String responseString = studentRegistrationService.insertYMCAStudentDetails(getYmcaOnlineFormBean(),
						billerId);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionError(ErrorPropertyReader.getProperty("failed.to.add.student.data"));
				} else {
					addActionError(getText("error.occured.contact.administrator"));
				}
				List eduDetailsList = getYmcaOnlineFormBean().getEduDetailsList();
				int eduListLength = eduDetailsList.size();
				for (int i = 0; i < eduListLength; i++) {
					EducationDetailsFormbean educationDetailsFormbean = (EducationDetailsFormbean) eduDetailsList
							.get(i);
					if (!"".equalsIgnoreCase(educationDetailsFormbean.getQualName())) {
						studentRegistrationService.insertYMCAEducationDetails(educationDetailsFormbean,
								getYmcaOnlineFormBean().getApplicationNo());
					}
				}
				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getYmcaOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getYmcaOnlineFormBean().getAmount());
				studentRegistrationFormBean.setStudentId(getYmcaOnlineFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getYmcaOnlineFormBean().getApplicantName());
				studentRegistrationFormBean.setStudentEmailId(getYmcaOnlineFormBean().getEmailId());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getYmcaOnlineFormBean().getStudentRegistrationId());

				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				return "ymcafailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}

		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.YMCASUCCESS;
	}

	public String NITMeghRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getNitOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getNitOnlineFormBean().getAmount(), getNitOnlineFormBean().getPayment())) {
				String responseString = studentRegistrationService.insertNITMeghStudentDetails(getNitOnlineFormBean(),
						billerId);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionError(ErrorPropertyReader.getProperty("failed.to.add.student.data"));
					return "nitfailure";
				} else {
					addActionError(getText("error.occured.contact.administrator"));
					return "nitfailure";
				}
				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getNitOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getNitOnlineFormBean().getAmount());
				studentRegistrationFormBean.setStudentId(getNitOnlineFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getNitOnlineFormBean().getStdName());
				studentRegistrationFormBean.setStudentEmailId(getNitOnlineFormBean().getEmail());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getNitOnlineFormBean().getStudentRegistrationId());

				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				return "nitfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}

		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.NITMEGHSUCCESS;
	}

	public String CampionRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			String instCode = (String) getUserSessionMap().get("_institutecode");
			getCampionSchoolFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			boolean champio;
			if (instCode.equalsIgnoreCase("CHAMPIO")) {
				champio = AmountValidation(getCampionSchoolFormBean().getTutionFee(),
						getCampionSchoolFormBean().getTutionPayment())
						&& AmountValidation(getCampionSchoolFormBean().getTermFee(),
								getCampionSchoolFormBean().getTermPayment())
						&& AmountValidation(getCampionSchoolFormBean().getPtaFee(),
								getCampionSchoolFormBean().getPtaPayment())
						&& AmountValidation(getCampionSchoolFormBean().getComputerFee(),
								getCampionSchoolFormBean().getComputerPayment());
			} else {
				champio = AmountValidation(getCampionSchoolFormBean().getTutionFee(),
						getCampionSchoolFormBean().getTutionPayment())
						&& AmountValidation(getCampionSchoolFormBean().getTermFee(),
								getCampionSchoolFormBean().getTermPayment())
						&& AmountValidation(getCampionSchoolFormBean().getPtaFee(),
								getCampionSchoolFormBean().getPtaPayment());
			}
			if (champio) {
				Double amt;
				if (instCode.equalsIgnoreCase("CHAMPIO")) {
					amt = Double.parseDouble(getCampionSchoolFormBean().getTutionFee())
							+ Double.parseDouble(getCampionSchoolFormBean().getTermFee())
							+ Double.parseDouble(getCampionSchoolFormBean().getPtaFee())
							+ Double.parseDouble(getCampionSchoolFormBean().getComputerFee());
				} else {
					amt = Double.parseDouble(getCampionSchoolFormBean().getTutionFee())
							+ Double.parseDouble(getCampionSchoolFormBean().getTermFee())
							+ Double.parseDouble(getCampionSchoolFormBean().getPtaFee());
				}
				getCampionSchoolFormBean().setAmount(amt.toString());
				String responseString = studentRegistrationService
						.insertCampionSchoolDetails(getCampionSchoolFormBean(), billerId);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionError(ErrorPropertyReader.getProperty("failed.to.add.student.data"));
					return "campionfailure";
				} else {
					addActionError(getText("error.occured.contact.administrator"));
					return "campionfailure";
				}
				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getCampionSchoolFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getCampionSchoolFormBean().getAmount());
				studentRegistrationFormBean.setStudentId(getCampionSchoolFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getCampionSchoolFormBean().getStdName());
				studentRegistrationFormBean.setStudentEmailId(getCampionSchoolFormBean().getStdEmailId());
				StudentDataService studentDataService = new StudentDataService();
				List<StudentFeesFormBean> studentFeesList = studentDataService.getStudentFeesDetails(
						studentRegistrationFormBean.getBillerBranchId(), studentRegistrationFormBean.getStrCourse(),
						studentRegistrationFormBean.getStrCourseDetails(),
						studentRegistrationFormBean.getStrCourseType(),
						studentRegistrationFormBean.getStrCoursePattern(),
						studentRegistrationFormBean.getStrCourseTerm(), studentRegistrationFormBean.getStudentId(),
						billerId);
				studentRegistrationFormBean.setStudentFeesList(studentFeesList);
				super.applyFees(studentRegistrationFormBean);
				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getCampionSchoolFormBean().getStudentRegistrationId());

				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				return "campionfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}

		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.CAMPIONSUCCESS;
	}

	public String haryanaRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			boolean Appfee;
			if (getHaryanaFormBean().getApplicationFee() != null
					&& !"".equalsIgnoreCase(getHaryanaFormBean().getApplicationFee())) {
				Appfee = AmountValidation(getHaryanaFormBean().getApplicationFee(),
						getHaryanaFormBean().getApplicationFeecharges());
			} else {
				getHaryanaFormBean().setApplicationFee("0");
				Appfee = true;
			}
			if (Appfee) {
				StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
				String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
				getHaryanaFormBean().setRegisteredUserId(registeredUserId);
				setCourseData((CourseDetailsBean) getUserSessionMap().get("COURSEDATA"));
				getAppData().setStrID("TEST");
				addStudentPhotosForHARYANA(billerId);
				// 1250 CUOHaryana Online form Implememtation started
				// Start For Form Engine insertion

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				ObjectNode objNode2 = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				Date date1 = sdf.parse(getHaryanaFormBean().getDateofBirth());

				stdetails.put("enrollmentno", getHaryanaFormBean().getEnrollmentNo());
				stdetails.put("registerid", getHaryanaFormBean().getRegisterID());
				stdetails.put("subject", getHaryanaFormBean().getSubject());
				stdetails.put("course", getHaryanaFormBean().getCourse());
				stdetails.put("name", getHaryanaFormBean().getName());
				stdetails.put("fathersname", getHaryanaFormBean().getFathersName());
				stdetails.put("mothersname", getHaryanaFormBean().getMothersName());
				stdetails.put("dateofbirth", formatter.format(date1));
				stdetails.put("gender", getHaryanaFormBean().getGender());
				stdetails.put("permanentaddress", StringUtils.isBlank(getHaryanaFormBean().getPermanentAddress()) ? " "
						: getHaryanaFormBean().getPermanentAddress());
				stdetails.put("localaddress", StringUtils.isBlank(getHaryanaFormBean().getLocalAddress()) ? " "
						: getHaryanaFormBean().getLocalAddress());
				stdetails.put("pincode", Double.parseDouble(getHaryanaFormBean().getPincode()));
				stdetails.put("city", getHaryanaFormBean().getCity());
				stdetails.put("additionalmobileno", Long.parseLong(getHaryanaFormBean().getAdditionalMobileNo()));
				stdetails.put("mobilenumber", Long.parseLong(getHaryanaFormBean().getMobileNumber()));
				stdetails.put("category", getHaryanaFormBean().getCategory());
				stdetails.put("email", getHaryanaFormBean().getEmail());
				stdetails.put("applicationfee", Double.parseDouble(getHaryanaFormBean().getApplicationFee()));
				stdetails.put("examinationyear", getHaryanaFormBean().getExaminationYear());
				stdetails.put("photo_upload",
						getHaryanaFormBean().getPhoto_upload() != null ? getHaryanaFormBean().getPhoto_upload() : " ");
				stdetails.put("signature_upload",
						getHaryanaFormBean().getSignature_upload() != null ? getHaryanaFormBean().getSignature_upload()
								: " ");
				stdetails.put("marksheet_upload",
						getHaryanaFormBean().getMarksheet_upload() != null ? getHaryanaFormBean().getMarksheet_upload()
								: " ");
				List eduDetailsList = getHaryanaFormBean().getEduharyanaList();
				ArrayNode arrayNode = obMapper.createArrayNode();
				int eduListLength = eduDetailsList.size();
				for (int i = 0; i < eduListLength; i++) {
					ObjectNode objNode1 = obMapper.createObjectNode();

					EducationHaryanaFormBean educationHaryanaFormBean = (EducationHaryanaFormBean) eduDetailsList
							.get(i);
					// studentRegistrationService.insertHaryanaEducationDetails(educationHaryanaFormBean,getHaryanaFormBean().getApplicationNo());
					objNode1.put("year", educationHaryanaFormBean.getYear());
					objNode1.put("rollno", educationHaryanaFormBean.getRollNo());
					objNode1.put("marksobtained", educationHaryanaFormBean.getMarksObtained());
					objNode1.put("maxmarks", educationHaryanaFormBean.getMaxMarks());
					objNode1.put("percentage", educationHaryanaFormBean.getPercentage());

					arrayNode.add(objNode1);
				}

				stdetails.put("tags", arrayNode);
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getHaryanaFormBean().getApplicationFee()));

				/*
				 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
				 * 
				 * String jsonString1=obMapper.writeValueAsString(objNode);
				 * 
				 * logger.info("jsonString1"+jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();

				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * //commented by priya for form engine
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "haryanafailure";

				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * //commented by priya for form engine
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				// JSONArray jsonArray = jsonObject.getJSONArray("message");
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String enrollmentno = dataobj.getString("enrollmentno");

				String registerid = dataobj.getString("registerid");
				String subject = dataobj.getString("subject");
				String course = dataobj.getString("course");
				String name = dataobj.getString("name");
				String fathersname = dataobj.getString("fathersname");

				String mothersname = dataobj.getString("mothersname");
				String dateofbirth = dataobj.getString("dateofbirth");
				String gender = dataobj.getString("gender");
				String permanentaddress = dataobj.getString("permanentaddress");
				String localaddress = dataobj.getString("localaddress");
				int pin_code = dataobj.getInt("pincode");
				String city = dataobj.getString("city");
				Long additionalmobileno = dataobj.getLong("additionalmobileno");
				Long mobilenumber = dataobj.getLong("mobilenumber");

				String category = dataobj.getString("category");
				String email = dataobj.getString("email");
				int applicationfee = dataobj.getInt("applicationfee");
				String examinationyear = dataobj.getString("examinationyear");
				String photo_upload = dataobj.getString("photo_upload");

				String signature_upload = dataobj.getString("signature_upload");
				String marksheet_upload = dataobj.getString("marksheet_upload");

				getHaryanaFormBean().setEnrollmentNo(enrollmentno);
				getHaryanaFormBean().setRegisterID(registerid);
				getHaryanaFormBean().setSubject(subject);
				getHaryanaFormBean().setCourse(course);
				getHaryanaFormBean().setName(name);
				getHaryanaFormBean().setFathersName(fathersname);
				getHaryanaFormBean().setMothersName(mothersname);
				getHaryanaFormBean().setDateofBirth(dateofbirth);
				getHaryanaFormBean().setGender(gender);
				getHaryanaFormBean().setPermanentAddress(permanentaddress);
				getHaryanaFormBean().setLocalAddress(localaddress);
				getHaryanaFormBean().setPincode(String.valueOf(pin_code));
				getHaryanaFormBean().setCity(city);
				getHaryanaFormBean().setAdditionalMobileNo(String.valueOf(additionalmobileno));
				getHaryanaFormBean().setMobileNumber(String.valueOf(mobilenumber));

				getHaryanaFormBean().setCategory(category);
				getHaryanaFormBean().setEmail(email);
				getHaryanaFormBean().setApplicationFee(String.valueOf(applicationfee));
				getHaryanaFormBean().setExaminationYear(examinationyear);
				getHaryanaFormBean().setPhoto_upload(photo_upload);
				getHaryanaFormBean().setSignature_upload(signature_upload);
				getHaryanaFormBean().setMarksheet_upload(marksheet_upload);

				getHaryanaFormBean().setApplicationNo(formId);
				// END For Form Engine insertion
				getUserSessionMap().put("ONLINEFORMDATA", getHaryanaFormBean());
				// 1250 CUOHaryana Online form Implementation end
				String responseString = studentRegistrationService.insertHaryanaStudentDetails(getHaryanaFormBean(),
						billerId);
				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				}
				/*
				 * List eduDetailsList = getHaryanaFormBean().getEduharyanaList(); int
				 * eduListLength = eduDetailsList.size(); for(int i=0; i < eduListLength; i++ )
				 * { EducationHaryanaFormBean educationHaryanaFormBean =
				 * (EducationHaryanaFormBean) eduDetailsList.get(i);
				 * studentRegistrationService.insertHaryanaEducationDetails(
				 * educationHaryanaFormBean,getHaryanaFormBean().getApplicationNo());
				 * 
				 * }
				 */
				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getHaryanaFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getHaryanaFormBean().getApplicationFee());
				studentRegistrationFormBean.setStudentId(getHaryanaFormBean().getApplicationNo());

				super.applyFees(studentRegistrationFormBean);
				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getHaryanaFormBean().getStudentRegistrationId());

				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				return "haryanafailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}
		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.HARYANASUCCESS;
	}

	public String BengalCollegeRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			LoginActionService loginActionService = new LoginActionService();
			String instCode = (String) getUserSessionMap().get("_institutecode");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getBengalCollegeOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			boolean validAmt = false, hostelAmt = false, academicAmt = false;
			if (instCode.equalsIgnoreCase("BCE") || instCode.equalsIgnoreCase("BCET")
					|| instCode.equalsIgnoreCase("BCPO") || instCode.equalsIgnoreCase("BCPSR")) {
				validAmt = AmountValidation(getBengalCollegeOnlineFormBean().getAmount(),
						getBengalCollegeOnlineFormBean().getPayment());
			} else {
				if (getBengalCollegeOnlineFormBean().getAcademicAmount() != null
						&& !"".equalsIgnoreCase(getBengalCollegeOnlineFormBean().getAcademicAmount())) {
					academicAmt = AmountValidation(getBengalCollegeOnlineFormBean().getAcademicAmount(),
							getBengalCollegeOnlineFormBean().getAcademicPayment());
				} else {
					getBengalCollegeOnlineFormBean().setAcademicAmount("0");
					academicAmt = true;
				}
				if (getBengalCollegeOnlineFormBean().getHostelAmount() != null
						&& !"".equalsIgnoreCase(getBengalCollegeOnlineFormBean().getHostelAmount())) {
					hostelAmt = AmountValidation(getBengalCollegeOnlineFormBean().getHostelAmount(),
							getBengalCollegeOnlineFormBean().getHostelPayment());
				} else {
					getBengalCollegeOnlineFormBean().setHostelAmount("0");
					hostelAmt = true;
				}
				validAmt = academicAmt && hostelAmt;
				// validAmt =
				// AmountValidation(getBengalCollegeOnlineFormBean().getAcademicAmount(),getBengalCollegeOnlineFormBean().getAcademicPayment())
				// &&
				// AmountValidation(getBengalCollegeOnlineFormBean().getHostelAmount(),getBengalCollegeOnlineFormBean().getHostelPayment());
			}
			if (validAmt) {
				Double amt;
				if (instCode.equalsIgnoreCase("BCE") || instCode.equalsIgnoreCase("BCET")
						|| instCode.equalsIgnoreCase("BCPO") || instCode.equalsIgnoreCase("BCPSR")) {
					amt = Double.parseDouble(getBengalCollegeOnlineFormBean().getAmount());
				} else {
					amt = Double.parseDouble(getBengalCollegeOnlineFormBean().getAcademicAmount())
							+ Double.parseDouble(getBengalCollegeOnlineFormBean().getHostelAmount());
				}
				getBengalCollegeOnlineFormBean().setAmount(amt.toString());
				for (CampionFeesDetailsFormBean FeeDetailsFormBean : bengalCollegeOnlineFormBean
						.getCampionFeeDetailsFormBean()) {
					addStudentPhotosForBengal(billerId);
					ObjectMapper obMapper = new ObjectMapper();
					ObjectNode objNode = obMapper.createObjectNode();

					InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
							.getInstituteFormDetails(billerId);

					// Object Node declaration
					objNode.put("application_id", "SMARTHUB");
					objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
					objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
					ObjectNode stdetails = obMapper.createObjectNode();

					SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
					Date date = new Date();
					stdetails.put("selectcourse",
							getBengalCollegeOnlineFormBean().getSelectCourse() != null
									? getBengalCollegeOnlineFormBean().getSelectCourse()
									: " ");
					stdetails.put("selectsplcourse",
							getBengalCollegeOnlineFormBean().getSelectSplCourse() != null
									? getBengalCollegeOnlineFormBean().getSelectSplCourse()
									: " ");
					stdetails.put("examination",
							getBengalCollegeOnlineFormBean().getExamination() != null
									? getBengalCollegeOnlineFormBean().getExamination()
									: " ");
					stdetails.put("examrank", StringUtils.isBlank(getBengalCollegeOnlineFormBean().getExamRank()) ? " "
							: getBengalCollegeOnlineFormBean().getExamRank());
					stdetails.put("admcategory",
							getBengalCollegeOnlineFormBean().getAdmCategory() != null
									? getBengalCollegeOnlineFormBean().getAdmCategory()
									: " ");
					stdetails.put("stdname",
							getBengalCollegeOnlineFormBean().getStdName() != null
									? getBengalCollegeOnlineFormBean().getStdName()
									: " ");

					stdetails.put("fathername",
							getBengalCollegeOnlineFormBean().getFatherName() != null
									? getBengalCollegeOnlineFormBean().getFatherName()
									: " ");
					stdetails.put("mothername",
							getBengalCollegeOnlineFormBean().getMotherName() != null
									? getBengalCollegeOnlineFormBean().getMotherName()
									: " ");
					stdetails.put("stddOB", getBengalCollegeOnlineFormBean().getStdDOB());
					stdetails.put("gender",
							getBengalCollegeOnlineFormBean().getGender() != null
									? getBengalCollegeOnlineFormBean().getGender()
									: " ");
					stdetails.put("stdaddress",
							StringUtils.isBlank(getBengalCollegeOnlineFormBean().getStdAddress()) ? " "
									: getBengalCollegeOnlineFormBean().getStdAddress());
					stdetails.put("stdcity", StringUtils.isBlank(getBengalCollegeOnlineFormBean().getStdCity()) ? " "
							: getBengalCollegeOnlineFormBean().getStdCity());
					stdetails.put("stdstatenew", getBengalCollegeOnlineFormBean().getStdStateNew());
					if (StringUtils.isBlank(getBengalCollegeOnlineFormBean().getStdPinCode())) {
						stdetails.put("stdpinCode", 0);
					} else {
						stdetails.put("stdpinCode", Long.parseLong(getBengalCollegeOnlineFormBean().getStdPinCode()));
					}
					stdetails.put("stdcitizenship",
							StringUtils.isBlank(getBengalCollegeOnlineFormBean().getStdCitizenship()) ? " "
									: getBengalCollegeOnlineFormBean().getStdCitizenship());
					stdetails.put("stdemailid", getBengalCollegeOnlineFormBean().getStdEmailId());

					stdetails.put("stdmobile", Long.parseLong(getBengalCollegeOnlineFormBean().getStdMobile()));
					stdetails.put("stdaddmobile",
							StringUtils.isBlank(getBengalCollegeOnlineFormBean().getStdAddMobile()) ? 0
									: Long.parseLong(getBengalCollegeOnlineFormBean().getStdAddMobile()));
					stdetails.put("stdcaste", getBengalCollegeOnlineFormBean().getStdCaste());

					stdetails.put("stdcategory",
							StringUtils.isBlank(getBengalCollegeOnlineFormBean().getStdCategory()) ? " "
									: getBengalCollegeOnlineFormBean().getStdCategory());
					stdetails.put("sscyearofpass",
							StringUtils.isBlank(getBengalCollegeOnlineFormBean().getSscYearOfPass()) ? " "
									: getBengalCollegeOnlineFormBean().getSscYearOfPass());
					stdetails.put("sscboard", StringUtils.isBlank(getBengalCollegeOnlineFormBean().getSscBoard()) ? " "
							: getBengalCollegeOnlineFormBean().getSscBoard());
					stdetails.put("sscothboard",
							StringUtils.isBlank(getBengalCollegeOnlineFormBean().getSscOthBoard()) ? " "
									: getBengalCollegeOnlineFormBean().getSscOthBoard());

					stdetails.put("obtainedsscmark",
							StringUtils.isBlank(getBengalCollegeOnlineFormBean().getObtainedSSCMark()) ? " "
									: getBengalCollegeOnlineFormBean().getObtainedSSCMark());
					stdetails.put("percentsscmark",
							StringUtils.isBlank(getBengalCollegeOnlineFormBean().getPercentSSCMark()) ? " "
									: getBengalCollegeOnlineFormBean().getPercentSSCMark());
					stdetails.put("hscyearofpass",
							StringUtils.isBlank(getBengalCollegeOnlineFormBean().getHscYearOfPass()) ? " "
									: getBengalCollegeOnlineFormBean().getHscYearOfPass());
					stdetails.put("hscboard", StringUtils.isBlank(getBengalCollegeOnlineFormBean().getHscBoard()) ? " "
							: getBengalCollegeOnlineFormBean().getHscBoard());

					stdetails.put("hscothboard",
							getBengalCollegeOnlineFormBean().getHscOthBoard() != null
									? getBengalCollegeOnlineFormBean().getHscOthBoard()
									: " ");
					stdetails.put("obtainedhscmark",
							StringUtils.isBlank(getBengalCollegeOnlineFormBean().getObtainedHSCMark()) ? " "
									: getBengalCollegeOnlineFormBean().getObtainedHSCMark());
					stdetails.put("hscyearofpass",
							StringUtils.isBlank(getBengalCollegeOnlineFormBean().getHscYearOfPass()) ? " "
									: getBengalCollegeOnlineFormBean().getHscYearOfPass());
					stdetails.put("percenthscmark",
							StringUtils.isBlank(getBengalCollegeOnlineFormBean().getPercentHSCMark()) ? " "
									: getBengalCollegeOnlineFormBean().getPercentHSCMark());

					stdetails.put("obtphysicsmark",
							StringUtils.isBlank(getBengalCollegeOnlineFormBean().getObtPhysicsMark()) ? " "
									: getBengalCollegeOnlineFormBean().getObtPhysicsMark());
					stdetails.put("compulsorysub1mark",
							StringUtils.isBlank(getBengalCollegeOnlineFormBean().getCompulsorySub1Mark()) ? " "
									: getBengalCollegeOnlineFormBean().getCompulsorySub1Mark());
					stdetails.put("obtchemistrymark",
							StringUtils.isBlank(getBengalCollegeOnlineFormBean().getObtChemistryMark()) ? " "
									: getBengalCollegeOnlineFormBean().getObtChemistryMark());
					stdetails.put("compulsorysub2mark",
							StringUtils.isBlank(getBengalCollegeOnlineFormBean().getCompulsorySub2Mark()) ? " "
									: getBengalCollegeOnlineFormBean().getCompulsorySub2Mark());

					stdetails.put("obtmathsmark",
							StringUtils.isBlank(getBengalCollegeOnlineFormBean().getObtMathsMark()) ? " "
									: getBengalCollegeOnlineFormBean().getObtMathsMark());
					stdetails.put("additionalsub1mark",
							StringUtils.isBlank(getBengalCollegeOnlineFormBean().getAdditionalSub1Mark()) ? " "
									: getBengalCollegeOnlineFormBean().getAdditionalSub1Mark());
					stdetails.put("obtbiomark",
							StringUtils.isBlank(getBengalCollegeOnlineFormBean().getObtBioMark()) ? " "
									: getBengalCollegeOnlineFormBean().getObtBioMark());
					stdetails.put("additionalsub2mark",
							StringUtils.isBlank(getBengalCollegeOnlineFormBean().getAdditionalSub2Mark()) ? " "
									: getBengalCollegeOnlineFormBean().getAdditionalSub2Mark());

					stdetails.put("obtengmark",
							StringUtils.isBlank(getBengalCollegeOnlineFormBean().getObtEngMark()) ? " "
									: getBengalCollegeOnlineFormBean().getObtEngMark());
					stdetails.put("obtothersubmark",
							StringUtils.isBlank(getBengalCollegeOnlineFormBean().getObtOtherSubMark()) ? " "
									: getBengalCollegeOnlineFormBean().getObtOtherSubMark());
					stdetails.put("otheryearofpass",
							StringUtils.isBlank(getBengalCollegeOnlineFormBean().getOtherYearOfPass()) ? " "
									: getBengalCollegeOnlineFormBean().getOtherYearOfPass());
					stdetails.put("otherboard",
							StringUtils.isBlank(getBengalCollegeOnlineFormBean().getOtherBoard()) ? " "
									: getBengalCollegeOnlineFormBean().getOtherBoard());

					stdetails.put("obtainedothermark",
							StringUtils.isBlank(getBengalCollegeOnlineFormBean().getObtainedOtherMark()) ? " "
									: getBengalCollegeOnlineFormBean().getObtainedOtherMark());
					stdetails.put("percentothermark",
							StringUtils.isBlank(getBengalCollegeOnlineFormBean().getPercentOtherMark()) ? " "
									: getBengalCollegeOnlineFormBean().getPercentOtherMark());
					stdetails.put("amount", Double.parseDouble(FeeDetailsFormBean.getFeeAmount()));
					stdetails.put("passportimagfile",
							getBengalCollegeOnlineFormBean().getPassportImagfileFileName() != null
									? getBengalCollegeOnlineFormBean().getPassportImagfileFileName()
									: " ");

					stdetails.put("passportimagfilefilename",
							getBengalCollegeOnlineFormBean().getPassportImagfileFileName() != null
									? getBengalCollegeOnlineFormBean().getPassportImagfileFileName()
									: " ");
					// stdetails.put("photoproof",getBengalCollegeOnlineFormBean().getPhotoProof());
					// stdetails.put("docimagfile",getBengalCollegeOnlineFormBean().getDocImagfile());
					// stdetails.put("docimagfile"," ");
					stdetails.put("docimagfilefilename",
							getBengalCollegeOnlineFormBean().getDocImagfileFileName() != null
									? getBengalCollegeOnlineFormBean().getDocImagfileFileName()
									: " ");

					stdetails.put("docproof",
							getBengalCollegeOnlineFormBean().getDocProof() != null
									? getBengalCollegeOnlineFormBean().getDocProof()
									: " ");
					stdetails.put("photoproof",
							getBengalCollegeOnlineFormBean().getPhotoProof() != null
									? getBengalCollegeOnlineFormBean().getPhotoProof()
									: " ");
					// stdetails.put("docimagfile"," ");
					// stdetails.put("docimagfilefilename",getBengalCollegeOnlineFormBean().getDocImagfileFileName());

					stdetails.put("pcmpercent",
							StringUtils.isBlank(getBengalCollegeOnlineFormBean().getPcmPercent()) ? " "
									: getBengalCollegeOnlineFormBean().getPcmPercent());
					stdetails.put("pcbpercent",
							StringUtils.isBlank(getBengalCollegeOnlineFormBean().getPcbPercent()) ? " "
									: getBengalCollegeOnlineFormBean().getPcbPercent());
					stdetails.put("docverify",
							getBengalCollegeOnlineFormBean().getDocVerify() != null
									? getBengalCollegeOnlineFormBean().getDocVerify()
									: " ");
					stdetails.put("hostelamount",
							getBengalCollegeOnlineFormBean().getHostelAmount() != null
									? Double.parseDouble(getBengalCollegeOnlineFormBean().getHostelAmount())
									: 0);

					stdetails.put("academicamount",
							getBengalCollegeOnlineFormBean().getAcademicAmount() != null
									? Double.parseDouble(getBengalCollegeOnlineFormBean().getAcademicAmount())
									: 0);
					stdetails.put("feetype", FeeDetailsFormBean.getFeeAmount());

					stdetails.put("payment_details", Double.parseDouble(getBengalCollegeOnlineFormBean().getAmount()));
					stdetails.put("registered_userId", registeredUserId);
					stdetails.put("student_registrationid", "0");
					stdetails.put("application_no", "0");
					stdetails.put("recon_date", formatter.format(date));
					stdetails.put("r_cre_time", formatter.format(date));
					stdetails.put("r_mod_time", formatter.format(date));
					stdetails.put("pg_pmt_status", "A");
					stdetails.put("Acc_Holder_Name", " ");
					stdetails.put("Res_Msg", " ");
					stdetails.put("Payment_Mode", " ");
					stdetails.put("Bank_Name", " ");
					stdetails.put("ALT_ERROR_DESC", " ");
					stdetails.put("Pmt_Id", "");
					stdetails.put("Payment_id", "");
					stdetails.put("PGTxnID", "");
					stdetails.put("BANK_ID", "");
					stdetails.put("Txn_Amt", Double.parseDouble(getBengalCollegeOnlineFormBean().getAmount()));
					/*
					 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
					 * 
					 * String jsonString1=obMapper.writeValueAsString(objNode);
					 * 
					 * logger.info("jsonString1"+jsonString1.toString());
					 */

					objNode.put("form_data", stdetails);

					String jsonString1 = obMapper.writeValueAsString(objNode);

					logger.info("jsonString1" + jsonString1.toString());

					// code added by priya

					/*** *** *** Initialization start *** *** ***/
					SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

					secureAPIBuilder
							.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
					secureAPIBuilder.setUpstreamServerPort(443);

					secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
					secureAPIBuilder.setVerifyServerSSL(false);

					// String clientId = "actual-smarthub-node-ip";
					// String clientKeyStr =
					// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

					// secureAPIBuilder.setAuthenticationAlias(clientId);

					// byte[] clientKey = hexStringToByteArray(clientKeyStr);
					// secureAPIBuilder.setAuthenticationKey(clientKey);

					SecureAPIConnection secureAPI = secureAPIBuilder.build();
					/*** *** *** Initialization complete *** *** ***/

					// CODE END

					Client client = ClientBuilder.newClient();
					/*
					 * WebTarget webTarget =
					 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
					 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
					 * invocationBuilder =
					 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
					 * //commented by priya for form engine
					 * 
					 * Response response =
					 * invocationBuilder.post(Entity.json(jsonString1.toString()));
					 * logger.info("response" + response.toString());
					 */
					APIResponse apiResponse = null;

					apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

					System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
							+ apiResponse.getResponseCode());

					String responseBody = apiResponse.getData().toString();

					logger.info("response" + apiResponse.toString());

					if (apiResponse.getResponseCode() != 201) {
						String outputError = apiResponse.getData().toString();
						JSONObject json = new JSONObject(outputError);
						String messageerror = json.getString("message");
						String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
						messageerror=friendlyMessageFromAPIError;
						logger.info("messageerror"+messageerror);
						addActionMessage(messageerror);
						logger.info("messageerror" + messageerror);
						addActionMessage(messageerror);
						return "bengalfailure";
						// throw new RuntimeException("Failed : HTTP error code : " +
						// response.getStatus());
					}

					logger.info("Output from Server .... \n");
					String output = apiResponse.getData().toString();
					JSONObject json = new JSONObject(output);
					JSONObject data1 = json.getJSONObject("data");
					String formId = data1.getString("form_id");
					logger.info("formId" + formId);

					getUserSessionMap().put("application_id", "SMARTHUB");
					getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
					getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
					getUserSessionMap().put("form_id", formId);

					SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
					smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
					smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
					smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
					smartHubFetchOnlineFormBean.setForm_id(formId);

					String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
					logger.info("jsonString2" + jsonString2);

					/*
					 * WebTarget webTarget1 =
					 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
					 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
					 * Invocation.Builder invocationBuilder1 =
					 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
					 * commented by priya for form engine
					 * 
					 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
					 * logger.info("responseString", response1.toString());
					 */
					// code added by priya form engine
					APIResponse apiResponse1 = null;

					apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

					System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
							+ apiResponse1.getResponseCode());

					logger.info("responseString", apiResponse1.toString());
					if (apiResponse1.getResponseCode() != 200) {
						throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
					}
					logger.info("Output from Server .... \n");
					String output1 = apiResponse1.getData().toString();

					logger.info("output1" + output1);

					JSONObject jsonObject = new JSONObject(output1);

					// JSONArray jsonArray = jsonObject.getJSONArray("message");
					JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");

					JSONObject data = jsonArray.getJSONObject(0);
					JSONObject dataobj = data.getJSONObject("form_data");

					String selectCourse = dataobj.getString("selectcourse");
					String selectSplCourse = dataobj.getString("selectsplcourse");
					String examination = dataobj.getString("examination");
					String examRank = dataobj.getString("examrank");
					String admCategory = dataobj.getString("admcategory");
					String stdName = dataobj.getString("stdname");
					String fatherName = dataobj.getString("fathername");
					String motherName = dataobj.getString("mothername");
					String stdDOB = dataobj.getString("stddOB");
					String gender = dataobj.getString("gender");
					String stdAddress = dataobj.getString("stdaddress");
					String stdCity = dataobj.getString("stdcity");
					String stdStateNew = dataobj.getString("stdstatenew");
					Long stdPinCode = dataobj.getLong("stdpinCode");
					String stdCitizenship = dataobj.getString("stdcitizenship");
					String stdEmailId = dataobj.getString("stdemailid");
					Long stdMobile = dataobj.getLong("stdmobile");
					Long stdAddMobile = dataobj.getLong("stdaddmobile");
					String stdCaste = dataobj.getString("stdcaste");
					String stdCategory = dataobj.getString("stdcategory");
					String sscYearOfPass = dataobj.getString("sscyearofpass");
					String sscBoard = dataobj.getString("sscboard");
					String obtainedSSCMark = dataobj.getString("obtainedsscmark");
					String percentSSCMark = dataobj.getString("percentsscmark");
					String hscYearOfPass = dataobj.getString("hscyearofpass");
					String hscBoard = dataobj.getString("hscboard");
					String hscOthBoard = dataobj.getString("hscothboard");
					String obtainedHSCMark = dataobj.getString("obtainedhscmark");
					String percentHSCMark = dataobj.getString("percenthscmark");
					String obtPhysicsMark = dataobj.getString("obtphysicsmark");
					String compulsorySub1Mark = dataobj.getString("compulsorysub1mark");
					String obtChemistryMark = dataobj.getString("obtchemistrymark");
					String compulsorySub2Mark = dataobj.getString("compulsorysub2mark");
					String obtMathsMark = dataobj.getString("obtmathsmark");
					String additionalSub1Mark = dataobj.getString("additionalsub1mark");
					String obtBioMark = dataobj.getString("obtbiomark");
					String additionalSub2Mark = dataobj.getString("additionalsub2mark");
					String obtEngMark = dataobj.getString("obtengmark");
					String obtOtherSubMark = dataobj.getString("obtothersubmark");
					String otherYearOfPass = dataobj.getString("otheryearofpass");

					String otherBoard = dataobj.getString("otherboard");
					String obtainedOtherMark = dataobj.getString("obtainedothermark");
					String percentOtherMark = dataobj.getString("percentothermark");
					int amount = dataobj.getInt("amount");
					String docProof = dataobj.getString("docproof");
					String photoProof = dataobj.getString("photoproof");
					String pcmPercent = dataobj.getString("pcmpercent");
					String pcbPercent = dataobj.getString("pcbpercent");
					String docVerify = dataobj.getString("docverify");
					int hostelAmount = dataobj.getInt("hostelamount");

					int academicAmount = dataobj.getInt("academicamount");

					String feeType = dataobj.getString("feetype");

					getBengalCollegeOnlineFormBean().setSelectCourse(selectCourse);
					getBengalCollegeOnlineFormBean().setSelectSplCourse(selectSplCourse);
					getBengalCollegeOnlineFormBean().setExamination(examination);
					getBengalCollegeOnlineFormBean().setExamRank(examRank);
					getBengalCollegeOnlineFormBean().setAdmCategory(admCategory);
					getBengalCollegeOnlineFormBean().setStdName(stdName);
					getBengalCollegeOnlineFormBean().setFatherName(fatherName);
					getBengalCollegeOnlineFormBean().setMotherName(motherName);
					getBengalCollegeOnlineFormBean().setStdDOB(stdDOB);
					getBengalCollegeOnlineFormBean().setGender(gender);
					getBengalCollegeOnlineFormBean().setStdAddress(stdAddress);
					getBengalCollegeOnlineFormBean().setStdCity(stdCity);
					getBengalCollegeOnlineFormBean().setStdStateNew(stdStateNew);
					getBengalCollegeOnlineFormBean().setStdPinCode(String.valueOf(stdPinCode));
					getBengalCollegeOnlineFormBean().setStdCategory(stdCategory);
					getBengalCollegeOnlineFormBean().setStdCitizenship(stdCitizenship);
					getBengalCollegeOnlineFormBean().setStdEmailId(stdEmailId);
					getBengalCollegeOnlineFormBean().setStdMobile(String.valueOf(stdMobile));
					getBengalCollegeOnlineFormBean().setStdAddMobile(String.valueOf(stdAddMobile));
					getBengalCollegeOnlineFormBean().setStdCaste(stdCaste);
					getBengalCollegeOnlineFormBean().setSscBoard(sscBoard);
					getBengalCollegeOnlineFormBean().setSscYearOfPass(hscYearOfPass);
					getBengalCollegeOnlineFormBean().setSscOthBoard(hscOthBoard);
					getBengalCollegeOnlineFormBean().setObtainedSSCMark(obtainedSSCMark);
					getBengalCollegeOnlineFormBean().setPercentSSCMark(percentSSCMark);
					getBengalCollegeOnlineFormBean().setHscBoard(hscBoard);
					getBengalCollegeOnlineFormBean().setHscOthBoard(hscOthBoard);
					getBengalCollegeOnlineFormBean().setHscYearOfPass(hscYearOfPass);
					getBengalCollegeOnlineFormBean().setObtainedHSCMark(obtainedHSCMark);
					getBengalCollegeOnlineFormBean().setObtPhysicsMark(obtPhysicsMark);
					getBengalCollegeOnlineFormBean().setPercentHSCMark(percentHSCMark);
					getBengalCollegeOnlineFormBean().setCompulsorySub1Mark(compulsorySub1Mark);
					getBengalCollegeOnlineFormBean().setObtChemistryMark(obtChemistryMark);
					getBengalCollegeOnlineFormBean().setObtMathsMark(obtMathsMark);
					getBengalCollegeOnlineFormBean().setCompulsorySub2Mark(compulsorySub2Mark);
					getBengalCollegeOnlineFormBean().setObtEngMark(obtEngMark);
					getBengalCollegeOnlineFormBean().setObtOtherSubMark(obtOtherSubMark);
					getBengalCollegeOnlineFormBean().setDocProof(docProof);
					getBengalCollegeOnlineFormBean().setPhotoProof(photoProof);
					getBengalCollegeOnlineFormBean().setDocVerify(docVerify);
					getBengalCollegeOnlineFormBean().setAmount(String.valueOf(amount));
					getBengalCollegeOnlineFormBean().setOtherBoard(otherBoard);
					getBengalCollegeOnlineFormBean().setOtherYearOfPass(otherYearOfPass);
					getBengalCollegeOnlineFormBean().setHostelAmount(String.valueOf(hostelAmount));
					getBengalCollegeOnlineFormBean().setAcademicAmount(String.valueOf(academicAmount));
					getBengalCollegeOnlineFormBean().setPcbPercent(pcbPercent);
					getBengalCollegeOnlineFormBean().setPcmPercent(pcmPercent);

					getBengalCollegeOnlineFormBean().setApplicationNo(formId);

					// 5712 DronacharayaGOI Online form Implementation end
					getUserSessionMap().put("ONLINEFORMDATA", getBengalCollegeOnlineFormBean());
				}
				String responseString = studentRegistrationService
						.insertBengalCollegeDetails(getBengalCollegeOnlineFormBean(), billerId);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionError(ErrorPropertyReader.getProperty("failed.to.add.student.data"));
					setStateMapList(loginActionService.getStateMapList());
					return "bengalfailure";
				} else {
					addActionError(getText("error.occured.contact.administrator"));
					setStateMapList(loginActionService.getStateMapList());
					return "bengalfailure";
				}
				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getBengalCollegeOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getBengalCollegeOnlineFormBean().getAmount());
				studentRegistrationFormBean.setStudentId(getBengalCollegeOnlineFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getBengalCollegeOnlineFormBean().getStdName());
				studentRegistrationFormBean.setStudentEmailId(getBengalCollegeOnlineFormBean().getStdEmailId());
				studentRegistrationFormBean.setStudentMobileNumber(getBengalCollegeOnlineFormBean().getStdMobile());
				StudentDataService studentDataService = new StudentDataService();
				List<StudentFeesFormBean> studentFeesList = studentDataService.getStudentFeesDetails(
						studentRegistrationFormBean.getBillerBranchId(), studentRegistrationFormBean.getStrCourse(),
						studentRegistrationFormBean.getStrCourseDetails(),
						studentRegistrationFormBean.getStrCourseType(),
						studentRegistrationFormBean.getStrCoursePattern(),
						studentRegistrationFormBean.getStrCourseTerm(), studentRegistrationFormBean.getStudentId(),
						billerId);
				studentRegistrationFormBean.setStudentFeesList(studentFeesList);
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getBengalCollegeOnlineFormBean().getStudentRegistrationId());

				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				setStateMapList(loginActionService.getStateMapList());
				return "bengalfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}

		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.BENGALCSUCCESS;
	}

	public String YMCAALLRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			getYmcaOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getYmcaOnlineFormBean().getAmount(), getYmcaOnlineFormBean().getPayment())) {
				addStudentPhotosForYMCA(billerId);
				String responseString = studentRegistrationService.insertYMCAAllStudentDetails(getYmcaOnlineFormBean(),
						billerId);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionError(ErrorPropertyReader.getProperty("failed.to.add.student.data"));
				} else {
					addActionError(getText("error.occured.contact.administrator"));
				}
				List eduDetailsList = getYmcaOnlineFormBean().getEduDetailsList();
				int eduListLength = eduDetailsList.size();
				for (int i = 0; i < eduListLength; i++) {
					EducationDetailsFormbean educationDetailsFormbean = (EducationDetailsFormbean) eduDetailsList
							.get(i);
					if (!"".equalsIgnoreCase(educationDetailsFormbean.getQualName())) {
						studentRegistrationService.insertYMCAEducationDetails(educationDetailsFormbean,
								getYmcaOnlineFormBean().getApplicationNo());
					}
				}
				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getYmcaOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getYmcaOnlineFormBean().getAmount());
				studentRegistrationFormBean.setStudentId(getYmcaOnlineFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getYmcaOnlineFormBean().getApplicantName());
				studentRegistrationFormBean.setStudentEmailId(getYmcaOnlineFormBean().getEmailId());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getYmcaOnlineFormBean().getStudentRegistrationId());

				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				addActionMessage("Amount Mismatched..");
				return "ymcaallfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}

		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.YMCASUCCESS;
	}

	public String bseRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			boolean Appfee;
			if (getBseFormBean().getFeepayable() != null && !"".equalsIgnoreCase(getBseFormBean().getFeepayable())) {
				Appfee = AmountValidation(getBseFormBean().getFeepayable(), getBseFormBean().getFeepayablecharges());
			} else {
				getBseFormBean().setFeepayable("0");
				Appfee = true;
			}
			if (Appfee) {
				StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
				String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
				getBseFormBean().setRegisteredUserId(registeredUserId);
				setCourseData((CourseDetailsBean) getUserSessionMap().get("COURSEDATA"));

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				// SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				// Date date1 = sdf.parse(getGnluData().getStdDOB());//have to change
				// Date date2= sdf.parse(getGnluData().getFromDate());
				// Date date3 = sdf.parse(getGnluData().getToDate());
				stdetails.put("name", getBseFormBean().getName());
				stdetails.put("email_id", getBseFormBean().getEmailID());
				stdetails.put("mobile", getBseFormBean().getMobile());
				stdetails.put("centre_name", getBseFormBean().getCentreName());
				stdetails.put("course_applied", getBseFormBean().getCourseApplied());
				stdetails.put("fee_payable", getBseFormBean().getFeepayable());
				// stdetails.put("amount",getNiprOnlineFormBean().getAmount());
				// stdetails.put("txn_amt",Double.parseDouble(getBseFormBean().getAmount()));

				// stdetails.put("registered_userid",getNiprOnlineFormBean().getRegisteredUserId());
				// stdetails.put("student_registrationid",getNiprOnlineFormBean().getStudentRegistrationId());
				// stdetails.put("application_no",getNiprOnlineFormBean().getApplicationNo());
				// stdetails.put("payment_id",getNiprOnlineFormBean().getPayment());
				// stdetails.put("formid",getNiprOnlineFormBean().getFormId());

				// stdetails.put("Txn_Amt",Double.parseDouble(getGnluData().getAmt1()));

				objNode.put("data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				Client client = ClientBuilder.newClient();
				WebTarget webTarget = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH))
						.path("/store-form-data");
				Invocation.Builder invocationBuilder = webTarget
						.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);

				Response response = invocationBuilder.post(Entity.json(jsonString1.toString()));
				logger.info("response" + response.toString());

				if (response.getStatus() != 201) {
					String outputError = response.readEntity(String.class);
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "faliure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = response.readEntity(String.class);
				JSONObject json = new JSONObject(output);
				String formId = json.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH))
						.path("/get-form-data");
				Invocation.Builder invocationBuilder1 = webTarget1
						.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);

				Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				logger.info("responseString", response1.toString());

				if (response1.getStatus() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + response1.getStatus());
				}
				logger.info("Output from Server .... \n");
				String output1 = response1.readEntity(String.class);

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				JSONArray jsonArray = jsonObject.getJSONArray("message");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject data1 = data.getJSONObject("data");

				String stuName = data1.getString("name");
				String stuemailid = data1.getString("email_id");
				String stumobileno = data1.getString("mobile");
				String centername = data1.getString("centre_name");
				String courseapplied = data1.getString("course_applied");
				String feepayable = data1.getString("fee_payable");
				// String amount=data1.getString("txn_amt");
				// String userid=data1.getString("registered_userid");
				// String registrationid=data1.getString("student_registrationid");
				// String applicationno=data1.getString("application_no");
				// String payment=data1.getString("payment_id");
				// String Formid=data1.getString("formid");

				getBseFormBean().setName(stuName);
				getBseFormBean().setMobile(stuemailid);
				getBseFormBean().setEmailID(stumobileno);
				getBseFormBean().setCentreName(centername);
				getBseFormBean().setCourseApplied(courseapplied);
				getBseFormBean().setFeepayable(feepayable);
				// getNiprOnlineFormBean().setAmount(amount);
				// getAppData().setStrID("TEST");
				String responseString = studentRegistrationService.insertBSEStudentDetails(getBseFormBean(), billerId);
				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				}
				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getBseFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getBseFormBean().getFeepayable());
				studentRegistrationFormBean.setStudentId(getBseFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getBseFormBean().getStudentRegistrationId());

				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				return "bsefailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}
		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.BSESUCCESS;
	}

	public String WelhamRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			LoginActionService loginActionService = new LoginActionService();
			String instCode = (String) getUserSessionMap().get("_institutecode");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getWelhamSchoolFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			boolean validAmt = false, miscAmt = false, termAmt = false;
			{
				if (getWelhamSchoolFormBean().getTermFees() != null
						&& !"".equalsIgnoreCase(getWelhamSchoolFormBean().getTermFees())) {
					termAmt = AmountValidation(getWelhamSchoolFormBean().getTermFees(),
							getWelhamSchoolFormBean().getTermPayment());
				} else {
					getWelhamSchoolFormBean().setTermFees("0");
					termAmt = true;
				}
				if (getWelhamSchoolFormBean().getMiscFees() != null
						&& !"".equalsIgnoreCase(getWelhamSchoolFormBean().getMiscFees())) {
					miscAmt = AmountValidation(getWelhamSchoolFormBean().getMiscFees(),
							getWelhamSchoolFormBean().getMiscPayment());
				} else {
					getWelhamSchoolFormBean().setMiscPayment("0");
					miscAmt = true;
				}
				validAmt = termAmt && miscAmt;
			}
			if (validAmt) {
				for (CampionFeesDetailsFormBean FeeDetailsFormBean : welhamSchoolFormBean
						.getCampionFeeDetailsFormBean()) {
					ObjectMapper obMapper = new ObjectMapper();
					ObjectNode objNode = obMapper.createObjectNode();

					InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
							.getInstituteFormDetails(billerId);

					// Object Node declaration
					objNode.put("application_id", "SMARTHUB");
					objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
					objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
					ObjectNode stdetails = obMapper.createObjectNode();

					SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
					Date date = new Date();
					stdetails.put("stdSchoolNo", getWelhamSchoolFormBean().getStdSchoolNo());
					stdetails.put("stdName", getWelhamSchoolFormBean().getStdName());
					stdetails.put("fatherName", getWelhamSchoolFormBean().getFatherName());
					stdetails.put("selectHouse", getWelhamSchoolFormBean().getSelectHouse());
					stdetails.put("stdSchoolNo", getWelhamSchoolFormBean().getStdSchoolNo());
					stdetails.put("houseCategory", getWelhamSchoolFormBean().getHouseCategory());
					stdetails.put("selectClass", getWelhamSchoolFormBean().getSelectClass());
					stdetails.put("selectSection", getWelhamSchoolFormBean().getSelectSection());
					stdetails.put("selectTerm", getWelhamSchoolFormBean().getSelectTerm());
					stdetails.put("termFees", getWelhamSchoolFormBean().getTermFees());
					stdetails.put("miscFees", getWelhamSchoolFormBean().getMiscFees());
					stdetails.put("feesNarration", getWelhamSchoolFormBean().getFeesNarration());

					stdetails.put("stdEmailId", getWelhamSchoolFormBean().getStdEmailId());

					stdetails.put("stdMobile", Long.parseLong(getWelhamSchoolFormBean().getStdMobile()));

					stdetails.put("totalFees", Double.parseDouble(getWelhamSchoolFormBean().getTotalFees()));
					stdetails.put("feeType", FeeDetailsFormBean.getFeeType());

					stdetails.put("payment_details", Double.parseDouble(getWelhamSchoolFormBean().getTotalFees()));
					stdetails.put("registered_userId", registeredUserId);
					stdetails.put("student_registrationid", "0");
					stdetails.put("application_no", "0");
					stdetails.put("recon_date", formatter.format(date));
					stdetails.put("r_cre_time", formatter.format(date));
					stdetails.put("r_mod_time", formatter.format(date));
					stdetails.put("pg_pmt_status", "A");
					stdetails.put("Acc_Holder_Name", " ");
					stdetails.put("Res_Msg", " ");
					stdetails.put("Payment_Mode", " ");
					stdetails.put("Bank_Name", " ");
					stdetails.put("ALT_ERROR_DESC", " ");
					stdetails.put("Pmt_Id", "");
					stdetails.put("Payment_id", "");
					stdetails.put("PGTxnID", "");
					stdetails.put("BANK_ID", "");
					stdetails.put("Txn_Amt", Double.parseDouble(getWelhamSchoolFormBean().getTotalFees()));

					/*
					 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
					 * 
					 * String jsonString1=obMapper.writeValueAsString(objNode);
					 * 
					 * logger.info("jsonString1"+jsonString1.toString());
					 */
					objNode.put("form_data", stdetails);

					String jsonString1 = obMapper.writeValueAsString(objNode);

					logger.info("jsonString1" + jsonString1.toString());

					// code added by priya

					/*** *** *** Initialization start *** *** ***/
					SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

					secureAPIBuilder
							.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
					secureAPIBuilder.setUpstreamServerPort(443);

					secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
					secureAPIBuilder.setVerifyServerSSL(false);

					// String clientId = "actual-smarthub-node-ip";
					// String clientKeyStr =
					// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

					// secureAPIBuilder.setAuthenticationAlias(clientId);

					// byte[] clientKey = hexStringToByteArray(clientKeyStr);
					// secureAPIBuilder.setAuthenticationKey(clientKey);

					SecureAPIConnection secureAPI = secureAPIBuilder.build();
					/*** *** *** Initialization complete *** *** ***/

					// CODE END

					Client client = ClientBuilder.newClient();
					/*
					 * WebTarget webTarget =
					 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
					 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
					 * invocationBuilder =
					 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
					 * commented by priya for form engine
					 * 
					 * Response response =
					 * invocationBuilder.post(Entity.json(jsonString1.toString()));
					 * logger.info("response" + response.toString());
					 */
					APIResponse apiResponse = null;

					apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

					System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
							+ apiResponse.getResponseCode());

					String responseBody = apiResponse.getData().toString();

					logger.info("response" + apiResponse.toString());
					if (apiResponse.getResponseCode() != 201) {
						String outputError = apiResponse.getData().toString();
						JSONObject json = new JSONObject(outputError);
						String messageerror = json.getString("message");
						String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
						messageerror=friendlyMessageFromAPIError;
						logger.info("messageerror"+messageerror);
						addActionMessage(messageerror);
						logger.info("messageerror" + messageerror);
						addActionMessage(messageerror);
						return "welhamfailure";
						// throw new RuntimeException("Failed : HTTP error code : " +
						// response.getStatus());
					}

					logger.info("Output from Server .... \n");
					String output = apiResponse.getData().toString();
					JSONObject json = new JSONObject(output);
					JSONObject data1 = json.getJSONObject("data");
					String formId = data1.getString("form_id");
					logger.info("formId" + formId);

					getUserSessionMap().put("application_id", "SMARTHUB");
					getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
					getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
					getUserSessionMap().put("form_id", formId);

					SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
					smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
					smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
					smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
					smartHubFetchOnlineFormBean.setForm_id(formId);

					String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
					logger.info("jsonString2" + jsonString2);

					/*
					 * WebTarget webTarget1 =
					 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
					 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
					 * Invocation.Builder invocationBuilder1 =
					 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
					 * commented by priya for form engine
					 * 
					 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
					 * logger.info("responseString", response1.toString());
					 */
					// code added by priya form engine
					APIResponse apiResponse1 = null;

					apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

					System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
							+ apiResponse1.getResponseCode());

					logger.info("responseString", apiResponse1.toString());
					if (apiResponse1.getResponseCode() != 200) {
						throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
					}
					logger.info("Output from Server .... \n");
					String output1 = apiResponse1.getData().toString();

					logger.info("output1" + output1);

					JSONObject jsonObject = new JSONObject(output1);

					// JSONArray jsonArray = jsonObject.getJSONArray("message");
					JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");

					JSONObject data = jsonArray.getJSONObject(0);
					JSONObject dataobj = data.getJSONObject("form_data");

					String stdSchoolNo = dataobj.getString("stdSchoolNo");

					String stdName = dataobj.getString("stdName");
					String fatherName = dataobj.getString("fatherName");

					String selectHouse = getWelhamSchoolFormBean().getSelectHouse();
					String stdemailid = dataobj.getString("stdEmailId");
					Long stdMobile = dataobj.getLong("stdMobile");
					int txn_amt = dataobj.getInt("Txn_Amt");

					getWelhamSchoolFormBean().setStdSchoolNo(stdSchoolNo);
					getWelhamSchoolFormBean().setStdEmailId(stdemailid);
					getWelhamSchoolFormBean().setStdName(stdName);
					getWelhamSchoolFormBean().setStdMobile(String.valueOf(stdMobile));
					getWelhamSchoolFormBean().setFatherName(fatherName);
					getWelhamSchoolFormBean().setTotalFees(String.valueOf(txn_amt));
					getWelhamSchoolFormBean().setSelectHouse(selectHouse);
					getWelhamSchoolFormBean().setApplicationNo(formId);
					// END For Form Engine insertion

					// 5712 DronacharayaGOI Online form Implementation end
					getUserSessionMap().put("ONLINEFORMDATA", getWelhamSchoolFormBean());
				}
				String responseString = studentRegistrationService.insertWelhamSchoolDetails(getWelhamSchoolFormBean(),
						billerId);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionError(ErrorPropertyReader.getProperty("failed.to.add.student.data"));
					return "welhamfailure";
				} else {
					addActionError(getText("error.occured.contact.administrator"));
					return "welhamfailure";
				}
				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getWelhamSchoolFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getWelhamSchoolFormBean().getTotalFees());
				studentRegistrationFormBean.setStudentId(getWelhamSchoolFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getWelhamSchoolFormBean().getStdName());
				studentRegistrationFormBean.setStudentEmailId(getWelhamSchoolFormBean().getStdEmailId());
				studentRegistrationFormBean.setStudentMobileNumber(getWelhamSchoolFormBean().getStdMobile());
				StudentDataService studentDataService = new StudentDataService();
				List<StudentFeesFormBean> studentFeesList = studentDataService.getStudentFeesDetails(
						studentRegistrationFormBean.getBillerBranchId(), studentRegistrationFormBean.getStrCourse(),
						studentRegistrationFormBean.getStrCourseDetails(),
						studentRegistrationFormBean.getStrCourseType(),
						studentRegistrationFormBean.getStrCoursePattern(),
						studentRegistrationFormBean.getStrCourseTerm(), studentRegistrationFormBean.getStudentId(),
						billerId);
				studentRegistrationFormBean.setStudentFeesList(studentFeesList);
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getWelhamSchoolFormBean().getStudentRegistrationId());

				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				return "welhamfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}

		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.WELHAMSUCCESS;
	}

	public String NIPRRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getNiprOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

			ObjectMapper obMapper = new ObjectMapper();
			ObjectNode objNode = obMapper.createObjectNode();

			InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
					.getInstituteFormDetails(billerId);

			// Object Node declaration
			objNode.put("application_id", "SMARTHUB");
			objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
			objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
			ObjectNode stdetails = obMapper.createObjectNode();

			SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date date = new Date();

			// SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
			// Date date1 = sdf.parse(getGnluData().getStdDOB());//have to change
			// Date date2= sdf.parse(getGnluData().getFromDate());
			// Date date3 = sdf.parse(getGnluData().getToDate());
			stdetails.put("std_name", getNiprOnlineFormBean().getStdName());
			stdetails.put("std_mobile", getNiprOnlineFormBean().getStdMobile());
			stdetails.put("std_emailid", getNiprOnlineFormBean().getStdEmailId());
			stdetails.put("select_nationallity", getNiprOnlineFormBean().getSelectNationallity());
			stdetails.put("select_paycurrency", getNiprOnlineFormBean().getSelectPayCurrency());
			stdetails.put("select_division", getNiprOnlineFormBean().getSelectDivision());
			// stdetails.put("amount",getNiprOnlineFormBean().getAmount());
			stdetails.put("txn_amt", Double.parseDouble(getNiprOnlineFormBean().getAmount()));

			// stdetails.put("registered_userid",getNiprOnlineFormBean().getRegisteredUserId());
			// stdetails.put("student_registrationid",getNiprOnlineFormBean().getStudentRegistrationId());
			// stdetails.put("application_no",getNiprOnlineFormBean().getApplicationNo());
			// stdetails.put("payment_id",getNiprOnlineFormBean().getPayment());
			// stdetails.put("formid",getNiprOnlineFormBean().getFormId());

			// stdetails.put("Txn_Amt",Double.parseDouble(getGnluData().getAmt1()));

			/*
			 * objNode.put("data",stdetails);
			 * 
			 * String jsonString1=obMapper.writeValueAsString(objNode);
			 * 
			 * logger.info("jsonString1"+jsonString1.toString());
			 */
			objNode.put("form_data", stdetails);

			String jsonString1 = obMapper.writeValueAsString(objNode);

			logger.info("jsonString1" + jsonString1.toString());

			Client client = ClientBuilder.newClient();
			/*
			 * WebTarget webTarget =
			 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
			 * "/store-form-data"); Invocation.Builder invocationBuilder =
			 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
			 * commented by priya for form engine
			 * 
			 * Response response =
			 * invocationBuilder.post(Entity.json(jsonString1.toString()));
			 * logger.info("response" + response.toString());
			 */
			// code added by priya

			/*** *** *** Initialization start *** *** ***/
			SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

			secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
			secureAPIBuilder.setUpstreamServerPort(443);

			secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
			secureAPIBuilder.setVerifyServerSSL(false);

			// String clientId = "actual-smarthub-node-ip";
			// String clientKeyStr =
			// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

			// secureAPIBuilder.setAuthenticationAlias(clientId);

			// byte[] clientKey = hexStringToByteArray(clientKeyStr);
			// secureAPIBuilder.setAuthenticationKey(clientKey);

			SecureAPIConnection secureAPI = secureAPIBuilder.build();
			/*** *** *** Initialization complete *** *** ***/

			// CODE END
			APIResponse apiResponse = null;

			apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

			System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
					+ apiResponse.getResponseCode());

			String responseBody = apiResponse.getData().toString();

			logger.info("response" + apiResponse.toString());
			if (apiResponse.getResponseCode() != 201) {
				String outputError = apiResponse.getData().toString();
				JSONObject json = new JSONObject(outputError);
				String messageerror = json.getString("message");
				String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
				messageerror=friendlyMessageFromAPIError;
				logger.info("messageerror"+messageerror);
				addActionMessage(messageerror);
				logger.info("messageerror" + messageerror);
				addActionMessage(messageerror);
				return "faliure";
				// throw new RuntimeException("Failed : HTTP error code : " +
				// response.getStatus());
			}

			logger.info("Output from Server .... \n");
			String output = apiResponse.getData().toString();
			JSONObject json = new JSONObject(output);
			JSONObject data1 = json.getJSONObject("data");
			String formId = data1.getString("form_id");
			logger.info("formId" + formId);

			getUserSessionMap().put("application_id", "SMARTHUB");
			getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
			getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
			getUserSessionMap().put("form_id", formId);

			SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
			smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
			smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
			smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
			smartHubFetchOnlineFormBean.setForm_id(formId);

			String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
			logger.info("jsonString2" + jsonString2);

			/*
			 * WebTarget webTarget1 =
			 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
			 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
			 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
			 * //commented by priya for form engine
			 * 
			 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
			 * logger.info("responseString", response1.toString());
			 */
			// code added by priya form engine
			APIResponse apiResponse1 = null;

			apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

			System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
					+ apiResponse1.getResponseCode());

			logger.info("responseString", apiResponse1.toString());
			if (apiResponse1.getResponseCode() != 200) {
				throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
			}
			logger.info("Output from Server .... \n");
			String output1 = apiResponse1.getData().toString();

			logger.info("output1" + output1);

			JSONObject jsonObject = new JSONObject(output1);

			JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
			logger.info("jsonArray" + jsonArray);

			JSONObject data = jsonArray.getJSONObject(0);
			JSONObject dataobj = data.getJSONObject("form_data");

			String stuName = dataobj.getString("std_name");
			String stumobileno = dataobj.getString("std_mobile");
			String stuemailid = dataobj.getString("std_emailid");
			String nationality = dataobj.getString("select_nationallity");
			String paycurrency = dataobj.getString("select_paycurrency");
			String division = dataobj.getString("select_division");
			String amount = dataobj.getString("txn_amt");
			// String userid=data1.getString("registered_userid");
			// String registrationid=data1.getString("student_registrationid");
			// String applicationno=data1.getString("application_no");
			// String payment=data1.getString("payment_id");
			// String Formid=data1.getString("formid");

			getNiprOnlineFormBean().setStdName(stuName);
			getNiprOnlineFormBean().setStdMobile(stumobileno);
			getNiprOnlineFormBean().setStdEmailId(stuemailid);
			getNiprOnlineFormBean().setSelectNationallity(nationality);
			getNiprOnlineFormBean().setSelectPayCurrency(paycurrency);
			getNiprOnlineFormBean().setSelectDivision(division);
			getNiprOnlineFormBean().setAmount(amount);
			// getNiprOnlineFormBean().setRegisteredUserId(userid);
			// getNiprOnlineFormBean().setStudentRegistrationId(registrationid);
			// getNiprOnlineFormBean().setApplicationNo(applicationno);
			// getNiprOnlineFormBean().setPayment(payment);
			// getNiprOnlineFormBean().setFormId(Formid);

			// END For Form Engine insertion

			// 5712 DronacharayaGOI Online form Implementation end
			// getUserSessionMap().put("GNLUONLINEFORMDATA",getGnluData());
			// String responseString = studentRegistrationService
			// .insertGNLUStudentDetails(getGnluData(),billerId);
			// logger.info("GNLU GOI RegisterStudent :" + responseString);
			/* getAppData().setStrID("TEST"); */
			// addStudentPhotos();
			// String responseString =
			// studentRegistrationService.insertGNLUStudentDetails(getGnluData());

			// getAppData().setStrID("TEST");
			String actualAmt = studentRegistrationService.getNIPRAmount(getNiprOnlineFormBean().getSelectDivision(),
					getNiprOnlineFormBean().getSelectPayCurrency(), "20-08-2016");

			if (AmountValidation(getNiprOnlineFormBean().getAmount(), getNiprOnlineFormBean().getPayment())
					&& AmountValidation(actualAmt, getNiprOnlineFormBean().getPayment())
					&& actualAmt.equalsIgnoreCase(getNiprOnlineFormBean().getAmount())) {
				String responseString = studentRegistrationService.insertNIPRStudentDetails(getNiprOnlineFormBean(),
						billerId);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "niprFailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "niprFailure";
				}
				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getNiprOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getNiprOnlineFormBean().getAmount());
				studentRegistrationFormBean.setStudentId(getNiprOnlineFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getNiprOnlineFormBean().getStdName());
				studentRegistrationFormBean.setStudentEmailId(getNiprOnlineFormBean().getStdEmailId());
				studentRegistrationFormBean.setCurrency(getNiprOnlineFormBean().getSelectPayCurrency());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getNiprOnlineFormBean().getStudentRegistrationId());

				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				addActionMessage("Amount Mismatched.");
				return "niprFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}

		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.NIPRSUCCESS;
	}

	public String algoRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			boolean Appfee, CourseFee, ServiceTax, SBC, KKC, SGST, CGST;
			if (getCandEntryForm().getAmount() != null && !"".equalsIgnoreCase(getCandEntryForm().getAmount())) {
				Appfee = AmountValidation(getCandEntryForm().getAmount(), getCandEntryForm().getPayment());
			} else {
				getCandEntryForm().setAmount("0");
				Appfee = true;
			}
			if (getCandEntryForm().getCourseFeesAmt() != null
					&& !"".equalsIgnoreCase(getCandEntryForm().getCourseFeesAmt())) {
				CourseFee = AmountValidation(getCandEntryForm().getCourseFeesAmt(), getCandEntryForm().getCourseFees());
			} else {
				getCandEntryForm().setCourseFeesAmt("0");
				CourseFee = true;
			}
			if (getCandEntryForm().getServiceTaxAmt() != null
					&& !"".equalsIgnoreCase(getCandEntryForm().getServiceTaxAmt())) {
				ServiceTax = AmountValidation(getCandEntryForm().getServiceTaxAmt(),
						getCandEntryForm().getServiceTax());
			} else {
				getCandEntryForm().setServiceTaxAmt("0");
				ServiceTax = true;
			}
			if (getCandEntryForm().getSBCAmt() != null && !"".equalsIgnoreCase(getCandEntryForm().getSBCAmt())) {
				SBC = AmountValidation(getCandEntryForm().getSBCAmt(), getCandEntryForm().getSBC());
			} else {
				getCandEntryForm().setSBCAmt("0");
				SBC = true;
			}
			if (getCandEntryForm().getKKCAmt() != null && !"".equalsIgnoreCase(getCandEntryForm().getKKCAmt())) {
				KKC = AmountValidation(getCandEntryForm().getKKCAmt(), getCandEntryForm().getKKC());
			} else {
				getCandEntryForm().setKKC("0");
				KKC = true;
			}
			if (getCandEntryForm().getSgstTaxAmt() != null
					&& !"".equalsIgnoreCase(getCandEntryForm().getSgstTaxAmt())) {
				SGST = AmountValidation(getCandEntryForm().getSgstTaxAmt(), getCandEntryForm().getSgst());
			} else {
				getCandEntryForm().setSgst("0");
				SGST = true;
			}
			if (getCandEntryForm().getCgstTaxAmt() != null
					&& !"".equalsIgnoreCase(getCandEntryForm().getCgstTaxAmt())) {
				CGST = AmountValidation(getCandEntryForm().getCgstTaxAmt(), getCandEntryForm().getCgst());
			} else {
				getCandEntryForm().setCgst("0");
				CGST = true;
			}

			if (Appfee && CourseFee && ServiceTax && SBC && KKC && SGST && CGST) {
				StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
				String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
				getCandEntryForm().setRegisteredUserId(registeredUserId);
				setCourseData((CourseDetailsBean) getUserSessionMap().get("COURSEDATA"));
				getAppData().setStrID("TEST");
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();
				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

				Date date1 = sdf.parse(getCandEntryForm().getFromDate());
				Date date2 = sdf.parse(getCandEntryForm().getToDate());
				stdetails.put("selectindonum", getCandEntryForm().getSelectIndoNum());
				stdetails.put("indonum", getCandEntryForm().getIndoNum() != "" ? getCandEntryForm().getIndoNum() : " ");
				stdetails.put("booknum", getCandEntryForm().getBookNum() != "" ? getCandEntryForm().getBookNum() : " ");

				stdetails.put("firstname", getCandEntryForm().getFirstName());
				stdetails.put("middlename", getCandEntryForm().getMiddleName());

				stdetails.put("lastname", getCandEntryForm().getLastName());
				stdetails.put("rank", getCandEntryForm().getRank() != "" ? getCandEntryForm().getRank() : " ");

				stdetails.put("companyname",
						getCandEntryForm().getCompanyName() != "" ? getCandEntryForm().getCompanyName() : " ");
				stdetails.put("countrycode", getCandEntryForm().getCountryCode());

				stdetails.put("mobileno", Long.parseLong(getCandEntryForm().getMobileNo()));
				stdetails.put("emailid", getCandEntryForm().getEmailId());

				stdetails.put("selectcoursetype",
						getCandEntryForm().getSelectCourseType() != null ? getCandEntryForm().getSelectCourseType()
								: " ");
				stdetails.put("selectdgcoursename",
						getCandEntryForm().getSelectDGCourseNameaemd() != null
								? getCandEntryForm().getSelectDGCourseNameaemd()
								: " ");

				stdetails.put("selectdgcourseid",
						getCandEntryForm().getSelectDGCourseIdaemd() != null
								? getCandEntryForm().getSelectDGCourseIdaemd()
								: " ");
				stdetails.put("selectnondgcoursename",
						getCandEntryForm().getSelectNonDGCourseNameaemd() != null
								? getCandEntryForm().getSelectNonDGCourseNameaemd()
								: " ");

				stdetails.put("selectnondgcourseid",
						getCandEntryForm().getSelectNonDGCourseIdaemd() != null
								? getCandEntryForm().getSelectNonDGCourseIdaemd()
								: " ");

				stdetails.put("selectcoursetypemumbai",
						getCandEntryForm().getSelectCourseTypeMumbai() != null
								? getCandEntryForm().getSelectCourseTypeMumbai()
								: " ");

				stdetails.put("selectdgcoursenamemumbai",
						getCandEntryForm().getSelectDGCourseNameMumbai() != null
								? getCandEntryForm().getSelectDGCourseNameMumbai()
								: " ");

				stdetails.put("selectdgcourseidmumbaieaeam",
						getCandEntryForm().getSelectDGCourseIdMumbaiaemm() != null
								? getCandEntryForm().getSelectDGCourseIdMumbaiaemm()
								: " ");

				stdetails.put("selectnondgcoursenamemumbaieaeam",
						getCandEntryForm().getSelectNonDGCourseNameMumbaiaemm() != null
								? getCandEntryForm().getSelectNonDGCourseNameMumbaiaemm()
								: " ");

				stdetails.put("selectnondgcourseidmumbaieaeam",
						getCandEntryForm().getSelectNonDGCourseIdMumbaiaemm() != null
								? getCandEntryForm().getSelectNonDGCourseIdMumbaiaemm()
								: " ");

				stdetails.put("selectcoursenameableaeam",
						getCandEntryForm().getSelectCourseNameAbleaeam() != null
								? getCandEntryForm().getSelectCourseNameAbleaeam()
								: " ");

				stdetails.put("selectcourseidableaeam",
						getCandEntryForm().getSelectCourseIdAble() != null ? getCandEntryForm().getSelectCourseIdAble()
								: " ");

				stdetails.put("selectcoursenameable",
						getCandEntryForm().getSelectCourseNameAbleaeam() != null
								? getCandEntryForm().getSelectCourseNameAbleaeam()
								: " ");

				stdetails.put("fromdate", formatter.format(date1));

				stdetails.put("todate", formatter.format(date2));
				stdetails.put("selectcourselocation",
						getCandEntryForm().getSelectCourseLocation() != null
								? getCandEntryForm().getSelectCourseLocation()
								: " ");

				stdetails.put("amount", Double.parseDouble(getCandEntryForm().getAmount()));

				stdetails.put("coursefees", Double.parseDouble(getCandEntryForm().getCourseFeesAmt()));
				stdetails.put("servicetax", getCandEntryForm().getServiceTaxAmt());
				stdetails.put("sbc", getCandEntryForm().getSBCAmt() != null ? getCandEntryForm().getSBCAmt() : " ");
				stdetails.put("kkc", getCandEntryForm().getKKCAmt() != null ? getCandEntryForm().getKKCAmt() : " ");
				stdetails.put("sgsttaxamt", getCandEntryForm().getSgstTaxAmt());
				stdetails.put("cgsttaxamt", getCandEntryForm().getCgstTaxAmt());
				stdetails.put("nationalid",
						getCandEntryForm().getNationalID() != "" ? getCandEntryForm().getNationalID() : " ");
				stdetails.put("bomid", getCandEntryForm().getBomId() != "" ? getCandEntryForm().getBomId() : " ");

				stdetails.put("payment_details", Double.parseDouble(getCandEntryForm().getAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getCandEntryForm().getAmount()));

				/*
				 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
				 * 
				 * String jsonString1=obMapper.writeValueAsString(objNode);
				 * 
				 * logger.info("jsonString1"+jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "faliure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				// JSONArray jsonArray = jsonObject.getJSONArray("message");
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String selectindonum1 = dataobj.getString("selectindonum");

				String indonum = dataobj.getString("indonum");
				String booknum = dataobj.getString("booknum");

				String firstname = dataobj.getString("firstname");

				String middlename = dataobj.getString("middlename");

				String lastname = dataobj.getString("lastname");

				String rank = dataobj.getString("rank");

				String companyname = dataobj.getString("companyname");

				String countrycode = dataobj.getString("countrycode");

				Long mobileno = dataobj.getLong("mobileno");

				String emailid = dataobj.getString("emailid");

				String selectcoursetype = dataobj.getString("selectcoursetype");

				String selectdgcoursename = dataobj.getString("selectdgcoursename");

				String selectdgcourseid = dataobj.getString("selectdgcourseid");

				String selectnondgcoursename = dataobj.getString("selectnondgcoursename");

				String selectnondgcourseid = dataobj.getString("selectnondgcourseid");

				String selectcoursetypemumbai = dataobj.getString("selectcoursetypemumbai");

				String selectdgcoursenamemumbai = dataobj.getString("selectdgcoursenamemumbai");

				String selectdgcourseidmumbaieaeam = dataobj.getString("selectdgcourseidmumbaieaeam");

				String selectnondgcoursenamemumbaieaeam = dataobj.getString("selectnondgcoursenamemumbaieaeam");

				String selectnondgcourseidmumbaieaeam = dataobj.getString("selectnondgcourseidmumbaieaeam");

				String selectcoursenameableaeam = dataobj.getString("selectcoursenameableaeam");

				String selectcourseidableaeam = dataobj.getString("selectcourseidableaeam");

				String selectcoursenameable = dataobj.getString("selectcoursenameable");

				String fromdate = dataobj.getString("fromdate");
				String todate = dataobj.getString("todate");

				String selectcourselocation = dataobj.getString("selectcourselocation");
				int amount = dataobj.getInt("amount");

				int coursefees = dataobj.getInt("coursefees");
				String servicetax = dataobj.getString("servicetax");

				String sbc = dataobj.getString("sbc");
				String kkc = dataobj.getString("kkc");

				String sgsttaxamt = dataobj.getString("sgsttaxamt");
				String cgsttaxamt = dataobj.getString("cgsttaxamt");

				String nationalid = dataobj.getString("nationalid");
				String bomid = dataobj.getString("bomid");

				getCandEntryForm().setSelectIndoNum(selectindonum1);
				getCandEntryForm().setIndoNum(indonum);
				getCandEntryForm().setBookNum(booknum);
				getCandEntryForm().setFirstName(firstname);
				getCandEntryForm().setMiddleName(middlename);
				getCandEntryForm().setLastName(lastname);
				getCandEntryForm().setRank(rank);
				getCandEntryForm().setCompanyName(companyname);
				getCandEntryForm().setCountryCode(countrycode);
				getCandEntryForm().setMobileNo(String.valueOf(mobileno));
				getCandEntryForm().setEmailId(emailid);
				getCandEntryForm().setSelectCourseType(selectcoursetype);
				getCandEntryForm().setSelectDGCourseNameaemd(selectdgcoursename);
				getCandEntryForm().setSelectDGCourseIdaemd(selectdgcourseid);
				getCandEntryForm().setSelectNonDGCourseNameaemd(selectnondgcoursename);
				getCandEntryForm().setSelectNonDGCourseIdaemd(selectnondgcourseid);
				getCandEntryForm().setSelectCourseTypeMumbai(selectcoursetypemumbai);
				getCandEntryForm().setSelectDGCourseIdMumbaiaemm(selectdgcourseidmumbaieaeam);
				getCandEntryForm().setSelectNonDGCourseNameMumbaiaemm(selectnondgcoursenamemumbaieaeam);

				getCandEntryForm().setSelectNonDGCourseIdMumbaiaemm(selectdgcourseidmumbaieaeam);
				getCandEntryForm().setSelectCourseNameAbleaeam(selectdgcoursenamemumbai);

				getCandEntryForm().setFromDate(fromdate);
				getCandEntryForm().setToDate(todate);

				getCandEntryForm().setSelectCourseLocation(selectcourselocation);
				getCandEntryForm().setCourseFeesAmt(String.valueOf(coursefees));

				getCandEntryForm().setServiceTaxAmt(servicetax);
				getCandEntryForm().setSBCAmt(sbc);

				getCandEntryForm().setKKCAmt(kkc);
				getCandEntryForm().setCgstTaxAmt(sgsttaxamt);

				getCandEntryForm().setSgstTaxAmt(cgsttaxamt);

				getCandEntryForm().setNationalID(nationalid);

				getCandEntryForm().setBomId(bomid);

				getCandEntryForm().setAmount(String.valueOf(amount));
				getCandEntryForm().setApplicationNo(formId);
				// END For Form Engine insertion

				// 5712 DronacharayaGOI Online form Implementation end
				getUserSessionMap().put("ONLINEFORMDATA", getCandEntryForm());
				String responseString = studentRegistrationService.insertAlgotudentDetails(getCandEntryForm(),
						billerId);
				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				}
				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getCandEntryForm().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getCandEntryForm().getAmount());
				/*
				 * studentRegistrationFormBean.setTotalPayableFees(getCandEntryForm().
				 * getCourseFeesAmt());
				 * studentRegistrationFormBean.setTotalPayableFees(getCandEntryForm().
				 * getServiceTaxAmt());
				 * studentRegistrationFormBean.setTotalPayableFees(getCandEntryForm().getSBCAmt(
				 * ));
				 * studentRegistrationFormBean.setTotalPayableFees(getCandEntryForm().getKKCAmt(
				 * ));
				 */
				studentRegistrationFormBean.setStudentId(getCandEntryForm().getApplicationNo());
				studentRegistrationFormBean.setStudentEmailId(getCandEntryForm().getEmailId());
				studentRegistrationFormBean.setStudentMobileNumber(getCandEntryForm().getMobileNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getCandEntryForm().getStudentRegistrationId());

				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				return "angloFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}

		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.ANGLOSUCCESS;
	}

	public String MGRRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getMgrMedicalOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getMgrMedicalOnlineFormBean().getTotalAmount(),
					getMgrMedicalOnlineFormBean().getPayment())) {

				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);
				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();
				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				// Getters atarted...
				stdetails.put("totalamount", Double.parseDouble(getMgrMedicalOnlineFormBean().getTotalAmount()));
				stdetails.put("payment", getMgrMedicalOnlineFormBean().getPayment());
				stdetails.put("initials", getMgrMedicalOnlineFormBean().getInitials());
				stdetails.put("stdname", getMgrMedicalOnlineFormBean().getStdName());
				stdetails.put("stdmobile", Long.parseLong(getMgrMedicalOnlineFormBean().getStdMobile()));
				stdetails.put("stdemailid", getMgrMedicalOnlineFormBean().getStdEmailId());
				stdetails.put("stdaddress", getMgrMedicalOnlineFormBean().getStdAddress());
				stdetails.put("stdregistrationno",
						StringUtils.isBlank(getMgrMedicalOnlineFormBean().getStdRegistrationNo()) ? " "
								: getMgrMedicalOnlineFormBean().getStdRegistrationNo());
				stdetails.put("stdinstname", StringUtils.isBlank(getMgrMedicalOnlineFormBean().getStdInstName()) ? " "
						: getMgrMedicalOnlineFormBean().getStdInstName());
				getMgrMedicalOnlineFormBean().getFeeHeadList().removeAll(Collections.singleton(null));
				int feeHeadListLength = getMgrMedicalOnlineFormBean().getFeeHeadList().size();
				ArrayNode arrayNode = obMapper.createArrayNode();

				for (int i = 0; i < feeHeadListLength; i++) {
					FeeHeadFormbean feeHeadFormbean = (FeeHeadFormbean) getMgrMedicalOnlineFormBean().getFeeHeadList()
							.get(i);
					if (feeHeadFormbean != null) {
						if (!feeHeadFormbean.getStdFeeName().equalsIgnoreCase("")
								&& !feeHeadFormbean.getStdtotalAmt().equalsIgnoreCase("")
								&& !feeHeadFormbean.getNumberOfCopies().equalsIgnoreCase("")
								&& !feeHeadFormbean.getEachStdAmt().equalsIgnoreCase("")) {
							// studentRegistrationService.insertFeeHeadDetails(feeHeadFormbean,getMgrMedicalOnlineFormBean().getApplicationNo());

							ObjectNode objNode1 = obMapper.createObjectNode();

							// studentRegistrationService.insertHaryanaEducationDetails(educationHaryanaFormBean,getHaryanaFormBean().getApplicationNo());
							objNode1.put("stdfeename", feeHeadFormbean.getStdFeeName());
							objNode1.put("stdtotalamt", feeHeadFormbean.getStdtotalAmt());
							objNode1.put("numberofcopies", feeHeadFormbean.getNumberOfCopies());
							objNode1.put("eachstdamt", feeHeadFormbean.getEachStdAmt());

							arrayNode.add(objNode1);

						}
					}
				}
				stdetails.put("tags", arrayNode);
				stdetails.put("payment_details", Double.parseDouble(getMgrMedicalOnlineFormBean().getTotalAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getMgrMedicalOnlineFormBean().getTotalAmount()));

				stdetails.put("cardholdername", getMgrMedicalOnlineFormBean().getCardHolderName());
				stdetails.put("pincode", Long.parseLong(getMgrMedicalOnlineFormBean().getPincode()));

				// Calling API...
				/*
				 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
				 * String jsonString1 = obMapper.writeValueAsString(objNode);
				 * logger.info("jsonString1" + jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();

				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * //COMMENTED by priya forform engine invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE); Response
				 * response = invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				// API Response status verification ...
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "MGRMedicalfailure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * //commented by priya for form engine Response response1 =
				 * invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				// JSONArray jsonArray = jsonObject.getJSONArray("message");
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				int totalamount = dataobj.getInt("totalamount");
				String payment = dataobj.getString("payment");
				String initials = dataobj.getString("initials");
				String stdname = dataobj.getString("stdname");
				Long stdmobile = dataobj.getLong("stdmobile");
				String stdemailid = dataobj.getString("stdemailid");
				String stdaddress = dataobj.getString("stdaddress");

				// Calling all Setter methods
				getMgrMedicalOnlineFormBean().setTotalAmount(String.valueOf(totalamount));
				getMgrMedicalOnlineFormBean().setPayment(payment);
				getMgrMedicalOnlineFormBean().setInitials(initials);
				getMgrMedicalOnlineFormBean().setStdName(stdname);
				getMgrMedicalOnlineFormBean().setStdMobile(String.valueOf(stdmobile));
				getMgrMedicalOnlineFormBean().setStdEmailId(stdemailid);
				getMgrMedicalOnlineFormBean().setStdAddress(stdaddress);

				getMgrMedicalOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getMgrMedicalOnlineFormBean());

				String responseString = studentRegistrationService
						.insertMGRStudentDetails(getMgrMedicalOnlineFormBean(), billerId);
				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "mgrFailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "mgrFailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getMgrMedicalOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getMgrMedicalOnlineFormBean().getTotalAmount());
				studentRegistrationFormBean.setStudentId(getMgrMedicalOnlineFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getMgrMedicalOnlineFormBean().getStdName());
				studentRegistrationFormBean.setStudentEmailId(getMgrMedicalOnlineFormBean().getStdEmailId());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getMgrMedicalOnlineFormBean().getStudentRegistrationId());

				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				addActionMessage("Amount Mismatched.");
				return "mgrFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}

		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.MGRSUCCESS;
	}

	public String UGIRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getUgiOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getUgiOnlineFormBean().getTotalAmount(), getUgiOnlineFormBean().getPayment())) {
				String responseString = studentRegistrationService.insertUGIStudentDetails(getUgiOnlineFormBean(),
						billerId);

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				// SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				// Date date1 = sdf.parse(getGnluData().getStdDOB());//have to change
				// Date date2= sdf.parse(getGnluData().getFromDate());
				// Date date3 = sdf.parse(getGnluData().getToDate());
				stdetails.put("college", getUgiOnlineFormBean().getCollege());
				stdetails.put("student_id", getUgiOnlineFormBean().getStudentId());
				stdetails.put("student_name", getUgiOnlineFormBean().getStudentName());
				stdetails.put("course", getUgiOnlineFormBean().getCourse());
				stdetails.put("num_of_years", getUgiOnlineFormBean().getNumofYears());
				stdetails.put("years", getUgiOnlineFormBean().getYears());
				stdetails.put("chktution_fee", getUgiOnlineFormBean().getChkTutionFee());
				stdetails.put("tution_fee", getUgiOnlineFormBean().getTutionFee());
				stdetails.put("chkbus_fee", getUgiOnlineFormBean().getChkBusFee());
				stdetails.put("bus_fee", getUgiOnlineFormBean().getBusFee());
				stdetails.put("chkhostel_fee", getUgiOnlineFormBean().getChkHostelFee());
				stdetails.put("hostel_fee", getUgiOnlineFormBean().getHostelFee());
				stdetails.put("chkcaution_money", getUgiOnlineFormBean().getChkCautionMoney());
				stdetails.put("caution_money", getUgiOnlineFormBean().getCautionMoney());
				stdetails.put("chkothers_fees", getUgiOnlineFormBean().getChkOthersFees());
				stdetails.put("others_fees", getUgiOnlineFormBean().getOthersFees());
				stdetails.put("total_amount", getUgiOnlineFormBean().getTotalAmount());

				stdetails.put("payment", getUgiOnlineFormBean().getPayment());
				stdetails.put("total_amount_in_words", getUgiOnlineFormBean().getTotalAmountinWords());
				stdetails.put("admission_fee", getUgiOnlineFormBean().getAdmissionFee());
				stdetails.put("exam_fee", getUgiOnlineFormBean().getExamFee());
				stdetails.put("pract_fee", getUgiOnlineFormBean().getPractFee());
				stdetails.put("std_mobileno", getUgiOnlineFormBean().getStdMobileNo());
				stdetails.put("email_id", getUgiOnlineFormBean().getEmailId());
				stdetails.put("select_branch", getUgiOnlineFormBean().getSelectBranch());

				// stdetails.put("amount",getNiprOnlineFormBean().getAmount());
				// stdetails.put("txn_amt",Double.parseDouble(getBseFormBean().getAmount()));

				// stdetails.put("registered_userid",getNiprOnlineFormBean().getRegisteredUserId());
				// stdetails.put("student_registrationid",getNiprOnlineFormBean().getStudentRegistrationId());
				// stdetails.put("application_no",getNiprOnlineFormBean().getApplicationNo());
				// stdetails.put("payment_id",getNiprOnlineFormBean().getPayment());
				// stdetails.put("formid",getNiprOnlineFormBean().getFormId());

				// stdetails.put("Txn_Amt",Double.parseDouble(getGnluData().getAmt1()));

				/*
				 * objNode.put("data",stdetails);
				 * 
				 * String jsonString1=obMapper.writeValueAsString(objNode);
				 * 
				 * logger.info("jsonString1"+jsonString1.toString());
				 */

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "faliure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String Clg = dataobj.getString("college");
				String stu_id = dataobj.getString("student_id");
				String stu_name = dataobj.getString("student_name");
				String course = dataobj.getString("course");
				String num_of_years = dataobj.getString("num_of_years");
				String years = dataobj.getString("years");
				String chk_tution_fee = dataobj.getString("chktution_fee");
				String tution_fee = dataobj.getString("tution_fee");
				String chk_bus_fee = dataobj.getString("chkbus_fee");
				String bus_fee = dataobj.getString("bus_fee");
				String chk_hostel_fee = dataobj.getString("chkhostel_fee");
				String hostel_fee = dataobj.getString("hostel_fee");
				String chk_cution_money = dataobj.getString("chkcaution_money");
				String cution_money = dataobj.getString("caution_money");
				// String feepayable=data1.getString("chkothers_fees");
				String chk_other_fee = dataobj.getString("chkothers_fees");
				String other_fee = dataobj.getString("others_fees");
				String total_amount = dataobj.getString("total_amount");
				String payment = dataobj.getString("payment");
				String total_amount_in_words = dataobj.getString("total_amount_in_words");
				String admissionfee = dataobj.getString("admission_fee");
				String examfee = dataobj.getString("exam_fee");
				String pracfee = dataobj.getString("pract_fee");
				String mobileno = dataobj.getString("std_mobileno");
				String emailid = dataobj.getString("email_id");
				String branch = dataobj.getString("select_branch");

				// String amount=data1.getString("txn_amt");
				// String userid=data1.getString("registered_userid");
				// String registrationid=data1.getString("student_registrationid");
				// String applicationno=data1.getString("application_no");
				// String payment=data1.getString("payment_id");
				// String Formid=data1.getString("formid");

				getUgiOnlineFormBean().setCollege(Clg);
				getUgiOnlineFormBean().setStudentId(stu_id);
				getUgiOnlineFormBean().setStudentName(stu_name);
				getUgiOnlineFormBean().setCourse(course);
				getUgiOnlineFormBean().setNumofYears(num_of_years);
				getUgiOnlineFormBean().setYears(years);
				getUgiOnlineFormBean().setChkTutionFee(chk_tution_fee);
				getUgiOnlineFormBean().setTutionFee(tution_fee);
				getUgiOnlineFormBean().setChkBusFee(chk_bus_fee);
				getUgiOnlineFormBean().setBusFee(bus_fee);
				getUgiOnlineFormBean().setChkHostelFee(chk_hostel_fee);
				getUgiOnlineFormBean().setHostelFee(hostel_fee);
				getUgiOnlineFormBean().setChkCautionMoney(chk_cution_money);
				getUgiOnlineFormBean().setCautionMoney(cution_money);
				getUgiOnlineFormBean().setChkOthersFees(chk_other_fee);
				getUgiOnlineFormBean().setOthersFees(other_fee);
				getUgiOnlineFormBean().setTotalAmount(total_amount);
				getUgiOnlineFormBean().setPayment(payment);
				getUgiOnlineFormBean().setTotalAmountinWords(total_amount_in_words);
				getUgiOnlineFormBean().setAdmissionFee(admissionfee);
				getUgiOnlineFormBean().setExamFee(examfee);

				getUgiOnlineFormBean().setPractFee(pracfee);
				getUgiOnlineFormBean().setStdMobileNo(mobileno);
				getUgiOnlineFormBean().setEmailId(emailid);
				getUgiOnlineFormBean().setSelectBranch(branch);

				// getNiprOnlineFormBean().setAmount(amount);
				// getAppData().setStrID("TEST");

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "ugiFailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "ugiFailure";
				}
				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getUgiOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getUgiOnlineFormBean().getTotalAmount());
				studentRegistrationFormBean.setStudentId(getUgiOnlineFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getUgiOnlineFormBean().getStudentName());
				studentRegistrationFormBean.setStudentEmailId(getUgiOnlineFormBean().getEmailId());
				studentRegistrationFormBean.setStudentMobileNumber(getUgiOnlineFormBean().getStdMobileNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getUgiOnlineFormBean().getStudentRegistrationId());

				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				addActionMessage("Amount Mismatched.");
				return "ugiFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}

		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.UGISUCCESS;
	}

	public String PMHPRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getUgiOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getUgiOnlineFormBean().getTotalAmount(), getUgiOnlineFormBean().getPayment())) {
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				stdetails.put("college",
						getUgiOnlineFormBean().getCollege() != null ? getUgiOnlineFormBean().getCollege() : " ");
				stdetails.put("student_id", getUgiOnlineFormBean().getStudentId());
				stdetails.put("student_name", getUgiOnlineFormBean().getStudentName());
				stdetails.put("course",
						getUgiOnlineFormBean().getCourse() != null ? getUgiOnlineFormBean().getCourse() : " ");
				stdetails.put("num_of_years",
						getUgiOnlineFormBean().getNumofYears() != null ? getUgiOnlineFormBean().getNumofYears() : " ");
				stdetails.put("years",
						getUgiOnlineFormBean().getYears() != null ? getUgiOnlineFormBean().getYears() : " ");
				stdetails.put("chktution_fee", getUgiOnlineFormBean().getChkTutionFee() == null ? "N"
						: getUgiOnlineFormBean().getChkTutionFee());
				stdetails.put("tution_fee",
						getUgiOnlineFormBean().getTutionFee() != null
								? Double.parseDouble(getUgiOnlineFormBean().getTutionFee())
								: 0);
				stdetails.put("chkbus_fee",
						getUgiOnlineFormBean().getChkBusFee() == null ? "N" : getUgiOnlineFormBean().getChkBusFee());
				stdetails.put("bus_fee",
						getUgiOnlineFormBean().getBusFee() != null
								? Double.parseDouble(getUgiOnlineFormBean().getBusFee())
								: 0);
				stdetails.put("chkhostel_fee", getUgiOnlineFormBean().getChkHostelFee() == null ? "N"
						: getUgiOnlineFormBean().getChkHostelFee());
				stdetails.put("hostel_fee",
						getUgiOnlineFormBean().getHostelFee() != null
								? Double.parseDouble(getUgiOnlineFormBean().getHostelFee())
								: 0);
				/*
				 * stdetails.put("chkcaution_money",getUgiOnlineFormBean().getChkCautionMoney()!
				 * =null?Double.parseDouble(getUgiOnlineFormBean().getChkCautionMoney()):0);
				 * stdetails.put("caution_money",getUgiOnlineFormBean().getCautionMoney()!=null?
				 * Double.parseDouble(getUgiOnlineFormBean().getCautionMoney()):0);
				 */
				stdetails.put("chkothers_fees",
						getUgiOnlineFormBean().getChkOthersFees() != null
								? Double.parseDouble(getUgiOnlineFormBean().getChkOthersFees())
								: 0);
				stdetails.put("others_fees",
						getUgiOnlineFormBean().getOthersFees() != null
								? Double.parseDouble(getUgiOnlineFormBean().getOthersFees())
								: 0);
				stdetails.put("total_amount", Double.parseDouble(getUgiOnlineFormBean().getTotalAmount()));

				stdetails.put("payment", getUgiOnlineFormBean().getPayment());
				stdetails.put("total_amount_in_words", getUgiOnlineFormBean().getTotalAmountinWords());
				stdetails.put("admission_fee",
						getUgiOnlineFormBean().getAdmissionFee() != null
								? Double.parseDouble(getUgiOnlineFormBean().getAdmissionFee())
								: 0);
				stdetails.put("exam_fee",
						getUgiOnlineFormBean().getExamFee() != null
								? Double.parseDouble(getUgiOnlineFormBean().getExamFee())
								: 0);
				stdetails.put("pract_fee",
						getUgiOnlineFormBean().getPractFee() != null
								? Double.parseDouble(getUgiOnlineFormBean().getPractFee())
								: 0);
				/*
				 * stdetails.put("std_mobileno",Long.parseLong(getUgiOnlineFormBean().
				 * getStdMobileNo()));
				 * stdetails.put("email_id",getUgiOnlineFormBean().getEmailId());
				 */
				// stdetails.put("select_branch",getUgiOnlineFormBean().getSelectBranch()!=null?getUgiOnlineFormBean().getSelectBranch():"
				// ");
				stdetails.put("txn_amt", Double.parseDouble(getUgiOnlineFormBean().getTotalAmount()));
				stdetails.put("payment_details", Double.parseDouble(getUgiOnlineFormBean().getTotalAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getUgiOnlineFormBean().getTotalAmount()));

				/*
				 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
				 * 
				 * String jsonString1=obMapper.writeValueAsString(objNode);
				 * 
				 * logger.info("jsonString1"+jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * //commented by priya for form engine
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "faliure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				// JSONArray jsonArray = jsonObject.getJSONArray("message");
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String Clg = dataobj.getString("college");
				String stu_id = dataobj.getString("student_id");
				String stu_name = dataobj.getString("student_name");
				String course = dataobj.getString("course");
				String num_of_years = dataobj.getString("num_of_years");
				String years = dataobj.getString("years");
				String chk_tution_fee = dataobj.getString("chktution_fee");
				int tution_fee = dataobj.getInt("tution_fee");
				String chk_bus_fee = dataobj.getString("chkbus_fee");
				int bus_fee = dataobj.getInt("bus_fee");
				String chk_hostel_fee = dataobj.getString("chkhostel_fee");
				int hostel_fee = dataobj.getInt("hostel_fee");
				/*
				 * String chk_cution_money=data1.getString("chkcaution_money"); int
				 * cution_money=data1.getInt("caution_money");
				 */
				/*
				 * int chk_other_fee=data1.getInt("chkothers_fees"); int
				 * other_fee=data1.getInt("others_fees");
				 */
				int total_amount = dataobj.getInt("total_amount");
				int payment = dataobj.getInt("payment_details");
				String total_amount_in_words = dataobj.getString("total_amount_in_words");
				int admissionfee = dataobj.getInt("admission_fee");
				int examfee = dataobj.getInt("exam_fee");
				int pracfee = dataobj.getInt("pract_fee");
				/*
				 * Long mobileno=data1.getLong("std_mobileno"); String
				 * emailid=data1.getString("email_id"); String
				 * branch=data1.getString("select_branch");
				 */

				getUgiOnlineFormBean().setCollege(Clg);
				getUgiOnlineFormBean().setStudentId(stu_id);
				getUgiOnlineFormBean().setStudentName(stu_name);
				getUgiOnlineFormBean().setCourse(course);
				getUgiOnlineFormBean().setNumofYears(num_of_years);
				getUgiOnlineFormBean().setYears(years);
				getUgiOnlineFormBean().setChkTutionFee(String.valueOf(chk_tution_fee));
				getUgiOnlineFormBean().setTutionFee(String.valueOf(tution_fee));
				getUgiOnlineFormBean().setChkBusFee(String.valueOf(chk_bus_fee));
				getUgiOnlineFormBean().setBusFee(String.valueOf(bus_fee));
				getUgiOnlineFormBean().setChkHostelFee(String.valueOf(chk_hostel_fee));
				getUgiOnlineFormBean().setHostelFee(String.valueOf(hostel_fee));
				/*
				 * getUgiOnlineFormBean().setChkCautionMoney(String.valueOf(chk_cution_money));
				 * getUgiOnlineFormBean().setCautionMoney(String.valueOf(cution_money));
				 */
				/*
				 * getUgiOnlineFormBean().setChkOthersFees(String.valueOf(chk_other_fee));
				 * getUgiOnlineFormBean().setOthersFees(String.valueOf(other_fee));
				 */
				getUgiOnlineFormBean().setTotalAmount(String.valueOf(total_amount));
				getUgiOnlineFormBean().setPayment(String.valueOf(payment));
				getUgiOnlineFormBean().setTotalAmountinWords(total_amount_in_words);
				getUgiOnlineFormBean().setAdmissionFee(String.valueOf(admissionfee));
				getUgiOnlineFormBean().setExamFee(String.valueOf(examfee));

				getUgiOnlineFormBean().setPractFee(String.valueOf(pracfee));
				/*
				 * getUgiOnlineFormBean().setStdMobileNo(String.valueOf(mobileno));
				 * getUgiOnlineFormBean().setEmailId(emailid);
				 * getUgiOnlineFormBean().setSelectBranch(branch);
				 */
				getUgiOnlineFormBean().setApplicationNo(formId);

				getUserSessionMap().put("ONLINEFORMDATA", getUgiOnlineFormBean());

				String responseString = studentRegistrationService.insertPMHPStudentDetails(getUgiOnlineFormBean(),
						billerId);
				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "pmhpFailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "pmhpFailure";
				}
				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getUgiOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getUgiOnlineFormBean().getTotalAmount());
				studentRegistrationFormBean.setStudentId(getUgiOnlineFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getUgiOnlineFormBean().getStudentName());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getUgiOnlineFormBean().getStudentRegistrationId());

				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				addActionMessage("Amount Mismatched.");
				return "pmhpFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}

		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.PMHPSUCCESS;
	}

	public String DOONRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getDoonOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");

			ObjectMapper obMapper = new ObjectMapper();
			ObjectNode objNode = obMapper.createObjectNode();

			InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
					.getInstituteFormDetails(billerId);

			// Object Node declaration
			objNode.put("application_id", "SMARTHUB");
			objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
			objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
			ObjectNode stdetails = obMapper.createObjectNode();

			SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date date = new Date();

			// SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
			// Date date1 = sdf.parse(getGnluData().getStdDOB());//have to change
			// Date date2= sdf.parse(getGnluData().getFromDate());
			// Date date3 = sdf.parse(getGnluData().getToDate());
			stdetails.put("full_name", getDoonOnlineFormBean().getFullName());
			stdetails.put("address", getDoonOnlineFormBean().getAddress());
			stdetails.put("country", getDoonOnlineFormBean().getCountry());
			stdetails.put("state", getDoonOnlineFormBean().getState());
			stdetails.put("city", getDoonOnlineFormBean().getCity());
			stdetails.put("postal_code", getDoonOnlineFormBean().getPostalCode());
			stdetails.put("mobile_no", getDoonOnlineFormBean().getMobileNo());
			stdetails.put("phone_no", getDoonOnlineFormBean().getPhoneNo());
			stdetails.put("email_id", getDoonOnlineFormBean().getEmailId());
			// stdetails.put("fee_headlist",
			// getMgrMedicalOnlineFormBean().getFeeHeadList());
			stdetails.put("pan_no", getDoonOnlineFormBean().getPanNo());
			stdetails.put("fund_type", getDoonOnlineFormBean().getFundType());
			stdetails.put("house", getDoonOnlineFormBean().getHouse());
			stdetails.put("donate_amount", getDoonOnlineFormBean().getDonateAmount());
			stdetails.put("payment", getDoonOnlineFormBean().getPayment());
			stdetails.put("college", getDoonOnlineFormBean().getCollege());
			stdetails.put("class1", getDoonOnlineFormBean().getClass1());
			stdetails.put("school_no", getDoonOnlineFormBean().getSchoolno());
			stdetails.put("country_code", getDoonOnlineFormBean().getCountryCode());
			stdetails.put("remark", getDoonOnlineFormBean().getRemark());
			stdetails.put("class_year", getDoonOnlineFormBean().getClassyear());
			stdetails.put("nationality", getDoonOnlineFormBean().getNationality());
			stdetails.put("currency", getDoonOnlineFormBean().getCurrency());
			stdetails.put("currency_text", getDoonOnlineFormBean().getCurrencyText());

			// stdetails.put("amount",getNiprOnlineFormBean().getAmount());
			// stdetails.put("txn_amt",Double.parseDouble(getBseFormBean().getAmount()));

			// stdetails.put("registered_userid",getNiprOnlineFormBean().getRegisteredUserId());
			// stdetails.put("student_registrationid",getNiprOnlineFormBean().getStudentRegistrationId());
			// stdetails.put("application_no",getNiprOnlineFormBean().getApplicationNo());
			// stdetails.put("payment_id",getNiprOnlineFormBean().getPayment());
			// stdetails.put("formid",getNiprOnlineFormBean().getFormId());

			// stdetails.put("Txn_Amt",Double.parseDouble(getGnluData().getAmt1()));

			/*
			 * objNode.put("data",stdetails);
			 * 
			 * String jsonString1=obMapper.writeValueAsString(objNode);
			 * 
			 * logger.info("jsonString1"+jsonString1.toString());
			 */
			objNode.put("form_data", stdetails);

			String jsonString1 = obMapper.writeValueAsString(objNode);

			logger.info("jsonString1" + jsonString1.toString());
			// code added by priya

			/*** *** *** Initialization start *** *** ***/
			SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

			secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
			secureAPIBuilder.setUpstreamServerPort(443);

			secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
			secureAPIBuilder.setVerifyServerSSL(false);

			// String clientId = "actual-smarthub-node-ip";
			// String clientKeyStr =
			// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

			// secureAPIBuilder.setAuthenticationAlias(clientId);

			// byte[] clientKey = hexStringToByteArray(clientKeyStr);
			// secureAPIBuilder.setAuthenticationKey(clientKey);

			SecureAPIConnection secureAPI = secureAPIBuilder.build();
			/*** *** *** Initialization complete *** *** ***/

			// CODE END
			Client client = ClientBuilder.newClient();
			/*
			 * WebTarget webTarget =
			 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
			 * "/store-form-data"); Invocation.Builder invocationBuilder =
			 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
			 * COMMENTED by priya for form engine
			 * 
			 * Response response =
			 * invocationBuilder.post(Entity.json(jsonString1.toString()));
			 * logger.info("response" + response.toString());
			 */
			APIResponse apiResponse = null;

			apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

			System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
					+ apiResponse.getResponseCode());

			String responseBody = apiResponse.getData().toString();

			logger.info("response" + apiResponse.toString());
			if (apiResponse.getResponseCode() != 201) {
				String outputError = apiResponse.getData().toString();
				JSONObject json = new JSONObject(outputError);
				String messageerror = json.getString("message");
				String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
				messageerror=friendlyMessageFromAPIError;
				logger.info("messageerror"+messageerror);
				addActionMessage(messageerror);
				logger.info("messageerror" + messageerror);
				addActionMessage(messageerror);
				return "faliure";
				// throw new RuntimeException("Failed : HTTP error code : " +
				// response.getStatus());
			}

			logger.info("Output from Server .... \n");
			String output = apiResponse.getData().toString();
			JSONObject json = new JSONObject(output);
			JSONObject data1 = json.getJSONObject("data");
			String formId = data1.getString("form_id");
			logger.info("formId" + formId);

			getUserSessionMap().put("application_id", "SMARTHUB");
			getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
			getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
			getUserSessionMap().put("form_id", formId);

			SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
			smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
			smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
			smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
			smartHubFetchOnlineFormBean.setForm_id(formId);

			String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
			logger.info("jsonString2" + jsonString2);

			/*
			 * WebTarget webTarget1 =
			 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
			 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
			 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
			 * //commented by priya for form engine
			 * 
			 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
			 * logger.info("responseString", response1.toString());
			 */
			// code added by priya form engine
			APIResponse apiResponse1 = null;

			apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

			System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
					+ apiResponse1.getResponseCode());

			logger.info("responseString", apiResponse1.toString());
			if (apiResponse1.getResponseCode() != 200) {
				throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
			}
			logger.info("Output from Server .... \n");
			String output1 = apiResponse1.getData().toString();

			logger.info("output1" + output1);

			JSONObject jsonObject = new JSONObject(output1);

			JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
			logger.info("jsonArray" + jsonArray);

			JSONObject data = jsonArray.getJSONObject(0);
			JSONObject dataobj = data.getJSONObject("form_data");

			String fullname = dataobj.getString("full_name");
			String address = dataobj.getString("address");
			String country = dataobj.getString("country");
			String state = dataobj.getString("state");
			String city = dataobj.getString("city");
			String postalcode = dataobj.getString("postal_code");
			String mobileno = dataobj.getString("mobile_no");
			String phoneno = dataobj.getString("phone_no");
			String emailid = dataobj.getString("email_id");
			String panno = dataobj.getString("pan_no");
			String fundtype = dataobj.getString("fund_type");
			String house = dataobj.getString("house");
			String donateamount = dataobj.getString("donate_amount");
			String payment = dataobj.getString("payment");
			String college = dataobj.getString("college");
			String class1 = dataobj.getString("class1");
			String schoolno = dataobj.getString("school_no");
			String countrycode = dataobj.getString("country_code");
			String remark = dataobj.getString("remark");
			String classyear = dataobj.getString("class_year");
			String nationality = dataobj.getString("nationality");
			String currency = dataobj.getString("currency");
			String currencytext = dataobj.getString("currency_text");

			// String amount=data1.getString("txn_amt");
			// String userid=data1.getString("registered_userid");
			// String registrationid=data1.getString("student_registrationid");
			// String applicationno=data1.getString("application_no");
			// String payment=data1.getString("payment_id");
			// String Formid=data1.getString("formid");

			getDoonOnlineFormBean().setFullName(fullname);
			getDoonOnlineFormBean().setAddress(address);
			getDoonOnlineFormBean().setCountry(country);
			getDoonOnlineFormBean().setState(state);
			getDoonOnlineFormBean().setCity(city);
			getDoonOnlineFormBean().setPostalCode(postalcode);
			getDoonOnlineFormBean().setMobileNo(mobileno);
			getDoonOnlineFormBean().setPhoneNo(phoneno);
			getDoonOnlineFormBean().setEmailId(emailid);
			getDoonOnlineFormBean().setPanNo(panno);
			getDoonOnlineFormBean().setFundType(fundtype);
			getDoonOnlineFormBean().setHouse(house);
			getDoonOnlineFormBean().setDonateAmount(donateamount);
			getDoonOnlineFormBean().setPayment(payment);
			getDoonOnlineFormBean().setCollege(college);
			getDoonOnlineFormBean().setClass1(class1);
			getDoonOnlineFormBean().setSchoolno(schoolno);
			getDoonOnlineFormBean().setCountryCode(countrycode);
			getDoonOnlineFormBean().setRemark(remark);
			getDoonOnlineFormBean().setClassyear(classyear);
			getDoonOnlineFormBean().setNationality(nationality);
			getDoonOnlineFormBean().setCurrency(currency);
			getDoonOnlineFormBean().setCurrencyText(currencytext);

			// getNiprOnlineFormBean().setAmount(amount);
			// getAppData().setStrID("TEST");
			if (AmountValidation(getDoonOnlineFormBean().getDonateAmount(), getDoonOnlineFormBean().getPayment())) {
				String responseString = studentRegistrationService.insertDOONStudentDetails(getDoonOnlineFormBean(),
						billerId);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "doonFailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "doonFailure";
				}
				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getDoonOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getDoonOnlineFormBean().getDonateAmount());
				studentRegistrationFormBean.setStudentId(getDoonOnlineFormBean().getApplicationNo());
				String studIDandName = "";// getDoonOnlineFormBean().getStudentName()+"::"+getDoonOnlineFormBean().getStudentId();
				logger.info("StudentName:------------**StudentName***------------------------" + studIDandName);
				studentRegistrationFormBean.setStudentName(studIDandName);
				studentRegistrationFormBean.setStudentEmailId(getDoonOnlineFormBean().getEmailId());
				studentRegistrationFormBean.setCurrency(getDoonOnlineFormBean().getCurrency());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getDoonOnlineFormBean().getStudentRegistrationId());

				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				addActionMessage("Amount Mismatched.");
				return "doonFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}

		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.DOONSUCCESS;
	}

	public String JRSTRegistration() {
	    if (!super.isValidSession()) {
	        return INVALID_SESSION;
	    }
	    try {
	        logger.info("---------------------------------------------------------");
	        logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
	        logger.info("---------------------------------------------------------");       
	        String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
	        String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
	        logger.info("registeredUserId.."+registeredUserId);
	        getJrstOnlineFormBean().setRegisteredUserId(registeredUserId);
	        StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
	        getAppData().setStrID("TEST");
	        if(AmountValidation(getJrstOnlineFormBean().getAmount(),getJrstOnlineFormBean().getPaymentAmount()))
	        {
	        	

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

				//Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name",instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id",instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();
				
				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
				Date date = new Date();  
				stdetails.put("stdname",getJrstOnlineFormBean().getStdName());
				stdetails.put("stdid",getJrstOnlineFormBean().getStdId());
				
				stdetails.put("stdmobileno", Long.parseLong(getJrstOnlineFormBean().getStdMobileNo()));
				stdetails.put("emailid",getJrstOnlineFormBean().getEmailId());
				stdetails.put("course",getJrstOnlineFormBean().getCourse());
				stdetails.put("batch",getJrstOnlineFormBean().getBatch());
				stdetails.put("remarks",StringUtils.isBlank(getJrstOnlineFormBean().getRemarks())?" ":getJrstOnlineFormBean().getRemarks());
				stdetails.put("totalamount",Double.parseDouble(getJrstOnlineFormBean().getTotalAmount()));
				stdetails.put("servicetaxamt",Double.parseDouble(getJrstOnlineFormBean().getServiceTaxAmt()));
				stdetails.put("selectfeestype",getJrstOnlineFormBean().getSelectFeesType());
				stdetails.put("payment_details",Double.parseDouble(getJrstOnlineFormBean().getTotalAmount()));
				stdetails.put("registered_userId",registeredUserId);
				stdetails.put("student_registrationid","0");
				stdetails.put("application_no","0");
				stdetails.put("recon_date",formatter.format(date));
				stdetails.put("r_cre_time",formatter.format(date));
				stdetails.put("r_mod_time",formatter.format(date));
				stdetails.put("pg_pmt_status","A");
				stdetails.put("Acc_Holder_Name"," ");
				stdetails.put("Res_Msg"," ");
				stdetails.put("Payment_Mode"," ");
				stdetails.put("Bank_Name"," ");
				stdetails.put("ALT_ERROR_DESC"," ");
				stdetails.put("Pmt_Id","");
				stdetails.put("Payment_id","");
				stdetails.put("PGTxnID","");
				stdetails.put("BANK_ID","");
				stdetails.put("Txn_Amt",Double.parseDouble(getJrstOnlineFormBean().getTotalAmount()));

				objNode.put("form_data",stdetails);

				String jsonString1=obMapper.writeValueAsString(objNode);

				logger.info("jsonString1"+jsonString1.toString());
				
				
				//code added by priya 
				
				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				String clientId = "actual-smarthub-node-ip";
				String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				secureAPIBuilder.setAuthenticationAlias(clientId);

				byte[] clientKey = hexStringToByteArray(clientKeyStr);
				secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

	           //CODE END 

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				
				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: " + apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();
				
				logger.info("response" + apiResponse.toString());
				
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					return "faliure";
					//throw new RuntimeException("Failed : HTTP error code : " + response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1= json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId"+formId);
				
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name",instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id",instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id",formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				
				String  jsonString2=obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2"+jsonString2);

				/*WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				
				Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				logger.info("responseString", response1.toString());*/
				
				//code added by priya form engine
				APIResponse apiResponse1 = null;

				
				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: " + apiResponse1.getResponseCode());

					

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();
				
				
				logger.info("output1"+output1);
				
				JSONObject jsonObject = new JSONObject(output1);
				
				////JSONArray jsonArray = jsonObject.getJSONArray("message"); 
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");

				JSONObject data=jsonArray.getJSONObject(0);
				JSONObject dataobj=data.getJSONObject("form_data");
				String stdname=dataobj.getString("stdname");
				String stdid=dataobj.getString("stdid");
				String emailid=dataobj.getString("emailid");
				String remarks=dataobj.getString("remarks");
				int amount=dataobj.getInt("amount");
				Long stdmobileno=dataobj.getLong("stdmobileno");
				
				getJrstOnlineFormBean().setStdName(stdname);
				getJrstOnlineFormBean().setStdId(stdid);
				getJrstOnlineFormBean().setEmailId(emailid);
				getJrstOnlineFormBean().setStdMobileNo(String.valueOf(stdmobileno));
				getJrstOnlineFormBean().setAmount(String.valueOf(amount));
				getJrstOnlineFormBean().setApplicationNo(formId);
				//END For Form Engine insertion
				
				//5712 DronacharayaGOI Online form Implementation end
				getUserSessionMap().put("ONLINEFORMDATA",getJrstOnlineFormBean());
	       	String responseString = studentRegistrationService.insertJRSTStudentDetails(getJrstOnlineFormBean(),billerId);
	        
	        if (responseString != null && !"".equalsIgnoreCase(responseString) && "success".equalsIgnoreCase(responseString)) {
	            addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
	        }else if ("NA".equalsIgnoreCase(responseString)){
	        	addActionMessage("Failed to add student data.");
	       	return ERROR;
	        }else {         
	        	addActionMessage("Error occured contact administrator.");
	            return ERROR;
	        }
		         studentRegistrationFormBean = super.getRegisteredStudentDetails(getJrstOnlineFormBean().getStudentRegistrationId());
		         studentRegistrationFormBean.setTotalPayableFees(getJrstOnlineFormBean().getAmount());
		         studentRegistrationFormBean.setStudentId(getJrstOnlineFormBean().getApplicationNo());
		         studentRegistrationFormBean.setStudentName(getJrstOnlineFormBean().getStdName());
		         studentRegistrationFormBean.setStudentEmailId(getJrstOnlineFormBean().getEmailId());
		         super.applyFees(studentRegistrationFormBean);

		         QuickPayAction quickPayAction = new QuickPayAction();
		         appData1 = new PaymentRequestBean();
		         appData1.setStudentRegistrationId(getJrstOnlineFormBean().getStudentRegistrationId());            
		         
		         quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean,feesPayList);
		   
		         getUserSessionMap().put("APPDATA", getAppData1()); 
	        }else{
	        	addActionMessage("Amount Mismatched.");
	        	return ERROR;
	        }
	    } catch (Exception e) {
	       logger.error("Exception  " +e);
	        return ERROR;
	    }

	    String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
	    strPaymentType = "Online Payment";
	    //strPaymentMode = "Cash";            
	    instituteConfigBean=new InstituteMasterActionService().getInstituteConfigDetails(billerId);
	    if(instituteConfigBean.getExtraCharges().equals("Y"))
	    {
	    feesPayChargesFormBean= new PaymentService().getPaymentCharges(billerId);
	       
	    getUserSessionMap().put("_feesPayChargesFormBean",feesPayChargesFormBean);
	    }
	    getUserSessionMap().put("_instituteConfigBean",instituteConfigBean);  
	    
	    return super.JRSTSUCCESS;
	}

	public String MGCRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getMgcOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");

			ObjectMapper obMapper = new ObjectMapper();
			ObjectNode objNode = obMapper.createObjectNode();
			InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
					.getInstituteFormDetails(billerId);

			// Object Node declaration
			objNode.put("application_id", "SMARTHUB");
			objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
			objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
			ObjectNode stdetails = obMapper.createObjectNode();

			SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date date = new Date();

			// SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
			// Date date1 = sdf.parse(getGnluData().getStdDOB());//have to change
			// Date date2= sdf.parse(getGnluData().getFromDate());
			// Date date3 = sdf.parse(getGnluData().getToDate());
			stdetails.put("student_id", getMgcOnlineFormBean().getStudentId());
			stdetails.put("student_name", getMgcOnlineFormBean().getStudentName());
			stdetails.put("father_name", getMgcOnlineFormBean().getFatherName());
			stdetails.put("course", getMgcOnlineFormBean().getCourse());
			// stdetails.put("email", getKaushalyaFormBean().getEmailID());
			stdetails.put("years", getMgcOnlineFormBean().getYears());
			stdetails.put("semester", getMgcOnlineFormBean().getSemester());
			stdetails.put("university_name", getMgcOnlineFormBean().getUniversityName());
			stdetails.put("std_mobileno", getMgcOnlineFormBean().getStdMobileNo());
			// stdetails.put("fee_headlist",
			// getMgrMedicalOnlineFormBean().getFeeHeadList());
			stdetails.put("emailid", getMgcOnlineFormBean().getEmailId());
			stdetails.put("coursefee", getMgcOnlineFormBean().getCourseFee());
			stdetails.put("examfee", getMgcOnlineFormBean().getExamFee());
			stdetails.put("totalamount", getMgcOnlineFormBean().getTotalAmount());
			stdetails.put("payment", getMgcOnlineFormBean().getPayment());

			// stdetails.put("amount",getNiprOnlineFormBean().getAmount());
			// stdetails.put("txn_amt",Double.parseDouble(getBseFormBean().getAmount()));

			// stdetails.put("registered_userid",getNiprOnlineFormBean().getRegisteredUserId());
			// stdetails.put("student_registrationid",getNiprOnlineFormBean().getStudentRegistrationId());
			// stdetails.put("application_no",getNiprOnlineFormBean().getApplicationNo());
			// stdetails.put("payment_id",getNiprOnlineFormBean().getPayment());
			// stdetails.put("formid",getNiprOnlineFormBean().getFormId());

			// stdetails.put("Txn_Amt",Double.parseDouble(getGnluData().getAmt1()));

			/*
			 * objNode.put("data",stdetails);
			 * 
			 * String jsonString1=obMapper.writeValueAsString(objNode);
			 * 
			 * logger.info("jsonString1"+jsonString1.toString());
			 */
			objNode.put("form_data", stdetails);

			String jsonString1 = obMapper.writeValueAsString(objNode);

			logger.info("jsonString1" + jsonString1.toString());

			// code added by priya

			/*** *** *** Initialization start *** *** ***/
			SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

			secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
			secureAPIBuilder.setUpstreamServerPort(443);

			secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
			secureAPIBuilder.setVerifyServerSSL(false);

			// String clientId = "actual-smarthub-node-ip";
			// String clientKeyStr =
			// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

			// secureAPIBuilder.setAuthenticationAlias(clientId);

			// byte[] clientKey = hexStringToByteArray(clientKeyStr);
			// secureAPIBuilder.setAuthenticationKey(clientKey);

			SecureAPIConnection secureAPI = secureAPIBuilder.build();
			/*** *** *** Initialization complete *** *** ***/

			// CODE END

			Client client = ClientBuilder.newClient();
			/*
			 * WebTarget webTarget =
			 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
			 * "/store-form-data"); Invocation.Builder invocationBuilder =
			 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
			 * commented by priya for form engine
			 * 
			 * Response response =
			 * invocationBuilder.post(Entity.json(jsonString1.toString()));
			 * logger.info("response" + response.toString());
			 */
			APIResponse apiResponse = null;

			apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

			System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
					+ apiResponse.getResponseCode());

			String responseBody = apiResponse.getData().toString();

			logger.info("response" + apiResponse.toString());
			if (apiResponse.getResponseCode() != 201) {
				String outputError = apiResponse.getData().toString();
				JSONObject json = new JSONObject(outputError);
				String messageerror = json.getString("message");
				String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
				messageerror=friendlyMessageFromAPIError;
				logger.info("messageerror"+messageerror);
				addActionMessage(messageerror);
				logger.info("messageerror" + messageerror);
				addActionMessage(messageerror);
				return "faliure";
				// throw new RuntimeException("Failed : HTTP error code : " +
				// response.getStatus());
			}

			logger.info("Output from Server .... \n");
			String output = apiResponse.getData().toString();
			JSONObject json = new JSONObject(output);
			JSONObject data1 = json.getJSONObject("data");
			String formId = data1.getString("form_id");
			logger.info("formId" + formId);

			getUserSessionMap().put("application_id", "SMARTHUB");
			getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
			getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
			getUserSessionMap().put("form_id", formId);

			SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
			smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
			smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
			smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
			smartHubFetchOnlineFormBean.setForm_id(formId);

			String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
			logger.info("jsonString2" + jsonString2);

			/*
			 * WebTarget webTarget1 =
			 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
			 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
			 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
			 * commented by priya for form engine
			 * 
			 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
			 * logger.info("responseString", response1.toString());
			 */
			// code added by priya form engine
			APIResponse apiResponse1 = null;

			apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

			System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
					+ apiResponse1.getResponseCode());

			logger.info("responseString", apiResponse1.toString());
			if (apiResponse1.getResponseCode() != 200) {
				throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
			}
			logger.info("Output from Server .... \n");
			String output1 = apiResponse1.getData().toString();

			logger.info("output1" + output1);

			JSONObject jsonObject = new JSONObject(output1);

			JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
			logger.info("jsonArray" + jsonArray);

			JSONObject data = jsonArray.getJSONObject(0);
			JSONObject dataobj = data.getJSONObject("form_data");

			String studentid = dataobj.getString("student_id");
			String studentname = dataobj.getString("student_name");
			String fathername = dataobj.getString("father_name");
			String course = dataobj.getString("course");
			String years = dataobj.getString("years");
			String semester = dataobj.getString("semester");
			String universityname = dataobj.getString("university_name");

			String stdmobileno = dataobj.getString("std_mobileno");
			String emailid = dataobj.getString("emailid");
			String coursefee = dataobj.getString("coursefee");
			String examfee = dataobj.getString("examfee");
			String totalamount = dataobj.getString("totalamount");
			String payment = dataobj.getString("payment");

			// String amount=data1.getString("txn_amt");
			// String userid=data1.getString("registered_userid");
			// String registrationid=data1.getString("student_registrationid");
			// String applicationno=data1.getString("application_no");
			// String payment=data1.getString("payment_id");
			// String Formid=data1.getString("formid");

			getMgcOnlineFormBean().setStudentId(studentid);
			getMgcOnlineFormBean().setStudentName(studentname);
			getMgcOnlineFormBean().setFatherName(fathername);
			getMgcOnlineFormBean().setCourse(course);
			// getKaushalyaFormBean().setEmailID(email);
			// getDotuOnlineFormBean().setCourse(email);
			getMgcOnlineFormBean().setYears(years);
			getMgcOnlineFormBean().setSemester(semester);
			getMgcOnlineFormBean().setUniversityName(universityname);
			// getKaushalyaFormBean().setDevelopmentfees(feeheadlist);
			getMgcOnlineFormBean().setStdMobileNo(stdmobileno);
			// getDotuOnlineFormBean().setFloorno(feeheadlist);
			getMgcOnlineFormBean().setEmailId(emailid);
			getMgcOnlineFormBean().setCourseFee(coursefee);
			getMgcOnlineFormBean().setExamFee(examfee);

			getMgcOnlineFormBean().setTotalAmount(totalamount);
			getMgcOnlineFormBean().setPayment(payment);

			// getNiprOnlineFormBean().setAmount(amount);
			// getAppData().setStrID("TEST");
			if (AmountValidation(getMgcOnlineFormBean().getTotalAmount(), getMgcOnlineFormBean().getPayment())) {
				String responseString = studentRegistrationService.insertMGCStudentDetails(getMgcOnlineFormBean(),
						billerId);
				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "mgcFailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "mgcFailure";
				}
				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getMgcOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getMgcOnlineFormBean().getTotalAmount());
				studentRegistrationFormBean.setStudentId(getMgcOnlineFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getMgcOnlineFormBean().getStudentName());
				studentRegistrationFormBean.setStudentEmailId(getMgcOnlineFormBean().getEmailId());
				studentRegistrationFormBean.setStudentMobileNumber(getMgcOnlineFormBean().getStdMobileNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getMgcOnlineFormBean().getStudentRegistrationId());

				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				addActionMessage("Amount Mismatched.");
				return "mgcFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}

		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.MGCSUCCESS;
	}

	public String DOTURegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("--------------Inside DOTURegistration() START-------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getDotuOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			ObjectMapper obMapper = new ObjectMapper();
			ObjectNode objNode = obMapper.createObjectNode();
			InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
					.getInstituteFormDetails(billerId);

			// Object Node declaration
			objNode.put("application_id", "SMARTHUB");
			objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
			objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
			ObjectNode stdetails = obMapper.createObjectNode();

			SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date date = new Date();

			// SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
			// Date date1 = sdf.parse(getGnluData().getStdDOB());//have to change
			// Date date2= sdf.parse(getGnluData().getFromDate());
			// Date date3 = sdf.parse(getGnluData().getToDate());
			stdetails.put("fee_type", getDotuOnlineFormBean().getFeeType());
			stdetails.put("specify", getDotuOnlineFormBean().getSpecify());
			stdetails.put("std_name", getDotuOnlineFormBean().getStdName());
			stdetails.put("school_number", getDotuOnlineFormBean().getSchoolNumber());
			// stdetails.put("email", getKaushalyaFormBean().getEmailID());
			stdetails.put("select_form", getDotuOnlineFormBean().getSelectForm());
			stdetails.put("select_house", getDotuOnlineFormBean().getSelectHouse());
			stdetails.put("father_name", getDotuOnlineFormBean().getFatherName());
			stdetails.put("email_id", getDotuOnlineFormBean().getEmailId());
			// stdetails.put("fee_headlist",
			// getMgrMedicalOnlineFormBean().getFeeHeadList());
			stdetails.put("mobile_no", getDotuOnlineFormBean().getMobileNo());
			stdetails.put("chk", getDotuOnlineFormBean().getChk());
			stdetails.put("school_name", getDotuOnlineFormBean().getSchoolName());
			stdetails.put("country_name", getDotuOnlineFormBean().getCountryName());
			stdetails.put("city_name", getDotuOnlineFormBean().getCityName());
			stdetails.put("purpose", getDotuOnlineFormBean().getPurpose());
			stdetails.put("student_id", getDotuOnlineFormBean().getStudentId());
			stdetails.put("student_name", getDotuOnlineFormBean().getStudentName());
			stdetails.put("amount", getDotuOnlineFormBean().getAmount());
			stdetails.put("payment", getDotuOnlineFormBean().getPayment());

			// stdetails.put("amount",getNiprOnlineFormBean().getAmount());
			// stdetails.put("txn_amt",Double.parseDouble(getBseFormBean().getAmount()));

			// stdetails.put("registered_userid",getNiprOnlineFormBean().getRegisteredUserId());
			// stdetails.put("student_registrationid",getNiprOnlineFormBean().getStudentRegistrationId());
			// stdetails.put("application_no",getNiprOnlineFormBean().getApplicationNo());
			// stdetails.put("payment_id",getNiprOnlineFormBean().getPayment());
			// stdetails.put("formid",getNiprOnlineFormBean().getFormId());

			// stdetails.put("Txn_Amt",Double.parseDouble(getGnluData().getAmt1()));

			/*
			 * objNode.put("data",stdetails);
			 * 
			 * String jsonString1=obMapper.writeValueAsString(objNode);
			 * 
			 * logger.info("jsonString1"+jsonString1.toString());
			 */
			objNode.put("form_data", stdetails);

			String jsonString1 = obMapper.writeValueAsString(objNode);

			logger.info("jsonString1" + jsonString1.toString());
			// code added by priya

			/*** *** *** Initialization start *** *** ***/
			SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

			secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
			secureAPIBuilder.setUpstreamServerPort(443);

			secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
			secureAPIBuilder.setVerifyServerSSL(false);

			// String clientId = "actual-smarthub-node-ip";
			// String clientKeyStr =
			// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

			// secureAPIBuilder.setAuthenticationAlias(clientId);

			// byte[] clientKey = hexStringToByteArray(clientKeyStr);
			// secureAPIBuilder.setAuthenticationKey(clientKey);

			SecureAPIConnection secureAPI = secureAPIBuilder.build();
			/*** *** *** Initialization complete *** *** ***/

			// CODE END

			Client client = ClientBuilder.newClient();
			/*
			 * WebTarget webTarget =
			 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
			 * "/store-form-data"); Invocation.Builder invocationBuilder =
			 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
			 * commented by priya for form engine
			 * 
			 * Response response =
			 * invocationBuilder.post(Entity.json(jsonString1.toString()));
			 * logger.info("response" + response.toString());
			 */
			APIResponse apiResponse = null;

			apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

			System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
					+ apiResponse.getResponseCode());

			String responseBody = apiResponse.getData().toString();

			logger.info("response" + apiResponse.toString());
			if (apiResponse.getResponseCode() != 201) {
				String outputError = apiResponse.getData().toString();
				JSONObject json = new JSONObject(outputError);
				String messageerror = json.getString("message");
				String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
				messageerror=friendlyMessageFromAPIError;
				logger.info("messageerror"+messageerror);
				addActionMessage(messageerror);
				logger.info("messageerror" + messageerror);
				addActionMessage(messageerror);
				return "faliure";
				// throw new RuntimeException("Failed : HTTP error code : " +
				// response.getStatus());
			}

			logger.info("Output from Server .... \n");
			String output = apiResponse.getData().toString();
			JSONObject json = new JSONObject(output);
			JSONObject data1 = json.getJSONObject("data");
			String formId = data1.getString("form_id");
			logger.info("formId" + formId);

			getUserSessionMap().put("application_id", "SMARTHUB");
			getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
			getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
			getUserSessionMap().put("form_id", formId);

			SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
			smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
			smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
			smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
			smartHubFetchOnlineFormBean.setForm_id(formId);

			String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
			logger.info("jsonString2" + jsonString2);

			/*
			 * WebTarget webTarget1 =
			 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
			 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
			 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
			 * //commented by priya for form engine
			 * 
			 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
			 * logger.info("responseString", response1.toString());
			 */
			// code added by priya form engine
			APIResponse apiResponse1 = null;

			apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

			System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
					+ apiResponse1.getResponseCode());

			logger.info("responseString", apiResponse1.toString());
			if (apiResponse1.getResponseCode() != 200) {
				throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
			}
			logger.info("Output from Server .... \n");
			String output1 = apiResponse1.getData().toString();

			logger.info("output1" + output1);

			JSONObject jsonObject = new JSONObject(output1);

			JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
			logger.info("jsonArray" + jsonArray);

			JSONObject data = jsonArray.getJSONObject(0);
			JSONObject dataobj = data.getJSONObject("form_data");

			String feetype = data1.getString("fee_type");
			String specify = data1.getString("specify");
			String stdname = data1.getString("std_name");
			String schoolnumber = data1.getString("school_number");
			// String email=data1.getString("email");
			String selectform = data1.getString("select_form");
			String selecthouse = data1.getString("select_house");
			String fathername = data1.getString("father_name");
			String emailid = data1.getString("email_id");
			// String feeheadlist=data1.getString("fee_headlist");
			String mobileno = data1.getString("mobile_no");
			String chk = data1.getString("chk");
			String schoolname = data1.getString("school_name");
			String countryname = data1.getString("country_name");
			String cityname = data1.getString("city_name");
			String purpose = data1.getString("purpose");
			String studentid = data1.getString("student_id");
			String studentname = data1.getString("student_name");
			String amount = data1.getString("amount");
			String payment = data1.getString("payment");

			// String amount=data1.getString("txn_amt");
			// String userid=data1.getString("registered_userid");
			// String registrationid=data1.getString("student_registrationid");
			// String applicationno=data1.getString("application_no");
			// String payment=data1.getString("payment_id");
			// String Formid=data1.getString("formid");

			getDotuOnlineFormBean().setFeeType(feetype);
			getDotuOnlineFormBean().setSpecify(specify);
			getDotuOnlineFormBean().setStdName(stdname);
			getDotuOnlineFormBean().setSchoolNumber(schoolnumber);
			// getKaushalyaFormBean().setEmailID(email);
			// getDotuOnlineFormBean().setCourse(email);
			getDotuOnlineFormBean().setSelectForm(selectform);
			getDotuOnlineFormBean().setSelectHouse(selecthouse);
			getDotuOnlineFormBean().setFatherName(fathername);
			// getKaushalyaFormBean().setDevelopmentfees(feeheadlist);
			getDotuOnlineFormBean().setEmailId(emailid);
			// getDotuOnlineFormBean().setFloorno(feeheadlist);
			getDotuOnlineFormBean().setMobileNo(mobileno);
			getDotuOnlineFormBean().setChk(chk);
			getDotuOnlineFormBean().setSchoolName(schoolname);

			getDotuOnlineFormBean().setCountryName(countryname);
			getDotuOnlineFormBean().setCityName(cityname);
			getDotuOnlineFormBean().setPurpose(purpose);
			getDotuOnlineFormBean().setStudentId(studentid);
			getDotuOnlineFormBean().setStdName(studentname);
			getDotuOnlineFormBean().setAmount(amount);
			getDotuOnlineFormBean().setPayment(payment);

			// getNiprOnlineFormBean().setAmount(amount);
			// getAppData().setStrID("TEST");
			if (getDotuOnlineFormBean().getChk().equalsIgnoreCase("Y")) {
				if (AmountValidation(getDotuOnlineFormBean().getAmount(), getDotuOnlineFormBean().getPayment())) {
					String responseString = studentRegistrationService.insertDOTUStudentDetails(getDotuOnlineFormBean(),
							billerId);

					if (responseString != null && !"".equalsIgnoreCase(responseString)
							&& "success".equalsIgnoreCase(responseString)) {
						addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
					} else if ("NA".equalsIgnoreCase(responseString)) {
						addActionMessage("Failed to add student data.");
						return "dotuFailure";
					} else {
						addActionMessage("Error occured contact administrator.");
						return "dotuFailure";
					}
					studentRegistrationFormBean = super.getRegisteredStudentDetails(
							getDotuOnlineFormBean().getStudentRegistrationId());
					studentRegistrationFormBean.setTotalPayableFees(getDotuOnlineFormBean().getAmount());
					studentRegistrationFormBean.setStudentId(getDotuOnlineFormBean().getApplicationNo());
					String studIDandName = getDotuOnlineFormBean().getStudentName() + "::"
							+ getDotuOnlineFormBean().getStudentId();
					logger.info("StudentName:------------**StudentName***------------------------");
					studentRegistrationFormBean.setStudentName(studIDandName);

					studentRegistrationFormBean.setStudentEmailId(getDotuOnlineFormBean().getEmailId());
					super.applyFees(studentRegistrationFormBean);

					/* Code Added for SchoolNumber in NEFT Challan by Neel 20-Oct-2020 START */
					getUserSessionMap().put("dotuSchoolNumber", getDotuOnlineFormBean().getSchoolNumber());
					logger.info("Inside DOTURegistration School Number-->" + getDotuOnlineFormBean().getSchoolNumber());
					/* Code Added for SchoolNumber in NEFT Challan by Neel 20-Oct-2020 END */

					QuickPayAction quickPayAction = new QuickPayAction();
					appData1 = new PaymentRequestBean();
					appData1.setStudentRegistrationId(getDotuOnlineFormBean().getStudentRegistrationId());

					quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

					getUserSessionMap().put("APPDATA", getAppData1());
				} else {
					addActionMessage("Amount Mismatched.");
					return "dotuFailure";
				}
			} else {
				addActionMessage("Please select checkbox.");
				return "dotuFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}

		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);
		getUserSessionMap().put("_feetype", getDotuOnlineFormBean().getFeeType());
		getUserSessionMap().put("dotuOnlineFormBean", getDotuOnlineFormBean());

		return super.DOTUSUCCESS;
	}

	public String NISMRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			// String registeredUserId = ((FJBean)
			// getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			/*
			 * logger.info("registeredUserId.."+registeredUserId);
			 * getNismOnlineFormBean().setRegisteredUserId(registeredUserId);
			 * StudentRegistrationService studentRegistrationService = new
			 * StudentRegistrationService(); getAppData().setStrID("TEST");
			 */
			boolean appdetails, CourseFeedetails;
			if (getNismOnlineFormBean().getTotalfeeAmt() != null
					&& !"".equalsIgnoreCase(getNismOnlineFormBean().getTotalfeeAmt())) {
				appdetails = AmountValidation(getNismOnlineFormBean().getTotalfeeAmt(),
						getNismOnlineFormBean().getPaymentAmount());
			} else {
				getNismOnlineFormBean().setTotalfeeAmt("0");
				appdetails = true;
			}
			if (getNismOnlineFormBean().getFeeAmt() != null
					&& !"".equalsIgnoreCase(getNismOnlineFormBean().getFeeAmt())) {
				CourseFeedetails = AmountValidation(getNismOnlineFormBean().getFeeAmt(),
						getNismOnlineFormBean().getPaymentAmountapp());
			} else {
				getNismOnlineFormBean().setFeeAmt("0");
				CourseFeedetails = true;
			}
			if (appdetails && CourseFeedetails) {

				if (getNismOnlineFormBean().getPgName().toLowerCase().indexOf("Programme Fee".toLowerCase()) > 0) {
					getNismOnlineFormBean().setFeeIndicator("PROG");
				} else if (getNismOnlineFormBean().getPgName().toLowerCase()
						.indexOf("Application Fee".toLowerCase()) > 0) {
					getNismOnlineFormBean().setFeeIndicator("APP");
					/*
					 * Added by ravikant for setting total amount to Application type Fees-- start
					 */
					getNismOnlineFormBean().setTotalfeeAmt(getNismOnlineFormBean().getFeeAmt());
					/* close */
				}
				StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
				String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
				getNismOnlineFormBean().setRegisteredUserId(registeredUserId);
				setCourseData((CourseDetailsBean) getUserSessionMap().get("COURSEDATA"));
				getAppData().setStrID("TEST");
				String responseString = studentRegistrationService.insertNISMStudentDetails(getNismOnlineFormBean(),
						billerId);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				}
				List partDetailsList = getNismOnlineFormBean().getParticipantList();
				int partListLength = partDetailsList.size();
				for (int i = 0; i < partListLength; i++) {
					NISMParticipantFormBean nismParticipantFormBean = (NISMParticipantFormBean) partDetailsList.get(i);
					studentRegistrationService.insertNISMParticipantDetails(nismParticipantFormBean,
							getNismOnlineFormBean().getApplicationNo());

				}
				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getNismOnlineFormBean().getStudentRegistrationId());

				if ("PROG".equalsIgnoreCase(getNismOnlineFormBean().getFeeIndicator())) {
					studentRegistrationFormBean.setTotalPayableFees(getNismOnlineFormBean().getTotalfeeAmt());
				}
				if ("APP".equalsIgnoreCase(getNismOnlineFormBean().getFeeIndicator())) {
					studentRegistrationFormBean.setTotalPayableFees(getNismOnlineFormBean().getFeeAmt());
				}

				for (int i = 0; i <= nismOnlineFormBean.getParticipantList().size() - 1; i++) {
					NISMParticipantFormBean nismParticipantFormBean = nismOnlineFormBean.getParticipantList().get(i);
					studentRegistrationFormBean.setStudentEmailId(nismParticipantFormBean.getEmailId());
					studentRegistrationFormBean.setStudentMobileNumber(nismParticipantFormBean.getMobileNo());
				}
				studentRegistrationFormBean.setStudentId(getNismOnlineFormBean().getApplicationNo());

				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getNismOnlineFormBean().getStudentRegistrationId());

				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				addActionMessage("Amount Mismatched.");
				return "nismFailure";

			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}

		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.NISMSUCCESS;
	}

	public String RPTMRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getRptmOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");

			ObjectMapper obMapper = new ObjectMapper();
			ObjectNode objNode = obMapper.createObjectNode();

			InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
					.getInstituteFormDetails(billerId);

			// Object Node declaration
			objNode.put("application_id", "SMARTHUB");
			objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
			objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
			ObjectNode stdetails = obMapper.createObjectNode();

			SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date date = new Date();

			// SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
			// Date date1 = sdf.parse(getGnluData().getStdDOB());//have to change
			// Date date2= sdf.parse(getGnluData().getFromDate());
			// Date date3 = sdf.parse(getGnluData().getToDate());
			stdetails.put("std_id", getRptmOnlineFormBean().getStdId());
			stdetails.put("std_mobno", getRptmOnlineFormBean().getStdMobNo());
			stdetails.put("std_emailid", getRptmOnlineFormBean().getStdEmailId());
			stdetails.put("std_dob", getRptmOnlineFormBean().getStdDob());
			stdetails.put("std_address", getRptmOnlineFormBean().getStdAddress());
			stdetails.put("std_collname", getRptmOnlineFormBean().getStdCollName());
			stdetails.put("std_name", getRptmOnlineFormBean().getStdName());
			stdetails.put("std_course", getRptmOnlineFormBean().getStdCourse());
			stdetails.put("std_othercourse", getRptmOnlineFormBean().getStdOtherCourse());
			// stdetails.put("fee_headlist",
			// getMgrMedicalOnlineFormBean().getFeeHeadList());
			stdetails.put("std_semester", getRptmOnlineFormBean().getStdSemester());
			stdetails.put("std_university", getRptmOnlineFormBean().getStdUniversity());
			stdetails.put("std_otheruniversity", getRptmOnlineFormBean().getStdOtherUniversity());
			stdetails.put("std_year", getRptmOnlineFormBean().getStdYear());
			stdetails.put("std_totalfee", getRptmOnlineFormBean().getStdTotalFee());
			stdetails.put("payment", getRptmOnlineFormBean().getPayment());

			// stdetails.put("amount",getNiprOnlineFormBean().getAmount());
			// stdetails.put("txn_amt",Double.parseDouble(getBseFormBean().getAmount()));

			// stdetails.put("registered_userid",getNiprOnlineFormBean().getRegisteredUserId());
			// stdetails.put("student_registrationid",getNiprOnlineFormBean().getStudentRegistrationId());
			// stdetails.put("application_no",getNiprOnlineFormBean().getApplicationNo());
			// stdetails.put("payment_id",getNiprOnlineFormBean().getPayment());
			// stdetails.put("formid",getNiprOnlineFormBean().getFormId());

			// stdetails.put("Txn_Amt",Double.parseDouble(getGnluData().getAmt1()));

			objNode.put("data", stdetails);

			String jsonString1 = obMapper.writeValueAsString(objNode);

			logger.info("jsonString1" + jsonString1.toString());

			Client client = ClientBuilder.newClient();
			WebTarget webTarget = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH))
					.path("/store-form-data");
			Invocation.Builder invocationBuilder = webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);

			Response response = invocationBuilder.post(Entity.json(jsonString1.toString()));
			logger.info("response" + response.toString());

			if (response.getStatus() != 201) {
				String outputError = response.readEntity(String.class);
				JSONObject json = new JSONObject(outputError);
				
				String messageerror = json.getString("message");
				String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
				messageerror=friendlyMessageFromAPIError;
				logger.info("messageerror"+messageerror);
				addActionMessage(messageerror);
				logger.info("messageerror" + messageerror);
				addActionMessage(messageerror);
				return "faliure";
				// throw new RuntimeException("Failed : HTTP error code : " +
				// response.getStatus());
			}

			logger.info("Output from Server .... \n");
			String output = response.readEntity(String.class);
			JSONObject json = new JSONObject(output);
			String formId = json.getString("form_id");
			logger.info("formId" + formId);

			getUserSessionMap().put("application_id", "SMARTHUB");
			getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
			getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
			getUserSessionMap().put("form_id", formId);

			SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
			smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
			smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
			smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
			smartHubFetchOnlineFormBean.setForm_id(formId);

			String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
			logger.info("jsonString2" + jsonString2);

			WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH))
					.path("/get-form-data");
			Invocation.Builder invocationBuilder1 = webTarget1
					.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);

			Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
			logger.info("responseString", response1.toString());

			if (response1.getStatus() != 200) {
				throw new RuntimeException("Failed : HTTP error code : " + response1.getStatus());
			}
			logger.info("Output from Server .... \n");
			String output1 = response1.readEntity(String.class);

			logger.info("output1" + output1);

			JSONObject jsonObject = new JSONObject(output1);

			JSONArray jsonArray = jsonObject.getJSONArray("message");
			logger.info("jsonArray" + jsonArray);

			JSONObject data = jsonArray.getJSONObject(0);
			JSONObject data1 = data.getJSONObject("data");

			String stdid = data1.getString("std_id");
			String stdmobileno = data1.getString("std_mobno");
			String stdemailid = data1.getString("std_emailid");
			String stddob = data1.getString("std_dob");
			String stdaddress = data1.getString("std_address");
			String stdcollegename = data1.getString("std_collname");
			String stdname = data1.getString("std_name");
			String stdcourse = data1.getString("std_course");
			String stdothercourse = data1.getString("std_othercourse");
			String stdsemester = data1.getString("std_semester");
			String stduniversity = data1.getString("std_university");
			String stdotheruniversity = data1.getString("std_otheruniversity");
			String stdyear = data1.getString("std_year");
			String stdtotalfee = data1.getString("std_totalfee");
			String payment = data1.getString("payment");

			// String amount=data1.getString("txn_amt");
			// String userid=data1.getString("registered_userid");
			// String registrationid=data1.getString("student_registrationid");
			// String applicationno=data1.getString("application_no");
			// String payment=data1.getString("payment_id");
			// String Formid=data1.getString("formid");

			getRptmOnlineFormBean().setStdId(stdid);
			getRptmOnlineFormBean().setStdMobNo(stdmobileno);
			getRptmOnlineFormBean().setStdEmailId(stdemailid);
			getRptmOnlineFormBean().setStdDob(stddob);
			getRptmOnlineFormBean().setStdAddress(stdaddress);
			getRptmOnlineFormBean().setStdCollName(stdcollegename);
			getRptmOnlineFormBean().setStdName(stdname);
			getRptmOnlineFormBean().setStdCourse(stdcourse);
			getRptmOnlineFormBean().setStdOtherCourse(stdothercourse);
			getRptmOnlineFormBean().setStdSemester(stdsemester);
			getRptmOnlineFormBean().setStdUniversity(stduniversity);
			getRptmOnlineFormBean().setStdOtherUniversity(stdotheruniversity);
			getRptmOnlineFormBean().setStdYear(stdyear);
			getRptmOnlineFormBean().setStdTotalFee(stdtotalfee);
			getRptmOnlineFormBean().setPayment(payment);

			// getNiprOnlineFormBean().setAmount(amount);
			// getAppData().setStrID("TEST");
			if (AmountValidation(getRptmOnlineFormBean().getStdTotalFee(), getRptmOnlineFormBean().getPayment())) {
				String responseString = studentRegistrationService.insertRPTMStudentDetails(getRptmOnlineFormBean(),
						billerId);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "rptmFailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "rptmFailure";
				}
				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getRptmOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getRptmOnlineFormBean().getStdTotalFee());
				studentRegistrationFormBean.setStudentId(getRptmOnlineFormBean().getApplicationNo());
				// studentRegistrationFormBean.setStudentName(getRptmOnlineFormBean().getStdName());
				// studentRegistrationFormBean.setStudentEmailId(getRptmOnlineFormBean().getStdEmailId());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getRptmOnlineFormBean().getStudentRegistrationId());

				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				addActionMessage("Amount Mismatched.");
				return "rptmFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}

		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.RPTMSUCCESS;
	}

	public String KaushalyaRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getKaushalyaFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getKaushalyaFormBean().getAmount(), getKaushalyaFormBean().getPayment())) {
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);
				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();
				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				// Getters atarted...
				stdetails.put("admissionno", getKaushalyaFormBean().getAdmissionNo());
				stdetails.put("nameofstudent", getKaushalyaFormBean().getNameOfStudent());
				stdetails.put("fathersname", getKaushalyaFormBean().getFathersName());
				stdetails.put("collegename",
						getKaushalyaFormBean().getCollegeName() != null ? getKaushalyaFormBean().getCollegeName()
								: " ");
				stdetails.put("course",
						getKaushalyaFormBean().getCourse() != null ? getKaushalyaFormBean().getCourse() : " ");
				stdetails.put("class1",
						getKaushalyaFormBean().getClass1() != null ? getKaushalyaFormBean().getClass1() : " ");
				stdetails.put("mobile", Long.parseLong(getKaushalyaFormBean().getMobile()));
				stdetails.put("roomno",
						getKaushalyaFormBean().getRoomno() != null ? getKaushalyaFormBean().getRoomno() : " ");
				stdetails.put("floorno",
						getKaushalyaFormBean().getFloorno() != null ? getKaushalyaFormBean().getFloorno() : " ");
				stdetails.put("paymenttype",
						getKaushalyaFormBean().getPaymenttype() != null ? getKaushalyaFormBean().getPaymenttype()
								: " ");
				stdetails.put("period",
						getKaushalyaFormBean().getPeriod() != null ? getKaushalyaFormBean().getPeriod() : " ");
				stdetails.put("amount", Double.parseDouble(getKaushalyaFormBean().getAmount()));
				stdetails.put("emailid", getKaushalyaFormBean().getEmailID());
				stdetails.put("remark",
						!StringUtils.isBlank(getKaushalyaFormBean().getRemark()) ? getKaushalyaFormBean().getRemark()
								: " ");

				stdetails.put("section",
						getKaushalyaFormBean().getSection() != null ? getKaushalyaFormBean().getSection() : " ");
				stdetails.put("mothername", getKaushalyaFormBean().getMothername());
				stdetails.put("year",
						getKaushalyaFormBean().getYear() != null ? getKaushalyaFormBean().getYear() : " ");
				stdetails.put("session",
						getKaushalyaFormBean().getSession() != null ? getKaushalyaFormBean().getSession() : " ");
				stdetails.put("payment_details", Double.parseDouble(getKaushalyaFormBean().getAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getKaushalyaFormBean().getAmount()));

				// Calling API...
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE); Response
				 * response = invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */

				// API Response status verification ...

				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "Default";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				// JSONArray jsonArray = jsonObject.getJSONArray("message");

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String admissionno = dataobj.getString("admissionno");
				String nameofstudent = dataobj.getString("nameofstudent");
				String fathersname = dataobj.getString("fathersname");
				String collegename = dataobj.getString("collegename");
				String course = dataobj.getString("course");
				String class1 = dataobj.getString("class1");
				String section = dataobj.getString("section");
				Long mobile = dataobj.getLong("mobile");
				String roomno = dataobj.getString("roomno");
				String floorno = dataobj.getString("floorno");
				String paymenttype = dataobj.getString("paymenttype");
				String period = dataobj.getString("period");
				int amount = dataobj.getInt("amount");
				String emailid = dataobj.getString("emailid");
				String remark = dataobj.getString("remark");
				int payment = dataobj.getInt("payment_details");
				String registereduserid = dataobj.getString("registered_userId");
				String studentregistrationid = dataobj.getString("student_registrationid");
				String applicationno = dataobj.getString("application_no");
				String mothername = dataobj.getString("mothername");
				String year = dataobj.getString("year");
				String session = dataobj.getString("session");

				// Calling all Setter methods
				getKaushalyaFormBean().setPayment(String.valueOf(payment));
				getKaushalyaFormBean().setAdmissionNo(admissionno);
				getKaushalyaFormBean().setNameOfStudent(nameofstudent);
				getKaushalyaFormBean().setFathersName(fathersname);
				getKaushalyaFormBean().setCollegeName(collegename);
				getKaushalyaFormBean().setCourse(course);
				getKaushalyaFormBean().setClass1(class1);
				getKaushalyaFormBean().setMobile(String.valueOf(mobile));
				getKaushalyaFormBean().setRoomno(roomno);
				getKaushalyaFormBean().setFloorno(floorno);
				getKaushalyaFormBean().setPaymenttype(paymenttype);
				getKaushalyaFormBean().setPeriod(period);
				getKaushalyaFormBean().setAmount(String.valueOf(amount));
				getKaushalyaFormBean().setEmailID(emailid);
				getKaushalyaFormBean().setRemark(remark);
				getKaushalyaFormBean().setRegisteredUserId(registereduserid);
				getKaushalyaFormBean().setStudentRegistrationId(studentregistrationid);
				getKaushalyaFormBean().setApplicationNo(applicationno);
				getKaushalyaFormBean().setSection(section);
				getKaushalyaFormBean().setMothername(mothername);
				getKaushalyaFormBean().setYear(year);
				getKaushalyaFormBean().setSession(session);

				getKaushalyaFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getKaushalyaFormBean());

				String responseString = studentRegistrationService.insertKaushalyaStudentDetails(getKaushalyaFormBean(),
						billerId);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "kaushFailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "kaushFailure";
				}
				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getKaushalyaFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getKaushalyaFormBean().getAmount());
				studentRegistrationFormBean.setStudentId(getKaushalyaFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getKaushalyaFormBean().getStudentRegistrationId());

				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				addActionMessage("Amount Mismatched.");
				return "kaushFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}

		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.KAUSHSUCCESS;
	}

	public String RUNGTARegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getRungtanlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			ObjectMapper obMapper = new ObjectMapper();
			ObjectNode objNode = obMapper.createObjectNode();
			InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
					.getInstituteFormDetails(billerId);

			// Object Node declaration
			objNode.put("application_id", "SMARTHUB");
			objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
			objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
			ObjectNode stdetails = obMapper.createObjectNode();

			SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date date = new Date();

			// SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
			// Date date1 = sdf.parse(getGnluData().getStdDOB());//have to change
			// Date date2= sdf.parse(getGnluData().getFromDate());
			// Date date3 = sdf.parse(getGnluData().getToDate());
			stdetails.put("college_rollno", getRungtanlineFormBean().getCollegeRollno());
			stdetails.put("student_name", getRungtanlineFormBean().getStudentName());
			stdetails.put("father_name", getRungtanlineFormBean().getFatherName());
			stdetails.put("mobile_no", getRungtanlineFormBean().getMobileNo());
			stdetails.put("email", getRungtanlineFormBean().getEmail());
			stdetails.put("course", getRungtanlineFormBean().getCourse());
			stdetails.put("year", getRungtanlineFormBean().getYear());
			stdetails.put("tuition_fees", getRungtanlineFormBean().getTuitionFees());
			stdetails.put("chk_tuition_fees", getRungtanlineFormBean().getChktuitionFees());
			// stdetails.put("fee_headlist",
			// getMgrMedicalOnlineFormBean().getFeeHeadList());
			stdetails.put("development_fees", getRungtanlineFormBean().getDevelopmentfees());
			stdetails.put("chk_development_fees", getRungtanlineFormBean().getChkdevelopmentfees());
			stdetails.put("accreditation_fees", getRungtanlineFormBean().getAccreditationFees());
			stdetails.put("chk_accreditation_fees", getRungtanlineFormBean().getChkaccreditationFees());
			stdetails.put("caution_money", getRungtanlineFormBean().getCautionMoney());
			stdetails.put("chk_caution_money", getRungtanlineFormBean().getChkcautionMoney());
			stdetails.put("hostel_fees", getRungtanlineFormBean().getHostelFees());
			stdetails.put("chk_hostel_fees", getRungtanlineFormBean().getChkhostelFees());
			stdetails.put("hostel_caution_money", getRungtanlineFormBean().getHostelCautionmoney());
			stdetails.put("chk_hostel_cautionmoney", getRungtanlineFormBean().getChkhostelCautionmoney());
			stdetails.put("bus_fees", getRungtanlineFormBean().getBusFees());
			stdetails.put("chk_bus_fees", getRungtanlineFormBean().getChkbusFees());
			stdetails.put("exam_fees", getRungtanlineFormBean().getExamFees());
			stdetails.put("chk_exam_fees", getRungtanlineFormBean().getChkexamFees());
			stdetails.put("others", getRungtanlineFormBean().getOthers());
			stdetails.put("chk_others", getRungtanlineFormBean().getChkothers());
			stdetails.put("total", getRungtanlineFormBean().getTotal());
			stdetails.put("remarks", getRungtanlineFormBean().getRemarks());
			stdetails.put("payment", getRungtanlineFormBean().getPayment());

			// stdetails.put("amount",getNiprOnlineFormBean().getAmount());
			// stdetails.put("txn_amt",Double.parseDouble(getBseFormBean().getAmount()));

			// stdetails.put("registered_userid",getNiprOnlineFormBean().getRegisteredUserId());
			// stdetails.put("student_registrationid",getNiprOnlineFormBean().getStudentRegistrationId());
			// stdetails.put("application_no",getNiprOnlineFormBean().getApplicationNo());
			// stdetails.put("payment_id",getNiprOnlineFormBean().getPayment());
			// stdetails.put("formid",getNiprOnlineFormBean().getFormId());

			// stdetails.put("Txn_Amt",Double.parseDouble(getGnluData().getAmt1()));

			objNode.put("form_data", stdetails);

			String jsonString1 = obMapper.writeValueAsString(objNode);

			logger.info("jsonString1" + jsonString1.toString());
			// code added by priya

			/*** *** *** Initialization start *** *** ***/
			SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

			secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
			secureAPIBuilder.setUpstreamServerPort(443);

			secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
			secureAPIBuilder.setVerifyServerSSL(false);

			// String clientId = "actual-smarthub-node-ip";
			// String clientKeyStr =
			// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

			// secureAPIBuilder.setAuthenticationAlias(clientId);

			// byte[] clientKey = hexStringToByteArray(clientKeyStr);
			// secureAPIBuilder.setAuthenticationKey(clientKey);

			SecureAPIConnection secureAPI = secureAPIBuilder.build();
			/*** *** *** Initialization complete *** *** ***/

			// CODE END

			Client client = ClientBuilder.newClient();

			/*
			 * WebTarget webTarget =
			 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH))
			 * .path("/store-form-data"); Invocation.Builder invocationBuilder =
			 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
			 * 
			 * Response response =
			 * invocationBuilder.post(Entity.json(jsonString1.toString()));
			 * logger.info("response" + response.toString());
			 */
			APIResponse apiResponse = null;

			apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

			System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
					+ apiResponse.getResponseCode());

			String responseBody = apiResponse.getData().toString();

			logger.info("response" + apiResponse.toString());

			if (apiResponse.getResponseCode() != 201) {
				String outputError = apiResponse.getData().toString();
				JSONObject json = new JSONObject(outputError);
				String messageerror = json.getString("message");
				String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
				messageerror=friendlyMessageFromAPIError;
				logger.info("messageerror"+messageerror);
				addActionMessage(messageerror);
				logger.info("messageerror" + messageerror);
				addActionMessage(messageerror);
				return "faliure";
				// throw new RuntimeException("Failed : HTTP error code : " +
				// response.getStatus());
			}

			logger.info("Output from Server .... \n");
			String output = apiResponse.getData().toString();
			JSONObject json = new JSONObject(output);

			JSONObject data1 = json.getJSONObject("data");
			String formId = data1.getString("form_id");
			logger.info("formId" + formId);

			getUserSessionMap().put("application_id", "SMARTHUB");
			getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
			getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
			getUserSessionMap().put("form_id", formId);

			SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
			smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
			smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
			smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
			smartHubFetchOnlineFormBean.setForm_id(formId);

			String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
			logger.info("jsonString2" + jsonString2);

			/*
			 * WebTarget webTarget1 =
			 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH))
			 * .path("/get-form-data"); Invocation.Builder invocationBuilder1 = webTarget1
			 * .request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
			 * 
			 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
			 * logger.info("responseString", response1.toString());
			 */
			APIResponse apiResponse1 = null;

			apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

			System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
					+ apiResponse1.getResponseCode());

			logger.info("responseString", apiResponse1.toString());
			if (apiResponse1.getResponseCode() != 200) {
				throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
			}
			logger.info("Output from Server .... \n");
			String output1 = apiResponse1.getData().toString();

			logger.info("output1" + output1);

			JSONObject jsonObject = new JSONObject(output1);

			JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
			logger.info("jsonArray" + jsonArray);

			JSONObject data = jsonArray.getJSONObject(0);
			JSONObject dataobj = data.getJSONObject("form_data");

			String collegerollno = dataobj.getString("college_rollno");
			String studentname = dataobj.getString("student_name");
			String fathername = dataobj.getString("father_name");
			String mobileno = dataobj.getString("mobile_no");
			String email = dataobj.getString("email");
			String course = dataobj.getString("course");
			String year = dataobj.getString("year");
			String tuitionfees = dataobj.getString("tuition_fees");
			String chktuitionfees = dataobj.getString("chk_tuition_fees");
			String developmentfees = dataobj.getString("development_fees");
			String chkdevelopmentfees = dataobj.getString("chk_development_fees");
			String accreditationfees = dataobj.getString("accreditation_fees");
			String chkaccreditationfees = dataobj.getString("chk_accreditation_fees");
			String cautionmoney = dataobj.getString("caution_money");
			String chkcautionmoney = dataobj.getString("chk_caution_money");
			String hostelfees = dataobj.getString("hostel_fees");
			String chkhostelfees = dataobj.getString("chk_hostel_fees");
			String hostelcautionmoney = dataobj.getString("hostel_caution_money");
			String chkhostelcautionmoney = dataobj.getString("chk_hostel_cautionmoney");
			String busfees = dataobj.getString("bus_fees");
			String chkbusfees = dataobj.getString("chk_bus_fees");
			String examfees = dataobj.getString("exam_fees");
			String chkexamfees = dataobj.getString("chk_exam_fees");
			String others = dataobj.getString("others");
			String chkothers = dataobj.getString("chk_others");
			String total = dataobj.getString("total");
			String remarks = dataobj.getString("remarks");
			String payment = dataobj.getString("payment");

			// String amount=data1.getString("txn_amt");
			// String userid=data1.getString("registered_userid");
			// String registrationid=data1.getString("student_registrationid");
			// String applicationno=data1.getString("application_no");
			// String payment=data1.getString("payment_id");
			// String Formid=data1.getString("formid");

			getRungtanlineFormBean().setCollegeRollno(collegerollno);
			getRungtanlineFormBean().setStudentName(studentname);
			getRungtanlineFormBean().setFatherName(fathername);
			getRungtanlineFormBean().setMobileNo(mobileno);
			getRungtanlineFormBean().setEmail(email);
			getRungtanlineFormBean().setCourse(course);
			getRungtanlineFormBean().setYear(year);
			getRungtanlineFormBean().setTuitionFees(tuitionfees);
			getRungtanlineFormBean().setChktuitionFees(chktuitionfees);
			getRungtanlineFormBean().setDevelopmentfees(developmentfees);
			getRungtanlineFormBean().setChkdevelopmentfees(chkdevelopmentfees);
			getRungtanlineFormBean().setAccreditationFees(accreditationfees);
			getRungtanlineFormBean().setChkaccreditationFees(chkaccreditationfees);
			getRungtanlineFormBean().setCautionMoney(cautionmoney);
			getRungtanlineFormBean().setChkcautionMoney(chkcautionmoney);

			getRungtanlineFormBean().setHostelFees(hostelfees);
			getRungtanlineFormBean().setChkhostelFees(chkhostelfees);
			getRungtanlineFormBean().setHostelCautionmoney(hostelcautionmoney);
			getRungtanlineFormBean().setChkhostelCautionmoney(chkhostelcautionmoney);
			getRungtanlineFormBean().setBusFees(busfees);
			getRungtanlineFormBean().setChkbusFees(chkbusfees);
			getRungtanlineFormBean().setExamFees(examfees);
			getRungtanlineFormBean().setChkexamFees(chkexamfees);
			getRungtanlineFormBean().setOthers(others);
			getRungtanlineFormBean().setChkothers(chkothers);
			getRungtanlineFormBean().setTotal(total);
			getRungtanlineFormBean().setRemarks(remarks);
			getRungtanlineFormBean().setPayment(payment);

			// getNiprOnlineFormBean().setAmount(amount);
			// getAppData().setStrID("TEST");
			if (AmountValidation(getRungtanlineFormBean().getTotal(), getRungtanlineFormBean().getPayment())) {
				String responseString = studentRegistrationService.insertRUNGTAStudentDetails(getRungtanlineFormBean(),
						billerId);
				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "rungtaFailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "rungtaFailure";
				}
				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getRungtanlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getRungtanlineFormBean().getTotal());
				studentRegistrationFormBean.setStudentId(getRungtanlineFormBean().getApplicationNo());
				/*
				 * studentRegistrationFormBean.setStudentName(getUgiOnlineFormBean().
				 * getStudentName());
				 * studentRegistrationFormBean.setStudentEmailId(getUgiOnlineFormBean().
				 * getEmailId());
				 * studentRegistrationFormBean.setStudentMobileNumber(getUgiOnlineFormBean().
				 * getStdMobileNo());
				 */
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getRungtanlineFormBean().getStudentRegistrationId());

				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				addActionMessage("Amount Mismatched.");
				return "rungtaFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}

		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.RUNGTASUCCESS;
	}

	public String ChristineRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getChristineOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getChristineOnlineFormBean().getTotalAmount(),
					getChristineOnlineFormBean().getPayment())) {
				String responseString = studentRegistrationService
						.insertChristineStudentDetails(getChristineOnlineFormBean(), billerId);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				}
				List feeDetailsList = getChristineOnlineFormBean().getFeeList();
				int partListLength = feeDetailsList.size();
				for (int i = 1; i < partListLength; i++) {
					form form1 = (form) feeDetailsList.get(i);
					studentRegistrationService.insertchristinefeeDetails(form1,
							getChristineOnlineFormBean().getApplicationNo());

				}
				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getChristineOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getChristineOnlineFormBean().getTotalAmount());
				studentRegistrationFormBean.setStudentId(getChristineOnlineFormBean().getApplicationNo());

				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getChristineOnlineFormBean().getStudentRegistrationId());

				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				addActionMessage("Amount Mismatched.");
				return "christineFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}

		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.CHRISTINESUCCESS;
	}

	public String SharpRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getSharpmindsOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getSharpmindsOnlineFormBean().getTotalAmount(),
					getSharpmindsOnlineFormBean().getPayment())) {
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);
				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				// Getters atarted...
				stdetails.put("stdname", getSharpmindsOnlineFormBean().getStdName());
				stdetails.put("stdid", getSharpmindsOnlineFormBean().getStdId());
				stdetails.put("stdmobileno", Long.parseLong(getSharpmindsOnlineFormBean().getStdMobileNo()));
				stdetails.put("stdemailid", getSharpmindsOnlineFormBean().getStdEmailId());
				stdetails.put("selectstdclass", getSharpmindsOnlineFormBean().getSelectStdClass());
				stdetails.put("fathername", getSharpmindsOnlineFormBean().getFatherName());
				stdetails.put("stdbatch", getSharpmindsOnlineFormBean().getStdBatch());
				stdetails.put("stdremark", getSharpmindsOnlineFormBean().getStdRemark());
				stdetails.put("feeamount", Double.parseDouble(getSharpmindsOnlineFormBean().getFeeAmount()));
				stdetails.put("taxamount", Double.parseDouble(getSharpmindsOnlineFormBean().getTaxAmount()));
				stdetails.put("totalamount", Double.parseDouble(getSharpmindsOnlineFormBean().getTotalAmount()));
				stdetails.put("txn_amt", Double.parseDouble(getSharpmindsOnlineFormBean().getTotalAmount()));
				stdetails.put("payment_details", Double.parseDouble(getSharpmindsOnlineFormBean().getTotalAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getSharpmindsOnlineFormBean().getTotalAmount()));

				// Calling API...
				/*
				 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
				 * String jsonString1 = obMapper.writeValueAsString(objNode);
				 * logger.info("jsonString1" + jsonString1.toString());
				 */

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();

				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE); Response
				 * response = invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */

				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				// API Response status verification ...
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "sharpFailure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */

				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				// JSONArray jsonArray = jsonObject.getJSONArray("message");

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String stdname = dataobj.getString("stdname");
				String stdid = dataobj.getString("stdid");
				Long stdmobileno = dataobj.getLong("stdmobileno");
				String stdemailid = dataobj.getString("stdemailid");
				String selectstdclass = dataobj.getString("selectstdclass");
				String stdbatch = dataobj.getString("stdbatch");
				String stdremark = dataobj.getString("stdremark");
				int feeamount = dataobj.getInt("feeamount");
				int taxamount = dataobj.getInt("taxamount");
				int totalamount = dataobj.getInt("totalamount");
				String fathername = dataobj.getString("fathername");

				// Calling all Setter methods
				getSharpmindsOnlineFormBean().setStdName(stdname);
				getSharpmindsOnlineFormBean().setStdId(stdid);
				getSharpmindsOnlineFormBean().setStdMobileNo(String.valueOf(stdmobileno));
				getSharpmindsOnlineFormBean().setStdEmailId(stdemailid);
				getSharpmindsOnlineFormBean().setSelectStdClass(selectstdclass);
				getSharpmindsOnlineFormBean().setStdBatch(stdbatch);
				getSharpmindsOnlineFormBean().setStdRemark(stdremark);
				getSharpmindsOnlineFormBean().setFeeAmount(String.valueOf(feeamount));
				getSharpmindsOnlineFormBean().setTaxAmount(String.valueOf(taxamount));
				getSharpmindsOnlineFormBean().setTotalAmount(String.valueOf(totalamount));
				getSharpmindsOnlineFormBean().setFatherName(fathername);

				getSharpmindsOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getSharpmindsOnlineFormBean());

				String responseString = studentRegistrationService
						.insertSHARPStudentDetails(getSharpmindsOnlineFormBean(), billerId);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "sharpFailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "sharpFailure";
				}
				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getSharpmindsOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getSharpmindsOnlineFormBean().getTotalAmount());
				studentRegistrationFormBean.setStudentId(getSharpmindsOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getSharpmindsOnlineFormBean().getStudentRegistrationId());

				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				addActionMessage("Amount Mismatched.");
				return "sharpFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}

		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.SHARPSUCCESS;
	}

	public String MATSRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getMatsFeesForm().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getMatsFeesForm().getTotalAmount(), getMatsFeesForm().getPayment())) {
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);
				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();
				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();
				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				Date date1 = sdf.parse(getMatsFeesForm().getDob());
				// Getters atarted...
				stdetails.put("selectpaymenttype", getMatsFeesForm().getSelectPaymentType());
				stdetails.put("enrollmentno", getMatsFeesForm().getEnrollmentNo());
				stdetails.put("studentname", getMatsFeesForm().getStudentName());
				stdetails.put("fathername", getMatsFeesForm().getFatherName());
				stdetails.put("mothername", getMatsFeesForm().getMotherName());
				stdetails.put("contactno", Long.parseLong(getMatsFeesForm().getContactNo()));
				stdetails.put("dob", formatter.format(date1));
				stdetails.put("selectdepartment", getMatsFeesForm().getSelectDepartment());
				stdetails.put("course", getMatsFeesForm().getCourse());
				stdetails.put("selectyear", getMatsFeesForm().getSelectYear());
				if (!StringUtils.isBlank(getMatsFeesForm().getFee1())) {

					stdetails.put("fees", Double.parseDouble(getMatsFeesForm().getFees()));
				} else {
					stdetails.put("fees", 0);
				}

				if (!StringUtils.isBlank(getMatsFeesForm().getRevalCharges())) {

					stdetails.put("revalcharges", Double.parseDouble(getMatsFeesForm().getRevalCharges()));
				} else {
					stdetails.put("revalcharges", 0);
				}

				if (!StringUtils.isBlank(getMatsFeesForm().getConvCharges())) {

					stdetails.put("convcharges", Double.parseDouble(getMatsFeesForm().getConvCharges()));
				} else {
					stdetails.put("convcharges", 0);
				}
				if (!StringUtils.isBlank(getMatsFeesForm().getExamFee())) {

					stdetails.put("examfee", Double.parseDouble(getMatsFeesForm().getExamFee()));
				} else {
					stdetails.put("examfee", 0);
				}

				if (!StringUtils.isBlank(getMatsFeesForm().getLateFees())) {

					stdetails.put("latefees", Double.parseDouble(getMatsFeesForm().getLateFees()));
				} else {
					stdetails.put("latefees", 0);
				}

				if (!StringUtils.isBlank(getMatsFeesForm().getHostelFees())) {

					stdetails.put("hostelfees", Double.parseDouble(getMatsFeesForm().getHostelFees()));
				} else {
					stdetails.put("hostelfees", 0);
				}

				if (!StringUtils.isBlank(getMatsFeesForm().getTransCharges())) {

					stdetails.put("transcharges", Double.parseDouble(getMatsFeesForm().getTransCharges()));
				} else {
					stdetails.put("transcharges", 0);
				}

				if (!StringUtils.isBlank(getMatsFeesForm().getOtherCharges())) {

					stdetails.put("othercharges", Double.parseDouble(getMatsFeesForm().getOtherCharges()));
				} else {
					stdetails.put("othercharges", 0);
				}

				if (!StringUtils.isBlank(getMatsFeesForm().getCorresFees())) {

					stdetails.put("corresfees", Double.parseDouble(getMatsFeesForm().getCorresFees()));
				} else {
					stdetails.put("corresfees", 0);
				}

				stdetails.put("fee1", getMatsFeesForm().getFee1() == null ? "N" : matsFeesForm.getFee1());
				// stdetails.put("revalcharges",
				// Double.parseDouble(getMatsFeesForm().getRevalCharges()));
				stdetails.put("fee2", getMatsFeesForm().getFee2() == null ? "N" : matsFeesForm.getFee2());
				// stdetails.put("convcharges",
				// Double.parseDouble(getMatsFeesForm().getConvCharges()));
				stdetails.put("fee3", getMatsFeesForm().getFee3() == null ? "N" : matsFeesForm.getFee3());
				// stdetails.put("examfee", Double.parseDouble(getMatsFeesForm().getExamFee()));
				stdetails.put("fee4", getMatsFeesForm().getFee4() == null ? "N" : matsFeesForm.getFee4());
				// stdetails.put("latefees",
				// Double.parseDouble(getMatsFeesForm().getLateFees()));
				stdetails.put("fee5", getMatsFeesForm().getFee5() == null ? "N" : matsFeesForm.getFee5());
				// stdetails.put("hostelfees",
				// Double.parseDouble(getMatsFeesForm().getHostelFees()));
				stdetails.put("fee6", getMatsFeesForm().getFee6() == null ? "N" : matsFeesForm.getFee6());
				// stdetails.put("transcharges",
				// Double.parseDouble(getMatsFeesForm().getTransCharges()));
				stdetails.put("fee7", getMatsFeesForm().getFee7() == null ? "N" : matsFeesForm.getFee7());
				// stdetails.put("othercharges",
				// Double.parseDouble(getMatsFeesForm().getOtherCharges()));
				stdetails.put("fee8", getMatsFeesForm().getFee8() == null ? "N" : matsFeesForm.getFee8());
				// stdetails.put("corresfees",
				// Double.parseDouble(getMatsFeesForm().getCorresFees()));
				stdetails.put("remarks",
						StringUtils.isBlank(getMatsFeesForm().getRemarks()) ? " " : getMatsFeesForm().getRemarks());
				stdetails.put("totalamount", Double.parseDouble(getMatsFeesForm().getTotalAmount()));
				stdetails.put("payment_details", Double.parseDouble(getMatsFeesForm().getTotalAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getMatsFeesForm().getTotalAmount()));
				// Calling API...
				/*
				 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
				 * String jsonString1 = obMapper.writeValueAsString(objNode);
				 * logger.info("jsonString1" + jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				Client client = ClientBuilder.newClient();
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE); Response
				 * response = invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */

				// API Response status verification ...
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "matsFailure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				// JSONArray jsonArray = jsonObject.getJSONArray("message");
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String selectpaymenttype = dataobj.getString("selectpaymenttype");
				String enrollmentno = dataobj.getString("enrollmentno");
				String studentname = dataobj.getString("studentname");
				String fathername = dataobj.getString("fathername");
				String mothername = dataobj.getString("mothername");
				Long contactno = dataobj.getLong("contactno");
				String dob = dataobj.getString("dob");
				String selectdepartment = dataobj.getString("selectdepartment");
				String course = dataobj.getString("course");
				String selectyear = dataobj.getString("selectyear");
				int fees = dataobj.getInt("fees");
				String fee1 = dataobj.getString("fee1");
				int revalcharges = dataobj.getInt("revalcharges");
				String fee2 = dataobj.getString("fee2");
				int convcharges = dataobj.getInt("convcharges");
				String fee3 = dataobj.getString("fee3");
				int examfee = dataobj.getInt("examfee");
				String fee4 = dataobj.getString("fee4");
				int latefees = dataobj.getInt("latefees");
				String fee5 = dataobj.getString("fee5");
				int hostelfees = dataobj.getInt("hostelfees");
				String fee6 = dataobj.getString("fee6");
				int transcharges = dataobj.getInt("transcharges");
				String fee7 = dataobj.getString("fee7");
				int othercharges = dataobj.getInt("othercharges");
				String fee8 = dataobj.getString("fee8");
				int corresfees = dataobj.getInt("corresfees");
				String remarks = dataobj.getString("remarks");
				int totalamount = dataobj.getInt("totalamount");

				// Calling all Setter methods
				getMatsFeesForm().setSelectPaymentType(selectpaymenttype);
				getMatsFeesForm().setEnrollmentNo(enrollmentno);
				getMatsFeesForm().setStudentName(studentname);
				getMatsFeesForm().setFatherName(fathername);
				getMatsFeesForm().setMotherName(mothername);
				getMatsFeesForm().setContactNo(String.valueOf(contactno));
				getMatsFeesForm().setDob(dob);
				getMatsFeesForm().setSelectDepartment(selectdepartment);
				getMatsFeesForm().setCourse(course);
				getMatsFeesForm().setSelectYear(selectyear);
				getMatsFeesForm().setFees(String.valueOf(fees));
				getMatsFeesForm().setFee1(fee1);
				getMatsFeesForm().setRevalCharges(String.valueOf(revalcharges));
				getMatsFeesForm().setFee2(fee2);
				getMatsFeesForm().setConvCharges(String.valueOf(convcharges));
				getMatsFeesForm().setFee3(fee3);
				getMatsFeesForm().setExamFee(String.valueOf(examfee));
				getMatsFeesForm().setFee4(fee4);
				getMatsFeesForm().setLateFees(String.valueOf(latefees));
				getMatsFeesForm().setFee5(fee5);
				getMatsFeesForm().setHostelFees(String.valueOf(hostelfees));
				getMatsFeesForm().setFee6(fee6);
				getMatsFeesForm().setTransCharges(String.valueOf(transcharges));
				getMatsFeesForm().setFee7(fee7);
				getMatsFeesForm().setOtherCharges(String.valueOf(othercharges));
				getMatsFeesForm().setFee8(fee8);
				getMatsFeesForm().setCorresFees(String.valueOf(corresfees));
				getMatsFeesForm().setRemarks(remarks);
				getMatsFeesForm().setTotalAmount(String.valueOf(totalamount));

				getMatsFeesForm().setApplicationNo(formId);
				getUserSessionMap().put("MATSFeesForm", getMatsFeesForm());

				String responseString = studentRegistrationService.insertMATSStudentDetails(getMatsFeesForm(),
						billerId);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "matsFailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "matsFailure";
				}
				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getMatsFeesForm().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getMatsFeesForm().getTotalAmount());
				studentRegistrationFormBean.setStudentId(getMatsFeesForm().getApplicationNo());
				/*
				 * studentRegistrationFormBean.setStudentName(getUgiOnlineFormBean().
				 * getStudentName());
				 * studentRegistrationFormBean.setStudentEmailId(getUgiOnlineFormBean().
				 * getEmailId());
				 * studentRegistrationFormBean.setStudentMobileNumber(getUgiOnlineFormBean().
				 * getStdMobileNo());
				 */
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getMatsFeesForm().getStudentRegistrationId());

				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				addActionMessage("Amount Mismatched.");
				return "matsFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}

		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.MATSSUCCESS;
	}

	public String etoosRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getEtoosOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getEtoosOnlineFormBean().getSalesAmount(), getEtoosOnlineFormBean().getPayment())) {

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				// Getters atarted...
				stdetails.put("salesamount", Double.parseDouble(getEtoosOnlineFormBean().getSalesAmount()));
				stdetails.put("payment", getEtoosOnlineFormBean().getPayment());
				stdetails.put("orderno", StringUtils.isBlank(getEtoosOnlineFormBean().getOrderNo()) ? " "
						: getEtoosOnlineFormBean().getOrderNo());
				stdetails.put("description", getEtoosOnlineFormBean().getDescription());
				stdetails.put("name", getEtoosOnlineFormBean().getName());
				stdetails.put("emailid", getEtoosOnlineFormBean().getEmailId());
				stdetails.put("address", getEtoosOnlineFormBean().getAddress());
				stdetails.put("state", getEtoosOnlineFormBean().getState());
				stdetails.put("city", getEtoosOnlineFormBean().getCity());
				stdetails.put("postalcode", getEtoosOnlineFormBean().getPostalCode());
				stdetails.put("country", getEtoosOnlineFormBean().getCountry());
				stdetails.put("telno", getEtoosOnlineFormBean().getTelNo());
				stdetails.put("payment_details", Double.parseDouble(getEtoosOnlineFormBean().getSalesAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getEtoosOnlineFormBean().getSalesAmount()));
				/*
				 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
				 * 
				 * String jsonString1=obMapper.writeValueAsString(objNode);
				 * 
				 * logger.info("jsonString1"+jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "faliure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				//// JSONArray jsonArray = jsonObject.getJSONArray("message");
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);
				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				int salesamount = dataobj.getInt("salesamount");
				String orderno = dataobj.getString("orderno");
				String description = dataobj.getString("description");
				String name = dataobj.getString("name");
				String emailid = dataobj.getString("emailid");
				String address = dataobj.getString("address");
				String state = dataobj.getString("state");
				String city = dataobj.getString("city");
				String postalcode = dataobj.getString("postalcode");
				String country = dataobj.getString("country");
				String telno = dataobj.getString("telno");

				// Calling all Setter methods
				getEtoosOnlineFormBean().setSalesAmount(String.valueOf(salesamount));
				getEtoosOnlineFormBean().setOrderNo(orderno);
				getEtoosOnlineFormBean().setDescription(description);
				getEtoosOnlineFormBean().setName(name);
				getEtoosOnlineFormBean().setEmailId(emailid);
				getEtoosOnlineFormBean().setAddress(address);
				getEtoosOnlineFormBean().setState(state);
				getEtoosOnlineFormBean().setCity(city);
				getEtoosOnlineFormBean().setPostalCode(postalcode);
				getEtoosOnlineFormBean().setCountry(country);
				getEtoosOnlineFormBean().setTelNo(telno);

				getEtoosOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getEtoosOnlineFormBean());

				String responseString = studentRegistrationService.insertEtoosStudentDetails(getEtoosOnlineFormBean(),
						billerId);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "etoosFailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "etoosFailure";
				}
				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getEtoosOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getEtoosOnlineFormBean().getSalesAmount());
				studentRegistrationFormBean.setStudentId(getEtoosOnlineFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getEtoosOnlineFormBean().getName());
				studentRegistrationFormBean.setStudentEmailId(getEtoosOnlineFormBean().getEmailId());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getEtoosOnlineFormBean().getStudentRegistrationId());

				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				addActionMessage("Amount Mismatched.");
				return "etoosFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}

		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.ETOOSSUCCESS;
	}

	public String BSPRRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getBsprOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getBsprOnlineFormBean().getTotalFees(), getBsprOnlineFormBean().getPayment())) {
				String responseString = studentRegistrationService.insertBSPRStudentDetails(getBsprOnlineFormBean(),
						billerId);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "bsprFailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "bsprFailure";
				}
				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getBsprOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getBsprOnlineFormBean().getTotalFees());
				studentRegistrationFormBean.setStudentId(getBsprOnlineFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getBsprOnlineFormBean().getTxtName());
				studentRegistrationFormBean.setStudentEmailId(getBsprOnlineFormBean().getTxtEmailID());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getBsprOnlineFormBean().getStudentRegistrationId());

				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				addActionMessage("Amount Mismatched.");
				return "bsprFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}

		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.BSPRSUCCESS;
	}

	public String BKLIRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getBkliOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getBkliOnlineFormBean().getAmount(), getBkliOnlineFormBean().getPayment())) {
				String responseString = studentRegistrationService.insertBKLIStudentDetails(getBkliOnlineFormBean(),
						billerId);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "bkliFailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "bkliFailure";
				}
				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getBkliOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getBkliOnlineFormBean().getAmount());
				studentRegistrationFormBean.setStudentId(getBkliOnlineFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getBkliOnlineFormBean().getFirstName());
				studentRegistrationFormBean.setStudentEmailId(getBkliOnlineFormBean().getEmailId());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getBkliOnlineFormBean().getStudentRegistrationId());

				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				addActionMessage("Amount Mismatched.");
				return "bkliFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}

		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.BKLISUCCESS;
	}

	public String BKLIAdminRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getBkliOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			LoginActionService loginActionService = new LoginActionService();
			String response = loginActionService.validateBKLIAdmin(getBkliOnlineFormBean().getUsername(),
					getBkliOnlineFormBean().getPassword());
			if (response != null && response.equalsIgnoreCase("failure")) {
				addActionError(ErrorPropertyReader.getProperty("invalid.credentials"));
				return "bkliFailure";
			} else {
				if (AmountValidation(getBkliOnlineFormBean().getAmount(), getBkliOnlineFormBean().getPayment())) {
					String responseString = studentRegistrationService.insertBKLIAdminData(getBkliOnlineFormBean(),
							billerId);

					if (responseString != null && !"".equalsIgnoreCase(responseString)
							&& "success".equalsIgnoreCase(responseString)) {
						addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
						return "bkliFailure";
					} else if ("NA".equalsIgnoreCase(responseString)) {
						addActionMessage("Failed to add student data.");
						return "bkliFailure";
					} else {
						addActionMessage("Error occured contact administrator.");
						return "bkliFailure";
					}
				} else {
					addActionMessage("Amount Mismatched.");
					return "bkliFailure";
				}
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}

	}

	public String IIBMSRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getIibmsFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getIibmsFormBean().getPayAmount(), getIibmsFormBean().getPayment())) {

				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				// Getters atarted...
				stdetails.put("name", getIibmsFormBean().getName());
				stdetails.put("branchname", getIibmsFormBean().getBranchName());
				stdetails.put("counsellorname", getIibmsFormBean().getCounsellorName());
				stdetails.put("phoneno", Long.parseLong(getIibmsFormBean().getPhoneNo()));
				stdetails.put("coursedetails", getIibmsFormBean().getCoursesDetails());
				stdetails.put("payamount", Double.parseDouble(getIibmsFormBean().getPayAmount()));
				stdetails.put("currencytype", getIibmsFormBean().getCurrencyType());
				stdetails.put("selecttranstype", getIibmsFormBean().getSelectTransType());
				stdetails.put("comment", getIibmsFormBean().getComment());
				stdetails.put("address", getIibmsFormBean().getAddress());
				stdetails.put("city", getIibmsFormBean().getCity());
				stdetails.put("state", getIibmsFormBean().getState());
				stdetails.put("zipcode", Long.parseLong(getIibmsFormBean().getZipCode()));
				stdetails.put("selectcountry", getIibmsFormBean().getSelectCountry());
				stdetails.put("email", getIibmsFormBean().getEmail());
				stdetails.put("payment_details", Double.parseDouble(getIibmsFormBean().getPayAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getIibmsFormBean().getPayAmount()));

				// Calling API...
				/*
				 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
				 * String jsonString1 = obMapper.writeValueAsString(objNode);
				 * logger.info("jsonString1" + jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE); Response
				 * response = invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				// API Response status verification ...
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "iibmsFailure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);

				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				// JSONArray jsonArray = jsonObject.getJSONArray("message");
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);
				;

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String name = dataobj.getString("name");
				String branchname = dataobj.getString("branchname");
				String counsellorname = dataobj.getString("counsellorname");
				Long phoneno = dataobj.getLong("phoneno");
				String coursedetails = dataobj.getString("coursedetails");
				int payamount = dataobj.getInt("payamount");
				String currencytype = dataobj.getString("currencytype");
				String selecttranstype = dataobj.getString("selecttranstype");
				String comment = dataobj.getString("comment");
				String address = dataobj.getString("address");
				String city = dataobj.getString("city");
				String state = dataobj.getString("state");
				Long zipcode = dataobj.getLong("zipcode");
				String selectcountry = dataobj.getString("selectcountry");
				String email = dataobj.getString("email");

				// Calling all Setter methods
				getIibmsFormBean().setName(name);
				getIibmsFormBean().setBranchName(branchname);
				getIibmsFormBean().setCounsellorName(counsellorname);
				getIibmsFormBean().setPhoneNo(String.valueOf(phoneno));
				getIibmsFormBean().setCoursesDetails(coursedetails);
				getIibmsFormBean().setPayAmount(String.valueOf(payamount));
				getIibmsFormBean().setCurrencyType(currencytype);
				getIibmsFormBean().setSelectTransType(selecttranstype);

				getIibmsFormBean().setComment(comment);
				getIibmsFormBean().setAddress(address);
				getIibmsFormBean().setCity(city);
				getIibmsFormBean().setState(state);
				getIibmsFormBean().setSelectCountry(selectcountry);
				getIibmsFormBean().setEmail(email);

				getIibmsFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getIibmsFormBean());

				String responseString = studentRegistrationService.insertIibmsStudentDetails(getIibmsFormBean(),
						billerId);
				logger.info("IIBMSRegistration: " + responseString);
				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "iibmsFailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "iibmsFailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getIibmsFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getIibmsFormBean().getPayAmount());
				studentRegistrationFormBean.setStudentId(getIibmsFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getIibmsFormBean().getName());
				studentRegistrationFormBean.setStudentEmailId(getIibmsFormBean().getEmail());
				studentRegistrationFormBean.setCurrency(getIibmsFormBean().getCurrencyType());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getIibmsFormBean().getStudentRegistrationId());
				logger.info(" IIBMSRegistration--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "iibmsFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}

		return super.IIBMSSUCCESS;

	}

	public String PPARegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getPpaFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getPpaFormBean().getPayAmount(), getPpaFormBean().getPayment())) {
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();
				stdetails.put("name", getPpaFormBean().getName());
				stdetails.put("course", getPpaFormBean().getCourse());
				stdetails.put("othercourse", StringUtils.isBlank(getPpaFormBean().getOtherCourse()) ? " "
						: getPpaFormBean().getOtherCourse());
				stdetails.put("level", getPpaFormBean().getLevel());
				stdetails.put("peraddress", getPpaFormBean().getPerAddress());
				stdetails.put("locaddress",
						StringUtils.isBlank(getPpaFormBean().getLocAddress()) ? " " : getPpaFormBean().getLocAddress());
				stdetails.put("mobileno", Long.parseLong(getPpaFormBean().getMobileNo()));
				stdetails.put("emailid", getPpaFormBean().getEmailId());
				stdetails.put("payamount", Double.parseDouble(getPpaFormBean().getPayAmount()));
				stdetails.put("payment_details", Double.parseDouble(getPpaFormBean().getPayAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getPpaFormBean().getPayAmount()));

				/*
				 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
				 * 
				 * String jsonString1=obMapper.writeValueAsString(objNode);
				 * 
				 * logger.info("jsonString1"+jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "faliure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);

				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				//// JSONArray jsonArray = jsonObject.getJSONArray("message");
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String name = dataobj.getString("name");
				String course = dataobj.getString("course");
				String othercourse = dataobj.getString("othercourse");
				String level = dataobj.getString("level");
				String peraddress = dataobj.getString("peraddress");
				String locaddress = dataobj.getString("locaddress");
				Long mobileno = dataobj.getLong("mobileno");
				String emailid = dataobj.getString("emailid");
				int payamount = dataobj.getInt("payamount");

				// Calling all Setter methods
				getPpaFormBean().setName(name);
				getPpaFormBean().setCourse(course);
				getPpaFormBean().setOtherCourse(othercourse);
				getPpaFormBean().setLevel(level);
				getPpaFormBean().setPerAddress(peraddress);
				getPpaFormBean().setLocAddress(locaddress);
				getPpaFormBean().setMobileNo(String.valueOf(mobileno));
				getPpaFormBean().setEmailId(emailid);
				getPpaFormBean().setPayAmount(String.valueOf(payamount));
				getPpaFormBean().setApplicationNo(formId);
				// END For Form Engine insertion

				// 5712 DronacharayaGOI Online form Implementation end
				getUserSessionMap().put("ONLINEFORMDATA", getPpaFormBean());
				String responseString = studentRegistrationService.insertPPAStudentDetails(getPpaFormBean(), billerId);
				logger.info("PPARegistration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "ppaFailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "ppaFailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getPpaFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getPpaFormBean().getPayAmount());
				studentRegistrationFormBean.setStudentId(getPpaFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getPpaFormBean().getName());
				studentRegistrationFormBean.setStudentEmailId(getPpaFormBean().getEmailId());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getPpaFormBean().getStudentRegistrationId());
				logger.info("PPARegistration--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "ppaFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}

		return super.PPASUCCESS;
	}

	public String JayotiRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getJayotiFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getJayotiFormBean().getAmount(), getJayotiFormBean().getPayment())) {
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();
				stdetails.put("name", getJayotiFormBean().getName());
				stdetails.put("fathersname", getJayotiFormBean().getFathersName());

				stdetails.put("mobileno", Long.parseLong(getJayotiFormBean().getMobileNo()));
				stdetails.put("emailid", getJayotiFormBean().getEmailId());
				stdetails.put("coursename", getJayotiFormBean().getCourseName());
				stdetails.put("formno", getJayotiFormBean().getFormno());
				stdetails.put("amount", Double.parseDouble(getJayotiFormBean().getAmount()));

				stdetails.put("payment_details", Double.parseDouble(getJayotiFormBean().getAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getJayotiFormBean().getAmount()));

				/*
				 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
				 * 
				 * String jsonString1=obMapper.writeValueAsString(objNode);
				 * 
				 * logger.info("jsonString1"+jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "jayotiFailure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				//// JSONArray jsonArray = jsonObject.getJSONArray("message");

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");
				String name = dataobj.getString("name");
				String coursename = dataobj.getString("coursename");
				String emailid = dataobj.getString("emailid");
				String formno = dataobj.getString("formno");
				String fathersname = dataobj.getString("fathersname");
				int amount = dataobj.getInt("amount");
				Long mobileno = dataobj.getLong("mobileno");

				getJayotiFormBean().setName(name);
				getJayotiFormBean().setFathersName(fathersname);
				getJayotiFormBean().setCourseName(coursename);
				getJayotiFormBean().setFormno(formno);
				getJayotiFormBean().setEmailId(emailid);
				getJayotiFormBean().setMobileNo(String.valueOf(mobileno));
				getJayotiFormBean().setAmount(String.valueOf(amount));
				getJayotiFormBean().setApplicationNo(formId);
				// END For Form Engine insertion

				// 5712 DronacharayaGOI Online form Implementation end
				getUserSessionMap().put("ONLINEFORMDATA", getJayotiFormBean());

				String responseString = studentRegistrationService.insertJayotiStudentDetails(getJayotiFormBean(),
						billerId);
				logger.info("PrincipalRegistration: " + responseString);
				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "jayotiFailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "jayotiFailure";
				}
				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getJayotiFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getJayotiFormBean().getAmount());
				studentRegistrationFormBean.setStudentId(getJayotiFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getJayotiFormBean().getStudentRegistrationId());
				logger.info(" PrincipalRegistration--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				addActionMessage("Amount Mismatched.");
				return "jayotiFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.JAYOTISUCCESS;

	}

	public String PrincipalRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getPrincipalOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getPrincipalOnlineFormBean().getAmount(), getPrincipalOnlineFormBean().getPayment())) {

				// 5712 DronacharayaGOI Online form Implememtation started
				// Start For Form Engine insertion

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();
				stdetails.put("enrollmentno", getPrincipalOnlineFormBean().getEnrollmentNo());
				stdetails.put("name", getPrincipalOnlineFormBean().getName());
				stdetails.put("address", getPrincipalOnlineFormBean().getAddress());
				stdetails.put("fathername", getPrincipalOnlineFormBean().getFatherName());
				stdetails.put("contactno", Long.parseLong(getPrincipalOnlineFormBean().getContactNo()));
				stdetails.put("emailid", getPrincipalOnlineFormBean().getEmailId());
				stdetails.put("paymentfor", getPrincipalOnlineFormBean().getPaymentFor());
				stdetails.put("amount", Double.parseDouble(getPrincipalOnlineFormBean().getAmount()));
				stdetails.put("remarks", getPrincipalOnlineFormBean().getRemarks());
				stdetails.put("payment_details", Double.parseDouble(getPrincipalOnlineFormBean().getAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getPrincipalOnlineFormBean().getAmount()));

				/*
				 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
				 * 
				 * String jsonString1=obMapper.writeValueAsString(objNode);
				 * 
				 * logger.info("jsonString1"+jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "faliure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				//// JSONArray jsonArray = jsonObject.getJSONArray("message");
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String address = dataobj.getString("address");
				String fathername = dataobj.getString("fathername");
				Long contactno = dataobj.getLong("contactno");
				String emailid = dataobj.getString("emailid");
				String paymentfor = dataobj.getString("paymentfor");
				int amount = dataobj.getInt("amount");
				String remarks = dataobj.getString("remarks");
				String name = dataobj.getString("name");
				String enrollmentno = dataobj.getString("enrollmentno");

				// Calling all Setter methods
				getPrincipalOnlineFormBean().setEnrollmentNo(enrollmentno);
				getPrincipalOnlineFormBean().setName(name);
				getPrincipalOnlineFormBean().setAddress(address);
				getPrincipalOnlineFormBean().setFatherName(fathername);
				getPrincipalOnlineFormBean().setContactNo(String.valueOf(contactno));
				getPrincipalOnlineFormBean().setEmailId(emailid);
				getPrincipalOnlineFormBean().setPaymentFor(paymentfor);
				getPrincipalOnlineFormBean().setAmount(String.valueOf(amount));
				getPrincipalOnlineFormBean().setRemarks(remarks);

				getPrincipalOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getPrincipalOnlineFormBean());
				String responseString = studentRegistrationService
						.insertPrincipalStudentDetails(getPrincipalOnlineFormBean(), billerId);

				logger.info("PrincipalRegistration: " + responseString);
				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "principalFailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "principalFailure";
				}
				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getPrincipalOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getPrincipalOnlineFormBean().getAmount());
				studentRegistrationFormBean.setStudentId(getPrincipalOnlineFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getPrincipalOnlineFormBean().getName());
				studentRegistrationFormBean.setStudentEmailId(getPrincipalOnlineFormBean().getEmailId());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getPrincipalOnlineFormBean().getStudentRegistrationId());
				logger.info(" PrincipalRegistration--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				addActionMessage("Amount Mismatched.");
				return "principalFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return super.PRINCIPALSSUCCESS;
	}

	public String INITRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getIntlOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getIntlOnlineFormBean().getTotalAmount(), getIntlOnlineFormBean().getPayment())) {
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();
				stdetails.put("stdirn", getIntlOnlineFormBean().getStdIrn());
				stdetails.put("selectadmissionto", getIntlOnlineFormBean().getSelectAdmissionTo());
				stdetails.put("selectfacility", getIntlOnlineFormBean().getSelectFacility());
				stdetails.put("selectoccupancytype", getIntlOnlineFormBean().getSelectOccupancyType());
				stdetails.put("selectbranch", getIntlOnlineFormBean().getSelectBranch());
				stdetails.put("academicyear", getIntlOnlineFormBean().getAcademicYear());
				stdetails.put("selectgender", getIntlOnlineFormBean().getSelectGender());
				stdetails.put("selectadmissiontype", getIntlOnlineFormBean().getSelectAdmissionType());
				stdetails.put("selectadmcategory", getIntlOnlineFormBean().getSelectAdmCategory());
				stdetails.put("studentname", getIntlOnlineFormBean().getStudentName());
				stdetails.put("fathername", getIntlOnlineFormBean().getFatherName());
				stdetails.put("city", getIntlOnlineFormBean().getCity());
				stdetails.put("state", getIntlOnlineFormBean().getState());
				stdetails.put("stdmobileno", Long.parseLong(getIntlOnlineFormBean().getStdMobileNo()));
				stdetails.put("parentmobileno", Long.parseLong(getIntlOnlineFormBean().getParentMobileNo()));
				stdetails.put("emailid", getIntlOnlineFormBean().getEmailId());
				stdetails.put("totalamount", Double.parseDouble(getIntlOnlineFormBean().getTotalAmount()));
				int courseListLength = getIntlOnlineFormBean().getCourseNameList().size();
				ArrayNode arrayNode = obMapper.createArrayNode();

				for (int i = 0; i < courseListLength; i++) {
					INTLCourseFormBean intlCourseFormBean = (INTLCourseFormBean) getIntlOnlineFormBean()
							.getCourseNameList().get(i);
					if (intlCourseFormBean != null) {
						if (!intlCourseFormBean.getCourseName().equalsIgnoreCase("")
								&& !intlCourseFormBean.getCourseAmount().equalsIgnoreCase("")) {

							ObjectNode objNode1 = obMapper.createObjectNode();

							// studentRegistrationService.insertHaryanaEducationDetails(educationHaryanaFormBean,getHaryanaFormBean().getApplicationNo());
							objNode1.put("coursename", intlCourseFormBean.getCourseName());
							objNode1.put("courseamount", Double.parseDouble(intlCourseFormBean.getCourseAmount()));

							arrayNode.add(objNode1);
						}
					}
				}
				stdetails.put("tags", arrayNode);
				stdetails.put("payment_details", Double.parseDouble(getIntlOnlineFormBean().getTotalAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getIntlOnlineFormBean().getTotalAmount()));

				/*
				 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
				 * 
				 * String jsonString1=obMapper.writeValueAsString(objNode);
				 * 
				 * logger.info("jsonString1"+jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "faliure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				//// JSONArray jsonArray = jsonObject.getJSONArray("message");
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String stdirn = dataobj.getString("stdirn");
				String selectadmissionto = dataobj.getString("selectadmissionto");
				String selectbranch = dataobj.getString("selectbranch");
				String selectfacility = dataobj.getString("selectfacility");
				String selectoccupancytype = dataobj.getString("selectoccupancytype");
				String academicyear = dataobj.getString("academicyear");
				String selectgender = dataobj.getString("selectgender");
				String selectadmissiontype = dataobj.getString("selectadmissiontype");
				String selectadmcategory = dataobj.getString("selectadmcategory");
				String studentname = dataobj.getString("studentname");
				String fathername = dataobj.getString("fathername");
				String city = dataobj.getString("city");
				String state = dataobj.getString("state");
				Long stdmobileno = dataobj.getLong("stdmobileno");
				Long parentmobileno = dataobj.getLong("parentmobileno");
				String emailid = dataobj.getString("emailid");
				int totalamount = dataobj.getInt("totalamount");

				getIntlOnlineFormBean().setStdIrn(stdirn);
				getIntlOnlineFormBean().setSelectAdmissionTo(selectadmissionto);
				getIntlOnlineFormBean().setSelectFacility(selectfacility);
				getIntlOnlineFormBean().setSelectOccupancyType(selectoccupancytype);
				getIntlOnlineFormBean().setAcademicYear(academicyear);
				getIntlOnlineFormBean().setSelectGender(selectgender);
				getIntlOnlineFormBean().setSelectAdmissionType(selectadmissiontype);
				getIntlOnlineFormBean().setStudentName(studentname);
				getIntlOnlineFormBean().setFatherName(fathername);
				getIntlOnlineFormBean().setCity(city);
				getIntlOnlineFormBean().setState(state);
				getIntlOnlineFormBean().setStdMobileNo(String.valueOf(stdmobileno));
				getIntlOnlineFormBean().setParentMobileNo((String.valueOf(parentmobileno)));
				getIntlOnlineFormBean().setEmailId(emailid);
				getIntlOnlineFormBean().setTotalAmount((String.valueOf(totalamount)));
				getIntlOnlineFormBean().setSelectBranch(selectbranch);
				getIntlOnlineFormBean().setSelectAdmCategory(selectadmcategory);

				getIntlOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getIntlOnlineFormBean());
				String responseString = studentRegistrationService.insertINTLStudentDetails(getIntlOnlineFormBean(),
						billerId);
				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					List<INTLCourseFormBean> courseDataList = studentRegistrationService.fetchINTLCourseDetails();
					if (courseDataList != null && courseDataList.size() > 0) {
						getUserSessionMap().put("_gnluChallanDataList", courseDataList);
					}
					return "intlFailure";
				} else {
					List<INTLCourseFormBean> courseDataList = studentRegistrationService.fetchINTLCourseDetails();
					if (courseDataList != null && courseDataList.size() > 0) {
						getUserSessionMap().put("_gnluChallanDataList", courseDataList);
					}
					addActionMessage("Error occured contact administrator.");
					return "intlFailure";
				}
				getIntlOnlineFormBean().getCourseNameList().removeAll(Collections.singleton(null));
				/*
				 * int courseListLength = getIntlOnlineFormBean().getCourseNameList().size();
				 * for(int i=0; i < courseListLength; i++ ) { INTLCourseFormBean
				 * intlCourseFormBean = (INTLCourseFormBean)
				 * getIntlOnlineFormBean().getCourseNameList().get(i); if(intlCourseFormBean !=
				 * null){ if(!intlCourseFormBean.getCourseName().equalsIgnoreCase("") &&
				 * !intlCourseFormBean.getCourseAmount().equalsIgnoreCase("")){
				 * studentRegistrationService.insertINTLCourseDetails(intlCourseFormBean,
				 * getIntlOnlineFormBean().getApplicationNo()); } } }
				 */
				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getIntlOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getIntlOnlineFormBean().getTotalAmount());
				studentRegistrationFormBean.setStudentId(getIntlOnlineFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getIntlOnlineFormBean().getStudentName());
				studentRegistrationFormBean.setStudentEmailId(getIntlOnlineFormBean().getEmailId());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getIntlOnlineFormBean().getStudentRegistrationId());

				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				List<INTLCourseFormBean> courseDataList = studentRegistrationService.fetchINTLCourseDetails();
				if (courseDataList != null && courseDataList.size() > 0) {
					getUserSessionMap().put("_gnluChallanDataList", courseDataList);
				}
				addActionMessage("Amount Mismatched.");
				return "intlFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}

		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.INTLIITSUCCESS;
	}

	public String OrigenceRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getOrigenceOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getOrigenceOnlineFormBean().getTotAmount(),
					getOrigenceOnlineFormBean().getPayment())) {
				String responseString = studentRegistrationService
						.insertOrigenceStudentDetails(getOrigenceOnlineFormBean(), billerId);
				logger.info("origence Registration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "origenceFailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "origenceFailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getOrigenceOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getOrigenceOnlineFormBean().getTotAmount());
				studentRegistrationFormBean.setStudentId(getOrigenceOnlineFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getOrigenceOnlineFormBean().getStdName());
				studentRegistrationFormBean.setStudentEmailId(getOrigenceOnlineFormBean().getEmail());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getOrigenceOnlineFormBean().getStudentRegistrationId());
				logger.info("origence Registration--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "origenceFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return super.ORIGENCESUCCESS;
	}

	public String NATLRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getNatlOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getNatlOnlineFormBean().getFeeAmount(), getNatlOnlineFormBean().getPayment())) {

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();
				stdetails.put("stdname", getNatlOnlineFormBean().getStdName());
				stdetails.put("rollnumber", getNatlOnlineFormBean().getRollNumber());
				stdetails.put("mobileno", Long.parseLong(getNatlOnlineFormBean().getMobileNo()));
				stdetails.put("feeamount", Double.parseDouble(getNatlOnlineFormBean().getFeeAmount()));
				stdetails.put("selectcourse", getNatlOnlineFormBean().getSelectCourse());
				stdetails.put("remarks", StringUtils.isBlank(getNatlOnlineFormBean().getRemarks()) ? " "
						: getNatlOnlineFormBean().getRemarks());
				stdetails.put("payment_details", Double.parseDouble(getNatlOnlineFormBean().getFeeAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getNatlOnlineFormBean().getFeeAmount()));

				/*
				 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
				 * 
				 * String jsonString1=obMapper.writeValueAsString(objNode);
				 * 
				 * logger.info("jsonString1"+jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */

				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "faliure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */

				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				//// JSONArray jsonArray = jsonObject.getJSONArray("message");
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String stdname = dataobj.getString("stdname");
				String rollnumber = dataobj.getString("rollnumber");
				Long mobileno = dataobj.getLong("mobileno");
				int feeamount = dataobj.getInt("feeamount");
				String remarks = dataobj.getString("remarks");
				String selectcourse = dataobj.getString("selectcourse");

				// Calling all Setter methods
				getNatlOnlineFormBean().setStdName(stdname);
				getNatlOnlineFormBean().setRollNumber(rollnumber);
				getNatlOnlineFormBean().setMobileNo(String.valueOf(mobileno));
				getNatlOnlineFormBean().setFeeAmount(String.valueOf(feeamount));
				getNatlOnlineFormBean().setSelectCourse(selectcourse);
				getNatlOnlineFormBean().setRemarks(remarks);

				getNatlOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getNatlOnlineFormBean());

				String responseString = studentRegistrationService.insertNatlStudentDetails(getNatlOnlineFormBean(),
						billerId);
				logger.info("NATL Registration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "natlFailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "natlFailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getNatlOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getNatlOnlineFormBean().getFeeAmount());
				studentRegistrationFormBean.setStudentId(getNatlOnlineFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getNatlOnlineFormBean().getStdName());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getNatlOnlineFormBean().getStudentRegistrationId());
				logger.info("NATL Registration--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "natlFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return super.NATLSUCCESS;
	}

	public String LanRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getLanOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getLanOnlineFormBean().getTotAmount(), getLanOnlineFormBean().getPayment())) {
				String responseString = studentRegistrationService.insertLanStudentDetails(getLanOnlineFormBean(),
						billerId);
				logger.info("Lan Registration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "lanFailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "lanFailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getLanOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getLanOnlineFormBean().getTotAmount());
				studentRegistrationFormBean.setStudentId(getLanOnlineFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getLanOnlineFormBean().getStdName());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getLanOnlineFormBean().getStudentRegistrationId());
				logger.info("Lan Registration--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "lanFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return super.LANSUCCESS;
	}

	public String DTERegistration() {
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		RequestDispatcher rd = null;
		String msg = "";
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String instituteID = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getDteFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			getDteFormBean().setFreshAdmissionType(dteFormBean.getFreshAdmissionTypeName());
			getDteFormBean().setFreshCourse(dteFormBean.getFreshCourseName());
			getDteFormBean().setFreshCollege(dteFormBean.getFreshCollegeName());
			getDteFormBean().setFreshBranch(dteFormBean.getFreshBranchNAme());
			getDteFormBean().setFreshCategory(dteFormBean.getFreshCategoryName());

			getDteFormBean().setRepeatAdmissionType(dteFormBean.getRepeatAdmissionTypeName());
			getDteFormBean().setRepeatCourse(dteFormBean.getRepeatCourseName());
			getDteFormBean().setRepeatCollege(dteFormBean.getRepeatCollegeNmae());
			getDteFormBean().setRepeatBranch(dteFormBean.getRepeatBranchName());
			getDteFormBean().setRepeatCategory(dteFormBean.getRepeatCategoryName());

			String pmtMode = getDteFormBean().getDtePaymentMode();
			if (pmtMode.equalsIgnoreCase("Over the Counter")) {
				String responseStr = studentRegistrationService.validateDTEAdmin(getDteFormBean().getUserName(),
						getDteFormBean().getPassword());
				if (responseStr != null && responseStr.equalsIgnoreCase("FAIL")) {
					addActionError(ErrorPropertyReader.getProperty("invalid.credentials"));
					return "dteFailure";
				} else {
					if (AmountValidation(getDteFormBean().getTotalAmount(), getDteFormBean().getPayment())) {
						ObjectMapper obMapper = new ObjectMapper();
						ObjectNode objNode = obMapper.createObjectNode();

						InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
								.getInstituteFormDetails(instituteID);

						// Object Node declaration
						objNode.put("application_id", "SMARTHUB");
						objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
						objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
						ObjectNode stdetails = obMapper.createObjectNode();

						SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
						Date date1 = new Date();

						// Getters atarted...
						stdetails.put("stdname", getDteFormBean().getStdName());
						stdetails.put("seekingadmission", getDteFormBean().getSeekingAdmission());
						stdetails.put("registrationno", getDteFormBean().getRegistrationNo());
						stdetails.put("freshadmissiontypename", getDteFormBean().getFreshAdmissionTypeName());
						stdetails.put("freshcoursename", getDteFormBean().getFreshCourseName());
						stdetails.put("freshcollegename", getDteFormBean().getFreshCollegeName());
						stdetails.put("freshbranchname", getDteFormBean().getFreshBranchNAme());
						stdetails.put("freshcategoryname", getDteFormBean().getFreshCategoryName());
						stdetails.put("prevpaidamount", getDteFormBean().getPrevPaidAmount());
						stdetails.put("repeatadmissiontypename", getDteFormBean().getRepeatAdmissionTypeName());
						stdetails.put("repeatcoursename", getDteFormBean().getRepeatCourseName());
						stdetails.put("repeatcollegenmae", getDteFormBean().getRepeatCollegeNmae());
						stdetails.put("repeatbranchname", getDteFormBean().getRepeatBranchName());
						stdetails.put("repeatcategoryname", getDteFormBean().getRepeatCategoryName());
						stdetails.put("freshadmissiontype", getDteFormBean().getFreshAdmissionType());
						stdetails.put("freshcourse", getDteFormBean().getFreshCourse());
						stdetails.put("freshcollege", getDteFormBean().getFreshCollege());
						stdetails.put("freshbranch", getDteFormBean().getFreshBranch());
						stdetails.put("freshcategory", getDteFormBean().getFreshCategory());
						stdetails.put("repeatadmissiontype", getDteFormBean().getRepeatAdmissionType());
						stdetails.put("repeatcourse", getDteFormBean().getRepeatCourse());
						stdetails.put("repeatcollege", getDteFormBean().getRepeatCollege());
						stdetails.put("repeatbranch", getDteFormBean().getRepeatBranch());
						stdetails.put("repeatcategory", getDteFormBean().getRepeatCategory());
						stdetails.put("amount", Double.parseDouble(getDteFormBean().getAmount()));
						stdetails.put("dteadmissionfee", getDteFormBean().getDTEAdmissionFee());
						stdetails.put("totalamount", Double.parseDouble(getDteFormBean().getTotalAmount()));
						stdetails.put("currentamount", Double.parseDouble(getDteFormBean().getCurrentAmount()));
						stdetails.put("adjustedamount", Double.parseDouble(getDteFormBean().getAdjustedAmount()));
						stdetails.put("dtepaymentmode", getDteFormBean().getDtePaymentMode());
						stdetails.put("username", getDteFormBean().getUserName());
						stdetails.put("password", getDteFormBean().getPassword());
						stdetails.put("collegename", getDteFormBean().getCollegeName());
						stdetails.put("payment_details", Double.parseDouble(getDteFormBean().getTotalAmount()));
						stdetails.put("registered_userId", registeredUserId);
						stdetails.put("student_registrationid", "0");
						stdetails.put("application_no", "0");
						stdetails.put("recon_date", formatter.format(date1));
						stdetails.put("r_cre_time", formatter.format(date1));
						stdetails.put("r_mod_time", formatter.format(date1));
						stdetails.put("pg_pmt_status", "A");
						stdetails.put("Acc_Holder_Name", " ");
						stdetails.put("Res_Msg", " ");
						stdetails.put("Payment_Mode", " ");
						stdetails.put("Bank_Name", " ");
						stdetails.put("ALT_ERROR_DESC", " ");
						stdetails.put("Pmt_Id", "");
						stdetails.put("Payment_id", "");
						stdetails.put("PGTxnID", "");
						stdetails.put("BANK_ID", "");
						stdetails.put("Txn_Amt", Double.parseDouble(getDteFormBean().getTotalAmount()));

						/*
						 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
						 * 
						 * String jsonString1=obMapper.writeValueAsString(objNode);
						 * 
						 * logger.info("jsonString1"+jsonString1.toString());
						 */

						objNode.put("form_data", stdetails);

						String jsonString1 = obMapper.writeValueAsString(objNode);

						logger.info("jsonString1" + jsonString1.toString());
						// code added by priya

						/*** *** *** Initialization start *** *** ***/
						SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

						secureAPIBuilder
								.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
						secureAPIBuilder.setUpstreamServerPort(443);

						secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
						secureAPIBuilder.setVerifyServerSSL(false);

						// String clientId = "actual-smarthub-node-ip";
						// String clientKeyStr =
						// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

						// secureAPIBuilder.setAuthenticationAlias(clientId);

						// byte[] clientKey = hexStringToByteArray(clientKeyStr);
						// secureAPIBuilder.setAuthenticationKey(clientKey);

						SecureAPIConnection secureAPI = secureAPIBuilder.build();
						/*** *** *** Initialization complete *** *** ***/

						// CODE END
						Client client = ClientBuilder.newClient();

						/*
						 * WebTarget webTarget =
						 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
						 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
						 * invocationBuilder =
						 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
						 * 
						 * Response responseww =
						 * invocationBuilder.post(Entity.json(jsonString1.toString()));
						 * logger.info("response" + response.toString());
						 */

						APIResponse apiResponse = null;

						apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

						System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
								+ apiResponse.getResponseCode());

						String responseBody = apiResponse.getData().toString();

						logger.info("response" + apiResponse.toString());
						if (apiResponse.getResponseCode() != 201) {
							String outputError = apiResponse.getData().toString();
							JSONObject json = new JSONObject(outputError);
							String messageerror = json.getString("message");
							String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
							messageerror=friendlyMessageFromAPIError;
							logger.info("messageerror"+messageerror);
							addActionMessage(messageerror);
							logger.info("messageerror" + messageerror);
							addActionMessage(messageerror);
							return "faliure";
							// throw new RuntimeException("Failed : HTTP error code : " +
							// response.getStatus());
						}

						logger.info("Output from Server .... \n");
						String output = apiResponse.getData().toString();
						JSONObject json = new JSONObject(output);
						JSONObject data1 = json.getJSONObject("data");
						String formId = data1.getString("form_id");
						logger.info("formId" + formId);

						getUserSessionMap().put("application_id", "SMARTHUB");
						getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
						getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
						getUserSessionMap().put("form_id", formId);

						SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
						smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
						smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
						smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
						smartHubFetchOnlineFormBean.setForm_id(formId);

						String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
						logger.info("jsonString2" + jsonString2);

						/*
						 * WebTarget webTarget1 =
						 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
						 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
						 * Invocation.Builder invocationBuilder1 =
						 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
						 * 
						 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
						 * logger.info("responseString", response1.toString());
						 */
						// code added by priya form engine
						APIResponse apiResponse1 = null;

						apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data",
								jsonString2.toString());

						System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
								+ apiResponse1.getResponseCode());

						logger.info("responseString", apiResponse1.toString());
						if (apiResponse1.getResponseCode() != 200) {
							throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
						}
						logger.info("Output from Server .... \n");
						String output1 = apiResponse.getData().toString();

						logger.info("output1" + output1);

						JSONObject jsonObject = new JSONObject(output1);

						//// JSONArray jsonArray = jsonObject.getJSONArray("message");
						JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");

						JSONObject data = jsonArray.getJSONObject(0);
						JSONObject dataobj = data.getJSONObject("form_data");

						String stdname = dataobj.getString("stdName");
						String seekingadmission = dataobj.getString("seekingAdmission");
						String registrationno = dataobj.getString("registrationNo");
						String freshadmissiontypename = dataobj.getString("freshAdmissionTypeName");
						String freshcoursename = dataobj.getString("freshCourseName");
						String freshcollegename = dataobj.getString("freshCollegeName");
						String freshbranchname = dataobj.getString("freshBranchNAme");
						String freshcategoryname = dataobj.getString("freshCategoryName");
						int prevpaidamount = dataobj.getInt("prevPaidAmount");
						String repeatadmissiontypename = dataobj.getString("repeatAdmissionTypeName");
						String repeatcoursename = dataobj.getString("repeatCourseName");
						String repeatcollegenmae = dataobj.getString("repeatCollegeNmae");
						String repeatbranchname = dataobj.getString("repeatBranchName");
						String repeatcategoryname = dataobj.getString("repeatCategoryName");
						String freshadmissiontype = dataobj.getString("freshAdmissionType");
						String freshcourse = dataobj.getString("freshCourse");
						String freshcollege = dataobj.getString("freshCollege");
						String freshbranch = dataobj.getString("freshBranch");
						String freshcategory = dataobj.getString("freshCategory");
						String repeatadmissiontype = dataobj.getString("repeatAdmissionType");
						String repeatcourse = dataobj.getString("repeatCourse");
						String repeatcollege = dataobj.getString("repeatCollege");
						String repeatbranch = dataobj.getString("repeatBranch");
						String repeatcategory = dataobj.getString("repeatCategory");
						int amount = dataobj.getInt("amount");
						int dteadmissionfee = dataobj.getInt("DTEAdmissionFee");
						int totalamount = dataobj.getInt("totalAmount");
						int currentamount = dataobj.getInt("currentAmount");
						int adjustedamount = dataobj.getInt("adjustedAmount");
						String dtepaymentmode = dataobj.getString("dtePaymentMode");
						String username = dataobj.getString("userName");
						String password = dataobj.getString("password");
						String collegename = dataobj.getString("collegeName");

						// Calling all Setter methods
						getDteFormBean().setStdName(stdname);
						getDteFormBean().setSeekingAdmission(seekingadmission);
						getDteFormBean().setRegistrationNo(registrationno);
						getDteFormBean().setFreshAdmissionTypeName(freshadmissiontypename);
						getDteFormBean().setFreshCourseName(freshcoursename);
						getDteFormBean().setFreshCollegeName(freshcollegename);
						getDteFormBean().setFreshBranchNAme(freshbranchname);
						getDteFormBean().setFreshCategoryName(freshcategoryname);
						getDteFormBean().setPrevPaidAmount(String.valueOf(prevpaidamount));
						getDteFormBean().setRepeatAdmissionTypeName(repeatadmissiontypename);
						getDteFormBean().setRepeatCourseName(repeatcoursename);
						getDteFormBean().setRepeatCollegeNmae(repeatcollegenmae);
						getDteFormBean().setRepeatBranchName(repeatbranchname);
						getDteFormBean().setRepeatCategoryName(repeatcategoryname);
						getDteFormBean().setFreshAdmissionType(freshadmissiontype);
						getDteFormBean().setFreshCourse(freshcourse);
						getDteFormBean().setFreshCollege(freshcollege);
						getDteFormBean().setFreshBranch(freshbranch);
						getDteFormBean().setFreshCategory(freshcategory);
						getDteFormBean().setRepeatAdmissionType(repeatadmissiontype);
						getDteFormBean().setRepeatCourse(repeatcourse);
						getDteFormBean().setRepeatCollege(repeatcollege);
						getDteFormBean().setRepeatBranch(repeatbranch);
						getDteFormBean().setRepeatCategory(repeatcategory);
						getDteFormBean().setAmount(String.valueOf(amount));
						getDteFormBean().setDTEAdmissionFee(String.valueOf(dteadmissionfee));
						getDteFormBean().setTotalAmount(String.valueOf(totalamount));
						getDteFormBean().setCurrentAmount(String.valueOf(currentamount));
						getDteFormBean().setAdjustedAmount(String.valueOf(adjustedamount));
						getDteFormBean().setDtePaymentMode(dtepaymentmode);
						getDteFormBean().setUserName(username);
						getDteFormBean().setPassword(password);
						getDteFormBean().setCollegeName(collegename);

						getDteFormBean().setApplicationNo(formId);
						getUserSessionMap().put("ONLINEFORMDATA", getDteFormBean());

						// 5712 DronacharayaGOI Online form Implementation end
						String responseString = studentRegistrationService.insertDTEStudentDetails(getDteFormBean(),
								instituteID);
						logger.info("DTE Registration: " + responseString);

						if (responseString != null && !"".equalsIgnoreCase(responseString)
								&& "success".equalsIgnoreCase(responseString)) {
							addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
							msg = "Successfully Added Data";
							studentRegistrationFormBean = super.getRegisteredStudentDetails(
									getDteFormBean().getStudentRegistrationId());
							studentRegistrationFormBean.setTotalPayableFees(getDteFormBean().getTotalAmount());
							studentRegistrationFormBean.setStudentId(getDteFormBean().getApplicationNo());
							studentRegistrationFormBean.setStudentName(getDteFormBean().getStdName());
							appData1 = new PaymentRequestBean();
							appData1.setStudentRegistrationId(getDteFormBean().getStudentRegistrationId());
							java.util.Date date = new java.util.Date();
							appData1.setStrTransactionDateTime(date.toString());
							getUserSessionMap().put("APPDATA", getAppData1());
							getUserSessionMap().put("DTEDATA", dteFormBean);
							getUserSessionMap().put("INSTCODE", instituteID);
							setUniqueSessionIdentifier(getUserSessionMap().get("sessionKey").toString());
							// rd = request.getRequestDispatcher("DTEOverTheCounter.jsp?msg=" + msg +
							// "&reqTxnId=" + "NA"
							// +"&uniqueSessionIdentifier="+getUserSessionMap().get("sessionKey"));
							// rd.forward(request, response);

						} else if ("NA".equalsIgnoreCase(responseString)) {
							addActionMessage("Failed to add student data.");
							return "dteFailure";
						} else {
							addActionMessage("Error occured contact administrator.");
							return "dteFailure";
						}

					} else {
						addActionMessage("Amount Mismatched.");
						return "dteFailure";
					}
				}
				return "OverTheCountert";
			} else {
				if (AmountValidation(getDteFormBean().getTotalAmount(), getDteFormBean().getPayment())) {
					String responseString = studentRegistrationService.insertDTEStudentDetails(getDteFormBean(),
							instituteID);
					logger.info("DTE Registration: " + responseString);

					if (responseString != null && !"".equalsIgnoreCase(responseString)
							&& "success".equalsIgnoreCase(responseString)) {
						addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
					} else if ("NA".equalsIgnoreCase(responseString)) {
						addActionMessage("Failed to add student data.");
						return "dteFailure";
					} else {
						addActionMessage("Error occured contact administrator.");
						return "dteFailure";
					}

					studentRegistrationFormBean = super.getRegisteredStudentDetails(
							getDteFormBean().getStudentRegistrationId());
					studentRegistrationFormBean.setTotalPayableFees(getDteFormBean().getTotalAmount());
					studentRegistrationFormBean.setStudentId(getDteFormBean().getApplicationNo());
					studentRegistrationFormBean.setStudentName(getDteFormBean().getStdName());
					super.applyFees(studentRegistrationFormBean);

					QuickPayAction quickPayAction = new QuickPayAction();
					appData1 = new PaymentRequestBean();
					appData1.setStudentRegistrationId(getDteFormBean().getStudentRegistrationId());
					logger.info("DTE Registration--feesPayList :: " + feesPayList);
					quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

					getUserSessionMap().put("APPDATA", getAppData1());

				} else {
					addActionMessage("Amount Mismatched.");
					return "dteFailure";
				}
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return super.DTESUCCESS;
	}

	public String RUNGTAColRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String instituteID = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getRungtaCollegeFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getRungtaCollegeFormBean().getTotalAmount(),
					getRungtaCollegeFormBean().getPayment())) {
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(instituteID);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();
				stdetails.put("stdname", getRungtaCollegeFormBean().getStdName());
				stdetails.put("admissionnumber", getRungtaCollegeFormBean().getAdmissionNumber());
				stdetails.put("course", getRungtaCollegeFormBean().getCourse());
				stdetails.put("semester", getRungtaCollegeFormBean().getSemester());
				stdetails.put("branch", getRungtaCollegeFormBean().getBranch());
				stdetails.put("branch1", getRungtaCollegeFormBean().getBranch1());
				stdetails.put("branch2", getRungtaCollegeFormBean().getBranch2());
				stdetails.put("branch3", getRungtaCollegeFormBean().getBranch3());
				stdetails.put("branch4", getRungtaCollegeFormBean().getBranch4());
				stdetails.put("mobileno", Long.parseLong(getRungtaCollegeFormBean().getMobileNo()));
				stdetails.put("tuitionfees",
						getRungtaCollegeFormBean().getTuitionFees() != null
								? Double.parseDouble(getRungtaCollegeFormBean().getTuitionFees())
								: 0);
				stdetails.put("cautionmoney",
						getRungtaCollegeFormBean().getCautionMoney() != null
								? Double.parseDouble(getRungtaCollegeFormBean().getCautionMoney())
								: 0);
				stdetails.put("hostelfees",
						getRungtaCollegeFormBean().getHostelFees() != null
								? Double.parseDouble(getRungtaCollegeFormBean().getHostelFees())
								: 0);
				stdetails.put("hostelcautionmoney",
						getRungtaCollegeFormBean().getHostelCautionMoney() != null
								? Double.parseDouble(getRungtaCollegeFormBean().getHostelCautionMoney())
								: 0);
				stdetails.put("busfees",
						getRungtaCollegeFormBean().getBusFees() != null
								? Double.parseDouble(getRungtaCollegeFormBean().getBusFees())
								: 0);
				stdetails.put("latefees",
						getRungtaCollegeFormBean().getLateFees() != null
								? Double.parseDouble(getRungtaCollegeFormBean().getLateFees())
								: 0);
				stdetails.put("others",
						getRungtaCollegeFormBean().getOthers() != null
								? Double.parseDouble(getRungtaCollegeFormBean().getOthers())
								: 0);
				stdetails.put("remarks",
						!StringUtils.isBlank(getRungtaCollegeFormBean().getRemarks())
								? getRungtaCollegeFormBean().getRemarks()
								: " ");
				stdetails.put("amount",
						!StringUtils.isBlank(getRungtaCollegeFormBean().getAmount())
								? Double.parseDouble(getRungtaCollegeFormBean().getAmount())
								: 0);
				stdetails.put("totalamount", Double.parseDouble(getRungtaCollegeFormBean().getTotalAmount()));
				stdetails.put("chktutionfee", getRungtaCollegeFormBean().getChkTutionFee() == null ? "N"
						: getRungtaCollegeFormBean().getChkTutionFee());
				stdetails.put("chkcautionmoney", getRungtaCollegeFormBean().getChkCautionMoney() == null ? "N"
						: getRungtaCollegeFormBean().getChkCautionMoney());
				stdetails.put("chkhostelfee", getRungtaCollegeFormBean().getChkHostelFee() == null ? "N"
						: getRungtaCollegeFormBean().getChkHostelFee());
				stdetails.put("chkhostelcautionmoney",
						getRungtaCollegeFormBean().getChkHostelCautionMoney() == null ? "N"
								: getRungtaCollegeFormBean().getChkHostelCautionMoney());
				stdetails.put("chkbusfee", getRungtaCollegeFormBean().getChkBusFee() == null ? "N"
						: getRungtaCollegeFormBean().getChkBusFee());
				stdetails.put("chklatefee", getRungtaCollegeFormBean().getChkLateFee() == null ? "N"
						: getRungtaCollegeFormBean().getChkLateFee());
				stdetails.put("payment_details", Double.parseDouble(getRungtaCollegeFormBean().getTotalAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getRungtaCollegeFormBean().getTotalAmount()));
				// Calling API...
				/*
				 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
				 * String jsonString1 = obMapper.writeValueAsString(objNode);
				 * logger.info("jsonString1" + jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE); Response
				 * response = invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */

				// API Response status verification ...
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "rungtaColFailure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				// JSONArray jsonArray = jsonObject.getJSONArray("message");
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String stdname = dataobj.getString("stdname");
				String admissionnumber = dataobj.getString("admissionnumber");
				String course = dataobj.getString("course");
				String semester = dataobj.getString("semester");
				String branch = dataobj.getString("branch");
				String branch1 = dataobj.getString("branch1");
				String branch2 = dataobj.getString("branch2");
				String branch3 = dataobj.getString("branch3");
				String branch4 = dataobj.getString("branch4");
				Long mobileno = dataobj.getLong("mobileno");
				String chktutionfee = dataobj.getString("chktutionfee");
				int tuitionfees = dataobj.getInt("tuitionfees");
				String chkcautionmoney = dataobj.getString("chkcautionmoney");
				String cautionmoney = dataobj.getString("cautionmoney");
				String chkhostelfee = dataobj.getString("chkhostelfee");
				int hostelfees = dataobj.getInt("hostelfees");
				String chkhostelcautionmoney = dataobj.getString("chkhostelcautionmoney");
				String hostelcautionmoney = dataobj.getString("hostelcautionmoney");
				String chkbusfee = dataobj.getString("chkBusfee");
				int busfees = dataobj.getInt("busfees");
				String chklatefee = dataobj.getString("chklatefee");
				int latefees = dataobj.getInt("latefees");
				String others = dataobj.getString("others");
				String remarks = dataobj.getString("remarks");
				int amount = dataobj.getInt("amount");
				int totalamount = dataobj.getInt("totalamount");

				// Calling all Setter methods
				getRungtaCollegeFormBean().setStdName(stdname);
				getRungtaCollegeFormBean().setAdmissionNumber(admissionnumber);
				getRungtaCollegeFormBean().setCourse(course);
				getRungtaCollegeFormBean().setSemester(semester);
				getRungtaCollegeFormBean().setBranch(branch);
				getRungtaCollegeFormBean().setBranch1(branch1);
				getRungtaCollegeFormBean().setBranch2(branch2);
				getRungtaCollegeFormBean().setBranch3(branch3);
				getRungtaCollegeFormBean().setBranch4(branch4);
				getRungtaCollegeFormBean().setMobileNo(String.valueOf(mobileno));
				getRungtaCollegeFormBean().setTuitionFees(String.valueOf(tuitionfees));
				getRungtaCollegeFormBean().setCautionMoney(cautionmoney);
				getRungtaCollegeFormBean().setHostelFees(String.valueOf(hostelfees));
				getRungtaCollegeFormBean().setHostelCautionMoney(hostelcautionmoney);
				getRungtaCollegeFormBean().setBusFees(String.valueOf(busfees));
				getRungtaCollegeFormBean().setLateFees(String.valueOf(latefees));
				getRungtaCollegeFormBean().setOthers(others);
				getRungtaCollegeFormBean().setRemarks(remarks);
				getRungtaCollegeFormBean().setAmount(String.valueOf(amount));
				getRungtaCollegeFormBean().setTotalAmount(String.valueOf(totalamount));
				getRungtaCollegeFormBean().setChkTutionFee(chktutionfee);
				getRungtaCollegeFormBean().setChkCautionMoney(chkcautionmoney);
				getRungtaCollegeFormBean().setChkHostelFee(chkhostelfee);
				getRungtaCollegeFormBean().setChkHostelCautionMoney(chkhostelcautionmoney);
				getRungtaCollegeFormBean().setChkBusFee(chkbusfee);
				getRungtaCollegeFormBean().setChkLateFee(chklatefee);

				getRungtaCollegeFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getRungtaCollegeFormBean());
				// END For Form Engine insertion

				String responseString = studentRegistrationService
						.insertRungtaColStudentDetails(getRungtaCollegeFormBean(), instituteID);
				logger.info("RungtaCol Registration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "rungtaColFailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "rungtaColFailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getRungtaCollegeFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getRungtaCollegeFormBean().getTotalAmount());
				studentRegistrationFormBean.setStudentId(getRungtaCollegeFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getRungtaCollegeFormBean().getStdName());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getRungtaCollegeFormBean().getStudentRegistrationId());
				logger.info("RungtaCol Registration--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "rungtaColFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return super.RUNGTACOLSUCCESS;
	}

	public String addStudentPhotosForGPS(String billerId) throws IOException {
		String destination = "";
		String osName = System.getProperty("os.name");
		if ("LINUX".equalsIgnoreCase(osName.trim())) {
			destination = "/opt/jboss-eap-6.0/standalone/deployments/XJunction.war/StudentPhotos";
		} else {
			destination = "C:/WorkSpace_for_UploadPhotos/StudentUploadPhotos/WebContent/StudentPhotos";
		}

		if (getGpsOnlineFormBean().getPassportImagfile() != null)// &&
																	// !"".equalsIgnoreCase(getInstituteMasterFormBean().getInstituteHeaderImage()))
		{
			long uniqueTime = System.currentTimeMillis();
			getGpsOnlineFormBean().setStoreHeaderFile(saveUploadedFile(getGpsOnlineFormBean().getPassportImagfile(),
					getGpsOnlineFormBean().getPassportImagfileFileName(), billerId, "GPS_" + uniqueTime,
					TPSLConstants.FJA_STATIC_IMAGE_CONTENT_PATH));

			saveUploadedFile(getGpsOnlineFormBean().getPassportImagfile(),
					getGpsOnlineFormBean().getPassportImagfileFileName(), billerId, "GPS_" + uniqueTime, destination);
			getGpsOnlineFormBean().setPhotoProof(getGpsOnlineFormBean().getStoreHeaderFile().getName());
		}

		return "success";
	}

	public String GPSRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			getGpsOnlineFormBean();

			getGpsOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			addStudentPhotosForGPS(billerId);
			String responseString = studentRegistrationService.insertGPSStudentDetails(getGpsOnlineFormBean(),
					billerId);

			if (responseString != null && !"".equalsIgnoreCase(responseString)
					&& "success".equalsIgnoreCase(responseString)) {
				addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
			} else if ("NA".equalsIgnoreCase(responseString)) {
				addActionError(ErrorPropertyReader.getProperty("failed.to.add.student.data"));
			} else {
				addActionError(getText("error.occured.contact.administrator"));
			}
			studentRegistrationFormBean = super.getRegisteredStudentDetails(
					getGpsOnlineFormBean().getStudentRegistrationId());
			studentRegistrationFormBean.setTotalPayableFees(getGpsOnlineFormBean().getAmount());
			studentRegistrationFormBean.setStudentId(getGpsOnlineFormBean().getApplicationNo());
			super.applyFees(studentRegistrationFormBean);

			QuickPayAction quickPayAction = new QuickPayAction();
			appData1 = new PaymentRequestBean();
			appData1.setStudentRegistrationId(getGpsOnlineFormBean().getStudentRegistrationId());

			quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

			getUserSessionMap().put("APPDATA", getAppData1());

		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;
		}

		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		strPaymentType = "Online Payment";
		// strPaymentMode = "Cash";
		instituteConfigBean = new InstituteMasterActionService().getInstituteConfigDetails(billerId);
		if (instituteConfigBean.getExtraCharges().equals("Y")) {
			feesPayChargesFormBean = new PaymentService().getPaymentCharges(billerId);

			getUserSessionMap().put("_feesPayChargesFormBean", feesPayChargesFormBean);
		}
		getUserSessionMap().put("_instituteConfigBean", instituteConfigBean);

		return super.GPSSUCCESS;
	}

// CR NO - 77496

	public String TOLANIRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String instituteID = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getTolaniFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");

			String responseString = studentRegistrationService.insertTOLANIStudentDetails(getTolaniFormBean(),
					instituteID);
			logger.info("TOLANI Registration: " + responseString);

			if (responseString != null && !"".equalsIgnoreCase(responseString)
					&& "success".equalsIgnoreCase(responseString)) {
				addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
			} else if ("NA".equalsIgnoreCase(responseString)) {
				addActionMessage("Failed to add student data.");
				return "tolaniFailure";
			} else {
				addActionMessage("Error occured contact administrator.");
				return "tolaniFailure";
			}

			studentRegistrationFormBean = super.getRegisteredStudentDetails(
					getTolaniFormBean().getStudentRegistrationId());
			studentRegistrationFormBean.setTotalPayableFees(getTolaniFormBean().getTotalFee());
			studentRegistrationFormBean.setStudentId(getTolaniFormBean().getApplicationNo());
			studentRegistrationFormBean.setStudentName(getTolaniFormBean().getStdName());
			super.applyFees(studentRegistrationFormBean);

			QuickPayAction quickPayAction = new QuickPayAction();
			appData1 = new PaymentRequestBean();
			appData1.setStudentRegistrationId(getTolaniFormBean().getStudentRegistrationId());
			logger.info("TOLANI Registration--feesPayList :: " + feesPayList);
			quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

			getUserSessionMap().put("APPDATA", getAppData1());

		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return super.TOLANISUCCESS;
	}

	// CR NO - 77498

	public String SHIVRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String instituteID = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getShivFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getShivFormBean().getAmount(), getShivFormBean().getPayment())) {
				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();
				addStudentPhotosForGPS(instituteID);
				getShivFormBean().setPhotoProof(getGpsOnlineFormBean().getStoreHeaderFile().getName());
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(instituteID);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				Date date1 = sdf.parse(getShivFormBean().getDob());
				Date date4 = sdf.parse(getShivFormBean().getDate());
				/*
				 * Date date1 = sdf.parse(getShivFormBean().getDob()); Date date2 =
				 * sdf.parse(getShivFormBean().getDate());
				 */ // Getters atarted...
				stdetails.put("photoProof", getShivFormBean().getPhotoProof());
				stdetails.put("applicantName", getShivFormBean().getApplicantName());
				stdetails.put("fatherName", getShivFormBean().getFatherName());
				stdetails.put("motherName", getShivFormBean().getMotherName());
				stdetails.put("stdDob", formatter.format(date1));
				stdetails.put("gender", getShivFormBean().getGender());
				stdetails.put("address", getShivFormBean().getAddress());
				stdetails.put("city", getShivFormBean().getCity());
				stdetails.put("state", getShivFormBean().getState());
				stdetails.put("pinCode", getShivFormBean().getPincode());
				stdetails.put("contact", Long.parseLong(getShivFormBean().getContact()));
				stdetails.put("emailId", getShivFormBean().getEmailId());
				stdetails.put("selectCourse", getShivFormBean().getSelectCourse());
				stdetails.put("duration", getShivFormBean().getDuration());
				stdetails.put("eligibilityCriteria",
						StringUtils.isBlank(getShivFormBean().getEligibilityCriteria()) ? " "
								: getShivFormBean().getEligibilityCriteria());
				stdetails.put("percMarks", getShivFormBean().getPercMarks());
				stdetails.put("passedfrom", getShivFormBean().getPassedFrom());
				stdetails.put("amount", Double.parseDouble(getShivFormBean().getAmount()));
				stdetails.put("draft", getShivFormBean().getDraft() == null ? " " : getShivFormBean().getDraft());
				stdetails.put("date", formatter.format(date4));
				stdetails.put("txn_amt", Double.parseDouble(getShivFormBean().getAmount()));
				stdetails.put("courseFees", getShivFormBean().getCourseFees());
				stdetails.put("payment_details", Double.parseDouble(getShivFormBean().getAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getShivFormBean().getAmount()));

				// Calling API...
				/*
				 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
				 * String jsonString1 = obMapper.writeValueAsString(objNode);
				 * logger.info("jsonString1" + jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE); Response
				 * //commented by priya for form engine response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */

				// API Response status verification ...
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201)
					logger.info("response" + apiResponse.toString());

				// API Response status verification ...
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "Default";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * //commented by priya for form engine Response response1 =
				 * invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String applicantname = dataobj.getString("applicantName");
				String fathername = dataobj.getString("fatherName");
				String mothername = dataobj.getString("motherName");
				String dob = dataobj.getString("stdDob");
				String gender = dataobj.getString("gender");
				String address = dataobj.getString("address");
				String city = dataobj.getString("city");
				String state = dataobj.getString("state");
				String pincode = dataobj.getString("pinCode");
				Long contact = dataobj.getLong("contact");
				String emailid = dataobj.getString("emailId");
				String selectcourse = dataobj.getString("selectCourse");
				String duration = dataobj.getString("duration");
				String eligibilitycriteria = dataobj.getString("eligibilityCriteria");
				String percmarks = dataobj.getString("percMarks");
				String passedfrom = dataobj.getString("passedfrom");
				int amount = dataobj.getInt("amount");
				String draft = dataobj.getString("draft");
				String date3 = dataobj.getString("date");
				String photoproof = dataobj.getString("photoProof");
				String coursefees = dataobj.getString("courseFees");

				// Calling all Setter methods
				getShivFormBean().setCourseFees(coursefees);
				getShivFormBean().setPhotoProof(photoproof);
				getShivFormBean().setApplicantName(applicantname);
				getShivFormBean().setFatherName(fathername);
				getShivFormBean().setMotherName(mothername);
				getShivFormBean().setDob(dob);
				getShivFormBean().setGender(gender);
				getShivFormBean().setAddress(address);
				getShivFormBean().setCity(city);
				getShivFormBean().setState(state);
				getShivFormBean().setPincode(pincode);
				getShivFormBean().setContact(String.valueOf(contact));
				getShivFormBean().setEmailId(emailid);
				getShivFormBean().setSelectCourse(selectcourse);
				getShivFormBean().setDuration(duration);
				getShivFormBean().setEligibilityCriteria(eligibilitycriteria);
				getShivFormBean().setPercMarks(percmarks);
				getShivFormBean().setPassedFrom(passedfrom);
				getShivFormBean().setAmount(String.valueOf(amount));
				getShivFormBean().setDraft(draft);
				getShivFormBean().setDate(date3);

				getShivFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getShivFormBean());

				String responseString = studentRegistrationService.insertSHIVStudentDetails(getShivFormBean(),
						instituteID);
				logger.info("SHIV Registration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "shivFailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "shivFailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getShivFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getShivFormBean().getAmount());
				studentRegistrationFormBean.setStudentId(getShivFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getShivFormBean().getApplicantName());
				studentRegistrationFormBean.setStudentEmailId(getShivFormBean().getEmailId());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getShivFormBean().getStudentRegistrationId());
				logger.info("SHIV Registration--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "shivFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return super.SHIVSUCCESS;
	}

	public String hydroPowerRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getHydroPowerOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getHydroPowerOnlineFormBean().getTotAmount(),
					getHydroPowerOnlineFormBean().getPayment())) {
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();
				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				Date date1 = sdf.parse(getHydroPowerOnlineFormBean().getStdDOB());
				stdetails.put("rollno", getHydroPowerOnlineFormBean().getRollno());
				stdetails.put("stdname", getHydroPowerOnlineFormBean().getStdName());
				stdetails.put("fathername", getHydroPowerOnlineFormBean().getFatherName());
				stdetails.put("stddob", formatter.format(date1));
				stdetails.put("mobile", Long.parseLong(getHydroPowerOnlineFormBean().getMobile()));
				stdetails.put("selectbranch", getHydroPowerOnlineFormBean().getSelectBranch());
				stdetails.put("selectbatch", getHydroPowerOnlineFormBean().getSelectBatch());
				stdetails.put("selectsemester", getHydroPowerOnlineFormBean().getSelectSemester());
				stdetails.put("semtutionfee", Double.parseDouble(getHydroPowerOnlineFormBean().getSemTutionFee()));
				stdetails.put("sempdpfee", Double.parseDouble(getHydroPowerOnlineFormBean().getSemPdpFee()));
				stdetails.put("semexamfee", Double.parseDouble(getHydroPowerOnlineFormBean().getSemExamFee()));
				stdetails.put("yearsecurityfee",
						Double.parseDouble(getHydroPowerOnlineFormBean().getYearSecurityFee()));
				stdetails.put("enrolmentfee", Double.parseDouble(getHydroPowerOnlineFormBean().getEnrolmentFee()));
				stdetails.put("registrationfee",
						Double.parseDouble(getHydroPowerOnlineFormBean().getRegistrationFee()));
				stdetails.put("semhostalfee", Double.parseDouble(getHydroPowerOnlineFormBean().getSemHostalFee()));
				stdetails.put("semmessfee", Double.parseDouble(getHydroPowerOnlineFormBean().getSemMessFee()));
				stdetails.put("otherfee", Double.parseDouble(getHydroPowerOnlineFormBean().getOtherFee()));
				stdetails.put("otherfeeremark", getHydroPowerOnlineFormBean().getOtherFeeRemark());
				stdetails.put("remarks", getHydroPowerOnlineFormBean().getRemarks());
				stdetails.put("totamount", Double.parseDouble(getHydroPowerOnlineFormBean().getTotAmount()));
				stdetails.put("noofsubject", getHydroPowerOnlineFormBean().getNoOfSubject());
				stdetails.put("backpaperfee", Double.parseDouble(getHydroPowerOnlineFormBean().getBackPaperFee()));
				stdetails.put("degreefee", Double.parseDouble(getHydroPowerOnlineFormBean().getDegreeFee()));
				stdetails.put("payment_details", Double.parseDouble(getHydroPowerOnlineFormBean().getTotAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getHydroPowerOnlineFormBean().getTotAmount()));

				/*
				 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
				 * 
				 * String jsonString1=obMapper.writeValueAsString(objNode);
				 * 
				 * logger.info("jsonString1"+jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "faliure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				//// JSONArray jsonArray = jsonObject.getJSONArray("message");
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String rollno = dataobj.getString("rollno");
				String stdname = dataobj.getString("stdName");
				String fathername = dataobj.getString("fatherName");
				String stddob = dataobj.getString("stdDOB");
				Long mobile = dataobj.getLong("mobile");
				String selectbranch = dataobj.getString("selectBranch");
				String selectbatch = dataobj.getString("selectBatch");
				String selectsemester = dataobj.getString("selectSemester");
				int semtutionfee = dataobj.getInt("semTutionFee");
				int sempdpfee = dataobj.getInt("semPdpFee");
				int semexamfee = dataobj.getInt("semExamFee");
				int yearsecurityfee = dataobj.getInt("yearSecurityFee");
				int enrolmentfee = dataobj.getInt("enrolmentFee");
				int registrationfee = dataobj.getInt("registrationFee");
				int semhostalfee = dataobj.getInt("semHostalFee");
				int semmessfee = dataobj.getInt("semMessFee");
				int otherfee = dataobj.getInt("otherFee");
				String otherfeeremark = dataobj.getString("otherFeeRemark");
				String remarks = dataobj.getString("remarks");
				int totamount = dataobj.getInt("totAmount");
				String noofsubject = dataobj.getString("noOfSubject");
				int backpaperfee = dataobj.getInt("backPaperFee");
				int degreefee = dataobj.getInt("degreeFee");

//Calling all Setter methods
				getHydroPowerOnlineFormBean().setRollno(rollno);
				getHydroPowerOnlineFormBean().setStdName(stdname);
				getHydroPowerOnlineFormBean().setFatherName(fathername);
				getHydroPowerOnlineFormBean().setStdDOB(stddob);
				getHydroPowerOnlineFormBean().setMobile(String.valueOf(mobile));
				getHydroPowerOnlineFormBean().setSelectBranch(selectbranch);
				getHydroPowerOnlineFormBean().setSelectBatch(selectbatch);
				getHydroPowerOnlineFormBean().setSelectSemester(selectsemester);
				getHydroPowerOnlineFormBean().setSemTutionFee(String.valueOf(semtutionfee));
				getHydroPowerOnlineFormBean().setSemPdpFee(String.valueOf(sempdpfee));
				getHydroPowerOnlineFormBean().setSemExamFee(String.valueOf(semexamfee));
				getHydroPowerOnlineFormBean().setYearSecurityFee(String.valueOf(yearsecurityfee));
				getHydroPowerOnlineFormBean().setEnrolmentFee(String.valueOf(enrolmentfee));
				getHydroPowerOnlineFormBean().setRegistrationFee(String.valueOf(registrationfee));
				getHydroPowerOnlineFormBean().setSemHostalFee(String.valueOf(semhostalfee));
				getHydroPowerOnlineFormBean().setSemMessFee(String.valueOf(semmessfee));
				getHydroPowerOnlineFormBean().setOtherFee(String.valueOf(otherfee));
				getHydroPowerOnlineFormBean().setOtherFeeRemark(otherfeeremark);
				getHydroPowerOnlineFormBean().setRemarks(remarks);
				getHydroPowerOnlineFormBean().setTotAmount(String.valueOf(totamount));
				getHydroPowerOnlineFormBean().setNoOfSubject(noofsubject);
				getHydroPowerOnlineFormBean().setBackPaperFee(String.valueOf(backpaperfee));
				getHydroPowerOnlineFormBean().setDegreeFee(String.valueOf(degreefee));
				// END For Form Engine insertion

				// 5712 DronacharayaGOI Online form Implementation end
				getUserSessionMap().put("ONLINEFORMDATA", getHydroPowerOnlineFormBean());
				String responseString = studentRegistrationService
						.insertHydroPowerStudentDetails(getHydroPowerOnlineFormBean(), billerId);
				logger.info("Hydro Power Registration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "hydroPowerfailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "hydroPowerfailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getHydroPowerOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getHydroPowerOnlineFormBean().getTotAmount());
				studentRegistrationFormBean.setStudentId(getHydroPowerOnlineFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getHydroPowerOnlineFormBean().getStdName());
				studentRegistrationFormBean.setStudentEmailId(getHydroPowerOnlineFormBean().getMobile());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getHydroPowerOnlineFormBean().getStudentRegistrationId());
				logger.info("Hydro Power Registration--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "hydroPowerfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return super.HYDROSUCCESS;
		// return SUCCESS;
	}

	public String SWARARegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String instituteID = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getSwaraFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getSwaraFormBean().getAmount(), getSwaraFormBean().getPayment())) {
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(instituteID);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();
				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				Date date1 = sdf.parse(getSwaraFormBean().getStdDOB());
				stdetails.put("stdname", getSwaraFormBean().getStdName());
				stdetails.put("stddob", formatter.format(date1));
				stdetails.put("postaladdress", getSwaraFormBean().getPostalAddress());
				stdetails.put("state", getSwaraFormBean().getState());
				stdetails.put("city", getSwaraFormBean().getCity());
				stdetails.put("pincode", Long.parseLong(getSwaraFormBean().getPincode()));
				stdetails.put("emailid", getSwaraFormBean().getEmailId());
				stdetails.put("mobileno", Long.parseLong(getSwaraFormBean().getMobileNo()));
				stdetails.put("foundationofmusic", getSwaraFormBean().getFoundationOfMusic());
				stdetails.put("amount", Double.parseDouble(getSwaraFormBean().getAmount()));
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getSwaraFormBean().getAmount()));

				/*
				 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
				 * 
				 * String jsonString1=obMapper.writeValueAsString(objNode);
				 * 
				 * logger.info("jsonString1"+jsonString1.toString());
				 */

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "faliure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				//// JSONArray jsonArray = jsonObject.getJSONArray("message");
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String stdname = dataobj.getString("stdname");
				String stddob = dataobj.getString("stddob");
				String postaladdress = dataobj.getString("postaladdress");
				String state = dataobj.getString("state");
				String city = dataobj.getString("city");
				int pincode = dataobj.getInt("pincode");
				String emailid = dataobj.getString("emailid");
				Long mobileno = dataobj.getLong("mobileno");
				String foundationofmusic = dataobj.getString("foundationofmusic");
				int amount = dataobj.getInt("amount");

				getSwaraFormBean().setStdName(stdname);
				getSwaraFormBean().setStdDOB(stddob);
				getSwaraFormBean().setPostalAddress(postaladdress);
				getSwaraFormBean().setState(state);
				getSwaraFormBean().setCity(city);
				getSwaraFormBean().setPincode(String.valueOf(pincode));
				getSwaraFormBean().setEmailId(emailid);
				getSwaraFormBean().setMobileNo(String.valueOf(mobileno));
				getSwaraFormBean().setFoundationOfMusic(foundationofmusic);
				getSwaraFormBean().setAmount(String.valueOf(amount));
				getSwaraFormBean().setApplicationNo(formId);
				// END For Form Engine insertion

				// 5712 DronacharayaGOI Online form Implementation end
				getUserSessionMap().put("ONLINEFORMDATA", getSwaraFormBean());
				String responseString = studentRegistrationService.insertSWARAStudentDetails(getSwaraFormBean(),
						instituteID);
				logger.info("SAWRA Registration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "swaraFailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "swaraFailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getSwaraFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getSwaraFormBean().getAmount());
				studentRegistrationFormBean.setStudentId(getSwaraFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getSwaraFormBean().getStdName());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getSwaraFormBean().getStudentRegistrationId());
				logger.info("SWARA Registration--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "swaraFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return super.SWARASUCCESS;
	}

	public String ambikaPurRegistration()
	{
		if (!super.isValidSession()) {
	        return INVALID_SESSION;
	    }
		try{
			logger.info("---------------------------------------------------------");
	        logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
	        logger.info("---------------------------------------------------------");       
	        String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
	        String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
	        logger.info("registeredUserId.."+registeredUserId);
	        getAmbikaPurOnlineFormBean().setRegisteredUserId(registeredUserId);
	        StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
	        getAppData().setStrID("TEST");
	        if(AmountValidation(getAmbikaPurOnlineFormBean().getTotAmount(),getAmbikaPurOnlineFormBean().getPayment()))
	        {
	        	
	        	//3514 AbmikaPur Online form Implememtation started
				//Start For Form Engine insertion
				
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

				//Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name",instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id",instituteFormDetailsBean.getMerchantID());
				
				
				ObjectNode stdetails = obMapper.createObjectNode();
				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
				Date date = new Date();  
				  
				stdetails.put("student_name",getAmbikaPurOnlineFormBean().getStudentName());
				stdetails.put("father_name",getAmbikaPurOnlineFormBean().getFatherName());
				stdetails.put("ticket_number",getAmbikaPurOnlineFormBean().getTicketNumber());
				stdetails.put("merit_list",getAmbikaPurOnlineFormBean().getMeritList());
				stdetails.put("select_gender",getAmbikaPurOnlineFormBean().getSelectGender());
				
				stdetails.put("select_category",getAmbikaPurOnlineFormBean().getSelectCategory());
				stdetails.put("select_course",getAmbikaPurOnlineFormBean().getSelectCourse());
				stdetails.put("total_amount",Double.parseDouble(getAmbikaPurOnlineFormBean().getTotAmount()));
				stdetails.put("payment_details",Double.parseDouble(getAmbikaPurOnlineFormBean().getTotAmount()));
				
				
				stdetails.put("registered_userId",registeredUserId);
				stdetails.put("student_registrationid","0");
				stdetails.put("application_no","0");
				stdetails.put("recon_date",formatter.format(date));
				stdetails.put("r_cre_time",formatter.format(date));
				stdetails.put("r_mod_time",formatter.format(date));
				stdetails.put("pg_pmt_status","A");
				stdetails.put("Acc_Holder_Name"," ");
				stdetails.put("Res_Msg"," ");
				stdetails.put("Payment_Mode"," ");
				stdetails.put("Bank_Name"," ");
				stdetails.put("ALT_ERROR_DESC"," ");
				stdetails.put("Pmt_Id","");
				stdetails.put("Payment_id","");
				stdetails.put("PGTxnID","");
				stdetails.put("BANK_ID","");
				stdetails.put("Txn_Amt",Double.parseDouble(getAmbikaPurOnlineFormBean().getTotAmount()));

				objNode.put("form_data",stdetails);

				String jsonString1=obMapper.writeValueAsString(objNode);

				logger.info("jsonString1"+jsonString1.toString());
				
				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				//String clientId = "actual-smarthub-node-ip";
				//String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				//secureAPIBuilder.setAuthenticationAlias(clientId);

				//byte[] clientKey = hexStringToByteArray(clientKeyStr);
				//secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				Client client = ClientBuilder.newClient();
//				WebTarget webTarget = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/store-form-data");
//				Invocation.Builder invocationBuilder = webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//				
				//Response response = invocationBuilder.post(Entity.json(jsonString1.toString()));
				//logger.info("response" + response.toString());
				
				APIResponse apiResponse = null;
				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: " + apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				if (apiResponse.getResponseCode() != 201) {
					//throw new RuntimeException("Failed : HTTP error code : " + response.getStatus());
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					return "ambikafailure";
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1=json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId"+formId);
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name",instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id",instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id",formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				
				String  jsonString2=obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2"+jsonString2);

//				WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/get-form-data");
//				Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//				
//				Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				
				APIResponse apiResponse1 = null;
				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: " + apiResponse.getResponseCode());
				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();
				
				
				logger.info("output1"+output1);
				
				JSONObject jsonObject = new JSONObject(output1);
				
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray"+jsonArray);

				JSONObject data=jsonArray.getJSONObject(0);
				JSONObject dataobj=data.getJSONObject("form_data");
				
				String stuName=dataobj.getString("student_name");
				
				String father_name=dataobj.getString("father_name");
				String ticket_number=dataobj.getString("ticket_number");
				String merit_list=dataobj.getString("merit_list");
				String select_gender=dataobj.getString("select_gender");
				String select_category=dataobj.getString("select_category");
				String select_course=dataobj.getString("select_course");
				int total_amount=dataobj.getInt("total_amount");
				
				
				
				getAmbikaPurOnlineFormBean().setStudentName(stuName);
				getAmbikaPurOnlineFormBean().setFatherName(father_name);
				getAmbikaPurOnlineFormBean().setTicketNumber(ticket_number);
				getAmbikaPurOnlineFormBean().setMeritList(merit_list);
				getAmbikaPurOnlineFormBean().setSelectGender(select_gender);
				getAmbikaPurOnlineFormBean().setSelectCourse(select_course);
				getAmbikaPurOnlineFormBean().setSelectCategory(select_category);
				getAmbikaPurOnlineFormBean().setTotAmount(String.valueOf(total_amount));
				getAmbikaPurOnlineFormBean().setApplicationNo(formId);
				//END For Form Engine insertion
				getUserSessionMap().put("ONLINEFORMDATA",getAmbikaPurOnlineFormBean());
	        	String responseString = studentRegistrationService.insertAmbikaPurStudentDetails(getAmbikaPurOnlineFormBean(),billerId);
	        	logger.info("AmbikaPur Registration: "+responseString);
	        	
	        	if (responseString != null && !"".equalsIgnoreCase(responseString) && "success".equalsIgnoreCase(responseString)) {
	                addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
	            }else if ("NA".equalsIgnoreCase(responseString)){
	            	addActionMessage("Failed to add student data.");
	           	return "ambikafailure";
	            }else {         
	            	addActionMessage("Error occured contact administrator.");
	                return "ambikafailure";
	            }

	        	studentRegistrationFormBean = super.getRegisteredStudentDetails(getAmbikaPurOnlineFormBean().getStudentRegistrationId());
		         studentRegistrationFormBean.setTotalPayableFees(getAmbikaPurOnlineFormBean().getTotAmount());
		         studentRegistrationFormBean.setStudentId(getAmbikaPurOnlineFormBean().getApplicationNo());
		         studentRegistrationFormBean.setStudentName(getAmbikaPurOnlineFormBean().getStudentName());
		         super.applyFees(studentRegistrationFormBean);

		         QuickPayAction quickPayAction = new QuickPayAction();
		         appData1 = new PaymentRequestBean();
		         appData1.setStudentRegistrationId(getAmbikaPurOnlineFormBean().getStudentRegistrationId());            
		         logger.info( "Hydro Power Registration--feesPayList :: "+ feesPayList);
		         quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean,feesPayList);
		   
		         getUserSessionMap().put("APPDATA", getAppData1()); 
		         
	        }
	        else{
	         	addActionMessage("Amount Mismatched.");
	         	return "ambikafailure";
	         }
		}catch(Exception e)
		{
			logger.error("Exception  " +e);
	        return ERROR;
		}
		return SUCCESS;
	}
		
	public String shepaRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}

		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);

			getShepaOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
//    if(AmountValidation(getIcbrOnlineFormBean().getTotalAmount(),getIcbrOnlineFormBean().getPayment()))
			// {
			String responseString = studentRegistrationService.insertShepaStudentDetails(getShepaOnlineFormBean(),
					billerId);
			logger.info("Shepa Registration: " + responseString);

			if (responseString != null && !"".equalsIgnoreCase(responseString)
					&& "success".equalsIgnoreCase(responseString)) {
				addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
			} else if ("NA".equalsIgnoreCase(responseString)) {
				addActionMessage("Failed to add student data.");
				return "shapafailure";
			} else {
				addActionMessage("Error occured contact administrator.");
				return "shapafailure";
			}

			studentRegistrationFormBean = super.getRegisteredStudentDetails(
					getShepaOnlineFormBean().getStudentRegistrationId());
			studentRegistrationFormBean.setTotalPayableFees(getShepaOnlineFormBean().getTotalFee());
			studentRegistrationFormBean.setStudentId(getShepaOnlineFormBean().getApplicationNo());
			studentRegistrationFormBean.setStudentName(getShepaOnlineFormBean().getStudentName());
			studentRegistrationFormBean.setStudentEmailId(getShepaOnlineFormBean().getMobileNumber());
			super.applyFees(studentRegistrationFormBean);

			QuickPayAction quickPayAction = new QuickPayAction();
			appData1 = new PaymentRequestBean();
			appData1.setStudentRegistrationId(getShepaOnlineFormBean().getStudentRegistrationId());
			logger.info("shepaRegistration--feesPayList :: " + feesPayList);
			quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

			getUserSessionMap().put("APPDATA", getAppData1());

			// }
			/*
			 * else{ addActionMessage("Amount Mismatched."); return "icbrfailure"; }
			 */
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String krishakRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getKrishakFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getKrishakFormBean().getFeesAmount(), getKrishakFormBean().getPayment())) {

				// 3175 Krishak Online form Implememtation started
				// Start For Form Engine insertion

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());

				ObjectNode stdetails = obMapper.createObjectNode();
				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				stdetails.put("student_name", getKrishakFormBean().getName());
				stdetails.put("father_name", getKrishakFormBean().getFatherName());
				stdetails.put("mother_name", getKrishakFormBean().getMotherName());
				stdetails.put("address_details", getKrishakFormBean().getAddress());
				stdetails.put("select_gender", getKrishakFormBean().getGender());

				stdetails.put("fees_amount", Double.parseDouble(getKrishakFormBean().getFeesAmount()));
				stdetails.put("course_name", getKrishakFormBean().getCourse());
				stdetails.put("class_year", getKrishakFormBean().getYear());
				stdetails.put("remarks_details", getKrishakFormBean().getRemarks());
				stdetails.put("mobile_no", Long.parseLong(getKrishakFormBean().getMobileNo()));
				stdetails.put("payment_details", Double.parseDouble(getKrishakFormBean().getFeesAmount()));

				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", "test");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getKrishakFormBean().getFeesAmount()));

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 */
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "krishakfailure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 */

				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				// code ended by priya form engine

				String stuName = dataobj.getString("student_name");

				String father_name = dataobj.getString("father_name");

				String mother_name = dataobj.getString("mother_name");

				String address_details = dataobj.getString("address_details");

				String select_gender = dataobj.getString("select_gender");
				int fees_amount = dataobj.getInt("fees_amount");
				String course_name = dataobj.getString("course_name");
				String class_year = dataobj.getString("class_year");
				String remarks_details = dataobj.getString("remarks_details");
				Long mobile_no = dataobj.getLong("mobile_no");

				getKrishakFormBean().setName(stuName);
				getKrishakFormBean().setFatherName(father_name);
				getKrishakFormBean().setMotherName(mother_name);
				getKrishakFormBean().setAddress(address_details);
				getKrishakFormBean().setGender(select_gender);
				getKrishakFormBean().setFeesAmount(String.valueOf(fees_amount));
				getKrishakFormBean().setCourse(course_name);
				getKrishakFormBean().setYear(class_year);
				getKrishakFormBean().setMobileNo(String.valueOf(mobile_no));
				getKrishakFormBean().setRemarks(remarks_details);
				getKrishakFormBean().setApplicationNo(formId);
				// END For Form Engine insertion

				getUserSessionMap().put("ONLINEFORMDATA", getKrishakFormBean());
				String responseString = studentRegistrationService.insertKrishakStudentDetails(getKrishakFormBean(),
						billerId);
				logger.info("Krishak Registration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "krishakfailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "krishakfailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getKrishakFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getKrishakFormBean().getFeesAmount());
				studentRegistrationFormBean.setStudentId(getKrishakFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getKrishakFormBean().getName());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getKrishakFormBean().getStudentRegistrationId());
				logger.info("Krishak PG--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "krishakfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String weidnerRegistration()
	{
	if (!super.isValidSession()) {
	    return INVALID_SESSION;
	}

	try{
		logger.info("---------------------------------------------------------");
	    logger.info("weidnerRegistration StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
	    logger.info("---------------------------------------------------------");       
	    String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
	    String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
	    logger.info("weidnerRegistration registeredUserId.."+registeredUserId);
	    
	    getWeidnerOnlineFormBean().setRegisteredUserId(registeredUserId);
	    StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
	    getAppData().setStrID("TEST");
//	    if(AmountValidation(getIcbrOnlineFormBean().getTotalAmount(),getIcbrOnlineFormBean().getPayment()))
	  //  {
	    
	    
	  //3193 Weidner Online form Implememtation started
		//Start For Form Engine insertion
		
		ObjectMapper obMapper = new ObjectMapper();
		ObjectNode objNode = obMapper.createObjectNode();

		InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

		//Object Node declaration
		objNode.put("application_id", "SMARTHUB");
		objNode.put("form_name",instituteFormDetailsBean.getInstituteCode());
		objNode.put("context_id",instituteFormDetailsBean.getMerchantID());
		ObjectNode stdetails = obMapper.createObjectNode();

		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
		Date date = new Date();  
		  
		stdetails.put("student_name",getWeidnerOnlineFormBean().getStudentName());
		stdetails.put("father_name",getWeidnerOnlineFormBean().getFatherName());
		stdetails.put("class_value",getWeidnerOnlineFormBean().getClassValue());
		stdetails.put("section_details",getWeidnerOnlineFormBean().getSection());
		stdetails.put("admission_no",getWeidnerOnlineFormBean().getAdmissionNo());
		stdetails.put("remark_message",getWeidnerOnlineFormBean().getRemark());
		
		stdetails.put("fees_amount",Double.parseDouble(getWeidnerOnlineFormBean().getFeesAmount()));
		
		stdetails.put("payment_details",Double.parseDouble(getWeidnerOnlineFormBean().getFeesAmount()));
		
		
		stdetails.put("registered_userId",registeredUserId);
		stdetails.put("student_registrationid","0");
		stdetails.put("application_no","0");
		stdetails.put("recon_date",formatter.format(date));
		stdetails.put("r_cre_time",formatter.format(date));
		stdetails.put("r_mod_time",formatter.format(date));
		stdetails.put("pg_pmt_status","A");
		stdetails.put("Acc_Holder_Name"," ");
		stdetails.put("Res_Msg"," ");
		stdetails.put("Payment_Mode"," ");
		stdetails.put("Bank_Name"," ");
		stdetails.put("ALT_ERROR_DESC"," ");
		stdetails.put("Pmt_Id","");
		stdetails.put("Payment_id","");
		stdetails.put("PGTxnID","");
		stdetails.put("BANK_ID","");
		stdetails.put("Txn_Amt",Double.parseDouble(getWeidnerOnlineFormBean().getFeesAmount()));

		objNode.put("form_data",stdetails);

		String jsonString1=obMapper.writeValueAsString(objNode);

		logger.info("jsonString1"+jsonString1.toString());
		
		/*** *** *** Initialization start *** *** ***/
		SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

		secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
		secureAPIBuilder.setUpstreamServerPort(443);

		secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
		secureAPIBuilder.setVerifyServerSSL(false);

		//String clientId = "actual-smarthub-node-ip";
		//String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

		//secureAPIBuilder.setAuthenticationAlias(clientId);

		//byte[] clientKey = hexStringToByteArray(clientKeyStr);
		//secureAPIBuilder.setAuthenticationKey(clientKey);

		SecureAPIConnection secureAPI = secureAPIBuilder.build();
		/*** *** *** Initialization complete *** *** ***/

		Client client = ClientBuilder.newClient();
//		WebTarget webTarget = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/store-form-data");
//		Invocation.Builder invocationBuilder = webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
		
		//Response response = invocationBuilder.post(Entity.json(jsonString1.toString()));
		//logger.info("response" + response.toString());
		
		APIResponse apiResponse = null;
		apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

		System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: " + apiResponse.getResponseCode());

		String responseBody = apiResponse.getData().toString();

		if (apiResponse.getResponseCode() != 201) {
			//throw new RuntimeException("Failed : HTTP error code : " + response.getStatus());
			String outputError = apiResponse.getData().toString();
			JSONObject json = new JSONObject(outputError);
			String messageerror = json.getString("message");
			String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
			messageerror=friendlyMessageFromAPIError;
			logger.info("messageerror"+messageerror);
			addActionMessage(messageerror);
			return "shapafailure";
		}

		logger.info("Output from Server .... \n");
		String output = apiResponse.getData().toString();
		JSONObject json = new JSONObject(output);
		JSONObject data1=json.getJSONObject("data");
		String formId = data1.getString("form_id");
		logger.info("formId"+formId);
		getUserSessionMap().put("application_id", "SMARTHUB");
		getUserSessionMap().put("form_name",instituteFormDetailsBean.getInstituteCode());
		getUserSessionMap().put("context_id",instituteFormDetailsBean.getMerchantID());
		getUserSessionMap().put("form_id",formId);

		SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
		smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
		smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
		smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
		smartHubFetchOnlineFormBean.setForm_id(formId);
		
		String  jsonString2=obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
		logger.info("jsonString2"+jsonString2);

//		WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/get-form-data");
//		Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
	//	
//		Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
		
		APIResponse apiResponse1 = null;
		apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

		System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: " + apiResponse.getResponseCode());
		
		logger.info("responseString", apiResponse1.toString());

		if (apiResponse1.getResponseCode() != 200) {
			throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
		}
		logger.info("Output from Server .... \n");
		String output1 = apiResponse1.getData().toString();
		
		
		logger.info("output1"+output1);
		
		JSONObject jsonObject = new JSONObject(output1);
		
		JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
		logger.info("jsonArray"+jsonArray);

		JSONObject data=jsonArray.getJSONObject(0);
		JSONObject dataobj=data.getJSONObject("form_data");
		
		String stuName=dataobj.getString("student_name");
		
		String father_name=dataobj.getString("father_name");
		
	    String class_value=dataobj.getString("class_value");
		
		String section_details=dataobj.getString("section_details");
		
		
		String admission_no=dataobj.getString("admission_no");
		String remark=dataobj.getString("remark_message");
		int fees_amount=dataobj.getInt("fees_amount");

		
		
		getWeidnerOnlineFormBean().setStudentName(stuName);
		getWeidnerOnlineFormBean().setFatherName(father_name);
		getWeidnerOnlineFormBean().setClassValue(class_value);
		getWeidnerOnlineFormBean().setSection(section_details);
		getWeidnerOnlineFormBean().setAdmissionNo(admission_no);
		getWeidnerOnlineFormBean().setFeesAmount(String.valueOf(fees_amount));
		getWeidnerOnlineFormBean().setRemark(remark);
		getWeidnerOnlineFormBean().setApplicationNo(formId);
		//END For Form Engine insertion
		getUserSessionMap().put("ONLINEFORMDATA",getWeidnerOnlineFormBean());
	    	String responseString = studentRegistrationService.insertWeinderStudentDetails(getWeidnerOnlineFormBean(),billerId);
	    	logger.info("Weinder Registration: "+responseString);
	    	
	    	if (responseString != null && !"".equalsIgnoreCase(responseString) && "success".equalsIgnoreCase(responseString)) {
	            addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
	        }else if ("NA".equalsIgnoreCase(responseString)){
	        	addActionMessage("Failed to add student data.");
	       	return "weinderfailure";
	        }else {         
	        	addActionMessage("Error occured contact administrator.");
	            return "weinderfailure";
	        }

	    	 studentRegistrationFormBean = super.getRegisteredStudentDetails(getWeidnerOnlineFormBean().getStudentRegistrationId());
	         studentRegistrationFormBean.setTotalPayableFees(getWeidnerOnlineFormBean().getFeesAmount());
	         studentRegistrationFormBean.setStudentId(getWeidnerOnlineFormBean().getApplicationNo());
	         studentRegistrationFormBean.setStudentName(getWeidnerOnlineFormBean().getStudentName());
	         super.applyFees(studentRegistrationFormBean);

	         QuickPayAction quickPayAction = new QuickPayAction();
	         appData1 = new PaymentRequestBean();
	         appData1.setStudentRegistrationId(getWeidnerOnlineFormBean().getStudentRegistrationId());            
	         logger.info( "weinderRegistration--feesPayList :: "+ feesPayList);
	         quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean,feesPayList);
	   
	         getUserSessionMap().put("APPDATA", getAppData1()); 
	         
	    //}
	  /*  else{
	     	addActionMessage("Amount Mismatched.");
	     	return "icbrfailure";
	     }*/
	}catch(Exception e)
	{
		logger.error("Exception  " +e);
	    return ERROR;
		
	}
	return SUCCESS;
	}


	public String finolexRegistration()
	{
		if (!super.isValidSession()) {
	        return INVALID_SESSION;
	    }
		try{
			logger.info("---------------------------------------------------------");
	        logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
	        logger.info("---------------------------------------------------------");       
	        String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
	        String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
	        logger.info("registeredUserId.."+registeredUserId);
	        getFinolexOnlineFormBean().setRegisteredUserId(registeredUserId);
	        StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
	        getAppData().setStrID("TEST");
	        if(AmountValidation(getFinolexOnlineFormBean().getTotAmount(),getFinolexOnlineFormBean().getPayment()))
	        {
	        	//3195 FinolexOnlineForm Online form Implememtation started
	    		//Start For Form Engine insertion
	    		
	    		ObjectMapper obMapper = new ObjectMapper();
	    		ObjectNode objNode = obMapper.createObjectNode();

	    		InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

	    		//Object Node declaration
	    		objNode.put("application_id", "SMARTHUB");
	    		objNode.put("form_name",instituteFormDetailsBean.getInstituteCode());
	    		objNode.put("context_id",instituteFormDetailsBean.getMerchantID());
	    		ObjectNode stdetails = obMapper.createObjectNode();

	    		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
	    		Date date = new Date();  
	    		  
	    		stdetails.put("student_irn",getFinolexOnlineFormBean().getStudentINR());
	    		stdetails.put("student_name",getFinolexOnlineFormBean().getStudentName());
	    		stdetails.put("select_gender",getFinolexOnlineFormBean().getSelectGender());
	    		stdetails.put("select_admission",getFinolexOnlineFormBean().getSelectAdmission());
	    		stdetails.put("select_branch",getFinolexOnlineFormBean().getSelectBranch());
	    		stdetails.put("hidden_branch",getFinolexOnlineFormBean().getHiddenBranch()); 
	    		//stdetails.put("select_admission","FE");
	    		//stdetails.put("select_branch","FE");
	    		//stdetails.put("hidden_branch","FE"); 
	    		stdetails.put("academic_year",getFinolexOnlineFormBean().getAcademicYear());
	    		stdetails.put("select_admissiontype",getFinolexOnlineFormBean().getSelectAdmissionType());
	    		stdetails.put("select_admissioncategory",getFinolexOnlineFormBean().getSelectAdmissionCategory());
	    		stdetails.put("parent_annualincome",Double.parseDouble(getFinolexOnlineFormBean().getParentAnnualIncome()));
	    		stdetails.put("full_address", getFinolexOnlineFormBean().getFullAddress());
	    		stdetails.put("state_name", getFinolexOnlineFormBean().getState());
	    		stdetails.put("student_contactno",Long.parseLong(getFinolexOnlineFormBean().getStudentContactNo()));
	    		stdetails.put("parent_contactno",Long.parseLong(getFinolexOnlineFormBean().getParentContactNo()));
	    		stdetails.put("email_id",getFinolexOnlineFormBean().getEmailId());
	    		stdetails.put("tution_fee",Double.parseDouble(getFinolexOnlineFormBean().getTutionFee()));
	    		stdetails.put("development_fee",Double.parseDouble(getFinolexOnlineFormBean().getDevelopmentFee()));
	    		stdetails.put("enrolment_fee",Double.parseDouble(getFinolexOnlineFormBean().getEnrolmentFee()));
	    		stdetails.put("insurance_policyamt",Double.parseDouble(getFinolexOnlineFormBean().getInsurancePolicyAmt()));
	    		
	    		stdetails.put("university_otherfee",Double.parseDouble(getFinolexOnlineFormBean().getUniversityOtherFee()));
	    		stdetails.put("university_tutionfee",Double.parseDouble(getFinolexOnlineFormBean().getUniversityTutionFee()));
	    		if(getFinolexOnlineFormBean().getHostelCharges()!=""){
	    		stdetails.put("hostel_charges",Double.parseDouble(getFinolexOnlineFormBean().getHostelCharges()));
	    		}
	    		
	    		else {
	    			stdetails.put("hostel_charges",0);
	    		}
	    		
	    		stdetails.put("form_fee",Double.parseDouble(getFinolexOnlineFormBean().getFormFee()));
	    		stdetails.put("less_amount",Double.parseDouble(getFinolexOnlineFormBean().getLessAmount()));
	    		//stdetails.put("less_amount",1.0);
	    		stdetails.put("total_amount",Double.parseDouble(getFinolexOnlineFormBean().getTotAmount()));
	    		
	    		
	    		stdetails.put("payment_details",Double.parseDouble(getFinolexOnlineFormBean().getTotAmount()));
	    		stdetails.put("registered_userId",registeredUserId);
	    		stdetails.put("student_registrationid","0");
	    		stdetails.put("application_no","0");
	    		stdetails.put("payment",Double.parseDouble(getFinolexOnlineFormBean().getTotAmount()));
	    		stdetails.put("registeredUserId",registeredUserId);
	    		stdetails.put("studentRegistrationId","0");
	    		stdetails.put("applicationNo","0");
	    		stdetails.put("recon_date",formatter.format(date));
	    		stdetails.put("r_cre_time",formatter.format(date));
	    		stdetails.put("r_mod_time",formatter.format(date));
	    		stdetails.put("pg_pmt_status","A");
	    		stdetails.put("Acc_Holder_Name"," ");
	    		stdetails.put("Res_Msg"," ");
	    		stdetails.put("Payment_Mode"," ");
	    		stdetails.put("Bank_Name"," ");
	    		stdetails.put("ALT_ERROR_DESC"," ");
	    		stdetails.put("Pmt_Id","");
	    		stdetails.put("Payment_id","");
	    		stdetails.put("PGTxnID","");
	    		stdetails.put("BANK_ID","");
	    		stdetails.put("Txn_Amt",Double.parseDouble(getFinolexOnlineFormBean().getTotAmount()));

	    		objNode.put("form_data",stdetails);

	    		String jsonString1=obMapper.writeValueAsString(objNode);

	    		logger.info("jsonString1"+jsonString1.toString());
	    		
	    		/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				//String clientId = "actual-smarthub-node-ip";
				//String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				//secureAPIBuilder.setAuthenticationAlias(clientId);

				//byte[] clientKey = hexStringToByteArray(clientKeyStr);
				//secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

	    		Client client = ClientBuilder.newClient();
//	    		WebTarget webTarget = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/store-form-data");
//	    		Invocation.Builder invocationBuilder = webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//	    		
	    		//Response response = invocationBuilder.post(Entity.json(jsonString1.toString()));
	    		//logger.info("response" + response.toString());
	    		
	    		APIResponse apiResponse = null;
				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: " + apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

	    		if (apiResponse.getResponseCode() != 201) {
	    			String outputError = apiResponse.getData().toString();
	    			JSONObject json = new JSONObject(outputError);
	    			String messageerror = json.getString("message");
	    			System.out.println(messageerror);
	    			String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
	    			messageerror=friendlyMessageFromAPIError;
	    			logger.info("messageerror"+messageerror);
	    			addActionMessage(messageerror);
	    			return "finolexfailure";
	    			//throw new RuntimeException("Failed : HTTP error code : " + response.getStatus());
	    		}

	    		logger.info("Output from Server .... \n");
	    		String output = apiResponse.getData().toString();
	    		JSONObject json = new JSONObject(output);
	    		JSONObject data1=json.getJSONObject("data");
	    		String formId = data1.getString("form_id");
	    		logger.info("formId"+formId);
	    		getUserSessionMap().put("application_id", "SMARTHUB");
	    		getUserSessionMap().put("form_name",instituteFormDetailsBean.getInstituteCode());
	    		getUserSessionMap().put("context_id",instituteFormDetailsBean.getMerchantID());
	    		getUserSessionMap().put("form_id",formId);

	    		SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
	    		smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
	    		smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
	    		smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
	    		smartHubFetchOnlineFormBean.setForm_id(formId);
	    		
	    		String  jsonString2=obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
	    		logger.info("jsonString2"+jsonString2);

//	    		WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/get-form-data");
//	    		Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//	    		
//	    		Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
	    		
	    		APIResponse apiResponse1 = null;
				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: " + apiResponse.getResponseCode());
				
	    		logger.info("responseString", apiResponse1.toString());

	    		if (apiResponse1.getResponseCode() != 200) {
	    			throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
	    		}
	    		logger.info("Output from Server .... \n");
	    		String output1 = apiResponse1.getData().toString();
	    		
	    		
	    		logger.info("output1"+output1);
	    		
	    		JSONObject jsonObject = new JSONObject(output1);
	    		
	    		JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
	    		logger.info("jsonArray"+jsonArray);

	    		JSONObject data=jsonArray.getJSONObject(0);
	    		JSONObject dataobj=data.getJSONObject("form_data");
	    		
	    		String student_irn=dataobj.getString("student_irn");
	    		String stuName=dataobj.getString("student_name");
	    		String select_gender=dataobj.getString("select_gender");
	    		String select_admission=dataobj.getString("select_admission");
	    		
	    		String select_branch=dataobj.getString("select_branch");
	    		String hidden_branch=dataobj.getString("hidden_branch");
	    		String academic_year=dataobj.getString("academic_year");
	    		String select_admissiontype=dataobj.getString("select_admissiontype");
	    		String select_admissioncategory=dataobj.getString("select_admissioncategory");
	    		
	    		int parent_annualincome=dataobj.getInt("parent_annualincome");
	    		String full_address=dataobj.getString("full_address");
	    		
	    		String state_name=dataobj.getString("state_name");
	    		Long student_contactno=dataobj.getLong("student_contactno");
	    		Long parent_contactno=dataobj.getLong("parent_contactno");
	    		String email_id=dataobj.getString("email_id");
	    		
	    		int tution_fee=dataobj.getInt("tution_fee");
	    		int development_fee=dataobj.getInt("development_fee");
	    		
	    		int enrolment_fee=dataobj.getInt("enrolment_fee");
	    		int insurance_policyamt=dataobj.getInt("insurance_policyamt");
	    		
	    		int university_otherfee=dataobj.getInt("university_otherfee");
	    		int university_tutionfee=dataobj.getInt("university_tutionfee");
	    		
	    		int hostel_charges=dataobj.getInt("hostel_charges");
	    		int form_fee=dataobj.getInt("form_fee");
	    		
	    		int less_amount=dataobj.getInt("less_amount");
	    		int total_amount=dataobj.getInt("total_amount");
	    		
	    		
	    		getFinolexOnlineFormBean().setStudentINR(student_irn);
	    		getFinolexOnlineFormBean().setStudentName(stuName);
	    		getFinolexOnlineFormBean().setSelectGender(select_gender);
	    		
	    		getFinolexOnlineFormBean().setSelectAdmission(select_admission);
	    		getFinolexOnlineFormBean().setHiddenBranch(hidden_branch);
	    		
	    		getFinolexOnlineFormBean().setAcademicYear(academic_year);
	    		getFinolexOnlineFormBean().setSelectAdmissionType(select_admissiontype);
	    		getFinolexOnlineFormBean().setSelectAdmissionCategory(select_admissioncategory);
	    		getFinolexOnlineFormBean().setParentAnnualIncome(String.valueOf(parent_annualincome));
	    		getFinolexOnlineFormBean().setFullAddress(full_address);
	    		getFinolexOnlineFormBean().setStudentContactNo(String.valueOf(student_contactno));
	    		getFinolexOnlineFormBean().setParentContactNo(String.valueOf(parent_contactno));
	    		getFinolexOnlineFormBean().setState(state_name);
	    		getFinolexOnlineFormBean().setEmailId(email_id);
	    		getFinolexOnlineFormBean().setHostelCharges(String.valueOf(hostel_charges));
	    		getFinolexOnlineFormBean().setTutionFee(String.valueOf(tution_fee));
	    		getFinolexOnlineFormBean().setDevelopmentFee(String.valueOf(development_fee));
	      		getFinolexOnlineFormBean().setUniversityOtherFee(String.valueOf(university_otherfee));
	    		getFinolexOnlineFormBean().setUniversityTutionFee(String.valueOf(university_tutionfee));
	    		getFinolexOnlineFormBean().setLessAmount(String.valueOf(less_amount));
	    		getFinolexOnlineFormBean().setTotAmount(String.valueOf(total_amount));
	    		getFinolexOnlineFormBean().setFormFee(String.valueOf(form_fee));
	    		getFinolexOnlineFormBean().setInsurancePolicyAmt(String.valueOf(insurance_policyamt));
	    		getFinolexOnlineFormBean().setApplicationNo(formId);
	    		//END For Form Engine insertion
	    		
	    		//3195 DronacharayaGOI Online form Implementation end
	    		getUserSessionMap().put("ONLINEFORMDATA",getFinolexOnlineFormBean());
	       
	        	String responseString = studentRegistrationService.insertFinolexStudentDetails(getFinolexOnlineFormBean(),billerId);
	        	logger.info("AmbikaPur Registration: "+responseString);
	        	
	        	if (responseString != null && !"".equalsIgnoreCase(responseString) && "success".equalsIgnoreCase(responseString)) {
	                addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
	            }else if ("NA".equalsIgnoreCase(responseString)){
	            	addActionMessage("Failed to add student data.");
	           	return "finolexfailure";
	            }else {         
	            	addActionMessage("Error occured contact administrator.");
	                return "finolexfailure";
	            }

	        	studentRegistrationFormBean = super.getRegisteredStudentDetails(getFinolexOnlineFormBean().getStudentRegistrationId());
		         studentRegistrationFormBean.setTotalPayableFees(getFinolexOnlineFormBean().getTotAmount());
		         studentRegistrationFormBean.setStudentId(getFinolexOnlineFormBean().getApplicationNo());
		         studentRegistrationFormBean.setStudentName(getFinolexOnlineFormBean().getStudentName());
		         super.applyFees(studentRegistrationFormBean);

		         QuickPayAction quickPayAction = new QuickPayAction();
		         appData1 = new PaymentRequestBean();
		         appData1.setStudentRegistrationId(getFinolexOnlineFormBean().getStudentRegistrationId());            
		         logger.info( "FinolexOnline Registration--feesPayList :: "+ feesPayList);
		         quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean,feesPayList);
		   
		         getUserSessionMap().put("APPDATA", getAppData1()); 
		         
	        }
	        else{
	         	addActionMessage("Amount Mismatched.");
	         	return "finolexfailure";
	         }
		}catch(Exception e)
		{
			logger.error("Exception  " +e);
	        return ERROR;
			
		}
		return SUCCESS;	
	}

	public String yugantarRegistration()
	{
		if (!super.isValidSession()) {
	       return INVALID_SESSION;
	   }
		try{
			logger.info("---------------------------------------------------------");
	       logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
	       logger.info("---------------------------------------------------------");       
	       String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
	       String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
	       logger.info("registeredUserId.."+registeredUserId);
	       getShepaOnlineFormBean().setRegisteredUserId(registeredUserId);
	       StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
	       getAppData().setStrID("TEST");
	     /*  if(AmountValidation(getShepaOnlineFormBean().getFees(),getShepaOnlineFormBean().getPayment()))
	       {
	       	*/
	       
	     //3205 ShepaOnlineForm Online form Implememtation started
			//Start For Form Engine insertion
			
			ObjectMapper obMapper = new ObjectMapper();
			ObjectNode objNode = obMapper.createObjectNode();

			InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

			//Object Node declaration
			objNode.put("application_id", "SMARTHUB");
			objNode.put("form_name",instituteFormDetailsBean.getInstituteCode());
			objNode.put("context_id",instituteFormDetailsBean.getMerchantID());
			ObjectNode stdetails = obMapper.createObjectNode();

			SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
			Date date = new Date();  
			  
			stdetails.put("register_number",getShepaOnlineFormBean().getRegisterNumber());
			stdetails.put("student_name",getShepaOnlineFormBean().getStudentName());
			stdetails.put("father_name",getShepaOnlineFormBean().getFatherName());
			stdetails.put("class_name",getShepaOnlineFormBean().getClassName());
			stdetails.put("contact_number", Long.parseLong(getShepaOnlineFormBean().getContactNumber()));
			stdetails.put("fees_details",Double.parseDouble(getShepaOnlineFormBean().getFees()));
			stdetails.put("remark_details",getShepaOnlineFormBean().getRemark());
			stdetails.put("payment_details",Double.parseDouble(getShepaOnlineFormBean().getFees()));
			stdetails.put("registered_userId",registeredUserId);
			stdetails.put("student_registrationid","0");
			stdetails.put("application_no","0");
			stdetails.put("recon_date",formatter.format(date));
			stdetails.put("r_cre_time",formatter.format(date));
			stdetails.put("r_mod_time",formatter.format(date));
			stdetails.put("pg_pmt_status","A");
			stdetails.put("Acc_Holder_Name"," ");
			stdetails.put("Res_Msg"," ");
			stdetails.put("Payment_Mode"," ");
			stdetails.put("Bank_Name"," ");
			stdetails.put("ALT_ERROR_DESC"," ");
			stdetails.put("Pmt_Id","");
			stdetails.put("Payment_id","");
			stdetails.put("PGTxnID","");
			stdetails.put("BANK_ID","");
			stdetails.put("Txn_Amt",Double.parseDouble(getShepaOnlineFormBean().getFees()));

			objNode.put("form_data",stdetails);

			String jsonString1=obMapper.writeValueAsString(objNode);

			logger.info("jsonString1"+jsonString1.toString());
			
			/*** *** *** Initialization start *** *** ***/
			SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

			secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
			secureAPIBuilder.setUpstreamServerPort(443);

			secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
			secureAPIBuilder.setVerifyServerSSL(false);

			//String clientId = "actual-smarthub-node-ip";
			//String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

			//secureAPIBuilder.setAuthenticationAlias(clientId);

			//byte[] clientKey = hexStringToByteArray(clientKeyStr);
			//secureAPIBuilder.setAuthenticationKey(clientKey);

			SecureAPIConnection secureAPI = secureAPIBuilder.build();
			/*** *** *** Initialization complete *** *** ***/

			Client client = ClientBuilder.newClient();
//			WebTarget webTarget = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/store-form-data");
//			Invocation.Builder invocationBuilder = webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//			
			//Response response = invocationBuilder.post(Entity.json(jsonString1.toString()));
			//logger.info("response" + response.toString());
			
			APIResponse apiResponse = null;
			apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

			System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: " + apiResponse.getResponseCode());

			String responseBody = apiResponse.getData().toString();

			if (apiResponse.getResponseCode() != 201) {
				String outputError = apiResponse.getData().toString();
				JSONObject json = new JSONObject(outputError);
				String messageerror = json.getString("message");
				String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
				messageerror=friendlyMessageFromAPIError;
				logger.info("messageerror"+messageerror);
				addActionMessage(messageerror);
				return "yugantarfailure";
				//throw new RuntimeException("Failed : HTTP error code : " + response.getStatus());
			}

			logger.info("Output from Server .... \n");
			String output = apiResponse.getData().toString();
			JSONObject json = new JSONObject(output);
			JSONObject data1=json.getJSONObject("data");
			String formId = data1.getString("form_id");
			logger.info("formId"+formId);
			getUserSessionMap().put("application_id", "SMARTHUB");
			getUserSessionMap().put("form_name",instituteFormDetailsBean.getInstituteCode());
			getUserSessionMap().put("context_id",instituteFormDetailsBean.getMerchantID());
			getUserSessionMap().put("form_id",formId);

			SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
			smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
			smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
			smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
			smartHubFetchOnlineFormBean.setForm_id(formId);

			
			String  jsonString2=obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
			logger.info("jsonString2"+jsonString2);

//			WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/get-form-data");
//			Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//			
//			Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
			
			APIResponse apiResponse1 = null;
			apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

			System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: " + apiResponse.getResponseCode());
			logger.info("responseString", apiResponse1.toString());

			if (apiResponse1.getResponseCode() != 200) {
				throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
			}
			logger.info("Output from Server .... \n");
			String output1 = apiResponse1.getData().toString();
			
			
			logger.info("output1"+output1);
			
			JSONObject jsonObject = new JSONObject(output1);
			
			JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
			logger.info("jsonArray"+jsonArray);

			JSONObject data=jsonArray.getJSONObject(0);
			JSONObject dataobj=data.getJSONObject("form_data");
			
			String registerno=dataobj.getString("register_number");
			String stuName=dataobj.getString("student_name");
			String fatherName=dataobj.getString("father_name");
			String className=dataobj.getString("class_name");
			int fees_details=dataobj.getInt("fees_details");
			String remark_details=dataobj.getString("remark_details");
			
			Long contact_number=dataobj.getLong("contact_number");
			
			getShepaOnlineFormBean().setRegisterNumber(registerno);
			getShepaOnlineFormBean().setStudentName(stuName);
			getShepaOnlineFormBean().setFatherName(fatherName);
			getShepaOnlineFormBean().setClassName(className);
			getShepaOnlineFormBean().setFees(String.valueOf(fees_details));
			getShepaOnlineFormBean().setRemark(remark_details);
			
			getShepaOnlineFormBean().setTotalFee(String.valueOf(fees_details));
			getShepaOnlineFormBean().setContactNumber(String.valueOf(contact_number));
			
			getShepaOnlineFormBean().setApplicationNo(formId);
			//END For Form Engine insertion
			
			//5712 DronacharayaGOI Online form Implementation end
			getUserSessionMap().put("ONLINEFORMDATA",getShepaOnlineFormBean());
	       	String responseString = studentRegistrationService.insertYugantarStudentDetails(getShepaOnlineFormBean(),billerId);
	       	logger.info("Yugantar Registration: "+responseString);
	       	



	       	if (responseString != null && !"".equalsIgnoreCase(responseString) && "success".equalsIgnoreCase(responseString)) {
	               addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
	           }else if ("NA".equalsIgnoreCase(responseString)){
	           	addActionMessage("Failed to add student data.");
	          	return "yugantarfailure";
	           }else {         
	           	addActionMessage("Error occured contact administrator.");
	               return "yugantarfailure";
	           }

	       	studentRegistrationFormBean = super.getRegisteredStudentDetails(getShepaOnlineFormBean().getStudentRegistrationId());
		         studentRegistrationFormBean.setTotalPayableFees(getShepaOnlineFormBean().getFees());
		         studentRegistrationFormBean.setStudentId(getShepaOnlineFormBean().getApplicationNo());
		         studentRegistrationFormBean.setStudentName(getShepaOnlineFormBean().getStudentName());
		         super.applyFees(studentRegistrationFormBean);

		         QuickPayAction quickPayAction = new QuickPayAction();
		         appData1 = new PaymentRequestBean();
		         appData1.setStudentRegistrationId(getShepaOnlineFormBean().getStudentRegistrationId());            
		         logger.info( "Yugantar Registration--feesPayList :: "+ feesPayList);
		         quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean,feesPayList);
		   
		         getUserSessionMap().put("APPDATA", getAppData1()); 
		         
	      /* }
	       else{
	        	addActionMessage("Amount Mismatched.");
	        	return "yugantarfailure";
	        }*/
		}catch(Exception e)
		{
			logger.error("Exception  " +e);
	       return ERROR;
			
		}
		return SUCCESS;	
	}


	public String HNBGURegistration()

	{
		if (!super.isValidSession()) {
	        return INVALID_SESSION;
	    }
		try{
			logger.info("---------------------------------------------------------");
	        logger.info("StudentRegistrationId : -HNBGURegistration " + getAppData().getStudentRegistrationId());
	        logger.info("---------------------------------------------------------");       
	        String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
	        String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
	        logger.info("registeredUserId..HNBGURegistration"+registeredUserId);
	        
	        getHNBGUFormBean().setRegisteredUserId(registeredUserId);
	        StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
	        getAppData().setStrID("TEST");
	     /*  if(AmountValidation(gethNBGUFormDean().getTotalFee(),gethNBGUFormDean().getPayment()))
	        {*/
	      //3206 HNBG Online form Implememtation started
				//Start For Form Engine insertion
				
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

				//Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name",instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id",instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();
				
				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
				Date date = new Date(); 
				 SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				    Date date1 = sdf.parse(getHNBGUFormBean().getDateOfBirth());
				
				 
				stdetails.put("selectpayment_category","Fees Payment");
				stdetails.put("class_name",getHNBGUFormBean().getClassName());
				stdetails.put("select_semester",getHNBGUFormBean().getSemester());
				
				  stdetails.put("typesof_group",getHNBGUFormBean().getTypesOfGroup());
				  stdetails.put("typesof_practical",getHNBGUFormBean().getTypesOfPractical());
				  stdetails.put("typesof_std",getHNBGUFormBean().getTypesOfStd());
				 
				/*
				 * stdetails.put("select_semester","III");
				 * stdetails.put("typesof_group","Math Group");
				 * stdetails.put("typesof_practical","Non Pract");
				 * stdetails.put("typesof_std","New Enroll Student");
				 */
				
				  stdetails.put("subject_1",getHNBGUFormBean().getSubject1());
				  stdetails.put("subject_2",getHNBGUFormBean().getSubject2());
				  stdetails.put("subject_3",getHNBGUFormBean().getSubject3());
				  stdetails.put("subject_4",getHNBGUFormBean().getSubject4());
				 
				/*
				 * stdetails.put("subject_1","subject"); stdetails.put("subject_2","subject");
				 * stdetails.put("subject_3","subject"); stdetails.put("subject_4","subject");
				 */
				stdetails.put("student_id",getHNBGUFormBean().getStudentID());
				stdetails.put("student_name",getHNBGUFormBean().getName());
				stdetails.put("father_name",getHNBGUFormBean().getFatherName());
				stdetails.put("mother_name",getHNBGUFormBean().getMotherName());
				stdetails.put("dateof_birth",formatter.format(date));
				stdetails.put("mobile_no",Long.parseLong(getHNBGUFormBean().getMobileNo()));
				stdetails.put("adhar_number",Long.parseLong(getHNBGUFormBean().getAdharNumber()));
				stdetails.put("tution_fee",getHNBGUFormBean().getTutionFee()==null?0:Double.parseDouble(getHNBGUFormBean().getTutionFee()));
				stdetails.put("caution_fee",getHNBGUFormBean().getCautionFee()==null?0:Double.parseDouble(getHNBGUFormBean().getCautionFee()));
				stdetails.put("exam_fee",getHNBGUFormBean().getExamFee()==null?0:Double.parseDouble(getHNBGUFormBean().getExamFee()));
				stdetails.put("bus_fee",getHNBGUFormBean().getBusFee()==null?0:Double.parseDouble(getHNBGUFormBean().getBusFee()));
				stdetails.put("other_fee",getHNBGUFormBean().getOtherFee()==null?0:Double.parseDouble(getHNBGUFormBean().getOtherFee()));
				stdetails.put("other_feeremark",getHNBGUFormBean().getOtherFeeRemark());
				stdetails.put("sport_fee",getHNBGUFormBean().getSportFee()==null?0:Double.parseDouble(getHNBGUFormBean().getSportFee()));
				stdetails.put("other_annualfee",getHNBGUFormBean().getOtherAnnualFee()==null?0:Double.parseDouble(getHNBGUFormBean().getOtherAnnualFee()));
				stdetails.put("enrollment_fee",getHNBGUFormBean().getEnrollmentFee()==null?0:Double.parseDouble(getHNBGUFormBean().getEnrollmentFee()));
				stdetails.put("degree_fee",getHNBGUFormBean().getDegreeFee()==null?0:Double.parseDouble(getHNBGUFormBean().getDegreeFee()));
				
				  stdetails.put("oldstudent_number",getHNBGUFormBean().getOldStudentNumber());
				  stdetails.put("newstudent_number",getHNBGUFormBean().getNewStudentNumber());
				 
				
					/*
					 * stdetails.put("oldstudent_number","kkkkkkkkkkkk");
					 * stdetails.put("newstudent_number","kkkkkkkkkkkk");
					 */
				stdetails.put("payment_details",Double.parseDouble(getHNBGUFormBean().getTotalFee()));
				stdetails.put("registered_userId",registeredUserId);
				stdetails.put("student_registrationid","0");
				stdetails.put("application_no","0");
				stdetails.put("email_id",getHNBGUFormBean().getEmailId());
				stdetails.put("recon_date",formatter.format(date));
				stdetails.put("r_cre_time",formatter.format(date));
				stdetails.put("r_mod_time",formatter.format(date));
				stdetails.put("pg_pmt_status","A");
				stdetails.put("Acc_Holder_Name"," ");
				stdetails.put("Res_Msg"," ");
				stdetails.put("Payment_Mode"," ");
				stdetails.put("Bank_Name"," ");
				stdetails.put("ALT_ERROR_DESC"," ");
				stdetails.put("Pmt_Id","");
				stdetails.put("Payment_id","");
				stdetails.put("PGTxnID","");
				stdetails.put("BANK_ID","");
				stdetails.put("Txn_Amt",Double.parseDouble(getHNBGUFormBean().getTotalFee()));

				objNode.put("form_data",stdetails);

				String jsonString1=obMapper.writeValueAsString(objNode);

				logger.info("jsonString1"+jsonString1.toString());
				
				//code added by priya 
				
				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				//String clientId = "actual-smarthub-node-ip";
				//String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				//secureAPIBuilder.setAuthenticationAlias(clientId);

				//byte[] clientKey = hexStringToByteArray(clientKeyStr);
				//secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

	           //CODE END 

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				
				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: " + apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();
				
				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					//throw new RuntimeException("Failed : HTTP error code : " + response.getStatus());
					String outputError = apiResponse.getData().toString();
				JSONObject json = new JSONObject(outputError);
				String messageerror = json.getString("message");
				String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
				messageerror=friendlyMessageFromAPIError;
				logger.info("messageerror"+messageerror);
				addActionMessage(messageerror);
				logger.info("messageerror"+messageerror);
				addActionMessage(messageerror);
				return "HNBGUfailure";
					
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1= json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId"+formId);
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name",instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id",instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id",formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				
				String  jsonString2=obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2"+jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				
				//code added by priya form engine
				APIResponse apiResponse1 = null;

				
			   apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

			   System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: " + apiResponse1.getResponseCode());

					

				logger.info("responseString", apiResponse1.toString());


				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();
				
				
				logger.info("output1"+output1);
				
				JSONObject jsonObject = new JSONObject(output1);
				
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray"+jsonArray);

				JSONObject data=jsonArray.getJSONObject(0);
				JSONObject dataobj=data.getJSONObject("form_data");
				
				String selectpayment_category=dataobj.getString("selectpayment_category");
				
				String class_name=dataobj.getString("class_name");
				String select_semester=dataobj.getString("select_semester");
				String typesof_group=dataobj.getString("typesof_group");
				String typesof_practical=dataobj.getString("typesof_practical");
				String typesof_std=dataobj.getString("typesof_std");
				
				String subject_1=dataobj.getString("subject_1");
				String subject_2=dataobj.getString("subject_2");
				String subject_3=dataobj.getString("subject_3");
				String subject_4=dataobj.getString("subject_4");
				String student_id=dataobj.getString("student_id");
				String student_name=dataobj.getString("student_name");
				Long mobile_no=dataobj.getLong("mobile_no");
				
				String father_name=dataobj.getString("father_name");
				String mother_name=dataobj.getString("mother_name");
				String dateof_birth=dataobj.getString("dateof_birth");
				int adhar_number=dataobj.getInt("adhar_number");
				
				int tution_fee=dataobj.getInt("tution_fee");
				int caution_fee=dataobj.getInt("caution_fee");
				int exam_fee=dataobj.getInt("exam_fee");
				int bus_fee=dataobj.getInt("bus_fee");
				
				int other_fee=dataobj.getInt("other_fee");
				String other_feeremark=dataobj.getString("other_feeremark");
				int sport_fee=dataobj.getInt("sport_fee");
				int other_annualfee=dataobj.getInt("other_annualfee");
				
				int degree_fee=dataobj.getInt("degree_fee");
				String oldstudent_number=dataobj.getString("oldstudent_number");
				String newstudent_number=dataobj.getString("newstudent_number");
				
				
				getHNBGUFormBean().setClassName(class_name);
				getHNBGUFormBean().setFatherName(father_name);
				getHNBGUFormBean().setMotherName(mother_name);
				getHNBGUFormBean().setSemester(select_semester);
				getHNBGUFormBean().setTypesOfGroup(typesof_group);
				getHNBGUFormBean().setTypesOfPractical(typesof_practical);
				getHNBGUFormBean().setTypesOfStd(typesof_std);
				
				getHNBGUFormBean().setSubject1(subject_1);
				getHNBGUFormBean().setSubject2(subject_2);
				getHNBGUFormBean().setSubject3(subject_3);
				getHNBGUFormBean().setSubject4(subject_4);
				
				getHNBGUFormBean().setStudentID(student_id);
				getHNBGUFormBean().setName(student_name);
				
				getHNBGUFormBean().setDateOfBirth(getHNBGUFormBean().getDateOfBirth());
				getHNBGUFormBean().setAdharNumber(getHNBGUFormBean().getAdharNumber());
				getHNBGUFormBean().setCautionFee(String.valueOf(caution_fee));
				getHNBGUFormBean().setTutionFee(String.valueOf(tution_fee));
				getHNBGUFormBean().setExamFee(String.valueOf(exam_fee));
				getHNBGUFormBean().setBusFee(String.valueOf(bus_fee));
				getHNBGUFormBean().setOtherFee(String.valueOf(other_fee));
				getHNBGUFormBean().setOtherFeeRemark(String.valueOf(other_feeremark));
				getHNBGUFormBean().setSportFee(String.valueOf(sport_fee));
				getHNBGUFormBean().setOtherAnnualFee(String.valueOf(other_annualfee));
				getHNBGUFormBean().setDegreeFee(String.valueOf(degree_fee));
				getHNBGUFormBean().setOldStudentNumber(oldstudent_number);
				getHNBGUFormBean().setNewStudentNumber(newstudent_number);
				getHNBGUFormBean().setApplicationNo(formId);
				//END For Form Engine insertion
				getUserSessionMap().put("ONLINEFORMDATA",getHNBGUFormBean());
				//1250 CUOHaryana Online form Implementation end
	        	String responseString = studentRegistrationService.insertHnbguStudentDetails(getHNBGUFormBean(),billerId);
	        	logger.info("HNBGURegistration Registration: "+responseString);
	        	
	        	if (responseString != null && !"".equalsIgnoreCase(responseString) && "success".equalsIgnoreCase(responseString)) {
	                addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
	            }else if ("NA".equalsIgnoreCase(responseString)){
	            	addActionMessage("Failed to add student data.");
	           	return "HNBGUfailure";
	            }else {         
	            	addActionMessage("Error occured contact administrator.");
	                return "HNBGUfailure";
	            }

	        	studentRegistrationFormBean = super.getRegisteredStudentDetails(getHNBGUFormBean().getStudentRegistrationId());
		         studentRegistrationFormBean.setTotalPayableFees(getHNBGUFormBean().getTotalFee());
		         studentRegistrationFormBean.setStudentId(getHNBGUFormBean().getApplicationNo());
		         studentRegistrationFormBean.setStudentName(getHNBGUFormBean().getName());
		         studentRegistrationFormBean.setStudentEmailId(getHNBGUFormBean().getEmailId());
		         super.applyFees(studentRegistrationFormBean);

		         QuickPayAction quickPayAction = new QuickPayAction();
		         appData1 = new PaymentRequestBean();
		         appData1.setStudentRegistrationId(getHNBGUFormBean().getStudentRegistrationId());            
		         logger.info( "HNBGU PG--feesPayList :: "+ feesPayList);
		         quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean,feesPayList);
		   
		         getUserSessionMap().put("APPDATA", getAppData1()); 
		         
	       /* }
	        else{
	         	addActionMessage("Amount Mismatched.");
	         	return "HNBGUfailure";
	         }*/
		}catch(Exception e)
		{
			logger.error("Exception  " +e);
	        return ERROR;
			
		}
		return SUCCESS;	
	}

	public String icbrRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getIcbrOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getIcbrOnlineFormBean().getTotalAmount(), getIcbrOnlineFormBean().getPayment())) {

				// 3217 ICBR Online form Implememtation started
				// Start For Form Engine insertion

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				stdetails.put("nameof_applicant", getIcbrOnlineFormBean().getNameofApplicant());
				stdetails.put("address_details", getIcbrOnlineFormBean().getAddress());
				stdetails.put("email_id", getIcbrOnlineFormBean().getEmailId());
				stdetails.put("mobile_no", Long.parseLong(getIcbrOnlineFormBean().getMobileNo()));
				stdetails.put("fee_heads", getIcbrOnlineFormBean().getFeeHeads());
				stdetails.put("fees_details", Double.parseDouble(getIcbrOnlineFormBean().getFees()));
				stdetails.put("total_amount", Double.parseDouble(getIcbrOnlineFormBean().getTotalAmount()));
				stdetails.put("payment_details", Double.parseDouble(getIcbrOnlineFormBean().getTotalAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getIcbrOnlineFormBean().getTotalAmount()));

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				Client client = ClientBuilder.newClient();
// 			WebTarget webTarget = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/store-form-data");
// 			Invocation.Builder invocationBuilder = webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
// 			
				// Response response =
				// invocationBuilder.post(Entity.json(jsonString1.toString()));
				// logger.info("response" + response.toString());

				APIResponse apiResponse = null;
				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					System.out.println(messageerror);
					String friendlyMessageFromAPIError = ValidationErrorHandler
							.getFriendlyMessageFromAPIError(messageerror);
					messageerror = friendlyMessageFromAPIError;
// 				if(messageerror.contains("nameof_applicant")) {
// 					messageerror="Please enter valid name";
// 				}
// 				else if(messageerror.contains("address_details")) {
// 					messageerror="Please enter valid address";
// 				}
// 				else if(messageerror.contains("email_id")) {
// 					messageerror="Please enter valid email id";
// 				}
// 				else if(messageerror.contains("mobile_no")) {
// 					messageerror="Please enter valid mobile number";
// 				}
// 				else if(messageerror.contains("fees_details")) {
// 					messageerror="Please enter valid fees";
// 				}
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "icbrfailure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

// 			WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/get-form-data");
// 			Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
// 			
// 			Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				APIResponse apiResponse1 = null;
				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String stuName = dataobj.getString("nameof_applicant");

				String address_details = dataobj.getString("address_details");
				String fee_heads = dataobj.getString("fee_heads");
				int fees_details = dataobj.getInt("fees_details");
				int amt_paid = dataobj.getInt("total_amount");
				Long mobile_number = dataobj.getLong("mobile_no");
				String email_id = dataobj.getString("email_id");

				getIcbrOnlineFormBean().setNameofApplicant(stuName);
				getIcbrOnlineFormBean().setAddress(address_details);
				getIcbrOnlineFormBean().setFeeHeads(fee_heads);
				getIcbrOnlineFormBean().setFees(String.valueOf(fees_details));
				getIcbrOnlineFormBean().setEmailId(email_id);
				getIcbrOnlineFormBean().setMobileNo(String.valueOf(mobile_number));
				getIcbrOnlineFormBean().setTotalAmount(String.valueOf(amt_paid));
				getIcbrOnlineFormBean().setApplicationNo(formId);
				// END For Form Engine insertion

				// 5712 DronacharayaGOI Online form Implementation end
				getUserSessionMap().put("ONLINEFORMDATA", getIcbrOnlineFormBean());

				String responseString = studentRegistrationService.insertICBRStudentDetails(getIcbrOnlineFormBean(),
						billerId);
				logger.info("ICBR Registration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "icbrfailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "icbrfailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getIcbrOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getIcbrOnlineFormBean().getTotalAmount());
				studentRegistrationFormBean.setStudentId(getIcbrOnlineFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getIcbrOnlineFormBean().getNameofApplicant());
				studentRegistrationFormBean.setStudentEmailId(getIcbrOnlineFormBean().getMobileNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getIcbrOnlineFormBean().getStudentRegistrationId());
				logger.info("ICBRRegistration--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "icbrfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String mahadeviyadavRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getMahadeviYadavOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getMahadeviYadavOnlineFormBean().getTotalFees(),
					getMahadeviYadavOnlineFormBean().getPayment())) {
				// 3251 Mahadevi Online form Implememtation started
				// Start For Form Engine insertion

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				Date date1 = sdf.parse(getMahadeviYadavOnlineFormBean().getStdDOB());

				stdetails.put("std_name", getMahadeviYadavOnlineFormBean().getStdName());
				stdetails.put("form_no", getMahadeviYadavOnlineFormBean().getFormNo());
				stdetails.put("cls_details", getMahadeviYadavOnlineFormBean().getCls());
				stdetails.put("std_dob", getMahadeviYadavOnlineFormBean().getStdDOB());
				stdetails.put("roll_no", getMahadeviYadavOnlineFormBean().getRollNo());
				stdetails.put("father_name", getMahadeviYadavOnlineFormBean().getFatherName());
				stdetails.put("section_details", getMahadeviYadavOnlineFormBean().getSection());
				stdetails.put("mobile_no", Long.parseLong(getMahadeviYadavOnlineFormBean().getMobileNo()));
				stdetails.put("total_fees", Double.parseDouble(getMahadeviYadavOnlineFormBean().getTotalFees()));
				stdetails.put("payment_details", Double.parseDouble(getMahadeviYadavOnlineFormBean().getTotalFees()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getMahadeviYadavOnlineFormBean().getTotalFees()));

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */

				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "mahadeviyadavfailure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");// code added by priya
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getData().toString());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String stuName = dataobj.getString("std_name");
				String roll_no = dataobj.getString("roll_no");
				String form_no = dataobj.getString("form_no");
				String dob_date = dataobj.getString("std_dob");
				String father_name = dataobj.getString("father_name");
				String class_1 = dataobj.getString("cls_details");
				String section_details = dataobj.getString("section_details");

				int amt_paid = dataobj.getInt("total_fees");
				Long mobile_number = dataobj.getLong("mobile_no");

				getMahadeviYadavOnlineFormBean().setStdName(stuName);
				getMahadeviYadavOnlineFormBean().setFormNo(form_no);
				getMahadeviYadavOnlineFormBean().setRollNo(roll_no);
				getMahadeviYadavOnlineFormBean().setStdDOB(getMahadeviYadavOnlineFormBean().getStdDOB());
				getMahadeviYadavOnlineFormBean().setFatherName(father_name);
				getMahadeviYadavOnlineFormBean().setSection(section_details);
				getMahadeviYadavOnlineFormBean().setMobileNo(String.valueOf(mobile_number));
				getMahadeviYadavOnlineFormBean().setTotalFees(String.valueOf(amt_paid));
				getMahadeviYadavOnlineFormBean().setApplicationNo(formId);
				// END For Form Engine insertion

				// 5712 DronacharayaGOI Online form Implementation end
				getUserSessionMap().put("ONLINEFORMDATA", getMahadeviYadavOnlineFormBean());

				String responseString = studentRegistrationService
						.insertMahadeviYadavStudentDetails(getMahadeviYadavOnlineFormBean(), billerId);
				logger.info("MahadeviYadav Registration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "mahadeviyadavfailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "mahadeviyadavfailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getMahadeviYadavOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getMahadeviYadavOnlineFormBean().getTotalFees());
				studentRegistrationFormBean.setStudentId(getMahadeviYadavOnlineFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getMahadeviYadavOnlineFormBean().getStdName());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getMahadeviYadavOnlineFormBean().getStudentRegistrationId());
				logger.info("Mahadevi yadav PG--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "mahadeviyadavfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

//ABHAY Starts
	public String abhayRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getAbhayFormBean().setRegisteredUserId(registeredUserId);

			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getAbhayFormBean().getTotalfees(), getAbhayFormBean().getPayment())) {// 3250 ABHay
																										// Online form
																										// Implememtation
																										// started
																										// Start For
																										// Form Engine
																										// insertion

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();
				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				Date date1 = sdf.parse(getAbhayFormBean().getDob());
				stdetails.put("student_name", getAbhayFormBean().getName());
				stdetails.put("form_no", getAbhayFormBean().getFormNo());
				stdetails.put("roll_no", getAbhayFormBean().getRollNo());
				stdetails.put("dob_date", formatter.format(date1));
				stdetails.put("father_name", getAbhayFormBean().getFatherName());
				stdetails.put("class_1", getAbhayFormBean().getClass1());
				stdetails.put("section_details", getAbhayFormBean().getSection());
				stdetails.put("mobile_no", Long.parseLong(getAbhayFormBean().getMobileNo()));
				stdetails.put("total_fees", Double.parseDouble(getAbhayFormBean().getTotalfees()));
				stdetails.put("payment_details", Double.parseDouble(getAbhayFormBean().getTotalfees()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getAbhayFormBean().getTotalfees()));

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder = //commented by
				 * priya webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				// code end form engine

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "faliure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */

				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				// code ended by priya form engine

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String stuName = dataobj.getString("student_name");
				String roll_no = dataobj.getString("roll_no");
				String form_no = dataobj.getString("form_no");
				String father_name = dataobj.getString("father_name");
				String class_1 = dataobj.getString("class_1");
				String section_details = dataobj.getString("section_details");

				int amt_paid = dataobj.getInt("total_fees");
				Long mobile_number = dataobj.getLong("mobile_no");

				getAbhayFormBean().setName(stuName);
				getAbhayFormBean().setFormNo(form_no);
				getAbhayFormBean().setRollNo(roll_no);
				getAbhayFormBean().setDob(getAbhayFormBean().getDob());
				getAbhayFormBean().setFatherName(father_name);
				getAbhayFormBean().setSection(section_details);
				getAbhayFormBean().setMobileNo(String.valueOf(mobile_number));
				getAbhayFormBean().setTotalfees(String.valueOf(amt_paid));
				getAbhayFormBean().setApplicationNo(formId);
				// END For Form Engine insertion

				// 5712 DronacharayaGOI Online form Implementation end
				getUserSessionMap().put("ONLINEFORMDATA", getAbhayFormBean());

				String responseString = studentRegistrationService.insertAbhayStudentDetails(getAbhayFormBean(),
						billerId);
				logger.info("Abhay Registration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "abhayfailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "abhayfailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getAbhayFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getAbhayFormBean().getTotalfees());
				studentRegistrationFormBean.setStudentId(getAbhayFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getAbhayFormBean().getName());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getAbhayFormBean().getStudentRegistrationId());
				logger.info("Abhay --feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "abhayfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

//ABHAY ENDS
//RAJ Starts
	/*
	 * public String rajRegistration() { if (!super.isValidSession()) { return
	 * INVALID_SESSION; } try {
	 * logger.info("---------------------------------------------------------");
	 * logger.info("StudentRegistrationId : - " +
	 * getAppData().getStudentRegistrationId());
	 * logger.info("---------------------------------------------------------");
	 * String billerId = ((FJBean)
	 * getUserSessionMap().get("BASEDATA")).getBillerId(); String registeredUserId =
	 * ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
	 * logger.info("registeredUserId.." + registeredUserId);
	 * getRajFormBean().setRegisteredUserId(registeredUserId);
	 * 
	 * StudentRegistrationService studentRegistrationService = new
	 * StudentRegistrationService(); getAppData().setStrID("TEST"); if
	 * (AmountValidation(getRajFormBean().getTotalfees(),
	 * getRajFormBean().getPayment())) {
	 * 
	 * // 3248 RAJ Online form Implememtation started // Start For Form Engine
	 * insertion
	 * 
	 * ObjectMapper obMapper = new ObjectMapper(); ObjectNode objNode =
	 * obMapper.createObjectNode();
	 * 
	 * InstituteFormDetailsBean instituteFormDetailsBean =
	 * studentRegistrationService .getInstituteFormDetails(billerId);
	 * 
	 * // Object Node declaration objNode.put("application_id", "SMARTHUB");
	 * objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
	 * objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
	 * ObjectNode stdetails = obMapper.createObjectNode();
	 * 
	 * SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	 * Date date = new Date();
	 * 
	 * SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy"); Date date1 =
	 * sdf.parse(getRajFormBean().getDob());
	 * 
	 * stdetails.put("student_name", getRajFormBean().getName());
	 * stdetails.put("form_no", getRajFormBean().getFormNo());
	 * stdetails.put("roll_no", getRajFormBean().getRollNo());
	 * stdetails.put("dob_date", formatter.format(date1));
	 * stdetails.put("father_name", getRajFormBean().getFatherName());
	 * stdetails.put("class_1", getRajFormBean().getClass1());
	 * stdetails.put("section_details", getRajFormBean().getSection());
	 * stdetails.put("mobile_no", Long.parseLong(getRajFormBean().getMobileNo()));
	 * stdetails.put("total_fees",
	 * Double.parseDouble(getRajFormBean().getTotalfees()));
	 * stdetails.put("payment_details",
	 * Double.parseDouble(getRajFormBean().getTotalfees()));
	 * stdetails.put("registered_userId", registeredUserId);
	 * stdetails.put("student_registrationid", "0"); stdetails.put("application_no",
	 * "0"); stdetails.put("recon_date", formatter.format(date));
	 * stdetails.put("r_cre_time", formatter.format(date));
	 * stdetails.put("r_mod_time", formatter.format(date));
	 * stdetails.put("pg_pmt_status", "A"); stdetails.put("Acc_Holder_Name", " ");
	 * stdetails.put("Res_Msg", " "); stdetails.put("Payment_Mode", " ");
	 * stdetails.put("Bank_Name", " "); stdetails.put("ALT_ERROR_DESC", " ");
	 * stdetails.put("Pmt_Id", ""); stdetails.put("Payment_id", "");
	 * stdetails.put("PGTxnID", ""); stdetails.put("BANK_ID", "");
	 * stdetails.put("Txn_Amt",
	 * Double.parseDouble(getRajFormBean().getTotalfees()));
	 * 
	 * objNode.put("form_data", stdetails);
	 * 
	 * String jsonString1 = obMapper.writeValueAsString(objNode);
	 * 
	 * logger.info("jsonString1" + jsonString1.toString()); QuickPayAction
	 * QuickPayAction = new QuickPayAction();
	 * 
	 * // code added by priya String response1 =
	 * QuickPayAction.formengineapi(jsonString1, billerId, "rajfailure");
	 * 
	 * JSONObject jsonObject = new JSONObject(response1); JSONArray jsonArray =
	 * jsonObject.getJSONArray("form_data_set"); logger.info("jsonArray" +
	 * jsonArray);
	 * 
	 * JSONObject data = jsonArray.getJSONObject(0); JSONObject dataobj =
	 * data.getJSONObject("form_data"); // code end priya
	 * 
	 * String stuName = dataobj.getString("student_name"); String roll_no =
	 * dataobj.getString("roll_no"); String form_no = dataobj.getString("form_no");
	 * String dob_date = dataobj.getString("dob_date"); String father_name =
	 * dataobj.getString("father_name"); String class_1 =
	 * dataobj.getString("class_1"); String section_details =
	 * dataobj.getString("section_details");
	 * 
	 * int amt_paid = dataobj.getInt("total_fees"); Long mobile_number =
	 * dataobj.getLong("mobile_no");
	 * 
	 * getRajFormBean().setName(stuName); getRajFormBean().setFormNo(form_no);
	 * getRajFormBean().setRollNo(roll_no);
	 * getRajFormBean().setDob(getRajFormBean().getDob());
	 * getRajFormBean().setFatherName(father_name);
	 * getRajFormBean().setSection(section_details);
	 * getRajFormBean().setMobileNo(String.valueOf(mobile_number));
	 * getRajFormBean().setTotalfees(String.valueOf(amt_paid));
	 * getRajFormBean().setApplicationNo(getUserSessionMap().get("form_id").toString
	 * ());
	 * 
	 * // END For Form Engine insertion
	 * 
	 * // 5712 DronacharayaGOI Online form Implementation end
	 * getUserSessionMap().put("RAJOIONLINEFORMDATA", getRajFormBean());
	 * 
	 * String responseString =
	 * studentRegistrationService.insertRajStudentDetails(getRajFormBean(),
	 * billerId); logger.info("Raj Registration: " + responseString);
	 * 
	 * if (responseString != null && !"".equalsIgnoreCase(responseString) &&
	 * "success".equalsIgnoreCase(responseString)) {
	 * addActionMessage(ErrorPropertyReader.getProperty(
	 * "student.data.added.successfully")); } else if
	 * ("NA".equalsIgnoreCase(responseString)) {
	 * addActionMessage("Failed to add student data."); return "rajfailure"; } else
	 * { addActionMessage("Error occured contact administrator."); return
	 * "rajfailure"; }
	 * 
	 * studentRegistrationFormBean = super.getRegisteredStudentDetails(
	 * getRajFormBean().getStudentRegistrationId());
	 * studentRegistrationFormBean.setTotalPayableFees(getRajFormBean().getTotalfees
	 * ());
	 * studentRegistrationFormBean.setStudentId(getRajFormBean().getApplicationNo())
	 * ; studentRegistrationFormBean.setStudentName(getRajFormBean().getName());
	 * super.applyFees(studentRegistrationFormBean);
	 * 
	 * QuickPayAction quickPayAction = new QuickPayAction(); appData1 = new
	 * PaymentRequestBean();
	 * appData1.setStudentRegistrationId(getRajFormBean().getStudentRegistrationId()
	 * ); logger.info("Raj --feesPayList :: " + feesPayList);
	 * quickPayAction.setAppDataFromStudentBean(this.appData1,
	 * studentRegistrationFormBean, feesPayList);
	 * 
	 * getUserSessionMap().put("APPDATA", getAppData1());
	 * 
	 * } else { addActionMessage("Amount Mismatched."); return "rajfailure"; } }
	 * catch (Exception e) { logger.error("Exception  " + e); return ERROR;
	 * 
	 * } return SUCCESS; }
	 */
//RAJ ENDS
	// RAJ Starts
	public String rajRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getRajFormBean().setRegisteredUserId(registeredUserId);

			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getRajFormBean().getTotalfees(), getRajFormBean().getPayment())) {

				// 3248 RAJ Online form Implememtation started
				// Start For Form Engine insertion

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				Date date1 = sdf.parse(getRajFormBean().getDob());

				stdetails.put("student_name", getRajFormBean().getName());
				stdetails.put("form_no", getRajFormBean().getFormNo());
				stdetails.put("roll_no", getRajFormBean().getRollNo());
				stdetails.put("dob_date", formatter.format(date1));
				stdetails.put("father_name", getRajFormBean().getFatherName());
				stdetails.put("class_1", getRajFormBean().getClass1());
				stdetails.put("section_details", getRajFormBean().getSection());
				stdetails.put("mobile_no", Long.parseLong(getRajFormBean().getMobileNo()));
				stdetails.put("total_fees", Double.parseDouble(getRajFormBean().getTotalfees()));
				stdetails.put("payment_details", Double.parseDouble(getRajFormBean().getTotalfees()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getRajFormBean().getTotalfees()));

				/*
				 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
				 * 
				 * String jsonString1=obMapper.writeValueAsString(objNode);
				 * 
				 * logger.info("jsonString1"+jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				String clientId = "actual-smarthub-node-ip";
				String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				secureAPIBuilder.setAuthenticationAlias(clientId);

				byte[] clientKey = hexStringToByteArray(clientKeyStr);
				secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "rajfailure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				// JSONArray jsonArray = jsonObject.getJSONArray("message");

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String stuName = dataobj.getString("student_name");
				String roll_no = dataobj.getString("roll_no");
				String form_no = dataobj.getString("form_no");
				String dob_date = dataobj.getString("dob_date");
				String father_name = dataobj.getString("father_name");
				String class_1 = dataobj.getString("class_1");
				String section_details = dataobj.getString("section_details");

				int amt_paid = dataobj.getInt("total_fees");
				Long mobile_number = dataobj.getLong("mobile_no");

				getRajFormBean().setName(stuName);
				getRajFormBean().setFormNo(form_no);
				getRajFormBean().setRollNo(roll_no);
				getRajFormBean().setDob(getRajFormBean().getDob());
				getRajFormBean().setFatherName(father_name);
				getRajFormBean().setSection(section_details);
				getRajFormBean().setMobileNo(String.valueOf(mobile_number));
				getRajFormBean().setTotalfees(String.valueOf(amt_paid));
				getRajFormBean().setApplicationNo(formId);
				// END For Form Engine insertion

				// 5712 DronacharayaGOI Online form Implementation end
				getUserSessionMap().put("ONLINEFORMDATA", getRajFormBean());

				String responseString = studentRegistrationService.insertRajStudentDetails(getRajFormBean(), billerId);
				logger.info("Raj Registration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "rajfailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "rajfailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getRajFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getRajFormBean().getTotalfees());
				studentRegistrationFormBean.setStudentId(getRajFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getRajFormBean().getName());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getRajFormBean().getStudentRegistrationId());
				logger.info("Raj --feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "rajfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	// RAJ ENDS
	public String oercRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getOercOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getOercOnlineFormBean().getTotAmount(), getOercOnlineFormBean().getPayment())) {// 3279
																													// OREC
																													// Online
																													// form
																													// Implememtation
																													// started
																													// Start
																													// For
																													// Form
																													// Engine
																													// insertion

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				stdetails.put("std_name", getOercOnlineFormBean().getStdName());
				stdetails.put("mobile_number", Long.parseLong(getOercOnlineFormBean().getMobileNumber()));
				stdetails.put("email_id", getOercOnlineFormBean().getEmailId());
				stdetails.put("address_details", getOercOnlineFormBean().getAddress());
				stdetails.put("select_coursename", "1");
				stdetails.put("duration_details", getOercOnlineFormBean().getDuration());
				stdetails.put("total_amount", Double.parseDouble(getOercOnlineFormBean().getTotAmount()));
				stdetails.put("payment_details", Double.parseDouble(getOercOnlineFormBean().getTotAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getOercOnlineFormBean().getTotAmount()));

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "oercfailure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String stuName = dataobj.getString("std_name");

				String email_id = dataobj.getString("email_id");
				String address_details = dataobj.getString("address_details");
				String select_coursename = dataobj.getString("select_coursename");
				String duration_details = dataobj.getString("duration_details");
				int amt_paid = dataobj.getInt("total_amount");
				Long mobile_number = dataobj.getLong("mobile_number");

				getOercOnlineFormBean().setStdName(stuName);
				getOercOnlineFormBean().setMobileNumber(String.valueOf(mobile_number));
				getOercOnlineFormBean().setEmailId(email_id);
				getOercOnlineFormBean().setAddress(address_details);
				getOercOnlineFormBean().setSelectCourseName(select_coursename);
				getOercOnlineFormBean().setDuration(duration_details);
				getOercOnlineFormBean().setTotAmount(String.valueOf(amt_paid));
				getOercOnlineFormBean().setApplicationNo(formId);
				// END For Form Engine insertion

				// 3279 ORECOnlineForm Online form Implementation end
				getUserSessionMap().put("ONLINEFORMDATA", getOercOnlineFormBean());
				String responseString = studentRegistrationService.insertOercStudentDetails(getOercOnlineFormBean(),
						billerId);
				logger.info("OERC Registration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "oercfailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "oercfailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getOercOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getOercOnlineFormBean().getTotAmount());
				studentRegistrationFormBean.setStudentId(getOercOnlineFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getOercOnlineFormBean().getStdName());
				studentRegistrationFormBean.setStudentEmailId(getOercOnlineFormBean().getEmailId());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getOercOnlineFormBean().getStudentRegistrationId());
				logger.info("OERC Registration--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "oercfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

//CR79005 OERCP STARTS
	public String oercpRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getOercpOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getOercpOnlineFormBean().getTotAmount(), getOercpOnlineFormBean().getPayment())) {
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				stdetails.put("std_name", getOercpOnlineFormBean().getStdName());
				stdetails.put("mobile_number", Long.parseLong(getOercpOnlineFormBean().getMobileNumber()));
				stdetails.put("email_id", getOercpOnlineFormBean().getEmailId());
				stdetails.put("address_details", getOercpOnlineFormBean().getAddress());
				stdetails.put("select_coursename", "1");
				// stdetails.put("select_coursename",getOercpOnlineFormBean().getSelectCourseName());
				stdetails.put("duration_details", getOercpOnlineFormBean().getDuration());
				stdetails.put("total_amount", Double.parseDouble(getOercpOnlineFormBean().getTotAmount()));
				stdetails.put("payment_details", Double.parseDouble(getOercpOnlineFormBean().getTotAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getOercpOnlineFormBean().getTotAmount()));

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for for engine
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				// code added by priya
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				// code end

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "oercpfailure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */

				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");
				// code ended by priya

				String stuName = dataobj.getString("std_name");

				String email_id = dataobj.getString("email_id");
				String address_details = dataobj.getString("address_details");
				String select_coursename = dataobj.getString("select_coursename");
				String duration_details = dataobj.getString("duration_details");
				int amt_paid = dataobj.getInt("total_amount");
				Long mobile_number = dataobj.getLong("mobile_number");

				getOercpOnlineFormBean().setStdName(stuName);
				getOercpOnlineFormBean().setMobileNumber(String.valueOf(mobile_number));
				getOercpOnlineFormBean().setEmailId(email_id);
				getOercpOnlineFormBean().setAddress(address_details);
				getOercpOnlineFormBean().setSelectCourseName(select_coursename);
				getOercpOnlineFormBean().setDuration(duration_details);
				getOercpOnlineFormBean().setTotAmount(String.valueOf(amt_paid));
				getOercpOnlineFormBean().setApplicationNo(formId);
				// END For Form Engine insertion

				// 3281 ORECPOnlineForm Online form Implementation end
				getUserSessionMap().put("ONLINEFORMDATA", getOercpOnlineFormBean());
				String responseString = studentRegistrationService.insertOercpStudentDetails(getOercpOnlineFormBean(),
						billerId);
				logger.info("OERCP Registration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "oercpfailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "oercpfailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getOercpOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getOercpOnlineFormBean().getTotAmount());
				studentRegistrationFormBean.setStudentId(getOercpOnlineFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getOercpOnlineFormBean().getStdName());
				studentRegistrationFormBean.setStudentEmailId(getOercpOnlineFormBean().getEmailId());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getOercpOnlineFormBean().getStudentRegistrationId());
				logger.info("OERCP Registration--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "oercpfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String micronRegistration() {

		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getMicronOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getMicronOnlineFormBean().getTotalFeesAmount(),
					getMicronOnlineFormBean().getPayment())) {
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				stdetails.put("reg_no", getMicronOnlineFormBean().getRegNo());
				stdetails.put("candidate_name", getMicronOnlineFormBean().getCandidateName());
				stdetails.put("guardian_name", getMicronOnlineFormBean().getGuardianName());
				stdetails.put("mobile_number", Long.parseLong(getMicronOnlineFormBean().getMobileNumber()));
				stdetails.put("candidate_age", Long.parseLong(getMicronOnlineFormBean().getCandidateAge()));
				stdetails.put("registration_fee", Long.parseLong(getMicronOnlineFormBean().getRegistrationFee()));
				/*
				 * stdetails.put("fee_category",getMicronOnlineFormBean().getFeeCategory());
				 * stdetails.put("payment_cycle",getMicronOnlineFormBean().getPaymentCycle());
				 */
				stdetails.put("fee_category", getMicronOnlineFormBean().getFeeCategory());
				stdetails.put("payment_cycle", getMicronOnlineFormBean().getPaymentCycle());

				stdetails.put("total_feesamount", Double.parseDouble(getMicronOnlineFormBean().getTotalFeesAmount()));
				stdetails.put("payment_details", Double.parseDouble(getMicronOnlineFormBean().getTotalFeesAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getMicronOnlineFormBean().getTotalFeesAmount()));

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "micronfailure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String reg_no = dataobj.getString("reg_no");

				String candidate_name = dataobj.getString("candidate_name");
				String guardian_name = dataobj.getString("guardian_name");
				int candidate_age = dataobj.getInt("candidate_age");
				String fee_category = dataobj.getString("fee_category");
				int registration_fee = dataobj.getInt("registration_fee");
				String payment_cycle = dataobj.getString("payment_cycle");
				int total_feesamount = dataobj.getInt("total_feesamount");
				Long mobile_number = dataobj.getLong("mobile_number");

				getMicronOnlineFormBean().setRegNo(reg_no);
				getMicronOnlineFormBean().setMobileNumber(String.valueOf(mobile_number));
				getMicronOnlineFormBean().setCandidateName(candidate_name);
				getMicronOnlineFormBean().setGuardianName(guardian_name);
				getMicronOnlineFormBean().setCandidateAge(String.valueOf(candidate_age));
				getMicronOnlineFormBean().setFeeCategory(fee_category);
				getMicronOnlineFormBean().setRegistrationFee(String.valueOf(registration_fee));
				getMicronOnlineFormBean().setPaymentCycle(payment_cycle);
				getMicronOnlineFormBean().setTotalFeesAmount(String.valueOf(total_feesamount));
				getMicronOnlineFormBean().setApplicationNo(formId);
				// END For Form Engine insertion

				// 3281 MICRONOnlineForm Online form Implementation end
				getUserSessionMap().put("ONLINEFORMDATA", getMicronOnlineFormBean());
				String responseString = studentRegistrationService.insertMicronStudentDetails(getMicronOnlineFormBean(),
						billerId);
				logger.info("micron Registration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "micronfailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "micronfailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getMicronOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getMicronOnlineFormBean().getTotalFeesAmount());
				studentRegistrationFormBean.setStudentId(getMicronOnlineFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getMicronOnlineFormBean().getCandidateName());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getMicronOnlineFormBean().getStudentRegistrationId());
				logger.info("micronRegistration Registration--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "micronfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String sheetlaRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getSheetlaOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getSheetlaOnlineFormBean().getTotAmount(), getSheetlaOnlineFormBean().getPayment())) {

				// 3305 Sheetla Online form Implememtation started
				// Start For Form Engine insertion

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				Date date1 = sdf.parse(getSheetlaOnlineFormBean().getStdDOB());

				stdetails.put("std_name", getSheetlaOnlineFormBean().getStdName());
				stdetails.put("admission_no", getSheetlaOnlineFormBean().getAdmissionNo());
				stdetails.put("father_name", getSheetlaOnlineFormBean().getFatherName());
				stdetails.put("select_class", getSheetlaOnlineFormBean().getSelectClass());
				stdetails.put("select_sections", getSheetlaOnlineFormBean().getSelectSections());
				stdetails.put("std_dob", formatter.format(date1));
				stdetails.put("mobile_no", Long.parseLong(getSheetlaOnlineFormBean().getMobile()));
				stdetails.put("prospectus_fee", Double.parseDouble(getSheetlaOnlineFormBean().getProspectusFee()));
				stdetails.put("admission_fee", Double.parseDouble(getSheetlaOnlineFormBean().getAdmissionFee()));
				stdetails.put("annual_fee", Double.parseDouble(getSheetlaOnlineFormBean().getAnnualFee()));
				stdetails.put("development_fee", Double.parseDouble(getSheetlaOnlineFormBean().getDevelopmentFee()));
				stdetails.put("security_fee", Double.parseDouble(getSheetlaOnlineFormBean().getSecurityFee()));
				stdetails.put("tuition_fee", Double.parseDouble(getSheetlaOnlineFormBean().getTuitionFee()));
				stdetails.put("lab_fee", Double.parseDouble(getSheetlaOnlineFormBean().getLabFee()));
				stdetails.put("sports_fee", Double.parseDouble(getSheetlaOnlineFormBean().getSportsFee()));
				stdetails.put("music_fee", Double.parseDouble(getSheetlaOnlineFormBean().getMusicFee()));
				stdetails.put("computer_fee", Double.parseDouble(getSheetlaOnlineFormBean().getComputerFee()));
				stdetails.put("miscellaneous_fee",
						Double.parseDouble(getSheetlaOnlineFormBean().getMiscellaneousFee()));
				stdetails.put("exam_fee", Double.parseDouble(getSheetlaOnlineFormBean().getExamFee()));
				stdetails.put("transport_fee", Double.parseDouble(getSheetlaOnlineFormBean().getTransportFee()));
				stdetails.put("late_fee", Double.parseDouble(getSheetlaOnlineFormBean().getLateFee()));
				stdetails.put("remarks_details", getSheetlaOnlineFormBean().getRemarks());
				stdetails.put("total_amount", Double.parseDouble(getSheetlaOnlineFormBean().getTotAmount()));
				stdetails.put("payment_details", Double.parseDouble(getSheetlaOnlineFormBean().getTotAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getSheetlaOnlineFormBean().getTotAmount()));

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */

				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "sheetlaFailure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String stuName = dataobj.getString("std_name");

				String admission_no = dataobj.getString("admission_no");
				String father_name = dataobj.getString("father_name");
				String select_class = dataobj.getString("select_class");
				String select_sections = dataobj.getString("select_sections");
				Long mobile_number = dataobj.getLong("mobile_no");

				int prospectus_fee = dataobj.getInt("prospectus_fee");
				int admission_fee = dataobj.getInt("admission_fee");
				int annual_fee = dataobj.getInt("annual_fee");
				int development_fee = dataobj.getInt("development_fee");

				int security_fee = dataobj.getInt("security_fee");
				int tuition_fee = dataobj.getInt("tuition_fee");
				int lab_fee = dataobj.getInt("lab_fee");
				int sports_fee = dataobj.getInt("sports_fee");

				int music_fee = dataobj.getInt("music_fee");
				int computer_fee = dataobj.getInt("computer_fee");
				int miscellaneous_fee = dataobj.getInt("miscellaneous_fee");
				int exam_fee = dataobj.getInt("exam_fee");

				int transport_fee = dataobj.getInt("transport_fee");
				int late_fee = dataobj.getInt("late_fee");
				String remarks_details = dataobj.getString("remarks_details");

				int amt_paid = dataobj.getInt("total_amount");

				getSheetlaOnlineFormBean().setStdName(stuName);
				getSheetlaOnlineFormBean().setFatherName(father_name);
				getSheetlaOnlineFormBean().setAdmissionNo(admission_no);
				getSheetlaOnlineFormBean().setSelectClass(select_class);
				getSheetlaOnlineFormBean().setSelectSections(select_sections);
				getSheetlaOnlineFormBean().setMobile(String.valueOf(mobile_number));
				getSheetlaOnlineFormBean().setTotAmount(String.valueOf(amt_paid));
				getSheetlaOnlineFormBean().setProspectusFee(String.valueOf(prospectus_fee));
				getSheetlaOnlineFormBean().setAdmissionFee(String.valueOf(admission_fee));
				getSheetlaOnlineFormBean().setAnnualFee(String.valueOf(annual_fee));
				getSheetlaOnlineFormBean().setDevelopmentFee(String.valueOf(development_fee));
				getSheetlaOnlineFormBean().setSecurityFee(String.valueOf(security_fee));
				getSheetlaOnlineFormBean().setTuitionFee(String.valueOf(tuition_fee));

				getSheetlaOnlineFormBean().setLabFee(String.valueOf(lab_fee));
				getSheetlaOnlineFormBean().setSportsFee(String.valueOf(sports_fee));
				getSheetlaOnlineFormBean().setMusicFee(String.valueOf(music_fee));
				getSheetlaOnlineFormBean().setComputerFee(String.valueOf(computer_fee));

				getSheetlaOnlineFormBean().setTuitionFee(String.valueOf(miscellaneous_fee));

				getSheetlaOnlineFormBean().setExamFee(String.valueOf(exam_fee));
				getSheetlaOnlineFormBean().setTransportFee(String.valueOf(transport_fee));
				getSheetlaOnlineFormBean().setLateFee(String.valueOf(late_fee));
				getSheetlaOnlineFormBean().setRemarks(remarks_details);
				getSheetlaOnlineFormBean().setApplicationNo(formId);
				// END For Form Engine insertion

				// 3279 ORECOnlineForm Online form Implementation end
				getUserSessionMap().put("ONLINEFORMDATA", getSheetlaOnlineFormBean());
				String responseString = studentRegistrationService
						.insertSheetlaStudentDetails(getSheetlaOnlineFormBean(), billerId);
				logger.info("Sheetla Registration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "sheetlaFailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "sheetlaFailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getSheetlaOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getSheetlaOnlineFormBean().getTotAmount());
				studentRegistrationFormBean.setStudentId(getSheetlaOnlineFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getSheetlaOnlineFormBean().getStdName());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getSheetlaOnlineFormBean().getStudentRegistrationId());
				logger.info("Sheetla Registration--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "sheetlaFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String gaharwarRegistration() {

		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getGaharwarOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getGaharwarOnlineFormBean().getTotal(), getGaharwarOnlineFormBean().getPayment())) {
				// 3308 Gaharwar Online form Implememtation started
				// Start For Form Engine insertion

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();
				stdetails.put("applicant_name", getGaharwarOnlineFormBean().getName());
				stdetails.put("father_name", getGaharwarOnlineFormBean().getFathername());
				stdetails.put("mobile_number", Long.parseLong(getGaharwarOnlineFormBean().getMobileNumber()));
				stdetails.put("emai_id", getGaharwarOnlineFormBean().getEmaiId());
				stdetails.put("pay_to", getGaharwarOnlineFormBean().getPayto());
				stdetails.put("registration_fee", Double.parseDouble(getGaharwarOnlineFormBean().getRegistrationFee()));
				stdetails.put("formprospectus_fee",
						Double.parseDouble(getGaharwarOnlineFormBean().getFormprospectusFee()));
				stdetails.put("admission_fee", Double.parseDouble(getGaharwarOnlineFormBean().getAdmissionFee()));
				stdetails.put("course_fee", Double.parseDouble(getGaharwarOnlineFormBean().getCourseFee()));
				stdetails.put("installment_fee", Double.parseDouble(getGaharwarOnlineFormBean().getInstallmentFee()));
				stdetails.put("others_charges", Double.parseDouble(getGaharwarOnlineFormBean().getOthers()));
				stdetails.put("exam_fee", Double.parseDouble(getGaharwarOnlineFormBean().getExamFee()));
				stdetails.put("placement_charges",
						Double.parseDouble(getGaharwarOnlineFormBean().getPlacementCharges()));
				stdetails.put("total_amount", Double.parseDouble(getGaharwarOnlineFormBean().getTotal()));
				stdetails.put("payment_details", Double.parseDouble(getGaharwarOnlineFormBean().getTotal()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getGaharwarOnlineFormBean().getTotal()));

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */

				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "gaharwarfailure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String application_name = dataobj.getString("applicant_name");
				String father_name = dataobj.getString("father_name");
				int mobile_number = dataobj.getInt("mobile_number");
				String emai_id = dataobj.getString("emai_id");
				String pay_to = dataobj.getString("pay_to");

				int registration_fee = dataobj.getInt("registration_fee");
				int formprospectus_fee = dataobj.getInt("formprospectus_fee");
				int admission_fee = dataobj.getInt("admission_fee");
				int course_fee = dataobj.getInt("course_fee");
				int installment_fee = dataobj.getInt("installment_fee");
				int others_charges = dataobj.getInt("others_charges");
				int exam_fee = dataobj.getInt("exam_fee");
				int placement_charges = dataobj.getInt("placement_charges");
				int amt_paid = dataobj.getInt("total_amount");

				getGaharwarOnlineFormBean().setName(application_name);
				getGaharwarOnlineFormBean().setFathername(father_name);
				getGaharwarOnlineFormBean().setEmaiId(emai_id);
				getGaharwarOnlineFormBean().setPayto(pay_to);

				getGaharwarOnlineFormBean().setRegistrationFee(String.valueOf(registration_fee));
				getGaharwarOnlineFormBean().setFormprospectusFee(String.valueOf(formprospectus_fee));
				getGaharwarOnlineFormBean().setAdmissionFee(String.valueOf(admission_fee));
				getGaharwarOnlineFormBean().setCourseFee(String.valueOf(course_fee));

				getGaharwarOnlineFormBean().setInstallmentFee(String.valueOf(installment_fee));
				getGaharwarOnlineFormBean().setOthers(String.valueOf(others_charges));

				getGaharwarOnlineFormBean().setPlacementCharges(String.valueOf(placement_charges));

				getGaharwarOnlineFormBean().setTotal(String.valueOf(amt_paid));
				getGaharwarOnlineFormBean().setApplicationNo(formId);
				// END For Form Engine insertion

				// 5712 DronacharayaGOI Online form Implementation end
				getUserSessionMap().put("ONLINEFORMDATA", getGaharwarOnlineFormBean());
				String responseString = studentRegistrationService
						.insertGarawarStudentDetails(getGaharwarOnlineFormBean(), billerId);
				logger.info("gaharwarRegistration() Registration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "gaharwarfailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "gaharwarfailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getGaharwarOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getGaharwarOnlineFormBean().getTotal());
				studentRegistrationFormBean.setStudentId(getGaharwarOnlineFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getGaharwarOnlineFormBean().getName());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getGaharwarOnlineFormBean().getStudentRegistrationId());
				logger.info("micronRegistration Registration--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "gaharwarfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String luciRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getLuciOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			LoginActionService loginActionService = new LoginActionService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getLuciOnlineFormBean().getTotAmount(), getLuciOnlineFormBean().getPayment())) {
				// 3377 Luci Online form Implememtation started
				// Start For Form Engine insertion

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				stdetails.put("unique_id", getLuciOnlineFormBean().getUniqueId());
				stdetails.put("student_name", getLuciOnlineFormBean().getStdName());
				stdetails.put("mobile_no", Long.parseLong(getLuciOnlineFormBean().getMobile()));
				stdetails.put("email_id", getLuciOnlineFormBean().getEmail());
				stdetails.put("per_address", getLuciOnlineFormBean().getPerAddress());
				stdetails.put("city_name", getLuciOnlineFormBean().getEmail());
				stdetails.put("select_state", getLuciOnlineFormBean().getSelectState());
				stdetails.put("select_course", getLuciOnlineFormBean().getSelectCourse());
				stdetails.put("tot_amount", Double.parseDouble(getLuciOnlineFormBean().getTotAmount()));

				stdetails.put("payment_details", Double.parseDouble(getLuciOnlineFormBean().getTotAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getLuciOnlineFormBean().getTotAmount()));

				/*
				 * objNode.put("data",stdetails);
				 * 
				 * String jsonString1=obMapper.writeValueAsString(objNode);
				 * 
				 * logger.info("jsonString1"+jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "faliure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String unique_id = dataobj.getString("unique_id");

				String student_name = dataobj.getString("student_name");
				Long mobile_number = dataobj.getLong("mobile_no");
				String email_id = dataobj.getString("email_id");
				String per_address = dataobj.getString("per_address");
				String city_name = dataobj.getString("city_name");
				String select_course = dataobj.getString("select_course");
				String select_state = dataobj.getString("select_state");

				int amt_paid = dataobj.getInt("tot_amount");

				getLuciOnlineFormBean().setUniqueId(unique_id);
				getLuciOnlineFormBean().setStdName(student_name);
				getLuciOnlineFormBean().setMobile(String.valueOf(mobile_number));
				getLuciOnlineFormBean().setEmail(email_id);
				getLuciOnlineFormBean().setPerAddress(per_address);
				getLuciOnlineFormBean().setCity(city_name);
				getLuciOnlineFormBean().setSelectCourse(select_course);
				getLuciOnlineFormBean().setSelectState(select_state);
				getLuciOnlineFormBean().setTotAmount(String.valueOf(amt_paid));

				getLuciOnlineFormBean().setTotAmount(String.valueOf(amt_paid));
				getLuciOnlineFormBean().setApplicationNo(formId);
				// END For Form Engine insertion

				// 5712 DronacharayaGOI Online form Implementation end
				getUserSessionMap().put("ONLINEFORMDATA", getLuciOnlineFormBean());
				getLuciOnlineFormBean()
						.setTotAmount(loginActionService.getLuciCourseAmt(getLuciOnlineFormBean().getSelectCourse()));
				String responseString = studentRegistrationService.insertLuciStudentDetails(getLuciOnlineFormBean(),
						billerId);
				logger.info("Luci Registration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "luciFailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "luciFailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getLuciOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getLuciOnlineFormBean().getTotAmount());
				studentRegistrationFormBean.setStudentId(getLuciOnlineFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getLuciOnlineFormBean().getStdName());
				studentRegistrationFormBean.setStudentEmailId(getLuciOnlineFormBean().getEmail());
				studentRegistrationFormBean.setStudentMobileNumber(getLuciOnlineFormBean().getMobile());

				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getLuciOnlineFormBean().getStudentRegistrationId());
				logger.info("Luci Registration--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);
				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				addActionMessage("Amount Mismatched.");
				return "luciFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String ChaduryCollegeRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getChaudharyCollegeOnlineBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getChaudharyCollegeOnlineBean().getTotalfees(),
					getChaudharyCollegeOnlineBean().getPayment())) {
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());

				ObjectNode stdetails = obMapper.createObjectNode();
				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				stdetails.put("collegename", getChaudharyCollegeOnlineBean().getCollegeName());
				stdetails.put("collegecode", getChaudharyCollegeOnlineBean().getCollegeCode());
				stdetails.put("mobileno", Long.parseLong(getChaudharyCollegeOnlineBean().getMobileNo()));
				stdetails.put("totalfees", Double.parseDouble(getChaudharyCollegeOnlineBean().getTotalfees()));

				stdetails.put("payment_details", Double.parseDouble(getChaudharyCollegeOnlineBean().getTotalfees()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getChaudharyCollegeOnlineBean().getTotalfees()));

				/*
				 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
				 * 
				 * String jsonString1=obMapper.writeValueAsString(objNode);
				 * 
				 * logger.info("jsonString1"+jsonString1.toString());
				 */

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */

				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "Chaduryfailure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);

				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);
				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				// JSONArray jsonArray = jsonObject.getJSONArray("message");
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				// ----------------need to update for 4139
				String collegename = dataobj.getString("collegename");
				String collegecode = dataobj.getString("collegecode");
				Long mobile_no = dataobj.getLong("mobileno");

				int total_fees = dataobj.getInt("totalfees");

				getChaudharyCollegeOnlineBean().setCollegeCode(collegecode);
				getChaudharyCollegeOnlineBean().setCollegeName(collegename);
				getChaudharyCollegeOnlineBean().setMobileNo(String.valueOf(mobile_no));

				getChaudharyCollegeOnlineBean().setTotalfees(String.valueOf(total_fees));

				getChaudharyCollegeOnlineBean().setApplicationNo(formId);
				// END For Form Engine insertion

				getUserSessionMap().put("ONLINEFORMDATA", getChaudharyCollegeOnlineBean());
				String responseString = studentRegistrationService
						.insertChaudharyCollegeStudentDetails(getChaudharyCollegeOnlineBean(), billerId);
				logger.info("ChaduryCollegeRegistration Registration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "Chaduryfailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "Chaduryfailure";
				}

				List feeDetailsList = getChaudharyCollegeOnlineBean().getFeeDetailsList();
				int feeListLength = feeDetailsList.size();
				for (int i = 0; i < feeListLength; i++) {
					ChaudharyCollegeOnlineBeanGrid chaudharyCollegeOnlineBeanGrid = (ChaudharyCollegeOnlineBeanGrid) feeDetailsList
							.get(i);
					studentRegistrationService.insertChauFeeDetails(chaudharyCollegeOnlineBeanGrid,
							getChaudharyCollegeOnlineBean().getApplicationNo());

				}
				for (int i = 0; i <= chaudharyCollegeOnlineBean.getFeeDetailsList().size() - 1; i++) {
					ChaudharyCollegeOnlineBeanGrid chaudharyCollegeOnlineBeanGrid = chaudharyCollegeOnlineBean
							.getFeeDetailsList().get(i);
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getChaudharyCollegeOnlineBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getChaudharyCollegeOnlineBean().getTotalfees());
				studentRegistrationFormBean.setStudentId(getChaudharyCollegeOnlineBean().getApplicationNo());

				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getChaudharyCollegeOnlineBean().getStudentRegistrationId());
				logger.info("ChaduryCollegeRegistration--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);
				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				addActionMessage("Amount Mismatched.");
				return "Chaduryfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String GSFCRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getGsfcOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getGsfcOnlineFormBean().getTotAmount(), getGsfcOnlineFormBean().getPayment())) {
				// 3402 GSF Online form Implememtation started
				// Start For Form Engine insertion

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				stdetails.put("student_id", getGsfcOnlineFormBean().getStudentId());
				stdetails.put("branch_name", getGsfcOnlineFormBean().getBranchName());
				stdetails.put("academic_year", getGsfcOnlineFormBean().getAcademicYear());
				stdetails.put("fee_type", getGsfcOnlineFormBean().getFeeType());
				stdetails.put("course_name", getGsfcOnlineFormBean().getCourseName());
				stdetails.put("student_name", getGsfcOnlineFormBean().getStudentName());
				stdetails.put("father_name", getGsfcOnlineFormBean().getFatherName());
				stdetails.put("city_name", getGsfcOnlineFormBean().getCity());
				stdetails.put("state_name", getGsfcOnlineFormBean().getState());
				stdetails.put("email_id", getGsfcOnlineFormBean().getEmailId());
				stdetails.put("mobile_no", Long.parseLong(getGsfcOnlineFormBean().getMobileNo()));
				stdetails.put("total_amount", Double.parseDouble(getGsfcOnlineFormBean().getTotAmount()));
				stdetails.put("payment_details", Double.parseDouble(getGsfcOnlineFormBean().getTotAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getGsfcOnlineFormBean().getTotAmount()));

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "GSFCFailure";

				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya form engine
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 */

				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String student_id = dataobj.getString("student_id");

				String branch_name = dataobj.getString("branch_name");
				String academic_year = dataobj.getString("academic_year");
				String fee_type = dataobj.getString("fee_type");
				String course_name = dataobj.getString("course_name");
				String student_name = dataobj.getString("student_name");

				String father_name = dataobj.getString("father_name");
				String city_name = dataobj.getString("city_name");
				String state_name = dataobj.getString("state_name");
				int mobile_no = dataobj.getInt("mobile_no");
				String email_id = dataobj.getString("email_id");
				int total_amount = dataobj.getInt("total_amount");

				getGsfcOnlineFormBean().setStudentId(student_id);
				getGsfcOnlineFormBean().setBranchName(branch_name);
				getGsfcOnlineFormBean().setAcademicYear(academic_year);
				getGsfcOnlineFormBean().setFeeType(fee_type);
				getGsfcOnlineFormBean().setCourseName(course_name);
				getGsfcOnlineFormBean().setStudentName(student_name);
				getGsfcOnlineFormBean().setFatherName(father_name);
				getGsfcOnlineFormBean().setCity(city_name);
				getGsfcOnlineFormBean().setState(state_name);

				getGsfcOnlineFormBean().setEmailId(email_id);
				getGsfcOnlineFormBean().setMobileNo(String.valueOf(mobile_no));
				getGsfcOnlineFormBean().setTotAmount(String.valueOf(total_amount));
				getGsfcOnlineFormBean().setApplicationNo(formId);
				// END For Form Engine insertion
				getUserSessionMap().put("ONLINEFORMDATA", getGsfcOnlineFormBean());
				// 1250 CUOHaryana Online form Implementation end
				String responseString = studentRegistrationService.insertGSFCStudentDetails(getGsfcOnlineFormBean(),
						billerId);
				logger.info("Gsfc Registration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "GSFCFailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "GSFCFailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getGsfcOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getGsfcOnlineFormBean().getTotAmount());
				studentRegistrationFormBean.setStudentId(getGsfcOnlineFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getGsfcOnlineFormBean().getStudentName());
				studentRegistrationFormBean.setStudentEmailId(getGsfcOnlineFormBean().getEmailId());
				studentRegistrationFormBean.setStudentMobileNumber(getGsfcOnlineFormBean().getMobileNo());

				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getGsfcOnlineFormBean().getStudentRegistrationId());
				logger.info("GSFC Registration--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);
				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				addActionMessage("Amount Mismatched.");
				return "GSFCFailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return "GSFCSuccess";
	}

	public String chaduryAdmissionRegistration()

	{
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			ChaudharyADMISSIONOnlineBean getChaudharyADMISSIONOnlineBean = new ChaudharyADMISSIONOnlineBean();
			logger.info("registeredUserId.." + registeredUserId);
			getChaudharyADMISSIONOnlineBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getChaudharyADMISSIONOnlineBean().getTotalfees(),
					getChaudharyADMISSIONOnlineBean().getPayment())) {
				// 4139 ChaudharyADMISSION Online form Implememtation started
				// Start For Form Engine insertion

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());

				ObjectNode stdetails = obMapper.createObjectNode();
				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

				stdetails.put("registration_no", getChaudharyADMISSIONOnlineBean().getRegistrationNo());
				stdetails.put("student_name", getChaudharyADMISSIONOnlineBean().getStudentName());
				stdetails.put("father_name", getChaudharyADMISSIONOnlineBean().getFatherName());
				stdetails.put("classs_name", getChaudharyADMISSIONOnlineBean().getClasss());
				stdetails.put("mobile_no", Long.parseLong(getChaudharyADMISSIONOnlineBean().getMobileNo()));
				stdetails.put("payment_remerks", getChaudharyADMISSIONOnlineBean().getPaymentRemerks());
				stdetails.put("student_category", getChaudharyADMISSIONOnlineBean().getStudentCategory());
				stdetails.put("session_details", getChaudharyADMISSIONOnlineBean().getSession());
				stdetails.put("select_course", getChaudharyADMISSIONOnlineBean().getSelectCourse());
				stdetails.put("admission_registrationfee",
						Double.parseDouble(getChaudharyADMISSIONOnlineBean().getAdmissionRegistrationFee()));
				stdetails.put("tuition_fees", Double.parseDouble(getChaudharyADMISSIONOnlineBean().getTuitionFees()));
				stdetails.put("development_fee",
						Double.parseDouble(getChaudharyADMISSIONOnlineBean().getDevelopmentFee()));
				stdetails.put("curriculam_charges",
						Double.parseDouble(getChaudharyADMISSIONOnlineBean().getCurriculamCharges()));
				stdetails.put("breakage_fee", Double.parseDouble(getChaudharyADMISSIONOnlineBean().getBreakageFee()));
				stdetails.put("filedvisitpractical_fee",
						Double.parseDouble(getChaudharyADMISSIONOnlineBean().getFiledVisitPracticalFee()));
				stdetails.put("management_fee",
						Double.parseDouble(getChaudharyADMISSIONOnlineBean().getManagementFee()));
				stdetails.put("equipementmantenance_fee",
						Double.parseDouble(getChaudharyADMISSIONOnlineBean().getEquipementMantenanceFee()));
				stdetails.put("drugslabratory_fee",
						Double.parseDouble(getChaudharyADMISSIONOnlineBean().getDrugsLabratoryFee()));
				stdetails.put("registrationcumenrolment_fee",
						Double.parseDouble(getChaudharyADMISSIONOnlineBean().getRegistrationCumEnrolmentFee()));
				stdetails.put("medical_fee", Double.parseDouble(getChaudharyADMISSIONOnlineBean().getMedicalFee()));
				stdetails.put("universitymagzin_fee",
						Double.parseDouble(getChaudharyADMISSIONOnlineBean().getUniversityMagzinFee()));
				stdetails.put("studentaid_fund",
						Double.parseDouble(getChaudharyADMISSIONOnlineBean().getStudentAidFund()));
				stdetails.put("sportsregistration_fee",
						Double.parseDouble(getChaudharyADMISSIONOnlineBean().getSportsRegistrationFee()));
				stdetails.put("youthwelfare_fee",
						Double.parseDouble(getChaudharyADMISSIONOnlineBean().getYouthWelfareFee()));
				stdetails.put("houseexmination_fee",
						Double.parseDouble(getChaudharyADMISSIONOnlineBean().getHouseExminationFee()));
				stdetails.put("identycard_fee",
						Double.parseDouble(getChaudharyADMISSIONOnlineBean().getIdentyCardFee()));
				stdetails.put("nss_fee", Double.parseDouble(getChaudharyADMISSIONOnlineBean().getNssFee()));
				stdetails.put("rk_fund", Double.parseDouble(getChaudharyADMISSIONOnlineBean().getRkfund()));
				stdetails.put("dilapidation_fund",
						Double.parseDouble(getChaudharyADMISSIONOnlineBean().getDilapidationFund()));
				stdetails.put("youthredcross_fee",
						Double.parseDouble(getChaudharyADMISSIONOnlineBean().getYouthRedCrossFee()));
				stdetails.put("amalgamated_fund",
						Double.parseDouble(getChaudharyADMISSIONOnlineBean().getAmalgamatedFund()));
				stdetails.put("late_fee", Double.parseDouble(getChaudharyADMISSIONOnlineBean().getLateFee()));
				stdetails.put("other_fees", Double.parseDouble(getChaudharyADMISSIONOnlineBean().getOtherFees()));
				stdetails.put("thirdsem_fee", Double.parseDouble(getChaudharyADMISSIONOnlineBean().getThirdSemFee()));
				stdetails.put("total_fees", Double.parseDouble(getChaudharyADMISSIONOnlineBean().getTotalfees()));

				stdetails.put("payment_details", Double.parseDouble(getChaudharyADMISSIONOnlineBean().getTotalfees()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getChaudharyADMISSIONOnlineBean().getTotalfees()));

				/*
				 * objNode.put("data",stdetails);
				 * 
				 * String jsonString1=obMapper.writeValueAsString(objNode);
				 * 
				 * logger.info("jsonString1"+jsonString1.toString());
				 */

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target("http://172.26.7.227:8080/form-data-api-service/api/1").path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "ChaduryAdmisionfailure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);
				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target("http://172.26.7.227:8080/form-data-api-service/api/1").path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");
				// ----------------need to update for 4139
				String registration_no = dataobj.getString("registration_no");
				String student_name = dataobj.getString("student_name");
				String father_name = dataobj.getString("father_name");
				String classs_name = dataobj.getString("classs_name");
				Long mobile_no = dataobj.getLong("mobile_no");
				String payment_remerks = dataobj.getString("payment_remerks");
				String student_category = dataobj.getString("student_category");
				String session_details = dataobj.getString("session_details");
				String select_course = dataobj.getString("select_course");
				int admission_registrationfee = dataobj.getInt("admission_registrationfee");
				int tuition_fees = dataobj.getInt("tuition_fees");
				int development_fee = dataobj.getInt("development_fee");
				int curriculam_charges = dataobj.getInt("curriculam_charges");
				int breakage_fee = dataobj.getInt("breakage_fee");
				int filedvisitpractical_fee = dataobj.getInt("filedvisitpractical_fee");
				int management_fee = dataobj.getInt("management_fee");
				int equipementmantenance_fee = dataobj.getInt("equipementmantenance_fee");
				int drugslabratory_fee = dataobj.getInt("drugslabratory_fee");
				int registrationcumenrolment_fee = dataobj.getInt("registrationcumenrolment_fee");
				int medical_fee = dataobj.getInt("medical_fee");
				int universitymagzin_fee = dataobj.getInt("universitymagzin_fee");
				int studentaid_fund = dataobj.getInt("studentaid_fund");
				int sportsregistration_fee = dataobj.getInt("sportsregistration_fee");
				int youthwelfare_fee = dataobj.getInt("youthwelfare_fee");
				int houseexmination_fee = dataobj.getInt("houseexmination_fee");
				int identycard_fee = dataobj.getInt("identycard_fee");
				int nss_fee = dataobj.getInt("nss_fee");
				int rk_fund = dataobj.getInt("rk_fund");
				int dilapidation_fund = dataobj.getInt("dilapidation_fund");
				int youthredcross_fee = dataobj.getInt("youthredcross_fee");
				int amalgamated_fund = dataobj.getInt("amalgamated_fund");
				int late_fee = dataobj.getInt("late_fee");
				int other_fees = dataobj.getInt("other_fees");
				int total_fees = dataobj.getInt("total_fees");
				int thirdsem_fee = dataobj.getInt("thirdsem_fee");

				getChaudharyADMISSIONOnlineBean().setRegistrationNo(registration_no);
				getChaudharyADMISSIONOnlineBean().setStudentName(student_name);
				getChaudharyADMISSIONOnlineBean().setFatherName(father_name);
				getChaudharyADMISSIONOnlineBean().setClasss(classs_name);
				getChaudharyADMISSIONOnlineBean().setMobileNo(String.valueOf(mobile_no));
				getChaudharyADMISSIONOnlineBean().setPaymentRemerks(payment_remerks);
				getChaudharyADMISSIONOnlineBean().setStudentCategory(student_category);
				getChaudharyADMISSIONOnlineBean().setSession(session_details);
				getChaudharyADMISSIONOnlineBean().setSelectCourse(select_course);
				getChaudharyADMISSIONOnlineBean()
						.setAdmissionRegistrationFee(String.valueOf(admission_registrationfee));
				getChaudharyADMISSIONOnlineBean().setTuitionFees(String.valueOf(tuition_fees));
				getChaudharyADMISSIONOnlineBean().setDevelopmentFee(String.valueOf(development_fee));
				getChaudharyADMISSIONOnlineBean().setCurriculamCharges(String.valueOf(curriculam_charges));
				getChaudharyADMISSIONOnlineBean().setBreakageFee(String.valueOf(breakage_fee));
				getChaudharyADMISSIONOnlineBean().setFiledVisitPracticalFee(String.valueOf(filedvisitpractical_fee));
				getChaudharyADMISSIONOnlineBean().setManagementFee(String.valueOf(management_fee));
				getChaudharyADMISSIONOnlineBean().setEquipementMantenanceFee(String.valueOf(equipementmantenance_fee));
				getChaudharyADMISSIONOnlineBean().setDrugsLabratoryFee(String.valueOf(drugslabratory_fee));
				getChaudharyADMISSIONOnlineBean()
						.setRegistrationCumEnrolmentFee(String.valueOf(registrationcumenrolment_fee));
				getChaudharyADMISSIONOnlineBean().setMedicalFee(String.valueOf(medical_fee));
				getChaudharyADMISSIONOnlineBean().setUniversityMagzinFee(String.valueOf(universitymagzin_fee));
				getChaudharyADMISSIONOnlineBean().setStudentAidFund(String.valueOf(studentaid_fund));
				getChaudharyADMISSIONOnlineBean().setSportsRegistrationFee(String.valueOf(sportsregistration_fee));
				getChaudharyADMISSIONOnlineBean().setYouthWelfareFee(String.valueOf(youthwelfare_fee));
				getChaudharyADMISSIONOnlineBean().setHouseExminationFee(String.valueOf(houseexmination_fee));
				getChaudharyADMISSIONOnlineBean().setIdentyCardFee(String.valueOf(identycard_fee));
				getChaudharyADMISSIONOnlineBean().setNssFee(String.valueOf(nss_fee));
				getChaudharyADMISSIONOnlineBean().setRkfund(String.valueOf(rk_fund));
				getChaudharyADMISSIONOnlineBean().setDilapidationFund(String.valueOf(dilapidation_fund));
				getChaudharyADMISSIONOnlineBean().setYouthRedCrossFee(String.valueOf(youthredcross_fee));
				getChaudharyADMISSIONOnlineBean().setAmalgamatedFund(String.valueOf(amalgamated_fund));
				getChaudharyADMISSIONOnlineBean().setLateFee(String.valueOf(late_fee));
				getChaudharyADMISSIONOnlineBean().setOtherFees(String.valueOf(other_fees));
				getChaudharyADMISSIONOnlineBean().setThirdSemFee(String.valueOf(thirdsem_fee));
				getChaudharyADMISSIONOnlineBean().setTotalfees(String.valueOf(total_fees));

				getChaudharyADMISSIONOnlineBean().setApplicationNo(formId);
				// END For Form Engine insertion

				getUserSessionMap().put("ONLINEFORMDATA", getChaudharyADMISSIONOnlineBean());
				// 4139 CHAUDHARYADMISSIONONLINEFORMDATA Online form Implementation end
				String responseString = studentRegistrationService
						.insertChaudharyAdmisionStudentDetails(getChaudharyADMISSIONOnlineBean(), billerId);
				logger.info("Luci Registration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "ChaduryAdmisionfailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "ChaduryAdmisionfailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getChaudharyADMISSIONOnlineBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getChaudharyADMISSIONOnlineBean().getTotalfees());
				studentRegistrationFormBean.setStudentId(getChaudharyADMISSIONOnlineBean().getApplicationNo());

				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getChaudharyADMISSIONOnlineBean().getStudentRegistrationId());
				logger.info("Luci Registration--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);
				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				addActionMessage("Amount Mismatched.");
				return "ChaduryAdmisionfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String standardInternationalRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getStandfordOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getStandfordOnlineFormBean().getTotalAmount(),
					getStandfordOnlineFormBean().getPayment())) {
				// 3414 Standford Online form Implememtation started
				// Start For Form Engine insertion

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				Date date1 = sdf.parse(getStandfordOnlineFormBean().getDateOfBirth());

				stdetails.put("add_no", getStandfordOnlineFormBean().getAddNo());
				stdetails.put("student_name", getStandfordOnlineFormBean().getStudentName());
				stdetails.put("father_name", getStandfordOnlineFormBean().getFatherName());
				stdetails.put("class_name", getStandfordOnlineFormBean().getClassName());
				stdetails.put("sections_details", getStandfordOnlineFormBean().getSections());
				stdetails.put("tution_fee", Double.parseDouble(getStandfordOnlineFormBean().getTutionFee()));
				stdetails.put("pupil_fund", Double.parseDouble(getStandfordOnlineFormBean().getPupilFund()));
				stdetails.put("transaport_charges",
						Double.parseDouble(getStandfordOnlineFormBean().getTransaportCharges()));
				stdetails.put("annual_charges", Double.parseDouble(getStandfordOnlineFormBean().getAnnualCharges()));
				stdetails.put("exam_fee", Double.parseDouble(getStandfordOnlineFormBean().getExamFee()));
				stdetails.put("miscellaneous_charges",
						Double.parseDouble(getStandfordOnlineFormBean().getMiscellaneous()));
				stdetails.put("remarks_details", getStandfordOnlineFormBean().getRemarks());
				stdetails.put("date_ofbirth", formatter.format(date1));
				stdetails.put("mobile_number", Long.parseLong(getStandfordOnlineFormBean().getMobileNumber()));
				stdetails.put("total_amount", Double.parseDouble(getStandfordOnlineFormBean().getTotalAmount()));
				stdetails.put("payment_details", Double.parseDouble(getStandfordOnlineFormBean().getTotalAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getStandfordOnlineFormBean().getTotalAmount()));

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "standardfailure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");

				logger.info("formId" + formId);
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String add_no = dataobj.getString("add_no");
				String student_name = dataobj.getString("student_name");
				String class_name = dataobj.getString("class_name");
				String sections_details = dataobj.getString("sections_details");
				int annual_charges = dataobj.getInt("annual_charges");
				int tution_fee = dataobj.getInt("tution_fee");
				int pupil_fund = dataobj.getInt("pupil_fund");

				int transaport_charges = dataobj.getInt("transaport_charges");
				int exam_fee = dataobj.getInt("exam_fee");
				int miscellaneous_charges = dataobj.getInt("miscellaneous_charges");

				String date_ofbirth = dataobj.getString("date_ofbirth");
				int total_amount = dataobj.getInt("total_amount");
				Long mobile_number = dataobj.getLong("mobile_number");

				getStandfordOnlineFormBean().setAddNo(add_no);
				getStandfordOnlineFormBean().setStudentName(student_name);
				getStandfordOnlineFormBean().setClassName(class_name);
				getStandfordOnlineFormBean().setSections(sections_details);
				getStandfordOnlineFormBean().setAnnualCharges(String.valueOf(annual_charges));
				getStandfordOnlineFormBean().setTutionFee(String.valueOf(tution_fee));

				getStandfordOnlineFormBean().setPupilFund(String.valueOf(pupil_fund));
				getStandfordOnlineFormBean().setTransaportCharges(String.valueOf(transaport_charges));
				getStandfordOnlineFormBean().setExamFee(String.valueOf(exam_fee));
				getStandfordOnlineFormBean().setMiscellaneous(String.valueOf(miscellaneous_charges));
				getStandfordOnlineFormBean().setDateOfBirth(getStandfordOnlineFormBean().getDateOfBirth());

				getStandfordOnlineFormBean().setTotalAmount(String.valueOf(total_amount));
				getStandfordOnlineFormBean().setMobileNumber(String.valueOf(mobile_number));
				getStandfordOnlineFormBean().setApplicationNo(formId);
				// END For Form Engine insertion

				// 5712 DronacharayaGOI Online form Implementation end
				getUserSessionMap().put("ONLINEFORMDATA", getStandfordOnlineFormBean());
				String responseString = studentRegistrationService
						.insertStandStudentDetails(getStandfordOnlineFormBean(), billerId, InstCode);
				logger.info("standardInternationalRegistration Registration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "standardfailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "standardfailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getStandfordOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getStandfordOnlineFormBean().getTotalAmount());
				studentRegistrationFormBean.setStudentId(getStandfordOnlineFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getStandfordOnlineFormBean().getStudentName());
				studentRegistrationFormBean.setTotalPayableFees(getStandfordOnlineFormBean().getTotalAmount());
				studentRegistrationFormBean.setStudentId(getStandfordOnlineFormBean().getApplicationNo());

				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getStandfordOnlineFormBean().getStudentRegistrationId());
				logger.info("Standard Registration--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "standardfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String nluRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getNluOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getNluOnlineFormBean().getTotAmount(), getNluOnlineFormBean().getPayment())) {

				// 5712 DronacharayaGOI Online form Implememtation started
				// Start For Form Engine insertion

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				SimpleDateFormat formatter1 = new SimpleDateFormat("yyyy-MM-dd");
				Date date = new Date();
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
				Date date1 = sdf.parse(getNluOnlineFormBean().getStdDOB());
				stdetails.put("std_name", getNluOnlineFormBean().getStdName());
				stdetails.put("father_name", getNluOnlineFormBean().getFatherName());
				stdetails.put("std_dob", formatter.format(date1));
				stdetails.put("roll_no", getNluOnlineFormBean().getRollno());

				stdetails.put("email_id", getNluOnlineFormBean().getEmail());
				stdetails.put("mobile_no", Long.parseLong(getNluOnlineFormBean().getMobile()));
				stdetails.put("select_course", getNluOnlineFormBean().getSelectCourse());
				// stdetails.put("select_course", "UG PG");
				stdetails.put("select_nri", getNluOnlineFormBean().getSelectNRI());

				stdetails.put("select_semester1", getNluOnlineFormBean().getSelectSemester1());
				stdetails.put("remarks_details", getNluOnlineFormBean().getRemarks());
				stdetails.put("payment_purpose", getNluOnlineFormBean().getPaymentPurpose());

				stdetails.put("tot_amount", Double.parseDouble(getNluOnlineFormBean().getTotAmount()));

				stdetails.put("payment_details", Double.parseDouble(getNluOnlineFormBean().getTotAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getNluOnlineFormBean().getTotAmount()));

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "nlufailure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String std_name = dataobj.getString("std_name");

				String father_name = dataobj.getString("father_name");

				String std_dob = dataobj.getString("std_dob");

				String roll_no = dataobj.getString("roll_no");

				String email_id = dataobj.getString("email_id");

				Long mobile_no = dataobj.getLong("mobile_no");

				String select_course = dataobj.getString("select_course");

				String select_nri = dataobj.getString("select_nri");

				String select_semester1 = dataobj.getString("select_semester1");

				String remarks_details = dataobj.getString("remarks_details");
				int tot_amount = dataobj.getInt("tot_amount");

				getNluOnlineFormBean().setStdName(std_name);
				getNluOnlineFormBean().setFatherName(father_name);
				getNluOnlineFormBean().setStdDOB(getNluOnlineFormBean().getStdDOB());
				getNluOnlineFormBean().setRollno(roll_no);

				getNluOnlineFormBean().setEmail(email_id);
				getNluOnlineFormBean().setMobile(String.valueOf(mobile_no));
				getNluOnlineFormBean().setSelectCourse(select_course);
				getNluOnlineFormBean().setSelectNRI(select_nri);

				getNluOnlineFormBean().setSelectSemester1(select_semester1);
				getNluOnlineFormBean().setRemarks(remarks_details);
				getNluOnlineFormBean().setTotAmount(String.valueOf(tot_amount));
				getNluOnlineFormBean().setApplicationNo(formId);
				// END For Form Engine insertion

				// 5712 DronacharayaGOI Online form Implementation end
				getUserSessionMap().put("ONLINEFORMDATA", getNluOnlineFormBean());
				String responseString = studentRegistrationService.insertNLUStudentDetails(getNluOnlineFormBean(),
						billerId);
				logger.info("NLU Registration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "nlufailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "nlufailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getNluOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getNluOnlineFormBean().getTotAmount());
				studentRegistrationFormBean.setStudentId(getNluOnlineFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getNluOnlineFormBean().getStdName());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getNluOnlineFormBean().getStudentRegistrationId());
				logger.info("NLU Registration--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);
				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				addActionMessage("Amount Mismatched.");
				return "nlufailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String dpscRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getDpscOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getDpscOnlineFormBean().getTotAmount(), getDpscOnlineFormBean().getPayment())) {

				// 3501 DPSOnlineForm Online form Implememtation started
				// Start For Form Engine insertion

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				Date date1 = sdf.parse(getDpscOnlineFormBean().getStdDOB());

				stdetails.put("admission_no", getDpscOnlineFormBean().getAdmissionNo());
				stdetails.put("std_name", getDpscOnlineFormBean().getStdName());
				stdetails.put("father_name", getDpscOnlineFormBean().getFatherName());
				stdetails.put("mother_name", getDpscOnlineFormBean().getMotherName());
				stdetails.put("std_class", getDpscOnlineFormBean().getStdClass());
				stdetails.put("std_dob", formatter.format(date1));
				stdetails.put("place_details", getDpscOnlineFormBean().getPlace());
				stdetails.put("mobile_no", Long.parseLong(getDpscOnlineFormBean().getMobile()));
				stdetails.put("select_session", getDpscOnlineFormBean().getSelectSession());
				stdetails.put("tution_fee", Double.parseDouble(getDpscOnlineFormBean().getTutionFee()));
				stdetails.put("transport_fee", Double.parseDouble(getDpscOnlineFormBean().getTransportFee()));
				stdetails.put("late_fee", Double.parseDouble(getDpscOnlineFormBean().getLateFee()));
				stdetails.put("other_fee", Double.parseDouble(getDpscOnlineFormBean().getOtherFee()));
				stdetails.put("remarks_details", getDpscOnlineFormBean().getRemarks());
				stdetails.put("tot_amount", Double.parseDouble(getDpscOnlineFormBean().getTotAmount()));
				stdetails.put("txn_amt", Double.parseDouble(getDpscOnlineFormBean().getTotAmount()));
				stdetails.put("payment_details", Double.parseDouble(getDpscOnlineFormBean().getTotAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getDpscOnlineFormBean().getTotAmount()));

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * COMMENTED BY PRIYA FORM ENGINE
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "dpscfailure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * COMMENTED BY PRIYA FOR FORM ENGINE
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String admission_no = dataobj.getString("admission_no");
				String std_name = dataobj.getString("std_name");
				String father_name = dataobj.getString("father_name");
				String mother_name = dataobj.getString("mother_name");
				String std_class = dataobj.getString("std_class");
				String std_dob = dataobj.getString("std_dob");
				String place_details = dataobj.getString("place_details");
				int mobile_no = dataobj.getInt("mobile_no");
				String select_session = dataobj.getString("select_session");
				int tution_fee = dataobj.getInt("tution_fee");
				int transport_fee = dataobj.getInt("transport_fee");
				int late_fee = dataobj.getInt("late_fee");
				int other_fee = dataobj.getInt("other_fee");
				String remarks_details = dataobj.getString("remarks_details");
				int tot_amount = dataobj.getInt("tot_amount");

				getDpscOnlineFormBean().setAdmissionNo(admission_no);
				getDpscOnlineFormBean().setStdName(std_name);
				getDpscOnlineFormBean().setFatherName(father_name);
				getDpscOnlineFormBean().setMotherName(mother_name);
				getDpscOnlineFormBean().setStdClass(std_class);
				getDpscOnlineFormBean().setStdDOB(getDpscOnlineFormBean().getStdDOB());
				getDpscOnlineFormBean().setPlace(place_details);
				getDpscOnlineFormBean().setMobile(String.valueOf(mobile_no));
				getDpscOnlineFormBean().setSelectSession(select_session);
				getDpscOnlineFormBean().setTutionFee(String.valueOf(tution_fee));
				getDpscOnlineFormBean().setTransportFee(String.valueOf(transport_fee));
				getDpscOnlineFormBean().setLateFee(String.valueOf(late_fee));
				getDpscOnlineFormBean().setOtherFee(String.valueOf(other_fee));
				getDpscOnlineFormBean().setRemarks(remarks_details);
				getDpscOnlineFormBean().setTotAmount(String.valueOf(tot_amount));
				getDpscOnlineFormBean().setApplicationNo(formId);
				// END For Form Engine insertion

				// 5712 DronacharayaGOI Online form Implementation end
				getUserSessionMap().put("ONLINEFORMDATA", getDpscOnlineFormBean());
				String responseString = studentRegistrationService.insertDPSCStudentDetails(getDpscOnlineFormBean(),
						billerId);
				logger.info("Delhi Public school Registration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "dpscfailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "dpscfailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getDpscOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getDpscOnlineFormBean().getTotAmount());
				studentRegistrationFormBean.setStudentId(getDpscOnlineFormBean().getApplicationNo());
				studentRegistrationFormBean.setStudentName(getDpscOnlineFormBean().getStdName());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getDpscOnlineFormBean().getStudentRegistrationId());
				logger.info("Delhi Public school--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);
				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				addActionMessage("Amount Mismatched.");
				return "dpscfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String nlu1Registration()
	{
		if (!super.isValidSession()) {
	        return INVALID_SESSION;
	    }
		try{
			logger.info("---------------------------------------------------------");
	        logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
	        logger.info("---------------------------------------------------------");       
	        String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
	        String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
	        logger.info("registeredUserId.."+registeredUserId);
	        getNluOnlineFormBean().setRegisteredUserId(registeredUserId);
	        StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
	        getAppData().setStrID("TEST");
	        if(AmountValidation(getNluOnlineFormBean().getTotAmount(),getNluOnlineFormBean().getPayment()))
	        {
	        	
	        	//5712 DronacharayaGOI Online form Implememtation started
				//Start For Form Engine insertion
				
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

				//Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name",instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id",instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
				SimpleDateFormat formatter1 = new SimpleDateFormat("yyyy-MM-dd");  
				Date date = new Date();  
				 SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
				stdetails.put("std_name",getNluOnlineFormBean().getStdName());
				stdetails.put("email_id",getNluOnlineFormBean().getEmail());
				stdetails.put("mobile_no",Long.parseLong(getNluOnlineFormBean().getMobile()));
				stdetails.put("remarks_details", getNluOnlineFormBean().getRemarks()!=""?getNluOnlineFormBean().getRemarks():" ");
				stdetails.put("payment_purpose", getNluOnlineFormBean().getPaymentPurpose());
			
				stdetails.put("tot_amount", Double.parseDouble(getNluOnlineFormBean().getTotAmount()));

				stdetails.put("payment_details",Double.parseDouble(getNluOnlineFormBean().getTotAmount()));
				stdetails.put("registered_userId",registeredUserId);
				stdetails.put("student_registrationid","0");
				stdetails.put("application_no","0");
				stdetails.put("recon_date",formatter.format(date));
				stdetails.put("r_cre_time",formatter.format(date));
				stdetails.put("r_mod_time",formatter.format(date));
				stdetails.put("pg_pmt_status","A");
				stdetails.put("Acc_Holder_Name"," ");
				stdetails.put("Res_Msg"," ");
				stdetails.put("Payment_Mode"," ");
				stdetails.put("Bank_Name"," ");
				stdetails.put("ALT_ERROR_DESC"," ");
				stdetails.put("Pmt_Id","");
				stdetails.put("Payment_id","");
				stdetails.put("PGTxnID","");
				stdetails.put("BANK_ID","");
				stdetails.put("Txn_Amt",Double.parseDouble(getNluOnlineFormBean().getTotAmount()));

				objNode.put("form_data",stdetails);

				String jsonString1=obMapper.writeValueAsString(objNode);

				logger.info("jsonString1"+jsonString1.toString());
				
				//code added by priya 
				
				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				//String clientId = "actual-smarthub-node-ip";
				//String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				//secureAPIBuilder.setAuthenticationAlias(clientId);

				//byte[] clientKey = hexStringToByteArray(clientKeyStr);
				//secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

	           //CODE END 

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				
				APIResponse apiResponse = null;

				
				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: " + apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();
				
				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					return "nlufailure";
					//throw new RuntimeException("Failed : HTTP error code : " + response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);

				JSONObject data1= json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId"+formId);
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name",instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id",instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id",formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				
				String  jsonString2=obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2"+jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				
				//code added by priya form engine
				APIResponse apiResponse1 = null;

				
				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: " + apiResponse1.getResponseCode());

					

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();
				
				
				logger.info("output1"+output1);
				
				JSONObject jsonObject = new JSONObject(output1);
				
				//JSONArray jsonArray = jsonObject.getJSONArray("message"); 
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");;

				JSONObject data=jsonArray.getJSONObject(0);
				JSONObject dataobj=data.getJSONObject("form_data");
				
				String std_name=data1.getString("std_name"); 
				String payment_purpose=data1.getString("payment_purpose"); 
	           String email_id=data1.getString("email_id");
				
	           Long mobile_no=data1.getLong("mobile_no"); 
				
				String remarks_details=data1.getString("remarks_details"); 
				int tot_amount=data1.getInt("tot_amount");
				
				getNluOnlineFormBean().setStdName(std_name);
				getNluOnlineFormBean().setEmail(email_id);
				getNluOnlineFormBean().setMobile(String.valueOf(mobile_no));
				getNluOnlineFormBean().setRemarks(remarks_details);
				getNluOnlineFormBean().setPaymentPurpose(payment_purpose);
				getNluOnlineFormBean().setTotAmount(String.valueOf(tot_amount));
				getNluOnlineFormBean().setApplicationNo(formId);
				//END For Form Engine insertion
				
				//5712 DronacharayaGOI Online form Implementation end
				getUserSessionMap().put("ONLINEFORMDATA",getNluOnlineFormBean());
	        	String responseString = studentRegistrationService.insertNLU1StudentDetails(getNluOnlineFormBean(),billerId);
	        	logger.info("NLU Registration: "+responseString);
	        	if (responseString != null && !"".equalsIgnoreCase(responseString) && "success".equalsIgnoreCase(responseString)) {
	                addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
	            }else if ("NA".equalsIgnoreCase(responseString)){
	            	addActionMessage("Failed to add student data.");
	           	return "nlufailure";
	            }else {         
	            	addActionMessage("Error occured contact administrator.");
	                return "nlufailure";
	            }

	        	studentRegistrationFormBean = super.getRegisteredStudentDetails(getNluOnlineFormBean().getStudentRegistrationId());
		         studentRegistrationFormBean.setTotalPayableFees(getNluOnlineFormBean().getTotAmount());
		         studentRegistrationFormBean.setStudentId(getNluOnlineFormBean().getApplicationNo());
		         studentRegistrationFormBean.setStudentName(getNluOnlineFormBean().getStdName());	         
		         super.applyFees(studentRegistrationFormBean);

		         QuickPayAction quickPayAction = new QuickPayAction();
		         appData1 = new PaymentRequestBean();
		         appData1.setStudentRegistrationId(getNluOnlineFormBean().getStudentRegistrationId());            
		         logger.info( "NLU 1 Registration--feesPayList :: "+ feesPayList);
		         quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean,feesPayList);	   
		         getUserSessionMap().put("APPDATA", getAppData1()); 	         
	        }
	        else{
	         	addActionMessage("Amount Mismatched.");
	         	return "nlufailure";
	         }
		}catch(Exception e)
		{
			logger.error("Exception  " +e);
	        return ERROR;
			
		}
		return SUCCESS;
	}
	public String americanRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getAmericanOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getAmericanOnlineFormBean().getTotalFee(), getAmericanOnlineFormBean().getPayment())) {
				// 3529 AmericanOnine Online form Implememtation started
				// Start For Form Engine insertion

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());

				ObjectNode stdetails = obMapper.createObjectNode();
				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				stdetails.put("franchise_name", getAmericanOnlineFormBean().getFranchiseName());
				stdetails.put("franchise_address", getAmericanOnlineFormBean().getFranchiseAddress());
				stdetails.put("select_state", getAmericanOnlineFormBean().getSelectState());
				stdetails.put("email_id", getAmericanOnlineFormBean().getEmailID());

				stdetails.put("mobile_number", Long.parseLong(getAmericanOnlineFormBean().getMobileNumber()));
				stdetails.put("franchisee_fees",
						getAmericanOnlineFormBean().getFranchiseeFees() != ""
								? Double.parseDouble(getAmericanOnlineFormBean().getFranchiseeFees())
								: Double.parseDouble("0"));
				stdetails.put("toys_games",
						getAmericanOnlineFormBean().getToysGames() != "" ? getAmericanOnlineFormBean().getToysGames()
								: " ");
				stdetails.put("furniture_fixtures",
						getAmericanOnlineFormBean().getFurnitureFixtures() != ""
								? getAmericanOnlineFormBean().getFurnitureFixtures()
								: " ");

				stdetails.put("total_fee", Double.parseDouble(getAmericanOnlineFormBean().getTotalFee()));
				stdetails.put("others_details",
						getAmericanOnlineFormBean().getOthers() != "" ? getAmericanOnlineFormBean().getOthers() : " ");
				stdetails.put("school_kit",
						getAmericanOnlineFormBean().getSchoolKit() != "" ? getAmericanOnlineFormBean().getSchoolKit()
								: " ");
				stdetails.put("student_kit",
						getAmericanOnlineFormBean().getStudentKit() != "" ? getAmericanOnlineFormBean().getStudentKit()
								: " ");
				stdetails.put("txn_amt", Double.parseDouble(getAmericanOnlineFormBean().getTotalFee()));
				stdetails.put("payment_details", Double.parseDouble(getAmericanOnlineFormBean().getTotalFee()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getAmericanOnlineFormBean().getTotalFee()));

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();

				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "americanfailure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				// JSONArray jsonArray = jsonObject.getJSONArray("message");

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String franchise_name = dataobj.getString("franchise_name");

				String franchise_address = dataobj.getString("franchise_address");

				String select_state = dataobj.getString("select_state");

				String email_id = dataobj.getString("email_id");

				int franchisee_fees = dataobj.getInt("franchisee_fees");

				String toys_games = dataobj.getString("toys_games");
				String furniture_fixtures = dataobj.getString("furniture_fixtures");

				String student_kit = dataobj.getString("student_kit");
				String school_kit = dataobj.getString("school_kit");
				String others_details = dataobj.getString("others_details");

				Long mobile_number = dataobj.getLong("mobile_number");

				int total_fee = dataobj.getInt("total_fee");
				int txn_amt = dataobj.getInt("txn_amt");

				getAmericanOnlineFormBean().setFranchiseName(franchise_name);
				getAmericanOnlineFormBean().setFranchiseAddress(franchise_address);
				getAmericanOnlineFormBean().setSelectState(select_state);
				getAmericanOnlineFormBean().setEmailID(email_id);
				getAmericanOnlineFormBean().setFranchiseeFees(String.valueOf(franchisee_fees));
				getAmericanOnlineFormBean().setToysGames(toys_games);
				getAmericanOnlineFormBean().setFurnitureFixtures(furniture_fixtures);
				getAmericanOnlineFormBean().setToysGames(toys_games);
				getAmericanOnlineFormBean().setStudentKit(student_kit);
				getAmericanOnlineFormBean().setSchoolKit(school_kit);
				getAmericanOnlineFormBean().setOthers(others_details);
				getAmericanOnlineFormBean().setMobileNumber(String.valueOf(mobile_number));
				getAmericanOnlineFormBean().setTotalFee(String.valueOf(total_fee));
				getAmericanOnlineFormBean().setApplicationNo(formId);

				getUserSessionMap().put("ONLINEFORMDATA", getAmericanOnlineFormBean());
				// END For Form Engine insertion

				String responseString = studentRegistrationService
						.insertAmricanStudentDetails(getAmericanOnlineFormBean(), billerId);
				logger.info("Delhi Public school Registration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "americanfailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "americanfailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getAmericanOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getAmericanOnlineFormBean().getTotalFee());
				studentRegistrationFormBean.setStudentId(getAmericanOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getAmericanOnlineFormBean().getStudentRegistrationId());
				logger.info("Amrican school--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);
				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				addActionMessage("Amount Mismatched.");
				return "americanfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String pathFinderRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getPathFinderOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getPathFinderOnlineFormBean().getTotalAmount(),
					getPathFinderOnlineFormBean().getPayment())) { // 3525 Pathfinder Online form Implememtation started
																	// Start For Form Engine insertion

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				stdetails.put("student_name", getPathFinderOnlineFormBean().getStudentName());
				stdetails.put("student_phoneno", Long.parseLong(getPathFinderOnlineFormBean().getStudentPhonrNo()));
				stdetails.put("father_name", getPathFinderOnlineFormBean().getFatherName());
				stdetails.put("student_emailid", getPathFinderOnlineFormBean().getStudentEmailId());

				stdetails.put("course_name", getPathFinderOnlineFormBean().getCourse());
				stdetails.put("programme_name", getPathFinderOnlineFormBean().getProgramme());
				stdetails.put("total_amount", Double.parseDouble(getPathFinderOnlineFormBean().getTotalAmount()));
				stdetails.put("txn_amt", Double.parseDouble(getPathFinderOnlineFormBean().getTotalAmount()));

				stdetails.put("payment_details", Double.parseDouble(getPathFinderOnlineFormBean().getTotalAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getPathFinderOnlineFormBean().getTotalAmount()));

				/*
				 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
				 * 
				 * String jsonString1=obMapper.writeValueAsString(objNode);
				 * 
				 * logger.info("jsonString1"+jsonString1.toString());
				 */

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */

				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "pathfinderfailure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);
				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				// JSONArray jsonArray = jsonObject.getJSONArray("message");
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String student_name = dataobj.getString("student_name");

				Long student_phoneno = dataobj.getLong("student_phoneno");
				String father_name = dataobj.getString("father_name");

				String student_emailid = dataobj.getString("student_emailid");

				String course_name = dataobj.getString("course_name");

				String programme_name = dataobj.getString("programme_name");

				int total_amount = dataobj.getInt("total_amount");
				int txn_amt = dataobj.getInt("txn_amt");

				getPathFinderOnlineFormBean().setStudentName(student_name);
				getPathFinderOnlineFormBean().setStudentPhonrNo(String.valueOf(student_phoneno));

				getPathFinderOnlineFormBean().setFatherName(father_name);
				getPathFinderOnlineFormBean().setStudentEmailId(student_emailid);

				getPathFinderOnlineFormBean().setProgramme(programme_name);
				getPathFinderOnlineFormBean().setCourse(course_name);

				getPathFinderOnlineFormBean().setTotalAmount(String.valueOf(total_amount));

				getPathFinderOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getPathFinderOnlineFormBean());
				// END For Form Engine insertion
				String responseString = studentRegistrationService
						.insertPathFinderStudentDetails(getPathFinderOnlineFormBean(), billerId);
				logger.info("Delhi Public school Registration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "pathfinderfailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "pathfinderfailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getPathFinderOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getPathFinderOnlineFormBean().getTotalAmount());
				studentRegistrationFormBean.setStudentId(getPathFinderOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getPathFinderOnlineFormBean().getStudentRegistrationId());
				logger.info("Amrican school--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);
				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				addActionMessage("Amount Mismatched.");
				return "pathfinderfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

//CR KASHI STARTS
	public String kashiTechnologyRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getFeesForm().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getFeesForm().getTotalFee(), getFeesForm().getPayment())) {
				// KASH technology Online form Implememtation started
				// Start For Form Engine insertion

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

//			stdetails.put("exist_feepayment",getFeesForm().getExistFeePayment());
//			stdetails.put("new_feePayment",getFeesForm().getNewFeePayment());
				/* stdetails.put("fee_payment",getFeesForm().getFeePayment()); */
				stdetails.put("exist_feepayment", getFeesForm().getFeePayment());
				stdetails.put("new_feePayment", getFeesForm().getFeePayment());
				stdetails.put("fee_payment", getFeesForm().getFeePayment());
				stdetails.put("select_feesession",
						getFeesForm().getSelectFeeSession() == null ? "0" : getFeesForm().getSelectFeeSession());
				// stdetails.put("select_feesession","2022-23");
				stdetails.put("student_name", getFeesForm().getStudentName());
				stdetails.put("guardian_name", getFeesForm().getGuardianName());
				stdetails.put("mobile_no", Long.parseLong(getFeesForm().getMobileNo()));
				stdetails.put("select_course", getFeesForm().getSelectCourse());
				stdetails.put("select_branch", getFeesForm().getSelectBranch());
				stdetails.put("select_year",
						getFeesForm().getSelectYear() == null ? "0" : getFeesForm().getSelectYear());
				// stdetails.put("select_year","2023");
				stdetails.put("college_fee", Double.parseDouble(getFeesForm().getCollegeFee()));
				stdetails.put("hostel_fee", Double.parseDouble(getFeesForm().getHostelFee()));
				stdetails.put("transport_fee", Double.parseDouble(getFeesForm().getTransportFee()));
				stdetails.put("remarks_details", getFeesForm().getRemarks());
				stdetails.put("total_fee", Double.parseDouble(getFeesForm().getTotalFee()));
				stdetails.put("roll_no", getFeesForm().getRollno());
				stdetails.put("payment_details", Double.parseDouble(getFeesForm().getTotalFee()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getFeesForm().getTotalFee()));

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "kashiTechnologyfailure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String exist_feepayment = dataobj.getString("exist_feepayment");
				String new_feepayment = dataobj.getString("new_feePayment");
				String fee_payment = dataobj.getString("fee_payment");
				String select_feesession = dataobj.getString("select_feesession");
				String student_name = dataobj.getString("student_name");
				String guardian_name = dataobj.getString("guardian_name");
				Long mobile_no = dataobj.getLong("mobile_no");
				String select_course = dataobj.getString("select_course");
				String select_branch = dataobj.getString("select_branch");
				String select_year = dataobj.getString("select_year");
				int college_fee = dataobj.getInt("college_fee");
				int hostel_fee = dataobj.getInt("hostel_fee");
				int transport_fee = dataobj.getInt("transport_fee");
				String roll_no = dataobj.getString("roll_no");
				String remarks_details = dataobj.getString("remarks_details");
				int amt_paid = dataobj.getInt("total_fee");

				getFeesForm().setExistFeePayment(exist_feepayment);
				getFeesForm().setNewFeePayment(new_feepayment);
				getFeesForm().setFeePayment(new_feepayment);
				getFeesForm().setRollno(roll_no);
				getFeesForm().setSelectFeeSession(select_feesession);
				getFeesForm().setStudentName(student_name);
				getFeesForm().setGuardianName(guardian_name);
				getFeesForm().setSelectBranch(select_branch);
				getFeesForm().setSelectCourse(select_course);
				getFeesForm().setSelectYear(select_year);
				getFeesForm().setCollegeFee(String.valueOf(college_fee));
				getFeesForm().setHostelFee(String.valueOf(hostel_fee));
				getFeesForm().setTotalFee(String.valueOf(amt_paid));
				getFeesForm().setMobileNo(String.valueOf(mobile_no));
				getFeesForm().setRemarks(remarks_details);
				getFeesForm().setTransportFee(String.valueOf(transport_fee));
				getFeesForm().setApplicationNo(formId);
				// END For Form Engine insertion

				// 5712 DronacharayaGOI Online form Implementation end
				getUserSessionMap().put("ONLINEFORMDATA", getFeesForm());
				String responseString = studentRegistrationService.insertKashiTechnologyStudentDetails(getFeesForm(),
						billerId);
				logger.info("Delhi Public school Registration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "kashiTechnologyfailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "kashiTechnologyfailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getFeesForm().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getFeesForm().getTotalFee());
				studentRegistrationFormBean.setStudentId(getFeesForm().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getFeesForm().getStudentRegistrationId());
				logger.info("Amrican school--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);
				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				addActionMessage("Amount Mismatched.");
				return "kashiTechnologyfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}
//CR KASHI ENDS

	public String COUHaryanaRegistration()
	{
		if (!super.isValidSession()) {
	        return INVALID_SESSION;
	    }
		try{
			logger.info("---------------------------------------------------------");
	        logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
	        logger.info("---------------------------------------------------------");       
	        String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
	        String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
	        logger.info("registeredUserId.."+registeredUserId);
	       
	        getCuoHaryanaOnlineFormBean().setRegisteredUserId(registeredUserId);
	        StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
	        getAppData().setStrID("TEST");
	        if(AmountValidation(getCuoHaryanaOnlineFormBean().getRegistrationFee(),getCuoHaryanaOnlineFormBean().getPayment()))
	        {
	        	 addStudentPhotosForCUOHaryana(billerId);

	        	//1250 CUOHaryana Online form Implememtation started
	 			//Start For Form Engine insertion
	 			
	 			ObjectMapper obMapper = new ObjectMapper();
	 			ObjectNode objNode = obMapper.createObjectNode();

	 			InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

	 			//Object Node declaration
	 			objNode.put("application_id", "SMARTHUB");
	 			objNode.put("form_name",instituteFormDetailsBean.getInstituteCode());
	 			objNode.put("context_id",instituteFormDetailsBean.getMerchantID());
	 			ObjectNode stdetails = obMapper.createObjectNode();

	 			SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
	 			Date date = new Date(); 
	 			
	 			
	 			  SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
	 			    Date date1 = sdf.parse(getCuoHaryanaOnlineFormBean().getDateOfPay());
	 			  
	 			stdetails.put("student_name",getCuoHaryanaOnlineFormBean().getStdName());
	 			stdetails.put("gender_detail",getCuoHaryanaOnlineFormBean().getGender());
	 			stdetails.put("father_name",getCuoHaryanaOnlineFormBean().getFathername());
	 			stdetails.put("mother_name",getCuoHaryanaOnlineFormBean().getMothername());
	 			stdetails.put("enrollment_no",getCuoHaryanaOnlineFormBean().getEnrollmentNo());
	 			stdetails.put("session_details",getCuoHaryanaOnlineFormBean().getSession());
	 			stdetails.put("nameof_exam",getCuoHaryanaOnlineFormBean().getNameOfExam());
	 			stdetails.put("passing_year",getCuoHaryanaOnlineFormBean().getPassingYear());
	 			stdetails.put("result_details",getCuoHaryanaOnlineFormBean().getResult());
	 			stdetails.put("district_details",getCuoHaryanaOnlineFormBean().getDistrict());
	 			stdetails.put("state_name",getCuoHaryanaOnlineFormBean().getState());
	 			stdetails.put("pin_code",Integer.valueOf(getCuoHaryanaOnlineFormBean().getPinCode()));
	 			stdetails.put("email_id",getCuoHaryanaOnlineFormBean().getEmail());
	 			stdetails.put("mobile_no",Long.parseLong(getCuoHaryanaOnlineFormBean().getMobileno()));
	 			stdetails.put("other_no",Long.parseLong(getCuoHaryanaOnlineFormBean().getAdharNo()));
	 			stdetails.put("participation_details",getCuoHaryanaOnlineFormBean().getParticipation());
	 			//stdetails.put("dateof_pay",getCuoHaryanaOnlineFormBean().getDateOfPay());
	 			stdetails.put("dateof_pay",formatter.format(date1));
	 			stdetails.put("registration_fee",Double.parseDouble(getCuoHaryanaOnlineFormBean().getRegistrationFee()));
	 			stdetails.put("storeheader_file",getCuoHaryanaOnlineFormBean().getStoreHeaderFile().toString());
	 			//stdetails.put("storeheader_file","PHOTO_1681378745280_2651");
	 			stdetails.put("passportimg_file",getCuoHaryanaOnlineFormBean().getPassportImagfile().toString());
	 		    stdetails.put("photo_proof",getCuoHaryanaOnlineFormBean().getPhotoProof());
	 			//stdetails.put("photo_proof","PHOTO_1681378745280_2651");
	 			stdetails.put("declaration_details"," ");
	 			stdetails.put("passport_imgfilefilename",getCuoHaryanaOnlineFormBean().getPassportImagfileFileName().toString());
	 			stdetails.put("payment_details",Double.parseDouble(getCuoHaryanaOnlineFormBean().getRegistrationFee()));
	 			stdetails.put("passport_imagfilecontentType",getCuoHaryanaOnlineFormBean().getPassportImagfileContentType());
	 			//stdetails.put("passport_imagfilecontentType","image");
	 			
	 			
	 			stdetails.put("registered_userId",registeredUserId);
	 			stdetails.put("student_registrationid","0");
	 			stdetails.put("application_no","0");
	 			stdetails.put("recon_date",formatter.format(date));
	 			stdetails.put("r_cre_time",formatter.format(date));
	 			stdetails.put("r_mod_time",formatter.format(date));
	 			stdetails.put("pg_pmt_status","A");
	 			stdetails.put("Acc_Holder_Name"," ");
	 			stdetails.put("Res_Msg"," ");
	 			stdetails.put("Payment_Mode"," ");
	 			stdetails.put("Bank_Name"," ");
	 			stdetails.put("ALT_ERROR_DESC"," ");
	 			stdetails.put("Pmt_Id","");
	 			stdetails.put("Payment_id","");
	 			stdetails.put("PGTxnID","");
	 			stdetails.put("BANK_ID","");
	 			stdetails.put("Txn_Amt",Double.parseDouble(getCuoHaryanaOnlineFormBean().getRegistrationFee()));

	 			objNode.put("form_data",stdetails);

	 			String jsonString1=obMapper.writeValueAsString(objNode);

	 			logger.info("jsonString1"+jsonString1.toString());
	 			
	 			/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				//String clientId = "actual-smarthub-node-ip";
				//String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				//secureAPIBuilder.setAuthenticationAlias(clientId);

				//byte[] clientKey = hexStringToByteArray(clientKeyStr);
				//secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

	 			Client client = ClientBuilder.newClient();
//	 			WebTarget webTarget = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/store-form-data");
//	 			Invocation.Builder invocationBuilder = webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//	 			
	 			//Response response = invocationBuilder.post(Entity.json(jsonString1.toString()));
	 			//logger.info("response" + response.toString());

	 			APIResponse apiResponse = null;
				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: " + apiResponse.getResponseCode());

	 			if (apiResponse.getResponseCode() != 201) {
	 				//throw new RuntimeException("Failed : HTTP error code : " + apiResponse.getResponseCode());
	 				String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					return "CUOHaryanafailure";
	 				
	 			}

	 			logger.info("Output from Server .... \n");
	 			String output = apiResponse.getData().toString();
	 			JSONObject json = new JSONObject(output);
	 			
	 			JSONObject data1=json.getJSONObject("data");
				
	 			String formId = data1.getString("form_id");
	 			logger.info("formId"+formId);
	 			getUserSessionMap().put("application_id", "SMARTHUB");
	 			getUserSessionMap().put("form_name",instituteFormDetailsBean.getInstituteCode());
	 			getUserSessionMap().put("context_id",instituteFormDetailsBean.getMerchantID());
	 			getUserSessionMap().put("form_id",formId);

	 			SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
	 			smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
	 			smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
	 			smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
	 			smartHubFetchOnlineFormBean.setForm_id(formId);

	 			
	 			String  jsonString2=obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
	 			logger.info("jsonString2"+jsonString2);

//	 			WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/get-form-data");
//	 			Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//	 			
//	 			Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
	 			
	 			APIResponse apiResponse1 = null;
				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: " + apiResponse1.getResponseCode());

	 			logger.info("responseString", apiResponse1.toString());

	 			if (apiResponse1.getResponseCode() != 200) {
	 				throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
	 			}
	 			logger.info("Output from Server .... \n");
	 			String output1 = apiResponse1.getData().toString();
	 			
	 			
	 			logger.info("output1"+output1);
	 			
	 			JSONObject jsonObject = new JSONObject(output1);
	 			
	 			JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
	 			logger.info("jsonArray"+jsonArray);

	 			JSONObject data=jsonArray.getJSONObject(0);
	 			JSONObject dataobj=data.getJSONObject("form_data");
	 			
	 			String stuName=dataobj.getString("student_name");
	 			
	 			String gender_detail=dataobj.getString("gender_detail");
	 			String father_name=dataobj.getString("father_name");
	 			String mother_name=dataobj.getString("mother_name");
	 			String session_details=dataobj.getString("session_details");
	 			String enrollment_no=dataobj.getString("enrollment_no");
	 			
	 			String nameOf_exam=dataobj.getString("nameof_exam");
	 			String passing_year=dataobj.getString("passing_year");
	 			String district_details=dataobj.getString("district_details");
	 			String result_details=dataobj.getString("result_details");
	 			String state_name=dataobj.getString("state_name");
	 			int pin_code=dataobj.getInt("pin_code");
	 			String email_id=dataobj.getString("email_id");
	 			Long mobile_no=dataobj.getLong("mobile_no");
	 			Long other_no=dataobj.getLong("other_no");
	 			
	 			String participation_details=dataobj.getString("participation_details");
	 			String dateof_pay=dataobj.getString("dateof_pay");
	 			int registration_fee=dataobj.getInt("registration_fee");
	 			String storeheader_file=dataobj.getString("storeheader_file");
	 			String passportimg_file=dataobj.getString("passportimg_file");
	 			
	 			String photo_proof=dataobj.getString("photo_proof");
	 			String declaration_details=dataobj.getString("declaration_details");
	 			String passport_imgfilefilename=dataobj.getString("passport_imgfilefilename");
	 			int payment_details=dataobj.getInt("payment_details");
	 			String passport_imagfilecontentType=dataobj.getString("passport_imagfilecontentType");
	 			
	 			
	 			getCuoHaryanaOnlineFormBean().setStdName(stuName);
	 			getCuoHaryanaOnlineFormBean().setGender(gender_detail);
	 			getCuoHaryanaOnlineFormBean().setFathername(father_name);
	 			getCuoHaryanaOnlineFormBean().setMothername(mother_name);
	 			getCuoHaryanaOnlineFormBean().setEnrollmentNo(enrollment_no);
	 			getCuoHaryanaOnlineFormBean().setSession(session_details);
	 			getCuoHaryanaOnlineFormBean().setNameOfExam(nameOf_exam);
	 			getCuoHaryanaOnlineFormBean().setPassingYear(passing_year);
	 			getCuoHaryanaOnlineFormBean().setResult(result_details);
	 			getCuoHaryanaOnlineFormBean().setDistrict(district_details);
	 			getCuoHaryanaOnlineFormBean().setState(state_name);
	 			getCuoHaryanaOnlineFormBean().setPinCode(String.valueOf(pin_code));
	 			getCuoHaryanaOnlineFormBean().setEmail(email_id);
	 			getCuoHaryanaOnlineFormBean().setMobileno(String.valueOf(mobile_no));
	 			getCuoHaryanaOnlineFormBean().setAdharNo(String.valueOf(other_no));
	 			getCuoHaryanaOnlineFormBean().setParticipation(participation_details);
	 			getCuoHaryanaOnlineFormBean().setDateOfPay(dateof_pay);
	 			getCuoHaryanaOnlineFormBean().setRegistrationFee(String.valueOf(registration_fee));
	 			getCuoHaryanaOnlineFormBean().setApplicationNo(formId);
	 			//END For Form Engine insertion
	 			getUserSessionMap().put("ONLINEFORMDATA",getCuoHaryanaOnlineFormBean());
	 			//1250 CUOHaryana Online form Implementation end
	        	String responseString = studentRegistrationService.insertCUOHaryanaStudentDetails(getCuoHaryanaOnlineFormBean(),billerId);
	        	logger.info("CUOHaryana responseString: "+responseString);
	        	
	        	if (responseString != null && !"".equalsIgnoreCase(responseString) && "success".equalsIgnoreCase(responseString)) {
	                addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
	            }else if ("NA".equalsIgnoreCase(responseString)){
	            	addActionMessage("Failed to add student data.");
	           	return "CUOHaryanafailure";
	            }else {         
	            	addActionMessage("Error occured contact administrator.");
	                return "CUOHaryanafailure";
	            }

	        	studentRegistrationFormBean = super.getRegisteredStudentDetails(getCuoHaryanaOnlineFormBean().getStudentRegistrationId());
		         studentRegistrationFormBean.setTotalPayableFees(getCuoHaryanaOnlineFormBean().getRegistrationFee());
		         studentRegistrationFormBean.setStudentId(getCuoHaryanaOnlineFormBean().getApplicationNo());	               
		         super.applyFees(studentRegistrationFormBean);

		         QuickPayAction quickPayAction = new QuickPayAction();
		         appData1 = new PaymentRequestBean();
		         appData1.setStudentRegistrationId(getCuoHaryanaOnlineFormBean().getStudentRegistrationId());            
		         logger.info( "CUOHaryana Registration--feesPayList :: "+ feesPayList);
		         quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean,feesPayList);
		   
		         getUserSessionMap().put("APPDATA", getAppData1()); 
		         
	        }
	        else{
	         	addActionMessage("Amount Mismatched.");
	         	return "CUOHaryanafailure";
	         }
		}catch(Exception e)
		{
			logger.error("Exception  " +e);
	        return ERROR;
			
		}
		return SUCCESS;
	}



	public String addStudentPhotosForCUOHaryana(String billerId) throws IOException {
		String destination = "";
		String osName = System.getProperty("os.name");
		if ("LINUX".equalsIgnoreCase(osName.trim())) {
			destination = "/opt/jboss-eap-6.0/standalone/deployments/XJunction.war/StudentPhotos";
		} else {
			destination = "C:/WorkSpace_for_UploadPhotos/StudentUploadPhotos/WebContent/StudentPhotos";
		}

		if (getCuoHaryanaOnlineFormBean().getPassportImagfile() != null)// &&
																		// !"".equalsIgnoreCase(getInstituteMasterFormBean().getInstituteHeaderImage()))
		{
			long uniqueTime = System.currentTimeMillis();
			getCuoHaryanaOnlineFormBean()
					.setStoreHeaderFile(saveUploadedFile(getCuoHaryanaOnlineFormBean().getPassportImagfile(),
							getCuoHaryanaOnlineFormBean().getPassportImagfileFileName(), billerId,
							"PHOTO_" + uniqueTime, TPSLConstants.FJA_STATIC_IMAGE_CONTENT_PATH));

			saveUploadedFile(getCuoHaryanaOnlineFormBean().getPassportImagfile(),
					getCuoHaryanaOnlineFormBean().getPassportImagfileFileName(), billerId, "PHOTO_" + uniqueTime,
					destination);
			getCuoHaryanaOnlineFormBean().setPhotoProof(getCuoHaryanaOnlineFormBean().getStoreHeaderFile().getName());
		}

		return "success";
	}

	public String chaduryMiscellanousRegistration()

	{
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getChaudharyMiscellanousOnlineBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getChaudharyMiscellanousOnlineBean().getTotalfees(),
					getChaudharyMiscellanousOnlineBean().getPayment())) {
				// 3640 Pathfinder Online form Implememtation started
				// Start For Form Engine insertion

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());

				ObjectNode stdetails = obMapper.createObjectNode();
				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				stdetails.put("registration_no",
						getChaudharyMiscellanousOnlineBean().getRegistrationNo() != ""
								? getChaudharyMiscellanousOnlineBean().getRegistrationNo()
								: " ");
				stdetails.put("student_name", getChaudharyMiscellanousOnlineBean().getStudentName());
				stdetails.put("father_name",
						getChaudharyMiscellanousOnlineBean().getFatherName() != ""
								? getChaudharyMiscellanousOnlineBean().getFatherName()
								: " ");
				stdetails.put("class_name",
						getChaudharyMiscellanousOnlineBean().getClasss() != ""
								? getChaudharyMiscellanousOnlineBean().getClasss()
								: " ");
				if (getChaudharyMiscellanousOnlineBean().getMobileNo() != "") {
					stdetails.put("mobile_no", Long.parseLong(getChaudharyMiscellanousOnlineBean().getMobileNo()));
				} else {

					stdetails.put("mobile_no", 0);
				}
				stdetails.put("purpose_details", getChaudharyMiscellanousOnlineBean().getPurpose());
				stdetails.put("reenterfee_purpose",
						getChaudharyMiscellanousOnlineBean().getReEnterFeePurpose() != ""
								? getChaudharyMiscellanousOnlineBean().getReEnterFeePurpose()
								: " ");
				stdetails.put("fees_amount", Double.parseDouble(getChaudharyMiscellanousOnlineBean().getFeesAmount()));
				if (getChaudharyMiscellanousOnlineBean().getLateFee() != "") {
					stdetails.put("late_fee", Double.parseDouble(getChaudharyMiscellanousOnlineBean().getLateFee()));
				} else {

					stdetails.put("late_fee", Double.parseDouble("0"));

				}
				if (getChaudharyMiscellanousOnlineBean().getLateFee() != "") {
					stdetails.put("other_fees",
							Double.parseDouble(getChaudharyMiscellanousOnlineBean().getOtherFees()));
				} else {
					stdetails.put("other_fees", "0");

				}
				stdetails.put("total_fees", Double.parseDouble(getChaudharyMiscellanousOnlineBean().getTotalfees()));
				stdetails.put("address_details",
						getChaudharyMiscellanousOnlineBean().getAddress() != ""
								? getChaudharyMiscellanousOnlineBean().getAddress()
								: "  ");
				stdetails.put("txn_amt", Double.parseDouble(getChaudharyMiscellanousOnlineBean().getTotalfees()));

				stdetails.put("payment_details",
						Double.parseDouble(getChaudharyMiscellanousOnlineBean().getTotalfees()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getChaudharyMiscellanousOnlineBean().getTotalfees()));

				/*
				 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
				 * 
				 * String jsonString1=obMapper.writeValueAsString(objNode);
				 * 
				 * logger.info("jsonString1"+jsonString1.toString());
				 */

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */

				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "ChaduryMiscellanousfailure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				// JSONArray jsonArray = jsonObject.getJSONArray("message");
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String registration_no = dataobj.getString("registration_no");

				String student_name = dataobj.getString("student_name");

				String class_name = dataobj.getString("class_name");

				String father_name = dataobj.getString("father_name");

				Long mobile_no = dataobj.getLong("mobile_no");
				String purpose_details = dataobj.getString("purpose_details");

				String reenterfee_purpose = dataobj.getString("reenterfee_purpose");

				int fees_amount = dataobj.getInt("fees_amount");

				int late_fee = dataobj.getInt("late_fee");

				int other_fees = dataobj.getInt("other_fees");

				int total_fees = dataobj.getInt("total_fees");
				String address_details = dataobj.getString("address_details");
				int txn_amt = dataobj.getInt("txn_amt");
				getChaudharyMiscellanousOnlineBean().setRegistrationNo(registration_no);
				getChaudharyMiscellanousOnlineBean().setStudentName(student_name);
				getChaudharyMiscellanousOnlineBean().setMobileNo(String.valueOf(mobile_no));
				getChaudharyMiscellanousOnlineBean().setClasss(class_name);
				getChaudharyMiscellanousOnlineBean().setFatherName(father_name);
				getChaudharyMiscellanousOnlineBean().setPurpose(purpose_details);
				getChaudharyMiscellanousOnlineBean().setReEnterFeePurpose(reenterfee_purpose);
				getChaudharyMiscellanousOnlineBean().setFeesAmount(String.valueOf(fees_amount));
				getChaudharyMiscellanousOnlineBean().setLateFee(String.valueOf(late_fee));
				getChaudharyMiscellanousOnlineBean().setOtherFees(String.valueOf(other_fees));
				getChaudharyMiscellanousOnlineBean().setAddress(address_details);
				getChaudharyMiscellanousOnlineBean().setTotalfees(String.valueOf(total_fees));

				getChaudharyMiscellanousOnlineBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getChaudharyMiscellanousOnlineBean());
				// END For Form Engine insertion
				String responseString = studentRegistrationService
						.insertChaudharyMiscellanouStudentDetails(getChaudharyMiscellanousOnlineBean(), billerId);
				logger.info("Luci Registration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "ChaduryMiscellanousfailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "ChaduryMiscellanousfailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getChaudharyMiscellanousOnlineBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getChaudharyMiscellanousOnlineBean().getTotalfees());
				studentRegistrationFormBean.setStudentId(getChaudharyMiscellanousOnlineBean().getApplicationNo());

				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getChaudharyMiscellanousOnlineBean().getStudentRegistrationId());
				logger.info("Luci Registration--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);
				getUserSessionMap().put("APPDATA", getAppData1());
			} else {
				addActionMessage("Amount Mismatched.");
				return "ChaduryMiscellanousfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String royalDentalRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getRoyalDentalOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getRoyalDentalOnlineFormBean().getTotalAmount(),
					getRoyalDentalOnlineFormBean().getPayment())) {
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);
				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				// Getters atarted...
				stdetails.put("studentname", getRoyalDentalOnlineFormBean().getStudentName());
				stdetails.put("admissionno", getRoyalDentalOnlineFormBean().getAdmissionNo());
				stdetails.put("fathername",
						!StringUtils.isBlank(getRoyalDentalOnlineFormBean().getFatherName())
								? getRoyalDentalOnlineFormBean().getFatherName()
								: " ");
				stdetails.put("city",
						!StringUtils.isBlank(getRoyalDentalOnlineFormBean().getCity())
								? getRoyalDentalOnlineFormBean().getCity()
								: " ");
				stdetails.put("state",
						!StringUtils.isBlank(getRoyalDentalOnlineFormBean().getState())
								? getRoyalDentalOnlineFormBean().getState()
								: " ");
				stdetails.put("mobileno", Long.parseLong(getRoyalDentalOnlineFormBean().getMobileNO()));
				stdetails.put("email", getRoyalDentalOnlineFormBean().getEmail());
				stdetails.put("branchname", getRoyalDentalOnlineFormBean().getBranchName());
				stdetails.put("academicyear", getRoyalDentalOnlineFormBean().getAcademicYear());
				stdetails.put("coursename", getRoyalDentalOnlineFormBean().getCourseName());
				stdetails.put("feetype", getRoyalDentalOnlineFormBean().getFeeType());
				stdetails.put("remarks",
						!StringUtils.isBlank(getRoyalDentalOnlineFormBean().getRemarks())
								? getRoyalDentalOnlineFormBean().getRemarks()
								: " ");
				stdetails.put("totalamount", Double.parseDouble(getRoyalDentalOnlineFormBean().getTotalAmount()));
				stdetails.put("payment_details", Double.parseDouble(getRoyalDentalOnlineFormBean().getTotalAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getRoyalDentalOnlineFormBean().getTotalAmount()));

				// Calling API...
				/*
				 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
				 * String jsonString1 = obMapper.writeValueAsString(objNode);
				 * logger.info("jsonString1" + jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE); Response
				 * response = invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */

				// API Response status verification ...

				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "royalDentalfailure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				// JSONArray jsonArray = jsonObject.getJSONArray("message");

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");
				String studentname = dataobj.getString("studentname");
				String admissionno = dataobj.getString("admissionno");
				String fathername = dataobj.getString("fathername");
				String city = dataobj.getString("city");
				String state = dataobj.getString("state");
				Long mobileno = dataobj.getLong("mobileno");
				String email = dataobj.getString("email");
				String branchname = dataobj.getString("branchname");
				String academicyear = dataobj.getString("academicyear");
				String coursename = dataobj.getString("coursename");
				String feetype = dataobj.getString("feetype");
				String remarks = dataobj.getString("remarks");
				int totalamount = dataobj.getInt("totalamount");

				// Calling all Setter methods
				getRoyalDentalOnlineFormBean().setStudentName(studentname);
				getRoyalDentalOnlineFormBean().setAdmissionNo(admissionno);
				getRoyalDentalOnlineFormBean().setFatherName(fathername);
				getRoyalDentalOnlineFormBean().setCity(city);
				getRoyalDentalOnlineFormBean().setState(state);
				getRoyalDentalOnlineFormBean().setMobileNO(String.valueOf(mobileno));
				getRoyalDentalOnlineFormBean().setEmail(email);
				getRoyalDentalOnlineFormBean().setBranchName(branchname);
				getRoyalDentalOnlineFormBean().setAcademicYear(academicyear);
				getRoyalDentalOnlineFormBean().setCourseName(coursename);
				getRoyalDentalOnlineFormBean().setFeeType(feetype);
				getRoyalDentalOnlineFormBean().setRemarks(remarks);
				getRoyalDentalOnlineFormBean().setTotalAmount(String.valueOf(totalamount));

				getRoyalDentalOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getRoyalDentalOnlineFormBean());

				String responseString = studentRegistrationService
						.insertRoyalDentalStudentDetails(getRoyalDentalOnlineFormBean(), billerId);
				logger.info("Royal Dental: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "royalDentalfailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "royalDentalfailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getRoyalDentalOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getRoyalDentalOnlineFormBean().getTotalAmount());
				studentRegistrationFormBean.setStudentId(getRoyalDentalOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getRoyalDentalOnlineFormBean().getStudentRegistrationId());
				logger.info("Royal Dental Registration--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "royalDentalfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String vishalInstitueRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getVishalInstOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			getAppData().setStrID("TEST");
			if (AmountValidation(getVishalInstOnlineFormBean().getTotalFee(),
					getVishalInstOnlineFormBean().getPayment())) { // 3661 Vishal Online form Implememtation started
																	// Start For Form Engine insertion

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();
				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				stdetails.put("student_name", getVishalInstOnlineFormBean().getStudentName());
				stdetails.put("father_name", getVishalInstOnlineFormBean().getFatherName());
				stdetails.put("temporary_id", getVishalInstOnlineFormBean().getTemporaryId());
				stdetails.put("mobile_no", Long.parseLong(getVishalInstOnlineFormBean().getMobileNO()));
				stdetails.put("total_fee", Double.parseDouble(getVishalInstOnlineFormBean().getTotalFee()));
				stdetails.put("txn_amt", Double.parseDouble(getVishalInstOnlineFormBean().getTotalFee()));

				stdetails.put("payment_details", Double.parseDouble(getVishalInstOnlineFormBean().getTotalFee()));
				stdetails.put("registered_userId", registeredUserId);

				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getVishalInstOnlineFormBean().getTotalFee()));

				/*
				 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
				 * 
				 * String jsonString1=obMapper.writeValueAsString(objNode);
				 * 
				 * logger.info("jsonString1"+jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();

				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "vishalInstitutefaliure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				// JSONArray jsonArray = jsonObject.getJSONArray("message");
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String student_name = dataobj.getString("student_name");
				String father_name = dataobj.getString("father_name");

				String temporary_id = dataobj.getString("temporary_id");
				int total_fee = dataobj.getInt("total_fee");
				Long mobile_number = dataobj.getLong("mobile_no");
				int txn_amt = dataobj.getInt("txn_amt");

				getVishalInstOnlineFormBean().setStudentName(student_name);
				getVishalInstOnlineFormBean().setFatherName(father_name);
				getVishalInstOnlineFormBean().setTemporaryId(temporary_id);
				getVishalInstOnlineFormBean().setMobileNO(String.valueOf(mobile_number));
				getVishalInstOnlineFormBean().setTotalFee(String.valueOf(total_fee));
				getVishalInstOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getVishalInstOnlineFormBean());
				// END For Form Engine insertion
				String responseString = studentRegistrationService
						.insertVishalInstituteStudentDetails(getVishalInstOnlineFormBean(), billerId);
				logger.info("Vishal Institute: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "vishalInstitutefaliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "vishalInstitutefaliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getVishalInstOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getVishalInstOnlineFormBean().getTotalFee());
				studentRegistrationFormBean.setStudentId(getVishalInstOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getVishalInstOnlineFormBean().getStudentRegistrationId());
				logger.info("Vishal Institute Registration--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "vishalInstitutefaliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String lancersSchoolRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getLancersOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			// getAppData().setStrID("TEST"); //need to clarify
			if (AmountValidation(getLancersOnlineFormBean().getAmount(), getLancersOnlineFormBean().getPayment())) {

				// 3877 Lancer Online form Implememtation started
				// Start For Form Engine insertion

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());

				ObjectNode stdetails = obMapper.createObjectNode();
				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				Date date1 = sdf.parse(getLancersOnlineFormBean().getDateOfBirth());

				stdetails.put("applicant_name", getLancersOnlineFormBean().getName());
				stdetails.put("father_name",
						getLancersOnlineFormBean().getFatherName() != "" ? getLancersOnlineFormBean().getFatherName()
								: " ");
				stdetails.put("mother_name",
						getLancersOnlineFormBean().getMotherName() != "" ? getLancersOnlineFormBean().getMotherName()
								: " ");

				stdetails.put("dateof_birth", formatter.format(date1));
				stdetails.put("gender_details", getLancersOnlineFormBean().getGender());
				stdetails.put("mobile_no", Long.parseLong(getLancersOnlineFormBean().getMobileNo()));

				stdetails.put("permanent_address",
						getLancersOnlineFormBean().getPermanentAddress() != ""
								? getLancersOnlineFormBean().getPermanentAddress()
								: "  ");
				stdetails.put("current_address",
						getLancersOnlineFormBean().getCurrentAddress() != ""
								? getLancersOnlineFormBean().getCurrentAddress()
								: "  ");
				stdetails.put("nationality_details", getLancersOnlineFormBean().getNationality());

				stdetails.put("desired_grade", getLancersOnlineFormBean().getDesiredGrade());
				stdetails.put("session_details", getLancersOnlineFormBean().getSession());
				stdetails.put("oci_passport", getLancersOnlineFormBean().getOciPassport());

				stdetails.put("other_info",
						getLancersOnlineFormBean().getOtherInfo() != "" ? getLancersOnlineFormBean().getOtherInfo()
								: " ");
				stdetails.put("txn_amt", Double.parseDouble(getLancersOnlineFormBean().getAmount()));

				stdetails.put("amount_details", Double.parseDouble(getLancersOnlineFormBean().getAmount()));
				stdetails.put("payment_details", Double.parseDouble(getLancersOnlineFormBean().getAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getLancersOnlineFormBean().getAmount()));

				/*
				 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
				 * 
				 * String jsonString1=obMapper.writeValueAsString(objNode);
				 * 
				 * logger.info("jsonString1"+jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "lancersSchoolfaliure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				// JSONArray jsonArray = jsonObject.getJSONArray("message");
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String applicant_name = dataobj.getString("applicant_name");

				String father_name = dataobj.getString("father_name");

				String mother_name = dataobj.getString("mother_name");

				String dateof_birth = dataobj.getString("dateof_birth");

				String gender_details = dataobj.getString("gender_details");

				Long mobile_no = dataobj.getLong("mobile_no");

				String permanent_address = dataobj.getString("permanent_address");

				String current_address = dataobj.getString("current_address");

				String nationality_details = dataobj.getString("nationality_details");

				String desired_grade = dataobj.getString("desired_grade");

				String session_details = dataobj.getString("session_details");

				String oci_passport = dataobj.getString("oci_passport");

				String other_info = dataobj.getString("other_info");

				int amount_details = dataobj.getInt("amount_details");
				int txn_amt = dataobj.getInt("txn_amt");

				getLancersOnlineFormBean().setName(applicant_name);
				getLancersOnlineFormBean().setFatherName(father_name);
				getLancersOnlineFormBean().setMotherName(mother_name);
				getLancersOnlineFormBean().setFatherName(father_name);

				getLancersOnlineFormBean().setDateOfBirth(getLancersOnlineFormBean().getDateOfBirth());
				getLancersOnlineFormBean().setGender(gender_details);
				getLancersOnlineFormBean().setMobileNo(String.valueOf(mobile_no));
				getLancersOnlineFormBean().setPermanentAddress(permanent_address);

				getLancersOnlineFormBean().setCurrentAddress(current_address);
				getLancersOnlineFormBean().setNationality(nationality_details);
				getLancersOnlineFormBean().setDesiredGrade(desired_grade);
				getLancersOnlineFormBean().setSession(session_details);

				getLancersOnlineFormBean().setOciPassport(oci_passport);
				getLancersOnlineFormBean().setOtherInfo(other_info);

				getLancersOnlineFormBean().setAmount(String.valueOf(txn_amt));
				getLancersOnlineFormBean().setApplicationNo(formId);
				// END For Form Engine insertion

				// 5712 DronacharayaGOI Online form Implementation end
				getUserSessionMap().put("ONLINEFORMDATA", getLancersOnlineFormBean());
				String responseString = studentRegistrationService
						.insertLancersSchoolStudentDetails(getLancersOnlineFormBean(), billerId);
				logger.info("Lancers International School Registration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "lancersSchoolfaliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "lancersSchoolfaliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getLancersOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getLancersOnlineFormBean().getAmount());
				studentRegistrationFormBean.setStudentId(getLancersOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getLancersOnlineFormBean().getStudentRegistrationId());
				logger.info("Lancers International School Registration--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "lancersSchoolfaliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String dpsBudgamRegistration()
	{				if (!super.isValidSession()) {
	  return INVALID_SESSION;
	}
	try{
		logger.info("---------------------------------------------------------");
	  logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
	  logger.info("---------------------------------------------------------");       
	  String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
	  String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
	  logger.info("registeredUserId.."+registeredUserId);
	  getDpsBudgamOnlineFormBean().setRegisteredUserId(registeredUserId);
	  StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
	 // getAppData().setStrID("TEST"); //need to clarify
	  if(AmountValidation(getDpsBudgamOnlineFormBean().getAmount(),getDpsBudgamOnlineFormBean().getPayment()))
	  {
		  //------------DPSBUDGAM Form Engine start
		//Object Node declaration
		  ObjectMapper obMapper = new ObjectMapper();
		  ObjectNode objNode = obMapper.createObjectNode();
		  InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

		  //Object Node declaration
		  objNode.put("application_id", "SMARTHUB");
		  objNode.put("form_name",instituteFormDetailsBean.getInstituteCode());
		  objNode.put("context_id",instituteFormDetailsBean.getMerchantID());
		  ObjectNode stdetails = obMapper.createObjectNode();
		  
		  SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
			Date date = new Date();  
			  
			SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
			Date date1 = sdf.parse(getDpsBudgamOnlineFormBean().getDateOfBirth());
			
		  //Getters atarted...
		  stdetails.put("admission_no", getDpsBudgamOnlineFormBean().getAdmissionNo());
		  stdetails.put("student_name", getDpsBudgamOnlineFormBean().getStudentName());
		  stdetails.put("parent_age", Long.parseLong(getDpsBudgamOnlineFormBean().getParentAge()));
		  stdetails.put("dateof_birth", formatter.format(date1));
		  stdetails.put("class_text", getDpsBudgamOnlineFormBean().getClassText());
		  stdetails.put("mobile_no", Long.parseLong(getDpsBudgamOnlineFormBean().getMobileNo()));
		  stdetails.put("email_id", getDpsBudgamOnlineFormBean().getEmailId());
		  stdetails.put("fee_heads", getDpsBudgamOnlineFormBean().getFeeHeads());
		  stdetails.put("amount_details", Double.parseDouble(getDpsBudgamOnlineFormBean().getAmount()));
		  
	    stdetails.put("txn_amt",Double.parseDouble(getDpsBudgamOnlineFormBean().getAmount()));
		stdetails.put("payment_details",Double.parseDouble(getDpsBudgamOnlineFormBean().getAmount()));
		stdetails.put("registered_userId",registeredUserId);
		stdetails.put("student_registrationid","0");
		stdetails.put("application_no","0");
		stdetails.put("recon_date",formatter.format(date));
		stdetails.put("r_cre_time",formatter.format(date));
		stdetails.put("r_mod_time",formatter.format(date));
		stdetails.put("pg_pmt_status","A");
		stdetails.put("Acc_Holder_Name"," ");
		stdetails.put("Res_Msg"," ");
		stdetails.put("Payment_Mode"," ");
		stdetails.put("Bank_Name"," ");
		stdetails.put("ALT_ERROR_DESC"," ");
		stdetails.put("Pmt_Id","");
		stdetails.put("Payment_id","");
		stdetails.put("PGTxnID","");
		stdetails.put("BANK_ID","");
		stdetails.put("Txn_Amt",Double.parseDouble(getDpsBudgamOnlineFormBean().getAmount()));
		  //Calling API...
		objNode.put("form_data",stdetails);

		String jsonString1=obMapper.writeValueAsString(objNode);

		logger.info("jsonString1"+jsonString1.toString());
		
		//code added by priya 
		
		/*** *** *** Initialization start *** *** ***/
		SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

		secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
		secureAPIBuilder.setUpstreamServerPort(443);

		secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
		secureAPIBuilder.setVerifyServerSSL(false);

		String clientId = "actual-smarthub-node-ip";
		String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

		secureAPIBuilder.setAuthenticationAlias(clientId);

		byte[] clientKey = hexStringToByteArray(clientKeyStr);
		secureAPIBuilder.setAuthenticationKey(clientKey);

		SecureAPIConnection secureAPI = secureAPIBuilder.build();
		/*** *** *** Initialization complete *** *** ***/

       //CODE END 
		  
		  Client client = ClientBuilder.newClient();
			/*
			 * WebTarget webTarget =
			 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
			 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
			 * invocationBuilder =
			 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE); Response
			 * response = invocationBuilder.post(Entity.json(jsonString1.toString()));
			 * logger.info("response" + response.toString());
			 */
		  //API Response status verification ...
		  
		    APIResponse apiResponse = null;

			
			apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

			System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: " + apiResponse.getResponseCode());

			String responseBody = apiResponse.getData().toString();
			
			logger.info("response" + apiResponse.toString());
		  if (apiResponse.getResponseCode() != 201)
		  {
		  String outputError = apiResponse.getData().toString();
		  JSONObject json = new JSONObject(outputError);
		  
		  String messageerror = json.getString("message");
		  logger.info("messageerror"+messageerror);
		  addActionMessage(messageerror);
		  return "DpsBudgamfailure";
		  }

		  logger.info("Output from Server...");
		  String output = apiResponse.getData().toString();
		  JSONObject json = new JSONObject(output);
		  JSONObject data1= json.getJSONObject("data");
		  String formId = data1.getString("form_id");
		  logger.info("formId"+formId);

		  getUserSessionMap().put("application_id", "SMARTHUB");
		  getUserSessionMap().put("form_name",instituteFormDetailsBean.getInstituteCode());
		  getUserSessionMap().put("context_id",instituteFormDetailsBean.getMerchantID());
		  getUserSessionMap().put("form_id",formId);

		  SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
		  smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
		  smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
		  smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
		  smartHubFetchOnlineFormBean.setForm_id(formId);
		  String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

		  //Pusing data to template ...
		  logger.info("jsonString2"+ jsonString2 );
			/*
			 * WebTarget webTarget1 =
			 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
			 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
			 * Invocation.Builder invocationBuilder1 =
			 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
			 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
			 * logger.info("responseString", response1.toString());
			 */
		  
		//code added by priya form engine
			APIResponse apiResponse1 = null;

			
			apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

			System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: " + apiResponse1.getResponseCode());

				

			logger.info("responseString", apiResponse1.toString());
		  if (apiResponse1.getResponseCode() != 200)
		  {
		  throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
		  }
		  logger.info("Output from Server...."); 
		  String output1 = apiResponse1.getData().toString(); 
		  logger.info("output1" + output1);
		  JSONObject jsonObject = new JSONObject(output1);
		  //JSONArray jsonArray = jsonObject.getJSONArray("message"); 

			JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
		    logger.info("jsonArray"+jsonArray);

			JSONObject data=jsonArray.getJSONObject(0);
			JSONObject dataobj=data.getJSONObject("form_data");
		  String admission_no = dataobj.getString("admission_no");
		  String student_name = dataobj.getString("student_name");
		  int parent_age = dataobj.getInt("parent_age");
		  String dateof_birth = dataobj.getString("dateof_birth");
		  String class_text = dataobj.getString("class_text");
		  Long mobile_no = dataobj.getLong("mobile_no");
		  String email_id = dataobj.getString("email_id");
		  String fee_heads = dataobj.getString("fee_heads");
		  int amount_details = dataobj.getInt("amount_details");
		  

		  //Calling all Setter methods
		  getDpsBudgamOnlineFormBean().setAdmissionNo(admission_no);
		  getDpsBudgamOnlineFormBean().setStudentName(student_name);
		  getDpsBudgamOnlineFormBean().setParentAge(String.valueOf(parent_age));
		  getDpsBudgamOnlineFormBean().setDateOfBirth(dateof_birth);
		  getDpsBudgamOnlineFormBean().setClassText(class_text);
		  getDpsBudgamOnlineFormBean().setMobileNo(String.valueOf(mobile_no));
		  getDpsBudgamOnlineFormBean().setEmailId(email_id);
		  getDpsBudgamOnlineFormBean().setFeeHeads(fee_heads);
		  getDpsBudgamOnlineFormBean().setAmount(String.valueOf(amount_details));
		  

		  getDpsBudgamOnlineFormBean().setApplicationNo(formId);
		  getUserSessionMap().put("ONLINEFORMDATA", getDpsBudgamOnlineFormBean());


		  //-----END-------DPSBUDGAM Form Engine start
	  	String responseString = studentRegistrationService.insertdpsBudgamDetails(getDpsBudgamOnlineFormBean(),billerId);
	  	logger.info("Delhi Public School Budgam Registration: "+responseString);
	  	
	  	if (responseString != null && !"".equalsIgnoreCase(responseString) && "success".equalsIgnoreCase(responseString)) {
	          addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
	      }else if ("NA".equalsIgnoreCase(responseString)){
	      	addActionMessage("Failed to add student data.");
	     	return "dpsBudgamfaliure";
	      }else {         
	      	addActionMessage("Error occured contact administrator.");
	          return "dpsBudgamfaliure";
	      }

	  	 studentRegistrationFormBean = super.getRegisteredStudentDetails(getDpsBudgamOnlineFormBean().getStudentRegistrationId());
	       studentRegistrationFormBean.setTotalPayableFees(getDpsBudgamOnlineFormBean().getAmount());
	       studentRegistrationFormBean.setStudentId(getDpsBudgamOnlineFormBean().getApplicationNo());	               
	       super.applyFees(studentRegistrationFormBean);

	       QuickPayAction quickPayAction = new QuickPayAction();
	       appData1 = new PaymentRequestBean();
	       appData1.setStudentRegistrationId(getDpsBudgamOnlineFormBean().getStudentRegistrationId());            
	       logger.info( "Delhi Public School Budgam Registration--feesPayList :: "+ feesPayList);
	       quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean,feesPayList);
	 
	       getUserSessionMap().put("APPDATA", getAppData1()); 
	       
	  }
	  else{
	   	addActionMessage("Amount Mismatched.");
	   	return "dpsBudgamfaliure";
	   }
	}catch(Exception e)
	{
		logger.error("Exception  " +e);
	  return ERROR;
		
	}
	return SUCCESS;
	}

	public String krishnaLawRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getKrishnaLawOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			// getAppData().setStrID("TEST"); //need to clarify
			if (AmountValidation(getKrishnaLawOnlineFormBean().getAmount(),
					getKrishnaLawOnlineFormBean().getPayment())) {
				// ------KRishna Online form Engine start
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				Date date1 = sdf.parse(getKrishnaLawOnlineFormBean().getDateOfBirth());

				// Getters atarted...

				stdetails.put("student_firstname", getKrishnaLawOnlineFormBean().getStudentFirstName());
				if (getKrishnaLawOnlineFormBean().getStudentMiddleName() != "") {
					stdetails.put("student_middlename", getKrishnaLawOnlineFormBean().getStudentMiddleName());
				} else {
					stdetails.put("student_middlename", " ");
				}
				if (getKrishnaLawOnlineFormBean().getStudentMiddleName() != "") {
					stdetails.put("student_lastname", getKrishnaLawOnlineFormBean().getStudentLastName());
				} else {
					stdetails.put("student_lastname", " ");
				}
				if (getKrishnaLawOnlineFormBean().getFatherFirstName() != "") {

					stdetails.put("father_firstname", getKrishnaLawOnlineFormBean().getFatherFirstName());

				} else {

					stdetails.put("father_firstname", " ");
				}
				if (getKrishnaLawOnlineFormBean().getStudentMiddleName() != "") {
					stdetails.put("father_middlename", getKrishnaLawOnlineFormBean().getFatherMiddleName());
				} else {

					stdetails.put("father_middlename", " ");
				}
				if (getKrishnaLawOnlineFormBean().getStudentMiddleName() != "") {
					stdetails.put("father_lastname", getKrishnaLawOnlineFormBean().getFatherLastName());
				} else {

					stdetails.put("father_lastname", " ");
				}
				stdetails.put("dateof_birth", formatter.format(date1));
				if (getKrishnaLawOnlineFormBean().getEnrollNo() != null) {
					stdetails.put("enroll_no", getKrishnaLawOnlineFormBean().getEnrollNo());
				} else {

					stdetails.put("enroll_no", " ");
				}
				stdetails.put("course_name", getKrishnaLawOnlineFormBean().getCourse());
				stdetails.put("semester_details", getKrishnaLawOnlineFormBean().getSemester());
				stdetails.put("email_id", getKrishnaLawOnlineFormBean().getEmailId());
				stdetails.put("mobile_no", Long.parseLong(getKrishnaLawOnlineFormBean().getMobileNo()));
				stdetails.put("fee_type", getKrishnaLawOnlineFormBean().getFeeType());
				stdetails.put("amount_details", Double.parseDouble(getKrishnaLawOnlineFormBean().getAmount()));

				stdetails.put("txn_amt", Double.parseDouble(getKrishnaLawOnlineFormBean().getAmount()));
				stdetails.put("payment_details", Double.parseDouble(getKrishnaLawOnlineFormBean().getAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getKrishnaLawOnlineFormBean().getAmount()));

				// Calling API...
				/*
				 * objNode.put("data", stdetails); String jsonString1 =
				 * obMapper.writeValueAsString(objNode); logger.info("jsonString1" +
				 * jsonString1.toString());
				 */

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response//commented by priya for form engine response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */

				// API Response status verification ...

				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "krishnaLawfaliure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response response1 =
				 * invocationBuilder1.post(Entity.json(jsonString2));//commented by priya for
				 * form engine logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);
				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String student_firstname = dataobj.getString("student_firstname");
				String student_middlename = dataobj.getString("student_middlename");
				String student_lastname = dataobj.getString("student_lastname");
				String dateof_birth = dataobj.getString("dateof_birth");
				String enroll_no = dataobj.getString("enroll_no");
				String father_firstname = dataobj.getString("father_firstname");
				String father_middlename = dataobj.getString("father_middlename");
				String father_lastname = dataobj.getString("father_lastname");
				String course_name = dataobj.getString("course_name");
				String semester_details = dataobj.getString("semester_details");
				String email_id = dataobj.getString("email_id");
				int mobile_no = dataobj.getInt("mobile_no");
				String fee_type = dataobj.getString("fee_type");
				int amount_details = dataobj.getInt("amount_details");

				// Calling all Setter methods
				getKrishnaLawOnlineFormBean().setStudentFirstName(student_firstname);
				getKrishnaLawOnlineFormBean().setStudentMiddleName(student_middlename);
				getKrishnaLawOnlineFormBean().setStudentLastName(student_lastname);
				getKrishnaLawOnlineFormBean().setFatherFirstName(father_firstname);
				getKrishnaLawOnlineFormBean().setFatherMiddleName(father_middlename);
				getKrishnaLawOnlineFormBean().setFatherLastName(father_lastname);
				getKrishnaLawOnlineFormBean().setDateOfBirth(getKrishnaLawOnlineFormBean().getDateOfBirth());
				getKrishnaLawOnlineFormBean().setEnrollNo(enroll_no);
				getKrishnaLawOnlineFormBean().setCourse(course_name);
				getKrishnaLawOnlineFormBean().setSemester(semester_details);
				getKrishnaLawOnlineFormBean().setEmailId(email_id);
				getKrishnaLawOnlineFormBean().setMobileNo(getKrishnaLawOnlineFormBean().getMobileNo());
				getKrishnaLawOnlineFormBean().setFeeType(fee_type);
				getKrishnaLawOnlineFormBean().setAmount(String.valueOf(amount_details));

				getKrishnaLawOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getKrishnaLawOnlineFormBean());

				// ---End---KRishna Online form Engine start
				String responseString = studentRegistrationService
						.insertKrishnaLawStudentDetails(getKrishnaLawOnlineFormBean(), billerId);
				logger.info("KRISHNA INSTITUTE OF LAW Registration: " + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "krishnaLawfaliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "krishnaLawfaliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getKrishnaLawOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getKrishnaLawOnlineFormBean().getAmount());
				studentRegistrationFormBean.setStudentId(getKrishnaLawOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getKrishnaLawOnlineFormBean().getStudentRegistrationId());
				logger.info("KRISHNA INSTITUTE OF LAW Registration--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "krishnaLawfaliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String biyaniRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getBiyaniOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			// getAppData().setStrID("TEST"); //need to clarify
			if (AmountValidation(getBiyaniOnlineFormBean().getTotalAmount(), getBiyaniOnlineFormBean().getPayment())) {
				// --------Biyani Online form data
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				Date date1 = sdf.parse(getBiyaniOnlineFormBean().getDateOfBirth());

				// Getters atarted...
				stdetails.put("fee_type", getBiyaniOnlineFormBean().getFeeType());
				stdetails.put("city_name", getBiyaniOnlineFormBean().getCity());
				stdetails.put("state_name", getBiyaniOnlineFormBean().getState());
				stdetails.put("nameof_student", getBiyaniOnlineFormBean().getNameOfStudent());
				stdetails.put("dateof_birth", formatter.format(date1));
				stdetails.put("nationality_details", getBiyaniOnlineFormBean().getNationality());
				stdetails.put("category_name", getBiyaniOnlineFormBean().getCategory());
				stdetails.put("address_details", getBiyaniOnlineFormBean().getAddress());
				stdetails.put("email_id", getBiyaniOnlineFormBean().getEmailId());
				stdetails.put("phone_no", Long.parseLong(getBiyaniOnlineFormBean().getPhoneNo()));
				stdetails.put("father_name", getBiyaniOnlineFormBean().getFatherName());
				stdetails.put("father_contactno", Long.parseLong(getBiyaniOnlineFormBean().getFatherContactNo()));
				stdetails.put("mother_name", getBiyaniOnlineFormBean().getMotherName());
				if (getBiyaniOnlineFormBean().getLocalGardianName() != "") {
					stdetails.put("localgardian_name", getBiyaniOnlineFormBean().getLocalGardianName());
				} else {

					stdetails.put("localgardian_name", " ");
				}
				stdetails.put("lastqualifying_exam", getBiyaniOnlineFormBean().getLastQualifyingExam());
				stdetails.put("remark_details", getBiyaniOnlineFormBean().getRemark());
				stdetails.put("percentagelast_exam",
						Double.parseDouble(getBiyaniOnlineFormBean().getPercentageLastExam()));
				stdetails.put("course_name", getBiyaniOnlineFormBean().getCourse());
				stdetails.put("accomodation_details", getBiyaniOnlineFormBean().getAccomodation());
				stdetails.put("total_amount", Double.parseDouble(getBiyaniOnlineFormBean().getTotalAmount()));

				stdetails.put("txn_amt", Double.parseDouble(getBiyaniOnlineFormBean().getTotalAmount()));
				stdetails.put("payment_details", Double.parseDouble(getBiyaniOnlineFormBean().getTotalAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getBiyaniOnlineFormBean().getTotalAmount()));
				// Calling API...
				/*
				 * objNode.put("data", stdetails); String jsonString1 =
				 * obMapper.writeValueAsString(objNode); logger.info("jsonString1" +
				 * jsonString1.toString());
				 */

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();

				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response//commented by priya for form engine response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */

				// API Response status verification ...

				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "Biyanifaliure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine Response response1 =
				 * invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String nameof_student = dataobj.getString("nameof_student");
				String dateof_birth = dataobj.getString("dateof_birth");
				String fee_type = dataobj.getString("fee_type");
				String city_name = dataobj.getString("city_name");
				String state_name = dataobj.getString("state_name");
				String nationality_details = dataobj.getString("nationality_details");
				String category_name = dataobj.getString("category_name");
				String address_details = dataobj.getString("address_details");
				String email_id = dataobj.getString("email_id");
				int phone_no = dataobj.getInt("phone_no");
				String father_name = dataobj.getString("father_name");
				int father_contactno = dataobj.getInt("father_contactno");
				String mother_name = dataobj.getString("mother_name");
				String localgardian_name = dataobj.getString("localgardian_name");
				String lastqualifying_exam = dataobj.getString("lastqualifying_exam");
				String remark_details = dataobj.getString("remark_details");
				int percentagelast_exam = dataobj.getInt("percentagelast_exam");
				String course_name = dataobj.getString("course_name");
				String accomodation_details = dataobj.getString("accomodation_details");
				int total_amount = dataobj.getInt("total_amount");

				// Calling all Setter methods
				getBiyaniOnlineFormBean().setFeeType(fee_type);
				getBiyaniOnlineFormBean().setCity(city_name);
				getBiyaniOnlineFormBean().setState(state_name);
				getBiyaniOnlineFormBean().setNameOfStudent(nameof_student);
				getBiyaniOnlineFormBean().setDateOfBirth(getBiyaniOnlineFormBean().getDateOfBirth());
				getBiyaniOnlineFormBean().setNationality(nationality_details);
				getBiyaniOnlineFormBean().setCategory(category_name);
				getBiyaniOnlineFormBean().setAddress(address_details);
				getBiyaniOnlineFormBean().setEmailId(email_id);
				getBiyaniOnlineFormBean().setPhoneNo(getBiyaniOnlineFormBean().getPhoneNo());
				getBiyaniOnlineFormBean().setFatherName(father_name);
				getBiyaniOnlineFormBean().setFatherContactNo(getBiyaniOnlineFormBean().getFatherContactNo());
				getBiyaniOnlineFormBean().setMotherName(mother_name);
				getBiyaniOnlineFormBean().setLocalGardianName(localgardian_name);
				getBiyaniOnlineFormBean().setLastQualifyingExam(lastqualifying_exam);
				getBiyaniOnlineFormBean().setRemark(remark_details);
				getBiyaniOnlineFormBean().setPercentageLastExam(String.valueOf(percentagelast_exam));
				getBiyaniOnlineFormBean().setCourse(course_name);
				getBiyaniOnlineFormBean().setAccomodation(accomodation_details);
				getBiyaniOnlineFormBean().setTotalAmount(String.valueOf(total_amount));

				getBiyaniOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getBiyaniOnlineFormBean());

				// ---END-----Biyani Online form data
				String responseString = studentRegistrationService.insertBiyaniStudentDetails(getBiyaniOnlineFormBean(),
						billerId);
				logger.info("Biyani Shikshan Samiti:" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "Biyanifaliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "Biyanifaliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getBiyaniOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getBiyaniOnlineFormBean().getTotalAmount());
				studentRegistrationFormBean.setStudentId(getBiyaniOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getBiyaniOnlineFormBean().getStudentRegistrationId());
				logger.info("Biyani Shikshan Samiti--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "Biyanifaliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String kulluRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getKulluOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			// getAppData().setStrID("TEST"); //need to clarify
			if (AmountValidation(getKulluOnlineFormBean().getTotalAmount(), getKulluOnlineFormBean().getPayment())) {
				// -------Kullu Onlie form engine start
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				Date date1 = sdf.parse(getKulluOnlineFormBean().getDepositeDate());
				// Getters atarted...
				stdetails.put("student_name", getKulluOnlineFormBean().getStudentName());
				stdetails.put("fathers_name", getKulluOnlineFormBean().getFathersName());
				stdetails.put("roll_no", getKulluOnlineFormBean().getRollNo());
				stdetails.put("mobile_no", Long.parseLong(getKulluOnlineFormBean().getMobileNo()));
				stdetails.put("email_id", getKulluOnlineFormBean().getEmailId());
				stdetails.put("course_name", getKulluOnlineFormBean().getCourse());
				stdetails.put("semester_details", getKulluOnlineFormBean().getSemester());
				stdetails.put("seat_type", getKulluOnlineFormBean().getSeatType());
				stdetails.put("total_amount", Double.parseDouble(getKulluOnlineFormBean().getTotalAmount()));
				stdetails.put("deposite_date", formatter.format(date1));

				stdetails.put("txn_amt", Double.parseDouble(getKulluOnlineFormBean().getTotalAmount()));
				stdetails.put("payment_details", Double.parseDouble(getKulluOnlineFormBean().getTotalAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getKulluOnlineFormBean().getTotalAmount()));
				// Calling API...
				/*
				 * objNode.put("data", stdetails); String jsonString1 =
				 * obMapper.writeValueAsString(objNode); logger.info("jsonString1" +
				 * jsonString1.toString());
				 */

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response//commented by priya for form engine response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */

				// API Response status verification ...
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "Kullufailure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine Response response1 =
				 * invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);
				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String student_name = dataobj.getString("student_name");
				String fathers_name = dataobj.getString("fathers_name");
				String roll_no = dataobj.getString("roll_no");
				int mobile_no = dataobj.getInt("mobile_no");
				String email_id = dataobj.getString("email_id");
				String course_name = dataobj.getString("course_name");
				String semester_details = dataobj.getString("semester_details");
				String seat_type = dataobj.getString("seat_type");
				int total_amount = dataobj.getInt("total_amount");
				String deposite_date = dataobj.getString("deposite_date");

				// Calling all Setter methods
				getKulluOnlineFormBean().setStudentName(student_name);
				getKulluOnlineFormBean().setFathersName(fathers_name);
				getKulluOnlineFormBean().setRollNo(roll_no);
				getKulluOnlineFormBean().setMobileNo(getKulluOnlineFormBean().getMobileNo());
				getKulluOnlineFormBean().setEmailId(email_id);
				getKulluOnlineFormBean().setCourse(course_name);
				getKulluOnlineFormBean().setSemester(semester_details);
				getKulluOnlineFormBean().setSeatType(seat_type);
				getKulluOnlineFormBean().setTotalAmount(String.valueOf(total_amount));
				getKulluOnlineFormBean().setDepositeDate(deposite_date);

				getKulluOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getKulluOnlineFormBean());

				// -END------Kullu Onlie form engine start
				String responseString = studentRegistrationService.insertKulluStudentDetails(getKulluOnlineFormBean(),
						billerId);
				logger.info("Principal Govt College Kullu:" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "Kullufaliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "Kullufaliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getKulluOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getKulluOnlineFormBean().getTotalAmount());
				studentRegistrationFormBean.setStudentId(getKulluOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getKulluOnlineFormBean().getStudentRegistrationId());
				logger.info("Principal Govt College Kullu--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "Kullufaliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String jbciRegistration()

	{
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getJbciOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			// getAppData().setStrID("TEST"); //need to clarify
			if (AmountValidation(getJbciOnlineFormBean().getTotalAmount(), getJbciOnlineFormBean().getPayment()))

			{
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				// Getters atarted...
				stdetails.put("firstname", getJbciOnlineFormBean().getFirstName());
				stdetails.put("lastname", getJbciOnlineFormBean().getLastName());
				stdetails.put("address", getJbciOnlineFormBean().getAddress());
				stdetails.put("city", getJbciOnlineFormBean().getCity());
				stdetails.put("state", getJbciOnlineFormBean().getState());
				stdetails.put("country", getJbciOnlineFormBean().getCountry());
				stdetails.put("emailid", getJbciOnlineFormBean().getEmailId());
				stdetails.put("mobileno", Long.parseLong(getJbciOnlineFormBean().getMobileNo()));
				stdetails.put("registrationno", getJbciOnlineFormBean().getRegistrationNo());
				stdetails.put("eventname", getJbciOnlineFormBean().getEventName());
				stdetails.put("totalamount", Double.parseDouble(getJbciOnlineFormBean().getTotalAmount()));
				stdetails.put("txn_amt", Double.parseDouble(getJbciOnlineFormBean().getTotalAmount()));
				stdetails.put("payment_details", Double.parseDouble(getJbciOnlineFormBean().getTotalAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getJbciOnlineFormBean().getTotalAmount()));

				// Calling API...
				/*
				 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
				 * String jsonString1 = obMapper.writeValueAsString(objNode);
				 * logger.info("jsonString1" + jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE); Response
				 * response = invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				// API Response status verification ...
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "jbcifailure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				// JSONArray jsonArray = jsonObject.getJSONArray("message");
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String firstname = dataobj.getString("firstname");
				String lastname = dataobj.getString("lastname");
				String address = dataobj.getString("address");
				String city = dataobj.getString("city");
				String state = dataobj.getString("state");
				String country = dataobj.getString("country");
				String emailid = dataobj.getString("emailid");
				Long mobileno = dataobj.getLong("mobileno");
				int totalamount = dataobj.getInt("totalamount");
				String eventname = dataobj.getString("eventname");
				String registrationno = dataobj.getString("registrationno");

				// Calling all Setter methods
				getJbciOnlineFormBean().setFirstName(firstname);
				getJbciOnlineFormBean().setLastName(lastname);
				getJbciOnlineFormBean().setAddress(address);
				getJbciOnlineFormBean().setCity(city);
				getJbciOnlineFormBean().setState(state);
				getJbciOnlineFormBean().setCountry(country);
				getJbciOnlineFormBean().setEmailId(emailid);
				getJbciOnlineFormBean().setMobileNo(String.valueOf(mobileno));
				getJbciOnlineFormBean().setRegistrationNo(registrationno);
				getJbciOnlineFormBean().setEventName(eventname);
				getJbciOnlineFormBean().setTotalAmount(String.valueOf(totalamount));

				getJbciOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getJbciOnlineFormBean());

				String responseString = studentRegistrationService.insertJbciStudentDetails(getJbciOnlineFormBean(),
						billerId);
				logger.info("Jaipur Branch of CIRC of ICAI :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add student data.");
					return "jbcifailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "jbcifailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getJbciOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getJbciOnlineFormBean().getTotalAmount());
				studentRegistrationFormBean.setStudentId(getJbciOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getJbciOnlineFormBean().getStudentRegistrationId());
				logger.info("Jaipur Branch of CIRC of ICAI--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "jbcifailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String naiminathRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------naiminathRegistration------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getNaiminathOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			// getAppData().setStrID("TEST"); //need to clarify
			// getAppData().setStrID("TEST"); //need to clarify getFeesAmount
			if (AmountValidation(getNaiminathOnlineFormBean().getFeesAmount(),
					getNaiminathOnlineFormBean().getPayment())) {
				// -----start form engine NaiminathOnlineFormBean
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				// Getters atarted...
				stdetails.put("student_name", getNaiminathOnlineFormBean().getStudentName());
				stdetails.put("aadhaar_cardno", getNaiminathOnlineFormBean().getAadhaarCardNo());
				stdetails.put("mobile_no", Long.parseLong(getNaiminathOnlineFormBean().getMobileNo()));
				if (getNaiminathOnlineFormBean().getEmailId() != "") {
					stdetails.put("email_id", getNaiminathOnlineFormBean().getEmailId());
				} else {

					stdetails.put("email_id", " ");
				}
				stdetails.put("city_name", getNaiminathOnlineFormBean().getCity());
				stdetails.put("state_name", getNaiminathOnlineFormBean().getState());
				stdetails.put("course_name", getNaiminathOnlineFormBean().getCourseName());
				stdetails.put("fees_amount", Double.parseDouble(getNaiminathOnlineFormBean().getFeesAmount()));
				if (getNaiminathOnlineFormBean().getRemarks() != "") {
					stdetails.put("remarks_details", getNaiminathOnlineFormBean().getRemarks());
				} else {
					stdetails.put("remarks_details", " ");
				}

				stdetails.put("txn_amt", Double.parseDouble(getNaiminathOnlineFormBean().getFeesAmount()));
				stdetails.put("payment_details", Double.parseDouble(getNaiminathOnlineFormBean().getFeesAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getNaiminathOnlineFormBean().getFeesAmount()));

				// Calling API...
				// objNode.put("data", stdetails);
				// String jsonString1 = obMapper.writeValueAsString(objNode);
				// logger.info("jsonString1" + jsonString1.toString());

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();
				// WebTarget webTarget =
				// client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/store-form-data");
				// Invocation.Builder invocationBuilder =
				// webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//commented
				// by priya for form engine
				// Response response =
				// invocationBuilder.post(Entity.json(jsonString1.toString()));
				// logger.info("response" + response.toString());

				// API Response status verification ...
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "Naiminathfaliure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);
				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String student_name = dataobj.getString("student_name");
				String aadhaar_cardno = dataobj.getString("aadhaar_cardno");
				int mobile_no = dataobj.getInt("mobile_no");
				String email_id = dataobj.getString("email_id");
				String city_name = dataobj.getString("city_name");
				String state_name = dataobj.getString("state_name");
				String course_name = dataobj.getString("course_name");
				int fees_amount = dataobj.getInt("fees_amount");
				String remarks_details = dataobj.getString("remarks_details");

				// Calling all Setter methods
				getNaiminathOnlineFormBean().setStudentName(student_name);
				getNaiminathOnlineFormBean().setAadhaarCardNo(aadhaar_cardno);
				getNaiminathOnlineFormBean().setMobileNo(getNaiminathOnlineFormBean().getMobileNo());
				getNaiminathOnlineFormBean().setEmailId(email_id);
				getNaiminathOnlineFormBean().setCity(city_name);
				getNaiminathOnlineFormBean().setState(state_name);
				getNaiminathOnlineFormBean().setCourseName(course_name);
				getNaiminathOnlineFormBean().setFeesAmount(String.valueOf(fees_amount));
				getNaiminathOnlineFormBean().setRemarks(remarks_details);

				getNaiminathOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getNaiminathOnlineFormBean());

				// -----end NaiminathOnlineFormBean
				String responseString = studentRegistrationService.insertNaiminathDetails(getNaiminathOnlineFormBean(),
						billerId);
				logger.info("naiminathRegistration :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add Naiminath data.");
					return "Naiminathfaliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "Naiminathfaliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getNaiminathOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getNaiminathOnlineFormBean().getFeesAmount());
				studentRegistrationFormBean.setStudentId(getNaiminathOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getNaiminathOnlineFormBean().getStudentRegistrationId());
				logger.info("Naiminath --feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "Naiminathfaliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String sphSchoolRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------sphSchoolRegistration------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getSphSchoolOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			// getAppData().setStrID("TEST"); //need to clarify
			// getAppData().setStrID("TEST"); //need to clarify getFeesAmount
			if (AmountValidation(getSphSchoolOnlineFormBean().getSchoolFee(),
					getSphSchoolOnlineFormBean().getPayment())) {
				// -------START------SPHSchoolOnlineFormBeanJSON---FORM ENGINE
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();
				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				Date date1 = sdf.parse(getSphSchoolOnlineFormBean().getDate());
				// Getters atarted...
				stdetails.put("admission_no", getSphSchoolOnlineFormBean().getAdmissionNo());
				stdetails.put("student_name", getSphSchoolOnlineFormBean().getStudentName());
				stdetails.put("class_name", getSphSchoolOnlineFormBean().getCclass());
				if (getSphSchoolOnlineFormBean().getSection() != "") {
					stdetails.put("section_details", getSphSchoolOnlineFormBean().getSection());
				} else {
					stdetails.put("section_details", " ");

				}
				stdetails.put("father_name", getSphSchoolOnlineFormBean().getFatherName());
				stdetails.put("date_details", formatter.format(date1));
				stdetails.put("mobile_number", Long.parseLong(getSphSchoolOnlineFormBean().getMobileNumber()));
				stdetails.put("school_fee", Double.parseDouble(getSphSchoolOnlineFormBean().getSchoolFee()));
				if (getSphSchoolOnlineFormBean().getTotalAmount() != "") {
					stdetails.put("total_amount", getSphSchoolOnlineFormBean().getTotalAmount());
				} else {

					stdetails.put("total_amount", " ");
				}

				stdetails.put("txn_amt", Double.parseDouble(getSphSchoolOnlineFormBean().getSchoolFee()));
				stdetails.put("payment_details", Double.parseDouble(getSphSchoolOnlineFormBean().getSchoolFee()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getSphSchoolOnlineFormBean().getSchoolFee()));

				// Calling API...
				/*
				 * objNode.put("data", stdetails); String jsonString1 =
				 * obMapper.writeValueAsString(objNode); logger.info("jsonString1" +
				 * jsonString1.toString());
				 */

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response/commented by priya for form engine response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				// API Response status verification ...
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "SPHSchoolfaliure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine Response response1 =
				 * invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);
				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String admission_no = dataobj.getString("admission_no");
				String student_name = dataobj.getString("student_name");
				String class_name = dataobj.getString("class_name");
				String section_details = dataobj.getString("section_details");
				String father_name = dataobj.getString("father_name");
				String date_details = dataobj.getString("date_details");
				int mobile_number = dataobj.getInt("mobile_number");
				int school_fee = dataobj.getInt("school_fee");

				// Calling all Setter methods
				getSphSchoolOnlineFormBean().setAdmissionNo(admission_no);
				getSphSchoolOnlineFormBean().setStudentName(student_name);
				getSphSchoolOnlineFormBean().setCclass(class_name);
				getSphSchoolOnlineFormBean().setSection(section_details);
				getSphSchoolOnlineFormBean().setFatherName(father_name);
				getSphSchoolOnlineFormBean().setDate(getSphSchoolOnlineFormBean().getDate());
				getSphSchoolOnlineFormBean().setMobileNumber(getSphSchoolOnlineFormBean().getMobileNumber());
				getSphSchoolOnlineFormBean().setSchoolFee(String.valueOf(school_fee));
				getSphSchoolOnlineFormBean().setTotalAmount(getSphSchoolOnlineFormBean().getTotalAmount());

				getSphSchoolOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getSphSchoolOnlineFormBean());

				// -----END
				String responseString = studentRegistrationService.insertSPHSchoolDetails(getSphSchoolOnlineFormBean(),
						billerId);
				logger.info("sphSchoolRegistration :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add SPHSchool data.");
					return "SPHSchoolfaliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "SPHSchoolfaliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getSphSchoolOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getSphSchoolOnlineFormBean().getSchoolFee());
				studentRegistrationFormBean.setStudentId(getSphSchoolOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getSphSchoolOnlineFormBean().getStudentRegistrationId());
				logger.info("SPHSchool --feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "SPHSchoolfaliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String jainSubodhRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------jainSubodhRegistration------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getJainSubodhOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			// getAppData().setStrID("TEST"); //need to clarify
			// getAppData().setStrID("TEST"); //need to clarify getFeesAmount
			if (AmountValidation(getJainSubodhOnlineFormBean().getFeeAmount(),
					getJainSubodhOnlineFormBean().getPayment())) {
				// -------SSJainSubodhOnlineFormBean Form Engine start
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				// Getters atarted...
				stdetails.put("form_no", getJainSubodhOnlineFormBean().getFormNo());
				stdetails.put("applicant_name", getJainSubodhOnlineFormBean().getName());
				stdetails.put("father_name", getJainSubodhOnlineFormBean().getFatherName());
				stdetails.put("mobile_number", Long.parseLong(getJainSubodhOnlineFormBean().getMobileNumber()));
				stdetails.put("select_course", getJainSubodhOnlineFormBean().getCourse());
				stdetails.put("course_name", getJainSubodhOnlineFormBean().getCourseName());
				stdetails.put("fee_amount", Double.parseDouble(getJainSubodhOnlineFormBean().getFeeAmount()));

				stdetails.put("txn_amt", Double.parseDouble(getJainSubodhOnlineFormBean().getFeeAmount()));
				stdetails.put("payment_details", Double.parseDouble(getJainSubodhOnlineFormBean().getFeeAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getJainSubodhOnlineFormBean().getFeeAmount()));

				// Calling API...
				/*
				 * objNode.put("data", stdetails); String jsonString1 =
				 * obMapper.writeValueAsString(objNode); logger.info("jsonString1" +
				 * jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();

				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response//commented by priya for form engine response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */

				// API Response status verification ...
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "SSJainSubodhfailure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine Response response1 =
				 * invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);
				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String form_no = dataobj.getString("form_no");
				String applicant_name = dataobj.getString("applicant_name");
				String father_name = dataobj.getString("father_name");
				int mobile_number = dataobj.getInt("mobile_number");
				String select_course = dataobj.getString("select_course");
				String course_name = dataobj.getString("course_name");
				int fee_amount = dataobj.getInt("fee_amount");

				// Calling all Setter methods
				getJainSubodhOnlineFormBean().setFormNo(form_no);
				getJainSubodhOnlineFormBean().setName(applicant_name);
				getJainSubodhOnlineFormBean().setFatherName(father_name);
				getJainSubodhOnlineFormBean().setMobileNumber(getJainSubodhOnlineFormBean().getMobileNumber());
				getJainSubodhOnlineFormBean().setCourse(select_course);
				getJainSubodhOnlineFormBean().setCourseName(course_name);
				getJainSubodhOnlineFormBean().setFeeAmount(String.valueOf(fee_amount));

				getJainSubodhOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getJainSubodhOnlineFormBean());

				// ------End SSJainSubodhOnlineFormBean
				String responseString = studentRegistrationService
						.insertJainSubodhDetails(getJainSubodhOnlineFormBean(), billerId);
				logger.info("JainSubodhRegistration :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add Jain Subodh data.");
					return "JainSubodhfaliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "JainSubodhfaliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getJainSubodhOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getJainSubodhOnlineFormBean().getFeeAmount());
				studentRegistrationFormBean.setStudentId(getJainSubodhOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getJainSubodhOnlineFormBean().getStudentRegistrationId());
				logger.info("Jain Subodh --feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "JainSubodhfaliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String teamWorkRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------teamWorkRegistration------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getTeamworkEducationOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			// getAppData().setStrID("TEST"); //need to clarify
			// getAppData().setStrID("TEST"); //need to clarify getFeesAmount
			if (AmountValidation(getTeamworkEducationOnlineFormBean().getAmount(),
					getTeamworkEducationOnlineFormBean().getPayment())) {
				// Form Engine start L251441
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				// Getters atarted...
				stdetails.put("student_name", getTeamworkEducationOnlineFormBean().getStudentName());
				stdetails.put("parent_name", getTeamworkEducationOnlineFormBean().getParentName());
				stdetails.put("admission_number", getTeamworkEducationOnlineFormBean().getAdmissionNumber());
				stdetails.put("email_id", getTeamworkEducationOnlineFormBean().getEmailId());
				stdetails.put("location_details", getTeamworkEducationOnlineFormBean().getLocation());
				stdetails.put("course_name", getTeamworkEducationOnlineFormBean().getCourse());
				stdetails.put("amount_details", Double.parseDouble(getTeamworkEducationOnlineFormBean().getAmount()));

				stdetails.put("txn_amt", Double.parseDouble(getTeamworkEducationOnlineFormBean().getAmount()));
				stdetails.put("payment_details", Double.parseDouble(getTeamworkEducationOnlineFormBean().getAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getTeamworkEducationOnlineFormBean().getAmount()));
				// Calling API...
				/*
				 * objNode.put("data", stdetails); String jsonString1 =
				 * obMapper.writeValueAsString(objNode); logger.info("jsonString1" +
				 * jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response//commented by priya for form engine response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */

				// API Response status verification ...
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "TeamworkEducationfailure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine Response response1 =
				 * invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String student_name = dataobj.getString("student_name");
				String parent_name = dataobj.getString("parent_name");
				String admission_number = dataobj.getString("admission_number");
				String email_id = dataobj.getString("email_id");
				String location_details = dataobj.getString("location_details");
				String course_name = dataobj.getString("course_name");
				int amount_details = dataobj.getInt("amount_details");

				// Calling all Setter methods
				getTeamworkEducationOnlineFormBean().setStudentName(student_name);
				getTeamworkEducationOnlineFormBean().setParentName(parent_name);
				getTeamworkEducationOnlineFormBean().setAdmissionNumber(admission_number);
				getTeamworkEducationOnlineFormBean().setEmailId(email_id);
				getTeamworkEducationOnlineFormBean().setLocation(location_details);
				getTeamworkEducationOnlineFormBean().setCourse(course_name);
				getTeamworkEducationOnlineFormBean().setAmount(String.valueOf(amount_details));

				getTeamworkEducationOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getTeamworkEducationOnlineFormBean());

				// ----End
				String responseString = studentRegistrationService
						.insertTeamWorkEducationDetails(getTeamworkEducationOnlineFormBean(), billerId);
				logger.info("teamWorkRegistration :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add Team Work data.");
					return "TeamWorkfaliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "TeamWorkfaliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getTeamworkEducationOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getTeamworkEducationOnlineFormBean().getAmount());
				studentRegistrationFormBean.setStudentId(getTeamworkEducationOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getTeamworkEducationOnlineFormBean().getStudentRegistrationId());
				logger.info("Teamwork Educational --feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "TeamWorkfaliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String goenkaRegistration() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("--------------------goenkaRegistration-------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getGoenkaOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			// getAppData().setStrID("TEST"); //need to clarify
			// getAppData().setStrID("TEST"); //need to clarify getFeesAmount
			if (AmountValidation(getGoenkaOnlineFormBean().getTotalAmount(), getGoenkaOnlineFormBean().getPayment())) {
				// 4138 GOENKA Online form Implememtation started
				// Start For Form Engine insertion

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				Date date1 = sdf.parse(getGoenkaOnlineFormBean().getDateOfBirth());

				stdetails.put("stud_name", getGoenkaOnlineFormBean().getStudName());
				stdetails.put("dateof_birth", formatter.format(date1));
				stdetails.put("gender_details", getGoenkaOnlineFormBean().getGender());
				stdetails.put("mobile_no", Long.parseLong(getGoenkaOnlineFormBean().getMobileNo()));
				stdetails.put("perm_address", getGoenkaOnlineFormBean().getPermAddress());
				stdetails.put("curr_address", getGoenkaOnlineFormBean().getCurrAddress());
				stdetails.put("father_name", getGoenkaOnlineFormBean().getFatherName());
				stdetails.put("father_occupation", getGoenkaOnlineFormBean().getFatherOccupation());
				stdetails.put("father_designation", getGoenkaOnlineFormBean().getFatherDesignation());
				stdetails.put("father_companyname", getGoenkaOnlineFormBean().getFatherCompanyName());
				if (getGoenkaOnlineFormBean().getFatherContachNumber() != "") {
					stdetails.put("father_contachnumber",
							Long.parseLong(getGoenkaOnlineFormBean().getFatherContachNumber()));
				} else {

					stdetails.put("father_contachnumber", "");

				}
				stdetails.put("father_emailid", getGoenkaOnlineFormBean().getFatherEmailId());
				stdetails.put("mother_name", getGoenkaOnlineFormBean().getMotherName());
				stdetails.put("mother_occupation", getGoenkaOnlineFormBean().getMotherOccupation());
				stdetails.put("mother_designation", getGoenkaOnlineFormBean().getMotherDesignation());
				stdetails.put("mother_companyname", getGoenkaOnlineFormBean().getMotherCompanyName());
				if (getGoenkaOnlineFormBean().getFatherContachNumber() != "") {
					stdetails.put("mother_contachnumber",
							Long.parseLong(getGoenkaOnlineFormBean().getMotherContachNumber()));
				} else {

					stdetails.put("mother_contachnumber", "");

				}

				stdetails.put("mother_emailid", getGoenkaOnlineFormBean().getMotherEmailId());
				stdetails.put("nationality_details", getGoenkaOnlineFormBean().getNationality());
				stdetails.put("desired_grade", getGoenkaOnlineFormBean().getDesiredGrade());
				stdetails.put("session_details", getGoenkaOnlineFormBean().getSession());
				stdetails.put("oci_passport", getGoenkaOnlineFormBean().getOciPassport());
				stdetails.put("other_info", getGoenkaOnlineFormBean().getOtherInfo());
				stdetails.put("total_amount", Double.parseDouble(getGoenkaOnlineFormBean().getTotalAmount()));

				stdetails.put("txn_amt", Double.parseDouble(getGoenkaOnlineFormBean().getTotalAmount()));
				stdetails.put("payment_details", Double.parseDouble(getGoenkaOnlineFormBean().getTotalAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getGoenkaOnlineFormBean().getTotalAmount()));

				/*
				 * objNode.put("data",stdetails);
				 * 
				 * String jsonString1=obMapper.writeValueAsString(objNode);
				 * 
				 * logger.info("jsonString1"+jsonString1.toString());
				 */

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);commented
				 * by priya for form engine
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "goenkafailure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");

				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String stud_name = dataobj.getString("stud_name");
				String dateof_birth = dataobj.getString("dateof_birth");
				String gender_details = dataobj.getString("gender_details");
				long mobile_no = dataobj.getLong("mobile_no");
				String perm_address = dataobj.getString("perm_address");
				String curr_address = dataobj.getString("curr_address");
				String father_name = dataobj.getString("father_name");
				String father_occupation = dataobj.getString("father_occupation");
				String father_designation = dataobj.getString("father_designation");
				String father_companyname = dataobj.getString("father_companyname");
				long father_contachnumber = dataobj.getLong("father_contachnumber");
				String father_emailid = dataobj.getString("father_emailid");
				String mother_name = dataobj.getString("mother_name");
				String mother_occupation = dataobj.getString("mother_occupation");
				String mother_designation = dataobj.getString("mother_designation");
				String mother_companyname = dataobj.getString("mother_companyname");
				long mother_contachnumber = dataobj.getLong("mother_contachnumber");
				String mother_emailid = dataobj.getString("mother_emailid");
				String nationality_details = dataobj.getString("nationality_details");
				String desired_grade = dataobj.getString("desired_grade");
				String session_details = dataobj.getString("session_details");
				String oci_passport = dataobj.getString("oci_passport");
				String other_info = dataobj.getString("other_info");
				int total_amount = dataobj.getInt("total_amount");
				// *******************************************************************
				getGoenkaOnlineFormBean().setStudName(stud_name);
				getGoenkaOnlineFormBean().setDateOfBirth(getGoenkaOnlineFormBean().getDateOfBirth());
				getGoenkaOnlineFormBean().setGender(gender_details);
				getGoenkaOnlineFormBean().setMobileNo(String.valueOf(mobile_no));
				getGoenkaOnlineFormBean().setPermAddress(perm_address);
				getGoenkaOnlineFormBean().setCurrAddress(curr_address);
				getGoenkaOnlineFormBean().setFatherName(father_name);
				getGoenkaOnlineFormBean().setFatherOccupation(father_occupation);
				getGoenkaOnlineFormBean().setFatherDesignation(father_designation);
				getGoenkaOnlineFormBean().setFatherCompanyName(father_companyname);
				getGoenkaOnlineFormBean().setFatherContachNumber(String.valueOf(father_contachnumber));
				getGoenkaOnlineFormBean().setFatherEmailId(father_emailid);
				getGoenkaOnlineFormBean().setMotherName(mother_name);
				getGoenkaOnlineFormBean().setMotherOccupation(mother_occupation);
				getGoenkaOnlineFormBean().setMotherDesignation(mother_designation);
				getGoenkaOnlineFormBean().setMotherCompanyName(mother_companyname);
				getGoenkaOnlineFormBean().setMotherContachNumber(String.valueOf(mother_contachnumber));
				getGoenkaOnlineFormBean().setMotherEmailId(mother_emailid);
				getGoenkaOnlineFormBean().setNationality(nationality_details);
				getGoenkaOnlineFormBean().setDesiredGrade(desired_grade);
				getGoenkaOnlineFormBean().setSession(session_details);
				getGoenkaOnlineFormBean().setOciPassport(oci_passport);
				getGoenkaOnlineFormBean().setOtherInfo(other_info);
				getGoenkaOnlineFormBean().setTotalAmount(String.valueOf(total_amount));
				// *******************************************************************

				getGoenkaOnlineFormBean().setApplicationNo(formId);
				// END For Form Engine insertion

				getUserSessionMap().put("ONLINEFORMDATA", getGoenkaOnlineFormBean());
				// 4138 GOENKA Online form Implementation end

				String responseString = studentRegistrationService.insertGOENKADetails(getGoenkaOnlineFormBean(),
						billerId);
				logger.info("goenkaRegistration :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add GOENKA data.");
					return "goenkafailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "goenkafailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getGoenkaOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getGoenkaOnlineFormBean().getTotalAmount());
				studentRegistrationFormBean.setStudentId(getGoenkaOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getGoenkaOnlineFormBean().getStudentRegistrationId());
				logger.info("GOENKA --feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "goenkafailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String GRCosmicRegister() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------GRCosmicRegister------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getGrCosmicOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

			if (AmountValidation(getGrCosmicOnlineFormBean().getFeesAmount(),
					getGrCosmicOnlineFormBean().getPayment())) {
				// 4257 GRCosmic Online form Implememtation started
				// Start For Form Engine insertion

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();
				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

				stdetails.put("student_id", getGrCosmicOnlineFormBean().getStudentId());
				stdetails.put("roll_no", getGrCosmicOnlineFormBean().getRollNo());
				stdetails.put("student_name", getGrCosmicOnlineFormBean().getStudentName());
				stdetails.put("father_name", getGrCosmicOnlineFormBean().getFatherName());
				stdetails.put("mobile_no", Long.parseLong(getGrCosmicOnlineFormBean().getMobileNo()));
				stdetails.put("email_id", getGrCosmicOnlineFormBean().getEmailId());
				stdetails.put("city_name", getGrCosmicOnlineFormBean().getCity());
				stdetails.put("state_name", getGrCosmicOnlineFormBean().getState());
				stdetails.put("class_name", getGrCosmicOnlineFormBean().getClassName());
				stdetails.put("section_details", getGrCosmicOnlineFormBean().getSection());
				stdetails.put("remarks_details", getGrCosmicOnlineFormBean().getRemarks());
				stdetails.put("fees_amount", Double.parseDouble(getGrCosmicOnlineFormBean().getFeesAmount()));

				// stdetails.put("std_dob",formatter.format(date1));
				// stdetails.put("mobile_no",Long.parseLong(getDpscOnlineFormBean().getMobile()));
				// stdetails.put("tution_fee",
				// Double.parseDouble(getDpscOnlineFormBean().getTutionFee()));
				// stdetails.put("tot_amount",Double.parseDouble(getDpscOnlineFormBean().getTotAmount()));

				stdetails.put("txn_amt", Double.parseDouble(getGrCosmicOnlineFormBean().getFeesAmount()));
				stdetails.put("payment_details", Double.parseDouble(getGrCosmicOnlineFormBean().getFeesAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getGrCosmicOnlineFormBean().getFeesAmount()));

				/*
				 * objNode.put("data",stdetails);
				 * 
				 * String jsonString1=obMapper.writeValueAsString(objNode);
				 * 
				 * logger.info("jsonString1"+jsonString1.toString());
				 */

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "GRCosmicfaliure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String student_id = dataobj.getString("student_id");
				String roll_no = dataobj.getString("roll_no");
				String student_name = dataobj.getString("student_name");
				String father_name = dataobj.getString("father_name");
				Long mobile_no = dataobj.getLong("mobile_no");
				String email_id = dataobj.getString("email_id");
				String city_name = dataobj.getString("city_name");
				String state_name = dataobj.getString("state_name");
				String class_name = dataobj.getString("class_name");
				String section_details = dataobj.getString("section_details");
				String remarks_details = dataobj.getString("remarks_details");
				int fees_amount = dataobj.getInt("fees_amount");

				// *******************************************************************
				getGrCosmicOnlineFormBean().setStudentId(student_id);
				getGrCosmicOnlineFormBean().setRollNo(roll_no);
				getGrCosmicOnlineFormBean().setStudentName(student_name);
				getGrCosmicOnlineFormBean().setFatherName(father_name);
				getGrCosmicOnlineFormBean().setMobileNo(getGrCosmicOnlineFormBean().getMobileNo());
				getGrCosmicOnlineFormBean().setEmailId(email_id);
				getGrCosmicOnlineFormBean().setCity(city_name);
				getGrCosmicOnlineFormBean().setState(state_name);
				getGrCosmicOnlineFormBean().setClassName(class_name);
				getGrCosmicOnlineFormBean().setSection(section_details);
				getGrCosmicOnlineFormBean().setRemarks(remarks_details);
				getGrCosmicOnlineFormBean().setFeesAmount(String.valueOf(fees_amount));
				// *******************************************************************

				getGrCosmicOnlineFormBean().setApplicationNo(formId);
				// END For Form Engine insertion

				getUserSessionMap().put("ONLINEFORMDATA", getGrCosmicOnlineFormBean());
				// 4257 getGrCosmicOnlineFormBean Online form Implementation end
				String responseString = studentRegistrationService
						.insertGRCosmicStudentDetails(getGrCosmicOnlineFormBean(), billerId);
				logger.info("GRCosmicRegister :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add GRCosmicRegister data.");
					return "GRCosmicfaliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "GRCosmicfaliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getGrCosmicOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getGrCosmicOnlineFormBean().getFeesAmount());
				studentRegistrationFormBean.setStudentId(getGrCosmicOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getGrCosmicOnlineFormBean().getStudentRegistrationId());
				logger.info("GRCosmicRegister --feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "GRCosmicfaliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String venkatEduRegisterStudent() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("--------------------venkatEduRegisterStudent-------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("------billerId :------" + billerId);
			logger.info("registeredUserId.." + registeredUserId);
			getVenkatEduOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

			if (AmountValidation(getVenkatEduOnlineFormBean().getFeesamount(),
					getVenkatEduOnlineFormBean().getPayment())) {
				// 4257 Venkat Online form Implememtation started
				// Start For Form Engine insertion

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();
				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

				stdetails.put("student_name", getVenkatEduOnlineFormBean().getStudentName());
				stdetails.put("roll_no", getVenkatEduOnlineFormBean().getRollNo());
				stdetails.put("father_name", getVenkatEduOnlineFormBean().getFatherName());
				if (getVenkatEduOnlineFormBean().getBranch() != "") {
					stdetails.put("branch_name", getVenkatEduOnlineFormBean().getBranch());
				} else {
					stdetails.put("branch_name", " ");

				}
				if (getVenkatEduOnlineFormBean().getCourse() != "") {
					stdetails.put("course_name", getVenkatEduOnlineFormBean().getCourse());
				} else {
					stdetails.put("course_name", " ");

				}
				stdetails.put("semester_details", getVenkatEduOnlineFormBean().getSemester());
				stdetails.put("fee_type", getVenkatEduOnlineFormBean().getFeeType());
				if (getVenkatEduOnlineFormBean().getYear() != null) {
					stdetails.put("year_details", getVenkatEduOnlineFormBean().getYear());
				} else {
					stdetails.put("year_details", " ");
				}
				stdetails.put("fees_amount", Double.parseDouble(getVenkatEduOnlineFormBean().getFeesamount()));

				// stdetails.put("std_dob",formatter.format(date1));
				// stdetails.put("mobile_no",Long.parseLong(getDpscOnlineFormBean().getMobile()));
				// stdetails.put("tution_fee",
				// Double.parseDouble(getDpscOnlineFormBean().getTutionFee()));
				// stdetails.put("tot_amount",Double.parseDouble(getDpscOnlineFormBean().getTotAmount()));

				stdetails.put("txn_amt", Double.parseDouble(getVenkatEduOnlineFormBean().getFeesamount()));
				stdetails.put("payment_details", Double.parseDouble(getVenkatEduOnlineFormBean().getFeesamount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getVenkatEduOnlineFormBean().getFeesamount()));

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				Client client = ClientBuilder.newClient();
//    			WebTarget webTarget = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/store-form-data");
//    			Invocation.Builder invocationBuilder = webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//    			
				// Response response =
				// invocationBuilder.post(Entity.json(jsonString1.toString()));
				// logger.info("response" + response.toString());

				APIResponse apiResponse = null;
				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler
							.getFriendlyMessageFromAPIError(messageerror);
					messageerror = friendlyMessageFromAPIError;
//    				String userErrorMessage = FormValidationUtil.handleApiErrorResponse(outputError);
//    				messageerror=userErrorMessage;
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "venkatfailure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

//    			WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/get-form-data");
//    			Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//    			
//    			Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				APIResponse apiResponse1 = null;
				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String student_name = dataobj.getString("student_name");
				String roll_no = dataobj.getString("roll_no");
				String father_name = dataobj.getString("father_name");
				String course_name = dataobj.getString("course_name");
				String branch_name = dataobj.getString("branch_name");
				String semester_details = dataobj.getString("semester_details");
				String fee_type = dataobj.getString("fee_type");
				String year_details = dataobj.getString("year_details");
				int fees_amount = dataobj.getInt("fees_amount");

				// *******************************************************************
				getVenkatEduOnlineFormBean().setStudentName(student_name);
				getVenkatEduOnlineFormBean().setRollNo(roll_no);
				getVenkatEduOnlineFormBean().setFatherName(father_name);
				getVenkatEduOnlineFormBean().setCourse(course_name);
				getVenkatEduOnlineFormBean().setBranch(branch_name);
				getVenkatEduOnlineFormBean().setSemester(semester_details);
				getVenkatEduOnlineFormBean().setFeeType(fee_type);
				getVenkatEduOnlineFormBean().setYear(year_details);
				getVenkatEduOnlineFormBean().setFeesamount(String.valueOf(fees_amount));
				// *******************************************************************

				getVenkatEduOnlineFormBean().setApplicationNo(formId);
				// END For Form Engine insertion

				getUserSessionMap().put("ONLINEFORMDATA", getVenkatEduOnlineFormBean());
				// 4257 Venkat Online form Implementation end

				String responseString = studentRegistrationService.insertVenkatEduDetails(getVenkatEduOnlineFormBean(),
						billerId);
				logger.info("venkatEduRegisterStudent :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add Student data in venkat online form.");
					return "venkatfailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "venkatfailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getVenkatEduOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getVenkatEduOnlineFormBean().getFeesamount());
				studentRegistrationFormBean.setStudentId(getVenkatEduOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getVenkatEduOnlineFormBean().getStudentRegistrationId());
				logger.info("venkat--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "venkatfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String mahaEduRegisterStudent() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("--------------------mahaEduRegisterStudent-------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("------billerId :------" + billerId);
			logger.info("registeredUserId.." + registeredUserId);
			getMahaEduOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

			if (AmountValidation(getMahaEduOnlineFormBean().getAmount(), getMahaEduOnlineFormBean().getPayment())) { // 4286
																														// mahaEdu
																														// Online
																														// form
																														// Implememtation
																														// started
																														// Start
																														// For
																														// Form
																														// Engine
																														// insertion

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				// Date date1 = sdf.parse(getMahaEduOnlineFormBean().getStdDOB());

				stdetails.put("first_name", getMahaEduOnlineFormBean().getFirstName());
				stdetails.put("middle_name", getMahaEduOnlineFormBean().getMiddleName());
				stdetails.put("last_name", getMahaEduOnlineFormBean().getLastName());
				stdetails.put("address_1", getMahaEduOnlineFormBean().getAddress1());
				stdetails.put("address_2", getMahaEduOnlineFormBean().getAddress2());
				stdetails.put("city_name", getMahaEduOnlineFormBean().getCity());
				stdetails.put("pin_code", Long.parseLong(getMahaEduOnlineFormBean().getPinCode()));
				stdetails.put("state_name", getMahaEduOnlineFormBean().getState());
				stdetails.put("country_name", getMahaEduOnlineFormBean().getCountry());
				stdetails.put("email_id", getMahaEduOnlineFormBean().getEmail());
				stdetails.put("telephone_no", Long.parseLong(getMahaEduOnlineFormBean().getTelePhone()));
				stdetails.put("citizenship_status", getMahaEduOnlineFormBean().getCitizenshipStatus());
				if (getMahaEduOnlineFormBean().getAdharNo() != "") {
					stdetails.put("adhar_no", Long.parseLong(getMahaEduOnlineFormBean().getAdharNo()));

				} else {

					stdetails.put("adhar_no", "");
				}
				stdetails.put("pan_no", getMahaEduOnlineFormBean().getPanNo());
				stdetails.put("purposeof_donation", getMahaEduOnlineFormBean().getPurposeOfDonation());
				stdetails.put("amount_details", Double.parseDouble(getMahaEduOnlineFormBean().getAmount()));

				// stdetails.put("std_dob",formatter.format(date1));
				// stdetails.put("mobile_no",Long.parseLong(getDpscOnlineFormBean().getMobile()));
				// stdetails.put("tution_fee",
				// Double.parseDouble(getDpscOnlineFormBean().getTutionFee()));
				// stdetails.put("tot_amount",Double.parseDouble(getDpscOnlineFormBean().getTotAmount()));

				stdetails.put("txn_amt", Double.parseDouble(getMahaEduOnlineFormBean().getAmount()));
				stdetails.put("payment_details", Double.parseDouble(getMahaEduOnlineFormBean().getAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getMahaEduOnlineFormBean().getAmount()));

				/*
				 * objNode.put("data",stdetails);
				 * 
				 * String jsonString1=obMapper.writeValueAsString(objNode);
				 * 
				 * logger.info("jsonString1"+jsonString1.toString());
				 */

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */

				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "mahafailure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya form engine
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String first_name = dataobj.getString("first_name");
				String middle_name = dataobj.getString("middle_name");
				String last_name = dataobj.getString("last_name");
				String address_1 = dataobj.getString("address_1");
				String address_2 = dataobj.getString("address_2");
				String city_name = dataobj.getString("city_name");
				int pin_code = dataobj.getInt("pin_code");
				String state_name = dataobj.getString("state_name");
				String country_name = dataobj.getString("country_name");
				String email_id = dataobj.getString("email_id");
				int telephone_no = dataobj.getInt("telephone_no");
				String citizenship_status = dataobj.getString("citizenship_status");
				// int adhar_no = data1.getInt("adhar_no");
				String pan_no = dataobj.getString("pan_no");
				String purposeof_donation = dataobj.getString("purposeof_donation");
				int amount_details = dataobj.getInt("amount_details");
				// -----------------------------------------------------------------

				// *******************************************************************
				getMahaEduOnlineFormBean().setFirstName(first_name);
				getMahaEduOnlineFormBean().setMiddleName(middle_name);
				getMahaEduOnlineFormBean().setLastName(last_name);
				getMahaEduOnlineFormBean().setAddress1(address_1);
				getMahaEduOnlineFormBean().setAddress2(address_2);
				getMahaEduOnlineFormBean().setCity(city_name);
				getMahaEduOnlineFormBean().setPinCode(String.valueOf(pin_code));
				getMahaEduOnlineFormBean().setState(state_name);
				getMahaEduOnlineFormBean().setCountry(country_name);
				getMahaEduOnlineFormBean().setEmail(email_id);
				getMahaEduOnlineFormBean().setTelePhone(String.valueOf(telephone_no));
				getMahaEduOnlineFormBean().setCitizenshipStatus(citizenship_status);
				getMahaEduOnlineFormBean().setAdharNo(getMahaEduOnlineFormBean().getAdharNo());
				getMahaEduOnlineFormBean().setPanNo(pan_no);
				getMahaEduOnlineFormBean().setPurposeOfDonation(purposeof_donation);
				getMahaEduOnlineFormBean().setAmount(String.valueOf(amount_details));
				// *******************************************************************

				getMahaEduOnlineFormBean().setApplicationNo(formId);
				// END For Form Engine insertion

				getUserSessionMap().put("ONLINEFORMDATA", getMahaEduOnlineFormBean());
				// 4286 mahaEdu Online form Implementation end

				String responseString = studentRegistrationService.insertMahaEduDetails(getMahaEduOnlineFormBean(),
						billerId);
				logger.info("mahaEduRegisterStudent :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add Student data in mahaEdu.");
					return "mahafailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "mahafailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getMahaEduOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getMahaEduOnlineFormBean().getAmount());
				studentRegistrationFormBean.setStudentId(getMahaEduOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getMahaEduOnlineFormBean().getStudentRegistrationId());
				logger.info("maha--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "mahafailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}
//smartrepEducation created by amol //

//smartrepEducation created by amol //

	public String smartrepEductionRegisterStudent() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("--------------------Start smartrepEductionRegisterStudent-------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("------billerId :------" + billerId);
			logger.info("registeredUserId.." + registeredUserId);
			getSmartrepEductionOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

			if (AmountValidation(getSmartrepEductionOnlineFormBean().getTotalamount(),
					getSmartrepEductionOnlineFormBean().getPayment())) {
				// 4286 mahaEdu Online form Implememtation started
				// Start For Form Engine insertion

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				Date date1 = sdf.parse(getSmartrepEductionOnlineFormBean().getDob());

				stdetails.put("student_id", getSmartrepEductionOnlineFormBean().getStudentId());
				stdetails.put("student_name", getSmartrepEductionOnlineFormBean().getStudentName());
				stdetails.put("stdmobile_no", Long.parseLong(getSmartrepEductionOnlineFormBean().getStdMobileNo()));
				stdetails.put("dob_date", formatter.format(date1));
				stdetails.put("product_name", getSmartrepEductionOnlineFormBean().getProduct());
				stdetails.put("product_details", getSmartrepEductionOnlineFormBean().getProductdetails());
				stdetails.put("total_fee", Double.parseDouble(getSmartrepEductionOnlineFormBean().getTotalfee()));
				stdetails.put("remark_msg", getSmartrepEductionOnlineFormBean().getRemark());
				stdetails.put("center_remark", getSmartrepEductionOnlineFormBean().getCenterremark());
				stdetails.put("stu_amount", Double.parseDouble(getSmartrepEductionOnlineFormBean().getStuamount()));
				stdetails.put("total_amount", Double.parseDouble(getSmartrepEductionOnlineFormBean().getTotalamount()));

				stdetails.put("txn_amt", Double.parseDouble(getSmartrepEductionOnlineFormBean().getTotalamount()));
				stdetails.put("payment_details",
						Double.parseDouble(getSmartrepEductionOnlineFormBean().getTotalamount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getSmartrepEductionOnlineFormBean().getTotalamount()));

				/*
				 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
				 * 
				 * String jsonString1=obMapper.writeValueAsString(objNode);
				 * 
				 * logger.info("jsonString1"+jsonString1.toString());
				 * 
				 * 
				 */

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response =f
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "SEfailure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);

				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				// JSONArray jsonArray = jsonObject.getJSONArray("message");
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String student_id = dataobj.getString("student_id");
				String student_name = dataobj.getString("student_name");
				int stdmobile_no = dataobj.getInt("stdmobile_no");
				String dob_date = dataobj.getString("dob_date");
				String product_name = dataobj.getString("product_name");
				String product_details = dataobj.getString("product_details");
				int total_fee = dataobj.getInt("total_fee");
				String remark_msg = dataobj.getString("remark_msg");
				String center_remark = dataobj.getString("center_remark");
				int stu_amount = dataobj.getInt("stu_amount");
				int total_amount = dataobj.getInt("total_amount");

				// -----------------------------------------------------------------

				// *******************************************************************
				getSmartrepEductionOnlineFormBean().setStudentId(student_id);
				getSmartrepEductionOnlineFormBean().setStudentName(student_name);
				getSmartrepEductionOnlineFormBean()
						.setStdMobileNo(getSmartrepEductionOnlineFormBean().getStdMobileNo());
				getSmartrepEductionOnlineFormBean().setDob(getSmartrepEductionOnlineFormBean().getDob());
				getSmartrepEductionOnlineFormBean().setProduct(product_name);
				getSmartrepEductionOnlineFormBean().setProductdetails(product_details);
				getSmartrepEductionOnlineFormBean().setTotalfee(String.valueOf(total_fee));
				getSmartrepEductionOnlineFormBean().setRemark(remark_msg);
				getSmartrepEductionOnlineFormBean().setCenterremark(center_remark);
				getSmartrepEductionOnlineFormBean().setStuamount(String.valueOf(stu_amount));
				getSmartrepEductionOnlineFormBean().setTotalamount(String.valueOf(total_amount));
				// *******************************************************************
				// getSmartrepEductionOnlineFormBean().setTotAmount(String.valueOf(total_amount));
				getSmartrepEductionOnlineFormBean().setApplicationNo(formId);
				// END For Form Engine insertion

				getUserSessionMap().put("ONLINEFORMDATA", getSmartrepEductionOnlineFormBean());
				// 4286 mahaEdu Online form Implementation end

				String responseString = studentRegistrationService
						.insertSmartrepEdu(getSmartrepEductionOnlineFormBean(), billerId);
				logger.info("smartrepEductionRegisterStudent :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add Student data in mahaEdu.");
					return "SEfailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "SEfailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getSmartrepEductionOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getSmartrepEductionOnlineFormBean().getTotalamount());
				studentRegistrationFormBean.setStudentId(getSmartrepEductionOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getSmartrepEductionOnlineFormBean().getStudentRegistrationId());
				logger.info("SE--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "SEfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String asianRegisterStudent()

	{
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("--------------------asianRegisterStudent-------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("------billerId :------" + billerId);
			logger.info("registeredUserId.." + registeredUserId);
			getAsianOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

			if (AmountValidation(getAsianOnlineFormBean().getAmount(), getAsianOnlineFormBean().getPayment())) {
				// 4374 Asian Online form Implememtation started
				// Start For Form Engine insertion

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

				stdetails.put("student_name", getAsianOnlineFormBean().getStudentName());
				stdetails.put("father_name", getAsianOnlineFormBean().getFatherName());
				stdetails.put("email_id", getAsianOnlineFormBean().getEmail());
				stdetails.put("mobile_no", Long.parseLong(getAsianOnlineFormBean().getMobileNo()));
				stdetails.put("address_details", getAsianOnlineFormBean().getAddress());
				stdetails.put("student_type", getAsianOnlineFormBean().getStudentType());
				stdetails.put("course_name", getAsianOnlineFormBean().getCourseName());
				stdetails.put("remark_msg", getAsianOnlineFormBean().getRemark());
				stdetails.put("amount_fees", Double.parseDouble(getAsianOnlineFormBean().getAmount()));

				stdetails.put("txn_amt", Double.parseDouble(getAsianOnlineFormBean().getAmount()));
				stdetails.put("payment_details", Double.parseDouble(getAsianOnlineFormBean().getAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getAsianOnlineFormBean().getAmount()));

				/*
				 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
				 * 
				 * String jsonString1=obMapper.writeValueAsString(objNode);
				 * 
				 * logger.info("jsonString1"+jsonString1.toString());
				 */

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();

				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */

				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "asianfailure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);

				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */

				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				// JSONArray jsonArray = jsonObject.getJSONArray("message");
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String student_name = dataobj.getString("student_name");
				String father_name = dataobj.getString("father_name");
				String email_id = dataobj.getString("email_id");
				Long mobile_no = dataobj.getLong("mobile_no");
				String address_details = dataobj.getString("address_details");
				String student_type = dataobj.getString("student_type");
				String course_name = dataobj.getString("course_name");
				String remark_msg = dataobj.getString("remark_msg");
				int amount_fees = dataobj.getInt("amount_fees");
				// -----------------------------------------------------------------

				// *******************************************************************
				getAsianOnlineFormBean().setStudentName(student_name);
				getAsianOnlineFormBean().setFatherName(father_name);
				getAsianOnlineFormBean().setEmail(email_id);
				getAsianOnlineFormBean().setMobileNo(String.valueOf(mobile_no));
				getAsianOnlineFormBean().setAddress(address_details);
				getAsianOnlineFormBean().setStudentType(student_type);
				getAsianOnlineFormBean().setCourseName(course_name);
				getAsianOnlineFormBean().setRemark(remark_msg);
				getAsianOnlineFormBean().setAmount(String.valueOf(amount_fees));
				getAsianOnlineFormBean().setApplicationNo(formId);

				getUserSessionMap().put("ONLINEFORMDATA", getAsianOnlineFormBean());
				// 4374 Asian Online form Implementation end

				String responseString = studentRegistrationService.insertAsianDetails(getAsianOnlineFormBean(),
						billerId);
				logger.info("asianRegisterStudent :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add Student data in asianRegisterStudent.");
					return "asianfailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "asianfailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getAsianOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getAsianOnlineFormBean().getAmount());
				studentRegistrationFormBean.setStudentId(getAsianOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getAsianOnlineFormBean().getStudentRegistrationId());
				logger.info("asianRegisterStudent--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "asianfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String rajashtanRegisterStudent() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("--------------------rajashtanRegisterStudent-------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getRajsthanOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			if (AmountValidation(getRajsthanOnlineFormBean().getTotalAmount(),
					getRajsthanOnlineFormBean().getPayment())) {
				// 4449 RajsthanOnlineForm Online form Implememtation started
				// Start For Form Engine insertion

				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

				stdetails.put("nameof_institute", getRajsthanOnlineFormBean().getNameOfInstitute());
				stdetails.put("address_details", getRajsthanOnlineFormBean().getAddress());
				stdetails.put("email_id", getRajsthanOnlineFormBean().getEmailId());
				stdetails.put("mobile_no", Long.parseLong(getRajsthanOnlineFormBean().getMobileNo()));
				stdetails.put("reasonfor_payment", getRajsthanOnlineFormBean().getReasonForPayment());
				stdetails.put("total_amount", Double.parseDouble(getRajsthanOnlineFormBean().getTotalAmount()));

				// stdetails.put("std_dob",formatter.format(date1));
				// stdetails.put("mobile_no",Long.parseLong(getDpscOnlineFormBean().getMobile()));
				// stdetails.put("tution_fee",
				// Double.parseDouble(getDpscOnlineFormBean().getTutionFee()));
				// stdetails.put("tot_amount",Double.parseDouble(getDpscOnlineFormBean().getTotAmount()));

				stdetails.put("txn_amt", Double.parseDouble(getRajsthanOnlineFormBean().getTotalAmount()));
				stdetails.put("payment_details", Double.parseDouble(getRajsthanOnlineFormBean().getTotalAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getRajsthanOnlineFormBean().getTotalAmount()));

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				Client client = ClientBuilder.newClient();
//    			WebTarget webTarget = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/store-form-data");
//    			Invocation.Builder invocationBuilder = webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//    			
				// Response response =
				// invocationBuilder.post(Entity.json(jsonString1.toString()));
				// logger.info("response" + response.toString());

				APIResponse apiResponse = null;
				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler
							.getFriendlyMessageFromAPIError(messageerror);
					messageerror = friendlyMessageFromAPIError;
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "rajashtanfaliure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

//    			WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/get-form-data");
//    			Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//    			
//    			Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				APIResponse apiResponse1 = null;
				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String nameof_institute = dataobj.getString("nameof_institute");
				String address_details = dataobj.getString("address_details");
				String email_id = dataobj.getString("email_id");
				int mobile_no = dataobj.getInt("mobile_no");
				String reasonfor_payment = dataobj.getString("reasonfor_payment");
				int total_amount = dataobj.getInt("total_amount");
				// *******************************************************************
				getRajsthanOnlineFormBean().setNameOfInstitute(nameof_institute);
				getRajsthanOnlineFormBean().setAddress(address_details);
				getRajsthanOnlineFormBean().setEmailId(email_id);
				getRajsthanOnlineFormBean().setMobileNo(String.valueOf(mobile_no));
				getRajsthanOnlineFormBean().setReasonForPayment(reasonfor_payment);
				getRajsthanOnlineFormBean().setTotalAmount(String.valueOf(total_amount));

				getRajsthanOnlineFormBean().setApplicationNo(formId);

				getUserSessionMap().put("ONLINEFORMDATA", getRajsthanOnlineFormBean());
				// END For Form Engine insertion
				// 4449 mahaEdu Online form Implementation end

				String responseString = studentRegistrationService.insertRajashtanDetails(getRajsthanOnlineFormBean(),
						billerId);
				logger.info("rajashtanRegisterStudent :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add rajashtan institute data.");
					return "rajashtanfaliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "rajashtanfaliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getRajsthanOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getRajsthanOnlineFormBean().getTotalAmount());
				studentRegistrationFormBean.setStudentId(getRajsthanOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getRajsthanOnlineFormBean().getStudentRegistrationId());
				logger.info("Rajashtan--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "rajashtanfaliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String successEaseRegisterStudent() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------successEaseRegisterStudent------------------------------------------------");
			logger.info("successEaseRegisterStudent : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getSuccessEaseFormBeanFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			// getAppData().setStrID("TEST"); //need to clarify
			// getAppData().setStrID("TEST"); //need to clarify getFeesAmount
			if (AmountValidation(getSuccessEaseFormBeanFormBean().getTotalFee(),
					getSuccessEaseFormBeanFormBean().getPayment())) {
				// -----------4664 SuccessEaseForm Form Engine start
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				// Object Node declaration
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				Date date1 = sdf.parse(getSuccessEaseFormBeanFormBean().getDob());

				// Getters atarted...
				stdetails.put("student_name", getSuccessEaseFormBeanFormBean().getName());
				stdetails.put("student_id", getSuccessEaseFormBeanFormBean().getId());
				stdetails.put("mobile_no", Long.parseLong(getSuccessEaseFormBeanFormBean().getMobileNo()));
				stdetails.put("dob_date", formatter.format(date1));
				stdetails.put("product_select", getSuccessEaseFormBeanFormBean().getProduct());
				stdetails.put("full_fee", Double.parseDouble(getSuccessEaseFormBeanFormBean().getFullfee()));
				stdetails.put("f_installment", Double.parseDouble(getSuccessEaseFormBeanFormBean().getFinstallment()));
				stdetails.put("s_installment", Double.parseDouble(getSuccessEaseFormBeanFormBean().getSinstallment()));
				stdetails.put("t_installment", Double.parseDouble(getSuccessEaseFormBeanFormBean().getTinstallment()));
				stdetails.put("total_fee", Double.parseDouble(getSuccessEaseFormBeanFormBean().getTotalFee()));

				stdetails.put("txn_amt", Double.parseDouble(getSuccessEaseFormBeanFormBean().getTotalFee()));
				stdetails.put("payment_details", Double.parseDouble(getSuccessEaseFormBeanFormBean().getTotalFee()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getSuccessEaseFormBeanFormBean().getTotalFee()));

				// Calling API...
				/*
				 * objNode.put("data", stdetails); String jsonString1 =
				 * obMapper.writeValueAsString(objNode); logger.info("jsonString1" +
				 * jsonString1.toString());
				 */

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE); Response
				 * //commented by priya for form engine response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */

				// API Response status verification ...

				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "faliure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine Response response1 =
				 * invocationBuilder1.post(Entity.json(jsonString2));
				 */
				// logger.info("responseString", response1.toString());

				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);
				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String student_name = dataobj.getString("student_name");
				String student_id = dataobj.getString("student_id");
				int mobile_no = dataobj.getInt("mobile_no");
				String dob_date = dataobj.getString("dob_date");
				String product_select = dataobj.getString("product_select");
				int full_fee = dataobj.getInt("full_fee");
				int f_installment = dataobj.getInt("f_installment");
				int s_installment = dataobj.getInt("s_installment");
				int t_installment = dataobj.getInt("t_installment");
				int total_fee = dataobj.getInt("total_fee");

				// Calling all Setter methods
				getSuccessEaseFormBeanFormBean().setName(student_name);
				getSuccessEaseFormBeanFormBean().setId(student_id);
				getSuccessEaseFormBeanFormBean().setMobileNo(String.valueOf(mobile_no));
				getSuccessEaseFormBeanFormBean().setDob(dob_date);
				getSuccessEaseFormBeanFormBean().setProduct(product_select);
				getSuccessEaseFormBeanFormBean().setFullfee(String.valueOf(full_fee));
				getSuccessEaseFormBeanFormBean().setFinstallment(String.valueOf(f_installment));
				getSuccessEaseFormBeanFormBean().setSinstallment(String.valueOf(s_installment));
				getSuccessEaseFormBeanFormBean().setTinstallment(String.valueOf(t_installment));
				getSuccessEaseFormBeanFormBean().setTotalFee(String.valueOf(total_fee));

				getSuccessEaseFormBeanFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getSuccessEaseFormBeanFormBean());

				// ----------4664 End form engine
				String responseString = studentRegistrationService
						.insertSuccessEaseDetails(getSuccessEaseFormBeanFormBean(), billerId);
				logger.info("SuccessEaseRegisterStudent :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add Success Ease data.");
					return "faliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "faliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getSuccessEaseFormBeanFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getSuccessEaseFormBeanFormBean().getTotalFee());
				studentRegistrationFormBean.setStudentId(getSuccessEaseFormBeanFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getSuccessEaseFormBeanFormBean().getStudentRegistrationId());
				logger.info("Jain Subodh --feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "faliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String kashiRegisterStudent() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------KashiRegisterStudent------------------------------------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getKashiInstituteFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

			if (AmountValidation(getKashiInstituteFormBean().getTotalFee(), getKashiInstituteFormBean().getPayment())) {
				// Form Engine implementation start
				// ------------------------------------------------------------------
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				// Getters atarted...
				// stdetails.put("stud_type", getKashiInstituteFormBean().getStudType());
				stdetails.put("guardian_name", getKashiInstituteFormBean().getGuardianName());
				if (getKashiInstituteFormBean().getSelectBranch() != null
						&& getKashiInstituteFormBean().getSelectBranch() != "") {
					stdetails.put("select_branch", getKashiInstituteFormBean().getSelectBranch());
				} else {
					stdetails.put("select_branch", " ");

				}

				if (getKashiInstituteFormBean().getCollegeFee() != "") {
					stdetails.put("college_fee", Double.parseDouble(getKashiInstituteFormBean().getCollegeFee()));
				} else {

					stdetails.put("college_fee", 0);
				}

				if (getKashiInstituteFormBean().getHostelFee() != "") {
					stdetails.put("hostel_fee", Double.parseDouble(getKashiInstituteFormBean().getHostelFee()));
				} else {

					stdetails.put("hostel_fee", 0);
				}
				if (getKashiInstituteFormBean().getTransportFee() != "") {
					stdetails.put("transport_fee", Double.parseDouble(getKashiInstituteFormBean().getTransportFee()));
				} else {

					stdetails.put("transport_fee", 0);
				}

				stdetails.put("remarks_msg", getKashiInstituteFormBean().getRemarks());
				if (getKashiInstituteFormBean().getRollNo() != "") {
					stdetails.put("roll_no", getKashiInstituteFormBean().getRollNo());
				} else {

					stdetails.put("roll_no", " ");
				}
				stdetails.put("std_name", getKashiInstituteFormBean().getStdName());
				stdetails.put("mobile_no", Long.parseLong(getKashiInstituteFormBean().getMobileNo()));
				stdetails.put("email_id", getKashiInstituteFormBean().getEmailId());
				if (getKashiInstituteFormBean().getCourseName() != null) {
					stdetails.put("course_name", getKashiInstituteFormBean().getCourseName());

				} else {
					stdetails.put("course_name", " ");

				}
				stdetails.put("total_fee", Double.parseDouble(getKashiInstituteFormBean().getTotalFee()));

				stdetails.put("txn_amt", Double.parseDouble(getKashiInstituteFormBean().getTotalFee()));
				stdetails.put("payment_details", Double.parseDouble(getKashiInstituteFormBean().getTotalFee()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getKashiInstituteFormBean().getTotalFee()));

				// Calling API...
				objNode.put("form_data", stdetails);
				String jsonString1 = obMapper.writeValueAsString(objNode);
				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response//commented by priya for form engine response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */

				// API Response status verification ...

				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "faliure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);
				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine Response response1 =
				 * invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);
				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String roll_no = dataobj.getString("roll_no");
				String std_name = dataobj.getString("std_name");
				String guardian_name = dataobj.getString("guardian_name");
				int mobile_no = dataobj.getInt("mobile_no");
				// String email_id = data1.getString("email_id");
				String course_name = dataobj.getString("course_name");
				String select_branch = dataobj.getString("select_branch");
				int college_fee = dataobj.getInt("college_fee");
				int hostel_fee = dataobj.getInt("hostel_fee");
				int transport_fee = dataobj.getInt("transport_fee");
				String remarks_msg = dataobj.getString("remarks_msg");
				int total_fee = dataobj.getInt("total_fee");

				// Calling all Setter methods
				getKashiInstituteFormBean().setGuardianName(guardian_name);
				getKashiInstituteFormBean().setSelectBranch(select_branch);
				getKashiInstituteFormBean().setCollegeFee(String.valueOf(college_fee));
				getKashiInstituteFormBean().setHostelFee(String.valueOf(hostel_fee));
				getKashiInstituteFormBean().setTransportFee(String.valueOf(transport_fee));
				getKashiInstituteFormBean().setRemarks(remarks_msg);
				getKashiInstituteFormBean().setRollNo(roll_no);
				getKashiInstituteFormBean().setStdName(std_name);
				getKashiInstituteFormBean().setMobileNo(getKashiInstituteFormBean().getMobileNo());
				getKashiInstituteFormBean().setEmailId(getKashiInstituteFormBean().getEmailId());
				getKashiInstituteFormBean().setCourseName(course_name);
				getKashiInstituteFormBean().setTotalFee(String.valueOf(total_fee));

				getKashiInstituteFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getKashiInstituteFormBean());

				// End Form Engine code
				// -------------------------------------------------------------------------------
				String responseString = studentRegistrationService
						.insertKashiInstituteDetails(getKashiInstituteFormBean(), billerId);
				logger.info("indianpoliticalRegisterStudent :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add Indian Political data.");
					return "faliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "faliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getKashiInstituteFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getKashiInstituteFormBean().getTotalFee());
				studentRegistrationFormBean.setStudentId(getKashiInstituteFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getKashiInstituteFormBean().getStudentRegistrationId());
				logger.info("Jain Subodh --feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "faliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String iicsEductionRegisterStudent() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("--------------------Start iicsEductionRegisterStudent-------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("------billerId :------" + billerId);
			logger.info("registeredUserId.." + registeredUserId);
			getIicsEductionOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

			if (AmountValidation(getIicsEductionOnlineFormBean().getTotalamount(),
					getIicsEductionOnlineFormBean().getPayment())) {
				// -----Form Engine Implementation start
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);
				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				// Getters atarted...
				stdetails.put("student_id", getIicsEductionOnlineFormBean().getStudentId());
				stdetails.put("student_name", getIicsEductionOnlineFormBean().getStudentName());
				stdetails.put("amount_rs", Double.parseDouble(getIicsEductionOnlineFormBean().getAmount()));
				stdetails.put("stdmobile_no", Long.parseLong(getIicsEductionOnlineFormBean().getStdMobileNo()));
				stdetails.put("total_amount", Double.parseDouble(getIicsEductionOnlineFormBean().getTotalamount()));

				stdetails.put("txn_amt", Double.parseDouble(getIicsEductionOnlineFormBean().getTotalamount()));
				stdetails.put("payment_details", Double.parseDouble(getIicsEductionOnlineFormBean().getTotalamount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getIicsEductionOnlineFormBean().getTotalamount()));

				// Calling API...
				objNode.put("form_data", stdetails);
				String jsonString1 = obMapper.writeValueAsString(objNode);
				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE); Response
				 * response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));//commented by
				 * priya for form engine logger.info("response" + response.toString());
				 */

				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				// API Response status verification ...
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "iicsfailure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine Response response1 =
				 * invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */

				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);
				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String student_id = dataobj.getString("student_id");
				String student_name = dataobj.getString("student_name");
				int stdmobile_no = dataobj.getInt("stdmobile_no");
				int amount_rs = dataobj.getInt("amount_rs");
				int total_amount = dataobj.getInt("total_amount");

				// Calling all Setter methods
				getIicsEductionOnlineFormBean().setStudentId(student_id);
				getIicsEductionOnlineFormBean().setStudentName(student_name);
				getIicsEductionOnlineFormBean().setAmount(String.valueOf(amount_rs));
				getIicsEductionOnlineFormBean().setStdMobileNo(getIicsEductionOnlineFormBean().getStdMobileNo());
				getIicsEductionOnlineFormBean().setTotalamount(String.valueOf(total_amount));

				getIicsEductionOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getIicsEductionOnlineFormBean());

				// -----Form Engine end
				String responseString = studentRegistrationService.insertIICSEdu(getIicsEductionOnlineFormBean(),
						billerId);
				logger.info("smartrepEductionRegisterStudent :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add Student data in IICS Education.");
					return "iicsfailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "iicsfailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getIicsEductionOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getIicsEductionOnlineFormBean().getTotalamount());
				studentRegistrationFormBean.setStudentId(getIicsEductionOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getIicsEductionOnlineFormBean().getStudentRegistrationId());
				logger.info("iicsEduction--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "iicsfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String jawaharRegisterStudent() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("--------------------Start jawaharRegisterStudent-------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("------billerId :------" + billerId);
			logger.info("registeredUserId.." + registeredUserId);
			getJawaharOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

			if (AmountValidation(getJawaharOnlineFormBean().getFeeAmount(), getJawaharOnlineFormBean().getPayment())) {
				// 4738 JawaharOnlineFormBean Form Engine start
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();
				if (getJawaharOnlineFormBean().getEmaildId() != "") {
					// Getters atarted...
					stdetails.put("email_id", getJawaharOnlineFormBean().getEmaildId());
				} else {
					stdetails.put("email_id", " ");

				}
				stdetails.put("student_id", getJawaharOnlineFormBean().getStudentId());
				stdetails.put("stud_name", getJawaharOnlineFormBean().getStudName());
				stdetails.put("father_name", getJawaharOnlineFormBean().getFatherName());
				stdetails.put("mother_name", getJawaharOnlineFormBean().getMotherName());
				stdetails.put("stud_class", getJawaharOnlineFormBean().getStudclass());
				if (getJawaharOnlineFormBean().getStudSection() != "") {
					stdetails.put("stud_section", getJawaharOnlineFormBean().getStudSection());
				} else {
					stdetails.put("stud_section", " ");
				}

				stdetails.put("fee_amount", Double.parseDouble(getJawaharOnlineFormBean().getFeeAmount()));
				stdetails.put("mobile_no", Long.parseLong(getJawaharOnlineFormBean().getMobileNo()));
				stdetails.put("remarks_msg", getJawaharOnlineFormBean().getRemarks());

				stdetails.put("txn_amt", Double.parseDouble(getJawaharOnlineFormBean().getFeeAmount()));
				stdetails.put("payment_details", Double.parseDouble(getJawaharOnlineFormBean().getFeeAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getJawaharOnlineFormBean().getFeeAmount()));

				// Calling API...
				objNode.put("form_data", stdetails);
				String jsonString1 = obMapper.writeValueAsString(objNode);
				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response//commented by priya for form engine response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				// API Response status verification ...
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "jawaharfailure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine Response response1 =
				 * invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */

				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);
				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String student_id = dataobj.getString("student_id");
				String stud_name = dataobj.getString("stud_name");
				String father_name = dataobj.getString("father_name");
				String mother_name = dataobj.getString("mother_name");
				String stud_class = dataobj.getString("stud_class");
				String stud_section = dataobj.getString("stud_section");
				int fee_amount = dataobj.getInt("fee_amount");
				int mobile_no = dataobj.getInt("mobile_no");
				String remarks_msg = dataobj.getString("remarks_msg");
				String email_id = dataobj.getString("email_id");

				// Calling all Setter methods
				getJawaharOnlineFormBean().setEmaildId(email_id);
				getJawaharOnlineFormBean().setStudentId(student_id);
				getJawaharOnlineFormBean().setStudName(stud_name);
				getJawaharOnlineFormBean().setFatherName(father_name);
				getJawaharOnlineFormBean().setMotherName(mother_name);
				getJawaharOnlineFormBean().setStudclass(stud_class);
				getJawaharOnlineFormBean().setStudSection(stud_section);
				getJawaharOnlineFormBean().setFeeAmount(String.valueOf(fee_amount));
				getJawaharOnlineFormBean().setMobileNo(getJawaharOnlineFormBean().getMobileNo());
				getJawaharOnlineFormBean().setRemarks(remarks_msg);

				getJawaharOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getJawaharOnlineFormBean());

				// End JawaharOnlineFormBean
				String responseString = studentRegistrationService.insertJawaharStudent(getJawaharOnlineFormBean(),
						billerId);
				logger.info("JawaharRegisterStudent :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add Student data in JawaharOnlineForm Education.");
					return "jawaharfailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "jawaharfailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getJawaharOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getJawaharOnlineFormBean().getFeeAmount());
				studentRegistrationFormBean.setStudentId(getJawaharOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getJawaharOnlineFormBean().getStudentRegistrationId());
				logger.info("SE--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "jawaharfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String horizonRegisterStudent() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------horizonRegisterStudent------------------------------------------------");
			logger.info("horizonRegisterStudent : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getHorizonOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			// getAppData().setStrID("TEST"); //need to clarify
			// getAppData().setStrID("TEST"); //need to clarify getFeesAmount
			if (AmountValidation(getHorizonOnlineFormBean().getTotalFee(), getHorizonOnlineFormBean().getPayment())) {
				// ------Form Engine start Horizon
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				// Getters atarted...

				stdetails.put("reg_no", getHorizonOnlineFormBean().getRegNo());
				stdetails.put("student_name", getHorizonOnlineFormBean().getName());
				stdetails.put("course_name", getHorizonOnlineFormBean().getCourse());
				stdetails.put("semester_details", getHorizonOnlineFormBean().getSemester());
				stdetails.put("payment_type", getHorizonOnlineFormBean().getPaymentType());
				// stdetails.put("exam_fee",Double.parseDouble(getHorizonOnlineFormBean().getExamFee()));
				stdetails.put("hostelfine_fees", Double.parseDouble(getHorizonOnlineFormBean().getHostelFee()));
				stdetails.put("miscellaneous_charges",
						Double.parseDouble(getHorizonOnlineFormBean().getMiscellaneous()));
				stdetails.put("other_fee", Double.parseDouble(getHorizonOnlineFormBean().getOtherFee()));
				stdetails.put("total_fee", Double.parseDouble(getHorizonOnlineFormBean().getTotalFee()));
				stdetails.put("exam_feeamount", Double.parseDouble(getHorizonOnlineFormBean().getExamFeeAmount()));
				stdetails.put("hostel_feeamount", Double.parseDouble(getHorizonOnlineFormBean().getHostelFeeAmount()));
				stdetails.put("miscellaneous_amount",
						Double.parseDouble(getHorizonOnlineFormBean().getMiscellaneousAmount()));
				stdetails.put("otherfess_amount", Double.parseDouble(getHorizonOnlineFormBean().getOtherFee()));
				stdetails.put("reference_id", getHorizonOnlineFormBean().getReferenceId());
				stdetails.put("transaction_date", getHorizonOnlineFormBean().getTransactionDate());
				stdetails.put("transaction_id", getHorizonOnlineFormBean().getTransactionId());
				stdetails.put("transaction_status", getHorizonOnlineFormBean().getTransactionStatus());
				stdetails.put("fees_amount", Double.parseDouble(getHorizonOnlineFormBean().getFees()));
				stdetails.put("bus_park", getHorizonOnlineFormBean().getBuspark());
				stdetails.put("fine_amount", Double.parseDouble(getHorizonOnlineFormBean().getFine()));
				stdetails.put("col_fest", getHorizonOnlineFormBean().getColfest());
				stdetails.put("id_card", getHorizonOnlineFormBean().getIdcard());
				stdetails.put("cert_details", getHorizonOnlineFormBean().getCert());
				stdetails.put("semend_feest", Double.parseDouble(getHorizonOnlineFormBean().getSemEndFeest()));
				stdetails.put("photocopy_fees", Double.parseDouble(getHorizonOnlineFormBean().getPhotoCopyFees()));
				stdetails.put("revol_fees", Double.parseDouble(getHorizonOnlineFormBean().getRevolFees()));
				stdetails.put("makeupclass_fees", Double.parseDouble(getHorizonOnlineFormBean().getMakeUpClassFees()));
				stdetails.put("makeupexam_fees", Double.parseDouble(getHorizonOnlineFormBean().getMakeUpExamFees()));
				stdetails.put("fasttrack_fees", Double.parseDouble(getHorizonOnlineFormBean().getFastTrackFees()));
				stdetails.put("fasttrackexam_fees",
						Double.parseDouble(getHorizonOnlineFormBean().getFastTrackExamFees()));
				stdetails.put("rereg_fees", Double.parseDouble(getHorizonOnlineFormBean().getReRegFees()));
				stdetails.put("reregexam_fees", Double.parseDouble(getHorizonOnlineFormBean().getReRegExamFees()));
				stdetails.put("convocation_fees", Double.parseDouble(getHorizonOnlineFormBean().getConvocationFees()));
				stdetails.put("hostel_deposit", Double.parseDouble(getHorizonOnlineFormBean().getHostelDeposit()));
				stdetails.put("hostelfine_fees", Double.parseDouble(getHorizonOnlineFormBean().getHostelFees()));
				stdetails.put("hostelinstru_fees",
						Double.parseDouble(getHorizonOnlineFormBean().getHostelInstruFees()));
				stdetails.put("hosteldamage_fees",
						Double.parseDouble(getHorizonOnlineFormBean().getHostelDamageFees()));
				stdetails.put("hostelfine_fees", Double.parseDouble(getHorizonOnlineFormBean().getHostelfineFees()));
				stdetails.put("hostelfast_track", Double.parseDouble(getHorizonOnlineFormBean().getHostelfastTrack()));
				stdetails.put("hostelmakeup_fees",
						Double.parseDouble(getHorizonOnlineFormBean().getHostelMakeupFees()));
				stdetails.put("misc_fees", Double.parseDouble(getHorizonOnlineFormBean().getMiscFees()));
				stdetails.put("misccons_fees", Double.parseDouble(getHorizonOnlineFormBean().getMiscConsFees()));
				stdetails.put("miscbook_fees", Double.parseDouble(getHorizonOnlineFormBean().getMiscBookFees()));
				stdetails.put("miscclub_fees", Double.parseDouble(getHorizonOnlineFormBean().getMiscClubFees()));
				stdetails.put("miscglobal_fees", Double.parseDouble(getHorizonOnlineFormBean().getMiscGlobalFees()));
				stdetails.put("miscindustrial_fees",
						Double.parseDouble(getHorizonOnlineFormBean().getMiscIndustrialFees()));
				stdetails.put("misctraining_fees",
						Double.parseDouble(getHorizonOnlineFormBean().getMiscTrainingFees()));
				stdetails.put("miscother_fees", Double.parseDouble(getHorizonOnlineFormBean().getMiscotherFees()));
				stdetails.put("total_paymentdetails",
						Double.parseDouble(getHorizonOnlineFormBean().getTotalpaymentDetails()));
				stdetails.put("status_check", getHorizonOnlineFormBean().getStatusCheck());
				stdetails.put("payment_amount", Double.parseDouble(getHorizonOnlineFormBean().getPaymentAmount()));
				stdetails.put("total_examamount", Double.parseDouble(getHorizonOnlineFormBean().getTotalExamAmount()));
				stdetails.put("total_hostelamount",
						Double.parseDouble(getHorizonOnlineFormBean().getTotalhostelAmount()));
				stdetails.put("total_miscellaneousamount",
						Double.parseDouble(getHorizonOnlineFormBean().getTotalmiscellaneousAmount()));

				// Calling API...
				objNode.put("data", stdetails);
				String jsonString1 = obMapper.writeValueAsString(objNode);
				logger.info("jsonString1" + jsonString1.toString());
				Client client = ClientBuilder.newClient();
				WebTarget webTarget = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH))
						.path("/store-form-data");
				Invocation.Builder invocationBuilder = webTarget
						.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				Response response = invocationBuilder.post(Entity.json(jsonString1.toString()));
				logger.info("response" + response.toString());

				// API Response status verification ...
				if (response.getStatus() != 201) {
					String outputError = response.readEntity(String.class);
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "Horizonfailure";
				}

				logger.info("Output from Server...");
				String output = response.readEntity(String.class);
				JSONObject json = new JSONObject(output);
				String formId = json.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH))
						.path("/get-form-data");
				Invocation.Builder invocationBuilder1 = webTarget1
						.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				logger.info("responseString", response1.toString());
				if (response1.getStatus() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + response1.getStatus());
				}
				logger.info("Output from Server....");
				String output1 = response1.readEntity(String.class);
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				JSONArray jsonArray = jsonObject.getJSONArray("message");
				logger.info("jsonArray" + jsonArray);
				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject data1 = data.getJSONObject("data");

				String reg_no = data1.getString("reg_no");
				String student_name = data1.getString("student_name");
				String course_name = data1.getString("course_name");
				String semester_details = data1.getString("semester_details");
				String payment_type = data1.getString("payment_type");
				int exam_fee = data1.getInt("exam_fee");
				int hostel_fee = data1.getInt("hostel_fee");
				int miscellaneous_charges = data1.getInt("miscellaneous_charges");
				int other_fee = data1.getInt("other_fee");
				int total_fee = data1.getInt("total_fee");
				int exam_feeamount = data1.getInt("exam_feeamount");
				int hostel_feeamount = data1.getInt("hostel_feeamount");
				int miscellaneous_amount = data1.getInt("miscellaneous_amount");
				int otherfess_amount = data1.getInt("otherfess_amount");
				String reference_id = data1.getString("reference_id");
				String transaction_date = data1.getString("transaction_date");
				String transaction_id = data1.getString("transaction_id");
				String transaction_status = data1.getString("transaction_status");
				int fees_amount = data1.getInt("fees_amount");
				String bus_park = data1.getString("bus_park");
				int fine_amount = data1.getInt("fine_amount");
				String col_fest = data1.getString("col_fest");
				String id_card = data1.getString("id_card");
				String cert_details = data1.getString("cert_details");
				String semend_feest = data1.getString("semend_feest");
				int photocopy_fees = data1.getInt("photocopy_fees");
				int revol_fees = data1.getInt("revol_fees");
				int makeupclass_fees = data1.getInt("makeupclass_fees");
				int makeupexam_fees = data1.getInt("makeupexam_fees");
				int fasttrack_fees = data1.getInt("fasttrack_fees");
				int fasttrackexam_fees = data1.getInt("fasttrackexam_fees");
				int rereg_fees = data1.getInt("rereg_fees");
				int reregexam_fees = data1.getInt("reregexam_fees");
				int convocation_fees = data1.getInt("convocation_fees");
				int hostel_deposit = data1.getInt("hostel_deposit");
				int hostel_fees = data1.getInt("hostel_fees");
				int hostelinstru_fees = data1.getInt("hostelinstru_fees");
				int hosteldamage_fees = data1.getInt("hosteldamage_fees");
				int hostelfine_fees = data1.getInt("hostelfine_fees");
				int hostelfast_track = data1.getInt("hostelfast_track");
				int hostelmakeup_fees = data1.getInt("hostelmakeup_fees");
				int misc_fees = data1.getInt("misc_fees");
				int misccons_fees = data1.getInt("misccons_fees");
				int miscbook_fees = data1.getInt("miscbook_fees");
				int miscclub_fees = data1.getInt("miscclub_fees");
				int miscglobal_fees = data1.getInt("miscglobal_fees");
				int miscindustrial_fees = data1.getInt("miscindustrial_fees");
				int misctraining_fees = data1.getInt("misctraining_fees");
				int miscother_fees = data1.getInt("miscother_fees");
				int total_paymentdetails = data1.getInt("total_paymentdetails");
				String status_check = data1.getString("status_check");
				int payment_amount = data1.getInt("payment_amount");
				int total_examamount = data1.getInt("total_examamount");
				int total_hostelamount = data1.getInt("total_hostelamount");
				int total_miscellaneousamount = data1.getInt("total_miscellaneousamount");

				// Calling all Setter methods
				// *************************************************************************************************************
				getHorizonOnlineFormBean().setRegNo(reg_no);
				getHorizonOnlineFormBean().setName(student_name);
				getHorizonOnlineFormBean().setCourse(course_name);
				getHorizonOnlineFormBean().setSemester(semester_details);
				getHorizonOnlineFormBean().setPaymentType(payment_type);
				getHorizonOnlineFormBean().setExamFee(String.valueOf(exam_fee));
				getHorizonOnlineFormBean().setHostelFee(String.valueOf(hostelfine_fees));
				getHorizonOnlineFormBean().setMiscellaneous(String.valueOf(miscellaneous_charges));
				getHorizonOnlineFormBean().setOtherFee(String.valueOf(other_fee));
				getHorizonOnlineFormBean().setTotalFee(String.valueOf(total_fee));
				getHorizonOnlineFormBean().setExamFeeAmount(String.valueOf(exam_feeamount));
				getHorizonOnlineFormBean().setHostelFeeAmount(String.valueOf(hostel_feeamount));
				getHorizonOnlineFormBean().setMiscellaneousAmount(String.valueOf(miscellaneous_amount));
				getHorizonOnlineFormBean().setOtherFee(String.valueOf(otherfess_amount));
				getHorizonOnlineFormBean().setReferenceId(reference_id);
				getHorizonOnlineFormBean().setTransactionDate(transaction_date);
				getHorizonOnlineFormBean().setTransactionId(transaction_id);
				getHorizonOnlineFormBean().setTransactionStatus(transaction_status);
				getHorizonOnlineFormBean().setFees(String.valueOf(fees_amount));
				getHorizonOnlineFormBean().setBuspark(bus_park);
				getHorizonOnlineFormBean().setFine(String.valueOf(fine_amount));
				getHorizonOnlineFormBean().setColfest(col_fest);
				getHorizonOnlineFormBean().setIdcard(id_card);
				getHorizonOnlineFormBean().setCert(cert_details);
				getHorizonOnlineFormBean().setSemEndFeest(semend_feest);
				getHorizonOnlineFormBean().setPhotoCopyFees(String.valueOf(photocopy_fees));
				getHorizonOnlineFormBean().setRevolFees(String.valueOf(revol_fees));
				getHorizonOnlineFormBean().setMakeUpClassFees(String.valueOf(makeupclass_fees));
				getHorizonOnlineFormBean().setMakeUpExamFees(String.valueOf(makeupexam_fees));
				getHorizonOnlineFormBean().setFastTrackFees(String.valueOf(fasttrack_fees));
				getHorizonOnlineFormBean().setFastTrackExamFees(String.valueOf(fasttrackexam_fees));
				getHorizonOnlineFormBean().setReRegFees(String.valueOf(rereg_fees));
				getHorizonOnlineFormBean().setReRegExamFees(String.valueOf(reregexam_fees));
				getHorizonOnlineFormBean().setConvocationFees(String.valueOf(convocation_fees));
				getHorizonOnlineFormBean().setHostelDeposit(String.valueOf(hostel_deposit));
				getHorizonOnlineFormBean().setHostelFees(String.valueOf(hostelfine_fees));
				getHorizonOnlineFormBean().setHostelInstruFees(String.valueOf(hostelinstru_fees));
				getHorizonOnlineFormBean().setHostelDamageFees(String.valueOf(hosteldamage_fees));
				getHorizonOnlineFormBean().setHostelfineFees(String.valueOf(hostelfine_fees));
				getHorizonOnlineFormBean().setHostelfastTrack(String.valueOf(hostelfast_track));
				getHorizonOnlineFormBean().setHostelMakeupFees(String.valueOf(hostelmakeup_fees));
				getHorizonOnlineFormBean().setMiscFees(String.valueOf(misc_fees));
				getHorizonOnlineFormBean().setMiscConsFees(String.valueOf(misccons_fees));
				getHorizonOnlineFormBean().setMiscBookFees(String.valueOf(miscbook_fees));
				getHorizonOnlineFormBean().setMiscClubFees(String.valueOf(miscclub_fees));
				getHorizonOnlineFormBean().setMiscGlobalFees(String.valueOf(miscglobal_fees));
				getHorizonOnlineFormBean().setMiscIndustrialFees(String.valueOf(miscindustrial_fees));
				getHorizonOnlineFormBean().setMiscTrainingFees(String.valueOf(misctraining_fees));
				getHorizonOnlineFormBean().setMiscotherFees(String.valueOf(miscother_fees));
				getHorizonOnlineFormBean().setTotalpaymentDetails(String.valueOf(total_paymentdetails));
				getHorizonOnlineFormBean().setStatusCheck(status_check);
				getHorizonOnlineFormBean().setPaymentAmount(String.valueOf(payment_amount));
				getHorizonOnlineFormBean().setTotalExamAmount(String.valueOf(total_examamount));
				getHorizonOnlineFormBean().setTotalhostelAmount(String.valueOf(total_hostelamount));
				getHorizonOnlineFormBean().setTotalmiscellaneousAmount(String.valueOf(total_miscellaneousamount));

				// ************************************************************************************************************

				getHorizonOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getHorizonOnlineFormBean());

				// ------End Form Engine
				String responseString = studentRegistrationService.insertHorizonDetails(getHorizonOnlineFormBean(),
						billerId);
				logger.info("Horizon RegisterStudent :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed Horizon School to add  data.");
					return "faliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "faliure";
				}
				String studIDandreg = getHorizonOnlineFormBean().getName() + "::"
						+ getHorizonOnlineFormBean().getRegNo();
				logger.info("StudentName:------------**StudentName***------------------------" + studIDandreg);
				studentRegistrationFormBean.setStudentName(studIDandreg);
				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getHorizonOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getHorizonOnlineFormBean().getTotalFee());
				studentRegistrationFormBean.setStudentId(getHorizonOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getHorizonOnlineFormBean().getStudentRegistrationId());
				logger.info("Horizon School --feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "faliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String brainStormRegisterStudent() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------brainStormRegisterStudent------------------------------------------------");
			logger.info("brainStormRegisterStudent : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getBrainStormFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			// getAppData().setStrID("TEST"); //need to clarify
			// getAppData().setStrID("TEST"); //need to clarify getFeesAmount
			if (AmountValidation(getBrainStormFormBean().getTotalFee(), getBrainStormFormBean().getPayment())) {
				// BrainStormFormBean Form Engine start
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				Date date1 = sdf.parse(getBrainStormFormBean().getDob());

				// Getters atarted...
				stdetails.put("student_name", getBrainStormFormBean().getName());
				stdetails.put("mobile_no", Long.parseLong(getBrainStormFormBean().getMobileNo()));
				stdetails.put("dob_date", formatter.format(date1));
				stdetails.put("college_name", getBrainStormFormBean().getCollegename());
				stdetails.put("father_name", getBrainStormFormBean().getFathername());
				stdetails.put("course_name", getBrainStormFormBean().getCourse());
				stdetails.put("total_fee", Double.parseDouble(getBrainStormFormBean().getTotalFee()));

				stdetails.put("txn_amt", Double.parseDouble(getBrainStormFormBean().getTotalFee()));
				stdetails.put("payment_details", Double.parseDouble(getBrainStormFormBean().getTotalFee()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getBrainStormFormBean().getTotalFee()));
				// Calling API...
				/*
				 * objNode.put("data", stdetails); String jsonString1 =
				 * obMapper.writeValueAsString(objNode); logger.info("jsonString1" +
				 * jsonString1.toString());
				 */

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();

				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response//commented by priya for form engine response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				// API Response status verification ...

				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "faliure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine Response response1 =
				 * invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);
				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String student_name = dataobj.getString("student_name");
				String college_name = dataobj.getString("college_name");
				String father_name = dataobj.getString("father_name");
				String dob_date = dataobj.getString("dob_date");
				int mobile_no = dataobj.getInt("mobile_no");
				String course_name = dataobj.getString("course_name");
				int total_fee = dataobj.getInt("total_fee");

				// Calling all Setter methods
				getBrainStormFormBean().setName(student_name);
				getBrainStormFormBean().setMobileNo(String.valueOf(mobile_no));
				getBrainStormFormBean().setDob(dob_date);
				getBrainStormFormBean().setCollegename(college_name);
				getBrainStormFormBean().setFathername(father_name);
				getBrainStormFormBean().setCourse(course_name);
				getBrainStormFormBean().setTotalFee(String.valueOf(total_fee));

				getBrainStormFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getBrainStormFormBean());

				// End BrainStormFormBean
				String responseString = studentRegistrationService.insertBrainStormEaseDetails(getBrainStormFormBean(),
						billerId);
				logger.info("brainStormRegisterStudent :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add Success Ease data.");
					return "faliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "faliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getBrainStormFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getBrainStormFormBean().getTotalFee());
				studentRegistrationFormBean.setStudentId(getBrainStormFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getBrainStormFormBean().getStudentRegistrationId());
				logger.info("BrainStorm --feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "faliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String delhiSchoolRegisterStudent() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("--------------------Start delhiSchoolRegisterStudent-------------------");
			logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("------billerId :------" + billerId);
			logger.info("registeredUserId.." + registeredUserId);
			getDelhiSchoolOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

			if (AmountValidation(getDelhiSchoolOnlineFormBean().getTotalamount(),
					getDelhiSchoolOnlineFormBean().getPayment())) {
				// -------------Form Engine DelhiSchoolOnlineFormBean start
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				// Getters atarted...
				stdetails.put("student_name", getDelhiSchoolOnlineFormBean().getStudentName());
				stdetails.put("stud_class", getDelhiSchoolOnlineFormBean().getStudclass());
				stdetails.put("section_details", getDelhiSchoolOnlineFormBean().getSection());
				stdetails.put("student_admission", getDelhiSchoolOnlineFormBean().getStuadmission());
				stdetails.put("amount_rs", Double.parseDouble(getDelhiSchoolOnlineFormBean().getAmount()));
				if (getDelhiSchoolOnlineFormBean().getStdMobileNo() != "") {
					stdetails.put("std_mobileno", Long.parseLong(getDelhiSchoolOnlineFormBean().getStdMobileNo()));
				} else {

					stdetails.put("std_mobileno", 0);
				}
				stdetails.put("total_amount", Double.parseDouble(getDelhiSchoolOnlineFormBean().getTotalamount()));

				stdetails.put("txn_amt", Double.parseDouble(getDelhiSchoolOnlineFormBean().getTotalamount()));
				stdetails.put("payment_details", Double.parseDouble(getDelhiSchoolOnlineFormBean().getTotalamount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getDelhiSchoolOnlineFormBean().getTotalamount()));

				// Calling API...
				objNode.put("form_data", stdetails);
				String jsonString1 = obMapper.writeValueAsString(objNode);
				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();

				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response//commented by priya for form engine response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				// API Response status verification ...

				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "delhischoolfailure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine Response response1 =
				 * invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);
				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String student_name = dataobj.getString("student_name");
				String stud_class = dataobj.getString("stud_class");
				String section_details = dataobj.getString("section_details");
				String student_admission = dataobj.getString("student_admission");
				int std_mobileno = dataobj.getInt("std_mobileno");
				int amount_rs = dataobj.getInt("amount_rs");
				int total_amount = dataobj.getInt("total_amount");

				// Calling all Setter methods
				getDelhiSchoolOnlineFormBean().setStudentName(student_name);
				getDelhiSchoolOnlineFormBean().setStudclass(stud_class);
				getDelhiSchoolOnlineFormBean().setSection(section_details);
				getDelhiSchoolOnlineFormBean().setStuadmission(student_admission);
				getDelhiSchoolOnlineFormBean().setAmount(String.valueOf(amount_rs));
				getDelhiSchoolOnlineFormBean().setStdMobileNo(String.valueOf(std_mobileno));
				getDelhiSchoolOnlineFormBean().setTotalamount(String.valueOf(total_amount));

				getDelhiSchoolOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getDelhiSchoolOnlineFormBean());

				// -------------End
				String responseString = studentRegistrationService.insertDelhiSchool(getDelhiSchoolOnlineFormBean(),
						billerId);
				logger.info("getDelhiSchoolOnlineFormBean :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add Student data in Delhi school.");
					return "delhischoolfailure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "delhischoolfailure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getDelhiSchoolOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getDelhiSchoolOnlineFormBean().getTotalamount());
				studentRegistrationFormBean.setStudentId(getDelhiSchoolOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getDelhiSchoolOnlineFormBean().getStudentRegistrationId());
				logger.info("SE--feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "delhischoolfailure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String sisRegisterStudent() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------SISRegisterStudent------------------------------------------------");
			logger.info("SISRegisterStudent : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getSisFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			// getAppData().setStrID("TEST"); //need to clarify
			// getAppData().setStrID("TEST"); //need to clarify getFeesAmount
			if (AmountValidation(getSisFormBean().getTotalFee(), getSisFormBean().getPayment())) {
				// 4980 SISFormBean Form Engine start
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				// Getters atarted...
				stdetails.put("session_details", getSisFormBean().getSession());
				stdetails.put("natureof_fee", getSisFormBean().getNatureOfFee());
				stdetails.put("specification_details", getSisFormBean().getSpecification());
				stdetails.put("student_name", getSisFormBean().getStudentname());
				stdetails.put("admission_no", getSisFormBean().getAdmissionNo());
				stdetails.put("father_name", getSisFormBean().getFathername());
				stdetails.put("email_id", getSisFormBean().getEmailId());
				stdetails.put("mobile_no", Long.parseLong(getSisFormBean().getMobileNo()));
				stdetails.put("student_class", getSisFormBean().getStudentclass());
				stdetails.put("total_fee", Double.parseDouble(getSisFormBean().getTotalFee()));

				stdetails.put("txn_amt", Double.parseDouble(getSisFormBean().getTotalFee()));
				stdetails.put("payment_details", Double.parseDouble(getSisFormBean().getTotalFee()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getSisFormBean().getTotalFee()));

				// Calling API...
				/*
				 * objNode.put("data", stdetails); String jsonString1 =
				 * obMapper.writeValueAsString(objNode); logger.info("jsonString1" +
				 * jsonString1.toString());
				 */

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response//commented by priya for form engine response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				// API Response status verification ...

				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "faliure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine Response response1 =
				 * invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */

				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String natureof_fee = dataobj.getString("natureof_fee");
				String specification_details = dataobj.getString("specification_details");
				String student_name = dataobj.getString("student_name");
				String student_class = dataobj.getString("student_class");
				String admission_no = dataobj.getString("admission_no");
				String father_name = dataobj.getString("father_name");
				String email_id = dataobj.getString("email_id");
				int mobile_no = dataobj.getInt("mobile_no");
				int total_fee = dataobj.getInt("total_fee");
				String session_details = dataobj.getString("session_details");

				// Calling all Setter methods
				getSisFormBean().setSession(session_details);
				getSisFormBean().setNatureOfFee(natureof_fee);
				getSisFormBean().setSpecification(specification_details);
				getSisFormBean().setStudentname(student_name);
				getSisFormBean().setAdmissionNo(admission_no);
				getSisFormBean().setFathername(father_name);
				getSisFormBean().setEmailId(email_id);
				getSisFormBean().setMobileNo(String.valueOf(mobile_no));
				getSisFormBean().setTotalFee(String.valueOf(total_fee));
				getSisFormBean().setStudentclass(student_class);

				getSisFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getSisFormBean());

				// End SISFormBean Form Engine
				String responseString = studentRegistrationService.insertSISDetails(getSisFormBean(), billerId);
				logger.info("SIS Gurukul trust RegisterStudent :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to SIS Gurukul trust add  data.");
					return "faliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "faliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getSisFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getSisFormBean().getTotalFee());
				studentRegistrationFormBean.setStudentId(getSisFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getSisFormBean().getStudentRegistrationId());
				logger.info("SIS Gurukul trust --feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "faliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String getICEStudent() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------ICERegisterStudent------------START-----" + System.currentTimeMillis());
			logger.info("---------ICERegisterStudent------------------------------------------------");
			logger.info("iceRegisterStudent : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getIceFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
			logger.info("Test Branch: " + getIceFormBean().getBranch());

			if (AmountValidation(getIceFormBean().getAmount(), getIceFormBean().getPayment())) {
				// 5199 Form Engine starts
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				// Getters atarted...
				stdetails.put("student_name", getIceFormBean().getStudentName());
				stdetails.put("mobile_no", Long.parseLong(getIceFormBean().getMobileNo()));
				stdetails.put("email_id", getIceFormBean().getEmailId());
				stdetails.put("address_details", getIceFormBean().getAddress());
				stdetails.put("dob_date", getIceFormBean().getDob());
				stdetails.put("course_name", getIceFormBean().getCourse());
				stdetails.put("other_course", getIceFormBean().getOtherCourse());
				stdetails.put("branch_name", getIceFormBean().getBranch());
				stdetails.put("other_branch", getIceFormBean().getOtherBranch());
				stdetails.put("amount_rs", Double.parseDouble(getIceFormBean().getAmount()));

				stdetails.put("txn_amt", Double.parseDouble(getIceFormBean().getAmount()));
				stdetails.put("payment_details", Double.parseDouble(getIceFormBean().getAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getIceFormBean().getAmount()));
				// Calling API...
				/*
				 * objNode.put("data", stdetails); String jsonString1 =
				 * obMapper.writeValueAsString(objNode); logger.info("jsonString1" +
				 * jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				Client client = ClientBuilder.newClient();
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				String clientId = "actual-smarthub-node-ip";
				String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				secureAPIBuilder.setAuthenticationAlias(clientId);

				byte[] clientKey = hexStringToByteArray(clientKeyStr);
				secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH))
				 * .path("/store-form-data"); Invocation.Builder invocationBuilder = webTarget
				 * .request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE); Response response
				 * = invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				// API Response status verification ...
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "Default";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH))
				 * .path("/get-form-data"); Invocation.Builder invocationBuilder1 = webTarget1
				 * .request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE); Response
				 * response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);
				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String student_name = dataobj.getString("student_name");
				int mobile_no = dataobj.getInt("mobile_no");
				String email_id = dataobj.getString("email_id");
				String address_details = dataobj.getString("address_details");
				String dob_date = dataobj.getString("dob_date");
				String course_name = dataobj.getString("course_name");
				String other_course = dataobj.getString("other_course");
				String branch_name = dataobj.getString("branch_name");
				String other_branch = dataobj.getString("other_branch");
				int amount_rs = dataobj.getInt("amount_rs");

				// Calling all Setter methods
				getIceFormBean().setStudentName(student_name);
				getIceFormBean().setMobileNo(String.valueOf(mobile_no));
				getIceFormBean().setEmailId(email_id);
				getIceFormBean().setAddress(address_details);
				getIceFormBean().setDob(dob_date);
				getIceFormBean().setCourse(course_name);
				getIceFormBean().setOtherCourse(other_course);
				getIceFormBean().setBranch(branch_name);
				getIceFormBean().setOtherBranch(other_branch);
				getIceFormBean().setAmount(String.valueOf(amount_rs));

				getIceFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getIceFormBean());

				// End Form Engine code
				String responseString = studentRegistrationService.insertIceDetails(getIceFormBean(), billerId);
				logger.info("ICERegisterStudent :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add Success Ease data.");
					return "faliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "faliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getIceFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getIceFormBean().getAmount());
				studentRegistrationFormBean.setStudentId(getIceFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getIceFormBean().getStudentRegistrationId());
				logger.info("ICE --feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "faliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			logger.info("---------ICERegisterStudent--------ERROR--END-----" + System.currentTimeMillis());
			return ERROR;

		}
		logger.info("---------ICERegisterStudent------------END-----" + System.currentTimeMillis());
		return SUCCESS;
	}

	public String iEIIndiaRegisterStudent() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------iEIIndiaRegisterStudent ~Start~---------------" + System.currentTimeMillis());
			logger.info("iEIIndiaRegisterStudent : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getIeiIndiaFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

			if (AmountValidation(getIeiIndiaFormBean().getTotalFee(), getIeiIndiaFormBean().getPayment())) {
				// ---------From Engine start IEIIndiaOnlineFormBean
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				stdetails.put("donor_name", getIeiIndiaFormBean().getName());
				stdetails.put("postal_add", getIeiIndiaFormBean().getPostalAdd());
				stdetails.put("pin_code", Long.parseLong(getIeiIndiaFormBean().getPincode()));

				stdetails.put("address_details", getIeiIndiaFormBean().getPostalAdd());
				stdetails.put("state_name", getIeiIndiaFormBean().getState());
				stdetails.put("email_id", getIeiIndiaFormBean().getEmialID());
				if (getIeiIndiaFormBean().getGstin() != "") {
					stdetails.put("member_ieiid", getIeiIndiaFormBean().getMemberIEIID());
				} else {
					stdetails.put("member_ieiid", " ");
				}

				stdetails.put("mobile_no", Long.parseLong(getIeiIndiaFormBean().getMobileNo()));
				if (getIeiIndiaFormBean().getPurpose() != null) {
					stdetails.put("purpose_details", getIeiIndiaFormBean().getPurpose());
				} else {
					stdetails.put("purpose_details", " ");
				}
				stdetails.put("pan_no", getIeiIndiaFormBean().getPanNo());
				if (getIeiIndiaFormBean().getGstin() != "") {
					stdetails.put("gst_in", getIeiIndiaFormBean().getGstin());
				} else {

					stdetails.put("gst_in", " ");

				}
				stdetails.put("total_fee", Double.parseDouble(getIeiIndiaFormBean().getTotalFee()));

				stdetails.put("txn_amt", Double.parseDouble(getIeiIndiaFormBean().getTotalFee()));
				stdetails.put("payment_details", Double.parseDouble(getIeiIndiaFormBean().getTotalFee()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getIeiIndiaFormBean().getTotalFee()));

				/*
				 * objNode.put("data",stdetails);
				 * 
				 * String jsonString1=obMapper.writeValueAsString(objNode);
				 * 
				 * logger.info("jsonString1"+jsonString1.toString());
				 */

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "faliure";
					// throw new RuntimeException("Failed : HTTP error code : " +
					// response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);

				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine
				 * 
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();

				logger.info("output1" + output1);

				JSONObject jsonObject = new JSONObject(output1);

				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String donor_name = dataobj.getString("donor_name");
				String postal_add = dataobj.getString("postal_add");
				int pin_code = dataobj.getInt("pin_code");
				String address_details = dataobj.getString("address_details");
				String state_name = dataobj.getString("state_name");
				String email_id = dataobj.getString("email_id");
				String member_ieiid = dataobj.getString("member_ieiid");
				int mobile_no = dataobj.getInt("mobile_no");
				String purpose_details = dataobj.getString("purpose_details");
				String pan_no = dataobj.getString("pan_no");
				String gst_in = dataobj.getString("gst_in");
				int total_fee = dataobj.getInt("total_fee");
				// -----------------------------------------------------------------

				// *******************************************************************
				getIeiIndiaFormBean().setName(donor_name);
				getIeiIndiaFormBean().setPostalAdd(postal_add);
				getIeiIndiaFormBean().setPincode(String.valueOf(pin_code));
				getIeiIndiaFormBean().setAddress(address_details);
				getIeiIndiaFormBean().setState(state_name);
				getIeiIndiaFormBean().setEmialID(email_id);
				getIeiIndiaFormBean().setMemberIEIID(getIeiIndiaFormBean().getMemberIEIID());
				getIeiIndiaFormBean().setMobileNo(getIeiIndiaFormBean().getMobileNo());
				getIeiIndiaFormBean().setPurpose(purpose_details);
				getIeiIndiaFormBean().setPanNo(pan_no);
				getIeiIndiaFormBean().setGstin(gst_in);
				getIeiIndiaFormBean().setTotalFee(String.valueOf(total_fee));
				getIeiIndiaFormBean().setApplicationNo(formId);

				getUserSessionMap().put("ONLINEFORMDATA", getIeiIndiaFormBean());

				// ---------End Form Enigne
				String responseString = studentRegistrationService.insertIEIIndiaDetails(getIeiIndiaFormBean(),
						billerId);
				logger.info("iEIIndiaRegisterStudent :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add Success Ease data.");
					return "faliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "faliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getIeiIndiaFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getIeiIndiaFormBean().getTotalFee());
				studentRegistrationFormBean.setStudentId(getIeiIndiaFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getIeiIndiaFormBean().getStudentRegistrationId());
				logger.info("BrainStorm --feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "faliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		logger.info("---------iEIIndiaRegisterStudent ~END~---------------" + System.currentTimeMillis());
		return SUCCESS;
	}

	public String getBhartiConceptStudent() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("START---------getBhartiConceptStudent------------------------------------------------");
			logger.info("getBhartiConceptStudent : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getBhartiConceptFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

			if (AmountValidation(getBhartiConceptFormBean().getFinalAmount(),
					getBhartiConceptFormBean().getPayment())) {
				// ------Form Engine start
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				// Getters atarted...
				stdetails.put("student_name", getBhartiConceptFormBean().getStdName());
				stdetails.put("father_name", getBhartiConceptFormBean().getFatherName());
				stdetails.put("mobile_no", Long.parseLong(getBhartiConceptFormBean().getMobileNo()));
				stdetails.put("email_id", getBhartiConceptFormBean().getEmailId());
				stdetails.put("others_details",
						getBhartiConceptFormBean().getOthers() == null ? "0" : getBhartiConceptFormBean().getOthers());

				stdetails.put("amounttobe_paid", Double.parseDouble(getBhartiConceptFormBean().getAmountToBePaid()));
				stdetails.put("final_amount", Double.parseDouble(getBhartiConceptFormBean().getFinalAmount()));
				stdetails.put("course_name", getBhartiConceptFormBean().getCourse());

				stdetails.put("txn_amt", Double.parseDouble(getBhartiConceptFormBean().getAmountToBePaid()));
				stdetails.put("payment_details", Double.parseDouble(getBhartiConceptFormBean().getAmountToBePaid()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getBhartiConceptFormBean().getAmountToBePaid()));

				// Calling API...
				objNode.put("form_data", stdetails);
				String jsonString1 = obMapper.writeValueAsString(objNode);
				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response//commented by priya for form engine response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */

				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				// API Response status verification ...
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "faliure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine Response response1 =
				 * invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);
				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String student_name = dataobj.getString("student_name");
				String father_name = dataobj.getString("father_name");
				int mobile_no = dataobj.getInt("mobile_no");
				String email_id = dataobj.getString("email_id");
				String course_name = dataobj.getString("course_name");
				String others_details = dataobj.getString("others_details");
				int amounttobe_paid = dataobj.getInt("amounttobe_paid");
				int final_amount = dataobj.getInt("final_amount");

				// Calling all Setter methods
				getBhartiConceptFormBean().setStdName(student_name);
				getBhartiConceptFormBean().setFatherName(father_name);
				getBhartiConceptFormBean().setMobileNo(getBhartiConceptFormBean().getMobileNo());
				getBhartiConceptFormBean().setEmailId(email_id);
				getBhartiConceptFormBean().setOthers(others_details);
				getBhartiConceptFormBean().setAmountToBePaid(String.valueOf(amounttobe_paid));
				getBhartiConceptFormBean().setFinalAmount(String.valueOf(final_amount));
				getBhartiConceptFormBean().setCourse(course_name);

				getBhartiConceptFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getBhartiConceptFormBean());

				// -------End form engine
				String responseString = studentRegistrationService
						.insertBhartiConceptDetails(getBhartiConceptFormBean(), billerId);
				logger.info("getBhartiConceptFormBean response :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add Success Ease data.");
					return "faliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "faliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getBhartiConceptFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getBhartiConceptFormBean().getFinalAmount());
				studentRegistrationFormBean.setStudentId(getBhartiConceptFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getBhartiConceptFormBean().getStudentRegistrationId());
				logger.info("NavJagriti --feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "faliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		logger.info("END---getBhartiConceptStudent");
		return SUCCESS;
	}

	/*
	 * public String getRoorkeeStudent() { if (!super.isValidSession()) { return
	 * INVALID_SESSION; } try{ logger.info(
	 * "---------RoorkeeRegisterStudent------------------------------------------------"
	 * ); logger.info("RoorkeeRegisterStudent : - " +
	 * getAppData().getStudentRegistrationId());
	 * logger.info("---------------------------------------------------------");
	 * String billerId = ((FJBean)
	 * getUserSessionMap().get("BASEDATA")).getBillerId(); String registeredUserId =
	 * ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
	 * logger.info("registeredUserId.."+registeredUserId);
	 * getRoorkeeOnlineFornBean().setRegisteredUserId(registeredUserId);
	 * StudentRegistrationService studentRegistrationService = new
	 * StudentRegistrationService();
	 * 
	 * if(AmountValidation(getRoorkeeOnlineFornBean().getAmount(),
	 * getRoorkeeOnlineFornBean().getPayment())) {
	 * 
	 * String responseString =
	 * studentRegistrationService.insertRoorkeeDetails(getRoorkeeOnlineFornBean(),
	 * billerId); logger.info("RoorkeeRegisterStudent :"+responseString);
	 * 
	 * if (responseString != null && !"".equalsIgnoreCase(responseString) &&
	 * "success".equalsIgnoreCase(responseString)) {
	 * addActionMessage(ErrorPropertyReader.getProperty(
	 * "student.data.added.successfully")); }else if
	 * ("NA".equalsIgnoreCase(responseString)){
	 * addActionMessage("Failed to add Success Ease data."); return "faliure"; }else
	 * { addActionMessage("Error occured contact administrator."); return "faliure";
	 * }
	 * 
	 * studentRegistrationFormBean =
	 * super.getRegisteredStudentDetails(getRoorkeeOnlineFornBean().
	 * getStudentRegistrationId());
	 * studentRegistrationFormBean.setTotalPayableFees(getRoorkeeOnlineFornBean().
	 * getAmount());
	 * studentRegistrationFormBean.setStudentId(getRoorkeeOnlineFornBean().
	 * getApplicationNo()); super.applyFees(studentRegistrationFormBean);
	 * 
	 * QuickPayAction quickPayAction = new QuickPayAction(); appData1 = new
	 * PaymentRequestBean();
	 * appData1.setStudentRegistrationId(getRoorkeeOnlineFornBean().
	 * getStudentRegistrationId()); logger.info(
	 * "roorkeeRegisterStudent --feesPayList :: "+ feesPayList);
	 * quickPayAction.setAppDataFromStudentBean(this.appData1,
	 * studentRegistrationFormBean,feesPayList);
	 * 
	 * getUserSessionMap().put("APPDATA", getAppData1());
	 * 
	 * } else{ addActionMessage("Amount Mismatched."); return "faliure"; }
	 * }catch(Exception e) { logger.error("Exception  " +e); return ERROR;
	 * 
	 * } return SUCCESS; }
	 */
	public String getTrinityStudent() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------TrinityRegisterStudent------------------------------------------------");
			logger.info("trinityRegisterStudent : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getTrinityOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

			if (AmountValidation(getTrinityOnlineFormBean().getTotalAmount(),
					getTrinityOnlineFormBean().getPayment())) {
				// ----FOrm Engine start TrinityOnlineFormBean
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				Date date1 = sdf.parse(getTrinityOnlineFormBean().getDob());

				// Getters atarted...
				stdetails.put("nameof_student", getTrinityOnlineFormBean().getNameOfStudent());
				if (getTrinityOnlineFormBean().getPhoneNumber() != "") {
					stdetails.put("phone_number", Long.parseLong(getTrinityOnlineFormBean().getPhoneNumber()));
				} else {

					stdetails.put("phone_number", 0);
				}

				stdetails.put("enrollment_number", getTrinityOnlineFormBean().getEnrollmentNumber());
				stdetails.put("course_name", getTrinityOnlineFormBean().getCourse());

				stdetails.put("amounttobe_paid", Double.parseDouble(getTrinityOnlineFormBean().getAmountToBePaid()));
				stdetails.put("total_amount", Double.parseDouble(getTrinityOnlineFormBean().getTotalAmount()));
				stdetails.put("dob_date", formatter.format(date1));
				stdetails.put("father_name", getTrinityOnlineFormBean().getFatherName());
				stdetails.put("batch_details", getTrinityOnlineFormBean().getBatch());

				stdetails.put("txn_amt", Double.parseDouble(getTrinityOnlineFormBean().getTotalAmount()));
				stdetails.put("payment_details", Double.parseDouble(getTrinityOnlineFormBean().getTotalAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getTrinityOnlineFormBean().getTotalAmount()));
				// Calling API...
				/*
				 * objNode.put("data", stdetails); String jsonString1 =
				 * obMapper.writeValueAsString(objNode); logger.info("jsonString1" +
				 * jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();

				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response//commented by priya for frm engine response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */

				// API Response status verification ...
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "faliure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);

				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine Response response1 =
				 * invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */

				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String nameof_student = dataobj.getString("nameof_student");
				int phone_number = dataobj.getInt("phone_number");
				String enrollment_number = dataobj.getString("enrollment_number");
				String course_name = dataobj.getString("course_name");
				String dob_date = dataobj.getString("dob_date");
				String father_name = dataobj.getString("father_name");
				String batch_details = dataobj.getString("batch_details");
				int amounttobe_paid = dataobj.getInt("amounttobe_paid");
				// int total_amount = data1.getInt("total_amount");

				// Calling all Setter methods
				getTrinityOnlineFormBean().setNameOfStudent(nameof_student);
				getTrinityOnlineFormBean().setPhoneNumber(getTrinityOnlineFormBean().getPhoneNumber());
				getTrinityOnlineFormBean().setEnrollmentNumber(enrollment_number);
				getTrinityOnlineFormBean().setCourse(course_name);
				getTrinityOnlineFormBean().setAmountToBePaid(String.valueOf(amounttobe_paid));
				// getTrinityOnlineFormBean().setTotalAmount(String.valueOf(total_amount));
				getTrinityOnlineFormBean().setDob(dob_date);
				getTrinityOnlineFormBean().setFatherName(father_name);
				getTrinityOnlineFormBean().setBatch(batch_details);

				getTrinityOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getTrinityOnlineFormBean());

				// --Ebd - TrinityOnlineFormBean
				String responseString = studentRegistrationService.insertTrinityDetails(getTrinityOnlineFormBean(),
						billerId);
				logger.info("TrinityRegisterStudent :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add Success Ease data.");
					return "faliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "faliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getTrinityOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getTrinityOnlineFormBean().getTotalAmount());
				studentRegistrationFormBean.setStudentId(getTrinityOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getTrinityOnlineFormBean().getStudentRegistrationId());
				logger.info("trinityRegisterStudent --feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "faliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String getNavJagritiStudent() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------getNavJagritiStudent------------------------------------------------");
			logger.info("getNavJagritiStudent : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getNavJagritiBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

			if (AmountValidation(getNavJagritiBean().getAmount(), getNavJagritiBean().getPayment())) {
				// -------Form Engine start
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();
				// Getters atarted...
				stdetails.put("student_name", getNavJagritiBean().getStudentName());
				stdetails.put("class_name", getNavJagritiBean().getClassName());
				stdetails.put("section_details", getNavJagritiBean().getSection());
				stdetails.put("admission_no", getNavJagritiBean().getAdmissionNo());
				if (getNavJagritiBean().getMobileNo() != "") {
					stdetails.put("mobile_no", Long.parseLong(getNavJagritiBean().getMobileNo()));
				} else {

					stdetails.put("mobile_no", 0);
				}
				stdetails.put("transporation_fee", Double.parseDouble(getNavJagritiBean().getTransporationFee()));
				stdetails.put("amount_details", Double.parseDouble(getNavJagritiBean().getAmount()));

				stdetails.put("txn_amt", Double.parseDouble(getNavJagritiBean().getAmount()));
				stdetails.put("payment_details", Double.parseDouble(getNavJagritiBean().getAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getNavJagritiBean().getAmount()));
				// Calling API...
				/*
				 * objNode.put("data", stdetails); String jsonString1 =
				 * obMapper.writeValueAsString(objNode); logger.info("jsonString1" +
				 * jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();

				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response//commented by priya for form engine response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				// API Response status verification ...
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "faliure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine Response response1 =
				 * invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);
				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String student_name = dataobj.getString("student_name");
				String class_name = dataobj.getString("class_name");
				String section_details = dataobj.getString("section_details");
				String admission_no = dataobj.getString("admission_no");
				int mobile_no = dataobj.getInt("mobile_no");
				int transporation_fee = dataobj.getInt("transporation_fee");
				int amount_details = dataobj.getInt("amount_details");

				// Calling all Setter methods
				getNavJagritiBean().setStudentName(student_name);
				getNavJagritiBean().setClassName(class_name);
				getNavJagritiBean().setSection(section_details);
				getNavJagritiBean().setAdmissionNo(admission_no);
				getNavJagritiBean().setMobileNo(getNavJagritiBean().getMobileNo());
				getNavJagritiBean().setTransporationFee(String.valueOf(transporation_fee));
				getNavJagritiBean().setAmount(String.valueOf(amount_details));

				getNavJagritiBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getNavJagritiBean());

				// ------End Form engine
				String responseString = studentRegistrationService.insertNavJagritiDetails(getNavJagritiBean(),
						billerId);
				logger.info("getNavJagritiBean :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add Success Ease data.");
					return "faliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "faliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getNavJagritiBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getNavJagritiBean().getAmount());
				studentRegistrationFormBean.setStudentId(getNavJagritiBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getNavJagritiBean().getStudentRegistrationId());
				logger.info("NavJagriti --feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "faliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

//===============DPS Panipat -- Start===============
	public String getDpsPanipatDetails() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------DPS Panipat details------------------------------------------------");
			logger.info("DPS Panipat details : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getDpsPanipatOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

			if (AmountValidation(getDpsPanipatOnlineFormBean().getTotalAmount(),
					getDpsPanipatOnlineFormBean().getPayment())) {
				// -------From Engine start DPSPANIPAT
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				// Getters atarted...
				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				stdetails.put("student_admissionno", getDpsPanipatOnlineFormBean().getStudAdmissionNo());
				stdetails.put("student_name", getDpsPanipatOnlineFormBean().getStudentName());
				stdetails.put("father_name", getDpsPanipatOnlineFormBean().getFatherName());
				if (getDpsPanipatOnlineFormBean().getMotherName() != "") {
					stdetails.put("mother_name", getDpsPanipatOnlineFormBean().getMotherName());
				} else {

					stdetails.put("mother_name", " ");
				}
				stdetails.put("phone_no", Long.parseLong(getDpsPanipatOnlineFormBean().getPhoneNo()));
				stdetails.put("stud_class", getDpsPanipatOnlineFormBean().getStudClass());
				if (getDpsPanipatOnlineFormBean().getRemark() != "") {
					stdetails.put("remark_details", getDpsPanipatOnlineFormBean().getRemark());
				} else {

					stdetails.put("remark_details", " ");
				}
				stdetails.put("amount_tobepaid", Double.parseDouble(getDpsPanipatOnlineFormBean().getAmountToBePaid()));
				stdetails.put("total_amount", Double.parseDouble(getDpsPanipatOnlineFormBean().getTotalAmount()));

				stdetails.put("txn_amt", Double.parseDouble(getDpsPanipatOnlineFormBean().getTotalAmount()));
				stdetails.put("payment_details", Double.parseDouble(getDpsPanipatOnlineFormBean().getTotalAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getDpsPanipatOnlineFormBean().getTotalAmount()));

				// Calling API...
				/*
				 * objNode.put("data", stdetails); String jsonString1 =
				 * obMapper.writeValueAsString(objNode); logger.info("jsonString1" +
				 * jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();

				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response//commented by priya for form engine response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				// API Response status verification ...
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "faliure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				String formId = json.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine Response response1 =
				 * invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);
				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String student_admissionno = dataobj.getString("student_admissionno");
				String student_name = dataobj.getString("student_name");
				String father_name = dataobj.getString("father_name");
				String mother_name = dataobj.getString("mother_name");
				int phone_no = dataobj.getInt("phone_no");
				String stud_class = dataobj.getString("stud_class");
				String remark_details = dataobj.getString("remark_details");
				int amount_tobepaid = dataobj.getInt("amount_tobepaid");

				// Calling all Setter methods
				getDpsPanipatOnlineFormBean().setStudAdmissionNo(student_admissionno);
				getDpsPanipatOnlineFormBean().setStudentName(student_name);
				getDpsPanipatOnlineFormBean().setFatherName(father_name);
				getDpsPanipatOnlineFormBean().setMotherName(mother_name);
				getDpsPanipatOnlineFormBean().setPhoneNo(getDpsPanipatOnlineFormBean().getPhoneNo());
				getDpsPanipatOnlineFormBean().setStudClass(stud_class);
				getDpsPanipatOnlineFormBean().setRemark(remark_details);
				getDpsPanipatOnlineFormBean().setAmountToBePaid(String.valueOf(amount_tobepaid));

				getDpsPanipatOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getDpsPanipatOnlineFormBean());

				// -------End Form Engine
				String responseString = studentRegistrationService
						.insertDpsPanipatDetails(getDpsPanipatOnlineFormBean(), billerId);
				logger.info("DPS Panipat Student :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add Success Ease data.");
					return "faliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "faliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getDpsPanipatOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getDpsPanipatOnlineFormBean().getTotalAmount());
				studentRegistrationFormBean.setStudentId(getDpsPanipatOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getDpsPanipatOnlineFormBean().getStudentRegistrationId());
				logger.info("DPS Panipat Student --feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "faliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

//=============DPS Panipat--End=================
//-----Dronacharya College of Engineering -Start------
	private DronacharyaOnlineFormBean dronacharyaOnlineFormBean;

	public DronacharyaOnlineFormBean getDronacharyaOnlineFormBean() {
		return dronacharyaOnlineFormBean;
	}

	public void setDronacharyaOnlineFormBean(DronacharyaOnlineFormBean dronacharyaOnlineFormBean) {
		this.dronacharyaOnlineFormBean = dronacharyaOnlineFormBean;
	}

	public String getDronacharyaFormData() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------Dronacharya RegisterStudent------------------------------------------------");
			logger.info("Dronacharya RegisterStudent : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getDronacharyaOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

			if (AmountValidation(getDronacharyaOnlineFormBean().getTotalAmount(),
					getDronacharyaOnlineFormBean().getPayment())) {
				// -----From Engine start--5667 L554008 DronacharyaOnlineFormBean
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				// Getters atarted...
				if (getDronacharyaOnlineFormBean().getRollNo() != "") {
					stdetails.put("roll_no", getDronacharyaOnlineFormBean().getRollNo());
				} else {

					stdetails.put("roll_no", " ");
				}
				stdetails.put("first_name", getDronacharyaOnlineFormBean().getFirstName());
				stdetails.put("studphone_number", Long.parseLong(getDronacharyaOnlineFormBean().getStudPhoneNumber()));
				stdetails.put("amounttobe_paid",
						Double.parseDouble(getDronacharyaOnlineFormBean().getAmountToBePaid()));
				stdetails.put("totalamount", Double.parseDouble(getDronacharyaOnlineFormBean().getTotalAmount()));

				stdetails.put("txn_amt", Double.parseDouble(getDronacharyaOnlineFormBean().getTotalAmount()));
				stdetails.put("payment_details", Double.parseDouble(getDronacharyaOnlineFormBean().getTotalAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getDronacharyaOnlineFormBean().getTotalAmount()));

				// Calling API...
				/*
				 * objNode.put("data", stdetails); String jsonString1 =
				 * obMapper.writeValueAsString(objNode); logger.info("jsonString1" +
				 * jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();

				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response//commented by priya for form engine response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */

				// API Response status verification ...
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "faliure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);

				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine Response response1 =
				 * invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);
				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String first_name = dataobj.getString("first_name");
				int studphone_number = dataobj.getInt("studphone_number");
				int amounttobe_paid = dataobj.getInt("amounttobe_paid");
				// int total_amount = data1.getInt("total_amount");
				String roll_no = dataobj.getString("roll_no");

				// Calling all Setter methods
				getDronacharyaOnlineFormBean().setRollNo(roll_no);
				getDronacharyaOnlineFormBean().setFirstName(first_name);
				getDronacharyaOnlineFormBean().setStudPhoneNumber(getDronacharyaOnlineFormBean().getStudPhoneNumber());
				getDronacharyaOnlineFormBean().setAmountToBePaid(String.valueOf(amounttobe_paid));
				// getDronacharyaOnlineFormBean().setTotalAmount(String.valueOf(total_amount));

				getDronacharyaOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getDronacharyaOnlineFormBean());

				// -----End Form Engine
				String responseString = studentRegistrationService
						.insertDronacharyaDetails(getDronacharyaOnlineFormBean(), billerId);
				logger.info("DronacharyaRegisterStudent :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add Success Ease data.");
					return "faliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "faliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getDronacharyaOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getDronacharyaOnlineFormBean().getTotalAmount());
				studentRegistrationFormBean.setStudentId(getDronacharyaOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getDronacharyaOnlineFormBean().getStudentRegistrationId());
				logger.info("dronacharyaRegisterStudent --feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "faliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}
//-----Dronacharya College of Engineering -END------


	//======Dronacharya Group of Institutes Start====

	private DronacharyaGOIOnlineFormBean dronacharyaGOIOnlineFormBean;

	public DronacharyaGOIOnlineFormBean getDronacharyaGOIOnlineFormBean() {
		return dronacharyaGOIOnlineFormBean;
	}
	public void setDronacharyaGOIOnlineFormBean(
			DronacharyaGOIOnlineFormBean dronacharyaGOIOnlineFormBean) {
		this.dronacharyaGOIOnlineFormBean = dronacharyaGOIOnlineFormBean;
	}
	public String getDronacharyaGOIStudent() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------Dronacharya RegisterStudent------------------------------------------------");
			logger.info("Dronacharya RegisterStudent : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getDronacharyaGOIOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

			if (AmountValidation(getDronacharyaGOIOnlineFormBean().getTotalAmount(),
					getDronacharyaGOIOnlineFormBean().getPayment())) {
				
				//5712 DronacharayaGOI Online form Implememtation started
				//Start For Form Engine insertion
				
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();

				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

				//Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name",instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id",instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();
				
				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
				Date date = new Date();  
				stdetails.put("first_name",getDronacharyaGOIOnlineFormBean().getFirstName());
				if(getDronacharyaGOIOnlineFormBean().getRollNo()!="") {
				stdetails.put("roll_no",getDronacharyaGOIOnlineFormBean().getRollNo());
				}
				else {
					
					stdetails.put("roll_no"," ");	
				}
				stdetails.put("studphone_number", Long.parseLong(getDronacharyaGOIOnlineFormBean().getStudPhoneNumber()));
				stdetails.put("amount_tobepaid",Double.parseDouble(getDronacharyaGOIOnlineFormBean().getTotalAmount()));
				stdetails.put("payment_details",Double.parseDouble(getDronacharyaGOIOnlineFormBean().getTotalAmount()));
				stdetails.put("registered_userId",registeredUserId);
				stdetails.put("student_registrationid","0");
				stdetails.put("application_no","0");
				stdetails.put("recon_date",formatter.format(date));
				stdetails.put("r_cre_time",formatter.format(date));
				stdetails.put("r_mod_time",formatter.format(date));
				stdetails.put("pg_pmt_status","A");
				stdetails.put("Acc_Holder_Name"," ");
				stdetails.put("Res_Msg"," ");
				stdetails.put("Payment_Mode"," ");
				stdetails.put("Bank_Name"," ");
				stdetails.put("ALT_ERROR_DESC"," ");
				stdetails.put("Pmt_Id","");
				stdetails.put("Payment_id","");
				stdetails.put("PGTxnID","");
				stdetails.put("BANK_ID","");
				stdetails.put("Txn_Amt",Double.parseDouble(getDronacharyaGOIOnlineFormBean().getTotalAmount()));

				objNode.put("form_data",stdetails);

				String jsonString1=obMapper.writeValueAsString(objNode);

				logger.info("jsonString1"+jsonString1.toString());

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				//String clientId = "actual-smarthub-node-ip";
				//String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				//secureAPIBuilder.setAuthenticationAlias(clientId);

				//byte[] clientKey = hexStringToByteArray(clientKeyStr);
				//secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/
				
				Client client = ClientBuilder.newClient();
//				WebTarget webTarget = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/store-form-data");
//				Invocation.Builder invocationBuilder = webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//				
				//Response response = invocationBuilder.post(Entity.json(jsonString1.toString()));
				String data2="{\"application_id\":\"SMARTHUB\",\"form_name\":\"1532\",\"context_id\":\"T339362\",\"form_data\":{\"first_name\":\"ABC\",\"roll_no\":\"123456789\",\"studphone_number\":\"98765432\",\"amount_tobepaid\":200.0,\"payment_details\":200.0,\"registered_userId\":\"2078\",\"student_registrationid\":\"0\",\"application_no\":\"0\",\"recon_date\":\"2025-01-27 15:19:35\",\"r_cre_time\":\"2025-01-27 15:19:35\",\"r_mod_time\":\"2025-01-27 15:19:35\",\"pg_pmt_status\":\"A\",\"Acc_Holder_Name\":\" \",\"Res_Msg\":\" \",\"Payment_Mode\":\" \",\"Bank_Name\":\" \",\"ALT_ERROR_DESC\":\" \",\"Pmt_Id\":\"\",\"Payment_id\":\"\",\"PGTxnID\":\"\",\"BANK_ID\":\"\",\"Txn_Amt\":200.0}}";

				//logger.info("response" + response.toString());

				APIResponse apiResponse = null;
				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: " + apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					return "faliure";
					//throw new RuntimeException("Failed : HTTP error code : " + response.getStatus());
				}

				logger.info("Output from Server .... \n");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				

				JSONObject data1=json.getJSONObject("data");
				
				String formId = data1.getString("form_id");
				logger.info("formId"+formId);
				
				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name",instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id",instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id",formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				
				String  jsonString2=obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2"+jsonString2);

//				WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/get-form-data");
//				Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//				
//				Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				APIResponse apiResponse1 = null;
				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: " + apiResponse.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();
				
				
				logger.info("output1"+output1);
				
				JSONObject jsonObject = new JSONObject(output1);
				
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray"+jsonArray);

				JSONObject data=jsonArray.getJSONObject(0);
				JSONObject dataobj=data.getJSONObject("form_data");
				
				String stuName=dataobj.getString("first_name");
				logger.info("stuName"+stuName);
				String roll_no=dataobj.getString("roll_no");
				int amt_paid=dataobj.getInt("amount_tobepaid");
				Long mobile_number=dataobj.getLong("studphone_number");
				
				getDronacharyaGOIOnlineFormBean().setFirstName(stuName);
				getDronacharyaGOIOnlineFormBean().setRollNo(roll_no);
				getDronacharyaGOIOnlineFormBean().setAmountToBePaid(String.valueOf(amt_paid));
				getDronacharyaGOIOnlineFormBean().setStudPhoneNumber(String.valueOf(mobile_number));
				getDronacharyaGOIOnlineFormBean().setTotalAmount(String.valueOf(amt_paid));
				getDronacharyaGOIOnlineFormBean().setApplicationNo(formId);
				//END For Form Engine insertion
				getUserSessionMap().put("ONLINEFORMDATA",getDronacharyaGOIOnlineFormBean());
				//5712 DronacharayaGOI Online form Implementation end
				DronacharyaGOIOnlineFormBean dronacharyaGOIOnlineFormBean=(DronacharyaGOIOnlineFormBean) getUserSessionMap().get("ONLINEFORMDATA");
				System.out.println("dronacharyaGOIOnlineFormBean "+dronacharyaGOIOnlineFormBean.getFirstName());
				
				String responseString = studentRegistrationService
						.insertDronacharyaGOIDetails(getDronacharyaGOIOnlineFormBean(), billerId);
				logger.info("Dronacharya GOI RegisterStudent :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add Success Ease data.");
					return "faliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "faliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getDronacharyaGOIOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getDronacharyaGOIOnlineFormBean().getTotalAmount());
				
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getDronacharyaGOIOnlineFormBean().getStudentRegistrationId());
				logger.info("dronacharya GOI Gurgaon RegisterStudent --feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			}

			else {
				addActionMessage("Amount Mismatched.");
				return "faliure";
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR;

		}
		return SUCCESS;
	}

//======ALM academy  Start====

	private AlmAcademyOnlineFormBean almAcademyOnlineFormBean;

	public AlmAcademyOnlineFormBean getAlmAcademyOnlineFormBean() {
		return almAcademyOnlineFormBean;
	}

	public void setAlmAcademyOnlineFormBean(AlmAcademyOnlineFormBean almAcademyOnlineFormBean) {
		this.almAcademyOnlineFormBean = almAcademyOnlineFormBean;
	}

	public String getAlmAcademyStudent() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("--------ALM academy  RegisterStudent------------------------------------------------");
			logger.info("getAlmAcademyStudent : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getAlmAcademyOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

			if (AmountValidation(getAlmAcademyOnlineFormBean().getAmountToBePaid(),
					getAlmAcademyOnlineFormBean().getPayment())) {
				// ---------Form Engine start - AlmAcademyOnlineFormBean
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				Date date1 = sdf.parse(getAlmAcademyOnlineFormBean().getDateOfBirth());

				// Getters atarted...
				stdetails.put("almfirst_name", getAlmAcademyOnlineFormBean().getAlmFirstName());
				stdetails.put("almlast_name", getAlmAcademyOnlineFormBean().getAlmLastName());
				stdetails.put("school_name", getAlmAcademyOnlineFormBean().getSchoolName());
				stdetails.put("dateof_birth", formatter.format(date1));
				stdetails.put("email_id", getAlmAcademyOnlineFormBean().getEmailId());
				stdetails.put("mobile_no", Long.parseLong(getAlmAcademyOnlineFormBean().getMobileNo()));
				stdetails.put("alm_subject", getAlmAcademyOnlineFormBean().getAlmSubject());
				stdetails.put("alm_class", getAlmAcademyOnlineFormBean().getAlmClass());
				stdetails.put("amounttobe_paid", Double.parseDouble(getAlmAcademyOnlineFormBean().getAmountToBePaid()));

				stdetails.put("txn_amt", Double.parseDouble(getAlmAcademyOnlineFormBean().getAmountToBePaid()));
				stdetails.put("payment_details", Double.parseDouble(getAlmAcademyOnlineFormBean().getAmountToBePaid()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getAlmAcademyOnlineFormBean().getAmountToBePaid()));

				// Calling API...
				/*
				 * objNode.put("data", stdetails); String jsonString1 =
				 * obMapper.writeValueAsString(objNode); logger.info("jsonString1" +
				 * jsonString1.toString());
				 */

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE); Response
				 * //commented by priya for form engine response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */

				// API Response status verification ...

				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());

				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "faliure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);

				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine Response response1 =
				 * invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);
				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String almfirst_name = dataobj.getString("almfirst_name");
				String almlast_name = dataobj.getString("almlast_name");
				String school_name = dataobj.getString("school_name");
				String dateof_birth = dataobj.getString("dateof_birth");
				String email_id = dataobj.getString("email_id");
				int mobile_no = dataobj.getInt("mobile_no");
				String alm_subject = dataobj.getString("alm_subject");
				String alm_class = dataobj.getString("alm_class");
				int amounttobe_paid = dataobj.getInt("amounttobe_paid");

				// Calling all Setter methods
				getAlmAcademyOnlineFormBean().setAlmFirstName(almfirst_name);
				getAlmAcademyOnlineFormBean().setAlmLastName(almlast_name);
				getAlmAcademyOnlineFormBean().setSchoolName(school_name);
				getAlmAcademyOnlineFormBean().setDateOfBirth(getAlmAcademyOnlineFormBean().getDateOfBirth());
				getAlmAcademyOnlineFormBean().setEmailId(email_id);
				getAlmAcademyOnlineFormBean().setMobileNo(getAlmAcademyOnlineFormBean().getMobileNo());
				getAlmAcademyOnlineFormBean().setAlmSubject(alm_subject);
				getAlmAcademyOnlineFormBean().setAlmClass(alm_class);
				getAlmAcademyOnlineFormBean().setAmountToBePaid(String.valueOf(amounttobe_paid));

				getAlmAcademyOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getAlmAcademyOnlineFormBean());

				// -----End Form Engine
				String responseString = studentRegistrationService
						.insertAlmAcademyDetails(getAlmAcademyOnlineFormBean(), billerId);
				logger.info("Dronacharya GOI RegisterStudent :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add Success Ease data.");
					return "faliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "faliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getAlmAcademyOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getAlmAcademyOnlineFormBean().getAmountToBePaid());
				studentRegistrationFormBean.setStudentId(getAlmAcademyOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getAlmAcademyOnlineFormBean().getStudentRegistrationId());
				logger.info("dronacharya GOI Gurgaon RegisterStudent --feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "faliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

//=========Alm academy- End===

	private HisarSchoolOnlineFormBean hisarSchoolOnlineFormBean;

	public HisarSchoolOnlineFormBean getHisarSchoolOnlineFormBean() {
		return hisarSchoolOnlineFormBean;
	}

	public void setHisarSchoolOnlineFormBean(HisarSchoolOnlineFormBean hisarSchoolOnlineFormBean) {
		this.hisarSchoolOnlineFormBean = hisarSchoolOnlineFormBean;
	}

	public String getHisarSchoolStudent() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("--------IDDAV   RegisterStudent------------------------------------------------");
			logger.info("getHisarSchoolStudent()  Start : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getHisarSchoolOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

			if (AmountValidation(getHisarSchoolOnlineFormBean().getTotalFee(),
					getHisarSchoolOnlineFormBean().getPayment())) {// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();
				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				// Getters atarted...
				stdetails.put("tutionfee", StringUtils.isBlank(getHisarSchoolOnlineFormBean().getTutionFee()) ? 0
						: Double.parseDouble(getHisarSchoolOnlineFormBean().getTutionFee()));
				stdetails.put("busfee", StringUtils.isBlank(getHisarSchoolOnlineFormBean().getBusFee()) ? 0
						: Double.parseDouble(getHisarSchoolOnlineFormBean().getBusFee()));
				stdetails.put("annualfee", StringUtils.isBlank(getHisarSchoolOnlineFormBean().getAnnualFee()) ? 0
						: Double.parseDouble(getHisarSchoolOnlineFormBean().getAnnualFee()));
				stdetails.put("insurancefee", StringUtils.isBlank(getHisarSchoolOnlineFormBean().getInsuranceFee()) ? 0
						: Double.parseDouble(getHisarSchoolOnlineFormBean().getInsuranceFee()));
				stdetails.put("otherfee", StringUtils.isBlank(getHisarSchoolOnlineFormBean().getOtherFee()) ? 0
						: Double.parseDouble(getHisarSchoolOnlineFormBean().getOtherFee()));
				stdetails.put("totalfee", Double.parseDouble(getHisarSchoolOnlineFormBean().getTotalFee()));
				stdetails.put("iddavstudname", getHisarSchoolOnlineFormBean().getIddavStudName());
				stdetails.put("fathername", getHisarSchoolOnlineFormBean().getFatherName());
				stdetails.put("iddavadmsnno", getHisarSchoolOnlineFormBean().getIddavAdmsnNo());
				stdetails.put("mothername", StringUtils.isBlank(getHisarSchoolOnlineFormBean().getMotherName()) ? " "
						: getHisarSchoolOnlineFormBean().getMotherName());
				stdetails.put("phoneno", Long.parseLong(getHisarSchoolOnlineFormBean().getPhoneNo()));
				stdetails.put("iddavclass", getHisarSchoolOnlineFormBean().getIddavClass());
				stdetails.put("iddavsection", getHisarSchoolOnlineFormBean().getIddavSection());
				stdetails.put("payment_details", Double.parseDouble(getHisarSchoolOnlineFormBean().getTotalFee()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getHisarSchoolOnlineFormBean().getTotalFee()));

				// Calling API...
				/*
				 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
				 * String jsonString1 = obMapper.writeValueAsString(objNode);
				 * logger.info("jsonString1" + jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE); Response
				 * response = invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */

				// API Response status verification ...
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "faliure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				// JSONArray jsonArray = jsonObject.getJSONArray("message");
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				int tutionfee = dataobj.getInt("tutionfee");
				int busfee = dataobj.getInt("busfee");
				int annualfee = dataobj.getInt("annualfee");
				int insurancefee = dataobj.getInt("insurancefee");
				int otherfee = dataobj.getInt("otherfee");
				int totalfee = dataobj.getInt("totalfee");
				String iddavstudname = dataobj.getString("iddavstudname");
				String fathername = dataobj.getString("fathername");
				String iddavadmsnno = dataobj.getString("iddavadmsnno");
				String mothername = dataobj.getString("mothername");
				Long phoneno = dataobj.getLong("phoneno");
				String iddavclass = dataobj.getString("iddavclass");
				String iddavsection = dataobj.getString("iddavsection");

				// Calling all Setter methods
				getHisarSchoolOnlineFormBean().setTutionFee(String.valueOf(tutionfee));
				getHisarSchoolOnlineFormBean().setBusFee(String.valueOf(busfee));
				getHisarSchoolOnlineFormBean().setAnnualFee(String.valueOf(annualfee));
				getHisarSchoolOnlineFormBean().setInsuranceFee(String.valueOf(insurancefee));
				getHisarSchoolOnlineFormBean().setOtherFee(String.valueOf(otherfee));
				getHisarSchoolOnlineFormBean().setTotalFee(String.valueOf(totalfee));
				getHisarSchoolOnlineFormBean().setIddavStudName(iddavstudname);
				getHisarSchoolOnlineFormBean().setFatherName(fathername);
				getHisarSchoolOnlineFormBean().setIddavAdmsnNo(iddavadmsnno);
				getHisarSchoolOnlineFormBean().setMotherName(mothername);
				getHisarSchoolOnlineFormBean().setPhoneNo(String.valueOf(phoneno));
				getHisarSchoolOnlineFormBean().setIddavClass(iddavclass);
				getHisarSchoolOnlineFormBean().setIddavSection(iddavsection);

				getHisarSchoolOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getHisarSchoolOnlineFormBean());

				String responseString = studentRegistrationService
						.insertHisarSchoolDetails(getHisarSchoolOnlineFormBean(), billerId);
				logger.info("IDDAV Hisar RegisterStudent :" + getHisarSchoolOnlineFormBean().toString());

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add Success Ease data.");
					return "faliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "faliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getHisarSchoolOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getHisarSchoolOnlineFormBean().getTotalFee());
				studentRegistrationFormBean.setStudentId(getHisarSchoolOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getHisarSchoolOnlineFormBean().getStudentRegistrationId());
				logger.info("IDDAV hisar  RegisterStudent --feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "faliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		logger.info("getHisarSchoolStudent()--  END --");
		return SUCCESS;
	}

	public String getDAVSchoolDetails() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------DAVSchoolRegisterStudent------------------------------------------------");
			logger.info("DAVSchoolRegisterStudent : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getDavschoolOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

			if (AmountValidation(getDavschoolOnlineFormBean().getTotalAmount(),
					getDavschoolOnlineFormBean().getPayment())) {
				// ---Form Engine start
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				// Getters atarted...
				stdetails.put("first_name", getDavschoolOnlineFormBean().getFirstName());
				stdetails.put("student_id", getDavschoolOnlineFormBean().getStudentId());
				stdetails.put("last_name", getDavschoolOnlineFormBean().getLastName());
				stdetails.put("father_name", getDavschoolOnlineFormBean().getFatherName());
				stdetails.put("mail_id", getDavschoolOnlineFormBean().getMailId());
				stdetails.put("contact_no", Long.parseLong(getDavschoolOnlineFormBean().getContactNo()));
				if (getDavschoolOnlineFormBean().getClassName() != "") {
					stdetails.put("class_name", getDavschoolOnlineFormBean().getClassName());
				} else {

					stdetails.put("class_name", " ");
				}
				stdetails.put("remarks_details", getDavschoolOnlineFormBean().getRemarks());
				stdetails.put("total_amount", Double.parseDouble(getDavschoolOnlineFormBean().getTotalAmount()));

				stdetails.put("txn_amt", Double.parseDouble(getDavschoolOnlineFormBean().getTotalAmount()));
				stdetails.put("payment_details", Double.parseDouble(getDavschoolOnlineFormBean().getTotalAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getDavschoolOnlineFormBean().getTotalAmount()));

				// Calling API...
				/*
				 * objNode.put("data", stdetails); String jsonString1 =
				 * obMapper.writeValueAsString(objNode); logger.info("jsonString1" +
				 * jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();

				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response//commented by priya for form engine response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				// API Response status verification ...

				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "faliure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);

				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine Response response1 =
				 * invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);
				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String student_id = dataobj.getString("student_id");
				String first_name = dataobj.getString("first_name");
				String mail_id = dataobj.getString("mail_id");
				String last_name = dataobj.getString("last_name");
				String father_name = dataobj.getString("father_name");

				int contact_no = dataobj.getInt("contact_no");
				String class_name = dataobj.getString("class_name");

				String remarks_details = dataobj.getString("remarks_details");
				int total_amount = dataobj.getInt("total_amount");

				// Calling all Setter methods
				getDavschoolOnlineFormBean().setFirstName(first_name);
				getDavschoolOnlineFormBean().setStudentId(student_id);
				getDavschoolOnlineFormBean().setLastName(last_name);
				getDavschoolOnlineFormBean().setFatherName(father_name);
				getDavschoolOnlineFormBean().setMailId(mail_id);
				getDavschoolOnlineFormBean().setContactNo(getDavschoolOnlineFormBean().getContactNo());
				getDavschoolOnlineFormBean().setClassName(class_name);
				getDavschoolOnlineFormBean().setRemarks(remarks_details);
				getDavschoolOnlineFormBean().setTotalAmount(String.valueOf(total_amount));

				getDavschoolOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getDavschoolOnlineFormBean());

				// -----End form engine
				String responseString = studentRegistrationService.insertDAVSchoolDetails(getDavschoolOnlineFormBean(),
						billerId);
				logger.info("DAVSchoolRegisterStudent :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add Success Ease data.");
					return "faliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "faliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getDavschoolOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getDavschoolOnlineFormBean().getTotalAmount());
				studentRegistrationFormBean.setStudentId(getDavschoolOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getDavschoolOnlineFormBean().getStudentRegistrationId());
				logger.info("DAVSchoolRegisterStudent --feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "faliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String getAPSNoidaStudent() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------getAPSNoidaStudent------------------------------------------------");
			logger.info("apsNoidaRegisterStudent : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getNoidaApsOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

			if (AmountValidation(getNoidaApsOnlineFormBean().getTotalAmount(),
					getNoidaApsOnlineFormBean().getPayment())) {
				// ------Form Engine starts
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();
				if (getNoidaApsOnlineFormBean().getStudentID() != "") {
					// Getters atarted...
					stdetails.put("student_id", getNoidaApsOnlineFormBean().getStudentID());
				} else {

					stdetails.put("student_id", " ");

				}
				stdetails.put("first_name", getNoidaApsOnlineFormBean().getFirstName());
				stdetails.put("last_name", getNoidaApsOnlineFormBean().getLastName());
				stdetails.put("email_id", getNoidaApsOnlineFormBean().getEmailId());
				stdetails.put("contact_no", Long.parseLong(getNoidaApsOnlineFormBean().getContactNo()));
				if (getNoidaApsOnlineFormBean().getClassDiv() != "") {
					stdetails.put("class_div", getNoidaApsOnlineFormBean().getClassDiv());
				} else {
					stdetails.put("class_div", " ");

				}
				stdetails.put("remarks_details", getNoidaApsOnlineFormBean().getRemarks());
				stdetails.put("total_amount", Double.parseDouble(getNoidaApsOnlineFormBean().getTotalAmount()));

				stdetails.put("txn_amt", Double.parseDouble(getNoidaApsOnlineFormBean().getTotalAmount()));
				stdetails.put("payment_details", Double.parseDouble(getNoidaApsOnlineFormBean().getTotalAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getNoidaApsOnlineFormBean().getTotalAmount()));

				// Calling API...
				/*
				 * objNode.put("data", stdetails); String jsonString1 =
				 * obMapper.writeValueAsString(objNode); logger.info("jsonString1" +
				 * jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response//commented by priya form engine response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				// API Response status verification ...
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "faliure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine Response response1 =
				 * invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getData().toString());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String student_id = dataobj.getString("student_id");
				String first_name = dataobj.getString("first_name");
				String last_name = dataobj.getString("last_name");
				String email_id = dataobj.getString("email_id");
				int contact_no = dataobj.getInt("contact_no");
				String class_div = dataobj.getString("class_div");
				String remarks_details = dataobj.getString("remarks_details");
				int total_amount = dataobj.getInt("total_amount");

				// Calling all Setter methods
				getNoidaApsOnlineFormBean().setStudentID(student_id);
				getNoidaApsOnlineFormBean().setFirstName(first_name);
				getNoidaApsOnlineFormBean().setLastName(last_name);
				getNoidaApsOnlineFormBean().setEmailId(email_id);
				getNoidaApsOnlineFormBean().setContactNo(getNoidaApsOnlineFormBean().getContactNo());
				getNoidaApsOnlineFormBean().setClassDiv(class_div);
				getNoidaApsOnlineFormBean().setRemarks(remarks_details);
				getNoidaApsOnlineFormBean().setTotalAmount(String.valueOf(total_amount));

				getNoidaApsOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getNoidaApsOnlineFormBean());

				// -------End form engine
				String responseString = studentRegistrationService.insertAPSNoidaDetails(getNoidaApsOnlineFormBean(),
						billerId);
				logger.info("apsNoidaRegisterStudent :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add Success Ease data.");
					return "faliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "faliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getNoidaApsOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getNoidaApsOnlineFormBean().getTotalAmount());
				studentRegistrationFormBean.setStudentId(getNoidaApsOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getNoidaApsOnlineFormBean().getStudentRegistrationId());
				logger.info("apsNoidaRegisterStudent --feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "faliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String getSriAurobindoDetails() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------SriAurobindoSchoolRegisterStudent------------------------------------------------");
			logger.info("SriAurobindoSchoolRegisterStudent : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getSriAurobindoSchoolOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

			if (AmountValidation(getSriAurobindoSchoolOnlineFormBean().getTotalAmount(),
					getSriAurobindoSchoolOnlineFormBean().getPayment())) {
				// ------Form engine starts
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				// Getters atarted...
				stdetails.put("cardholder_name", getSriAurobindoSchoolOnlineFormBean().getCardHolderName());
				stdetails.put("address_details", getSriAurobindoSchoolOnlineFormBean().getAddress());
				stdetails.put("city_name", getSriAurobindoSchoolOnlineFormBean().getCity());
				stdetails.put("postal_code", getSriAurobindoSchoolOnlineFormBean().getPostalCode());
				stdetails.put("email_id", getSriAurobindoSchoolOnlineFormBean().getEmail());
				if (getSriAurobindoSchoolOnlineFormBean().getState() != "") {
					stdetails.put("state_name", getSriAurobindoSchoolOnlineFormBean().getState());
				} else {

					stdetails.put("state_name", " ");
				}
				stdetails.put("country_name", getSriAurobindoSchoolOnlineFormBean().getCountry());
				if (getSriAurobindoSchoolOnlineFormBean().getTelePhoneNo() != "") {
					stdetails.put("telephone_no",
							Long.parseLong(getSriAurobindoSchoolOnlineFormBean().getTelePhoneNo()));
				} else {

					stdetails.put("telephone_no", 0);
				}
				stdetails.put("total_amount",
						Double.parseDouble(getSriAurobindoSchoolOnlineFormBean().getTotalAmount()));
				if (getSriAurobindoSchoolOnlineFormBean().getPanNo() != "") {
					stdetails.put("pan_no", getSriAurobindoSchoolOnlineFormBean().getPanNo());
				} else {

					stdetails.put("pan_no", " ");

				}
				stdetails.put("remarks_details", " ");
				stdetails.put("card_nationality", "");
				if (getSriAurobindoSchoolOnlineFormBean().getPassportNo() != "") {
					stdetails.put("passport_no", getSriAurobindoSchoolOnlineFormBean().getPassportNo());
				} else {

					stdetails.put("passport_no", " ");
				}
				stdetails.put("cardissuing_country", "");

				stdetails.put("txn_amt", Double.parseDouble(getSriAurobindoSchoolOnlineFormBean().getTotalAmount()));
				stdetails.put("payment_details",
						Double.parseDouble(getSriAurobindoSchoolOnlineFormBean().getTotalAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getSriAurobindoSchoolOnlineFormBean().getTotalAmount()));

				// Calling API...
				/*
				 * objNode.put("data", stdetails); String jsonString1 =
				 * obMapper.writeValueAsString(objNode); logger.info("jsonString1" +
				 * jsonString1.toString());
				 */

				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END

				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response//commented by priya for form engine response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */

				// API Response status verification ...
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "faliure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine Response response1 =
				 * invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);
				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String cardholder_name = dataobj.getString("cardholder_name");
				String address_details = dataobj.getString("address_details");
				String city_name = dataobj.getString("city_name");
				String postal_code = dataobj.getString("postal_code");
				String email_id = dataobj.getString("email_id");
				String state_name = dataobj.getString("state_name");
				String country_name = dataobj.getString("country_name");
				int telephone_no = dataobj.getInt("telephone_no");
				int total_amount = dataobj.getInt("total_amount");
				String pan_no = dataobj.getString("pan_no");
				String remarks_details = dataobj.getString("remarks_details");
				String card_nationality = dataobj.getString("card_nationality");
				String passport_no = dataobj.getString("passport_no");
				String cardissuing_country = dataobj.getString("cardissuing_country");

				// Calling all Setter methods
				getSriAurobindoSchoolOnlineFormBean().setCardHolderName(cardholder_name);
				getSriAurobindoSchoolOnlineFormBean().setAddress(address_details);
				getSriAurobindoSchoolOnlineFormBean().setCity(city_name);
				getSriAurobindoSchoolOnlineFormBean().setPostalCode(postal_code);
				getSriAurobindoSchoolOnlineFormBean().setEmail(email_id);
				getSriAurobindoSchoolOnlineFormBean().setState(state_name);
				getSriAurobindoSchoolOnlineFormBean().setCountry(country_name);
				getSriAurobindoSchoolOnlineFormBean()
						.setTelePhoneNo(getSriAurobindoSchoolOnlineFormBean().getTelePhoneNo());
				getSriAurobindoSchoolOnlineFormBean().setTotalAmount(String.valueOf(total_amount));
				getSriAurobindoSchoolOnlineFormBean().setPanNo(pan_no);
				getSriAurobindoSchoolOnlineFormBean().setRemarks(remarks_details);
				getSriAurobindoSchoolOnlineFormBean().setCardNationality(card_nationality);
				getSriAurobindoSchoolOnlineFormBean().setPassportNo(passport_no);
				getSriAurobindoSchoolOnlineFormBean().setCardIssuingCountry(cardissuing_country);

				getSriAurobindoSchoolOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getSriAurobindoSchoolOnlineFormBean());

				// ---END------Form engine
				String responseString = studentRegistrationService
						.insertSriAurobindoSchoolDetails(getSriAurobindoSchoolOnlineFormBean(), billerId);
				logger.info("SriAurobindoSchoolRegisterStudent :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add Success Ease data.");
					return "faliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "faliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getSriAurobindoSchoolOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getSriAurobindoSchoolOnlineFormBean().getTotalAmount());
				studentRegistrationFormBean.setStudentId(getSriAurobindoSchoolOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getSriAurobindoSchoolOnlineFormBean().getStudentRegistrationId());
				logger.info("SriAurobindoSchoolRegisterStudent --feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "faliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String getDpsBudgamRegistrationDetails() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------DpsBudgamRegistrationStudent------------------------------------------------");
			logger.info("DpsBudgamRegistrationStudent : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getDpsBudgamRegistrationOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

			if (AmountValidation(getDpsBudgamRegistrationOnlineFormBean().getAmount(),
					getDpsBudgamRegistrationOnlineFormBean().getPayment())) {
				// -----Form Engine starts
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();
				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();
				// Getters atarted...
				stdetails.put("student_name", getDpsBudgamRegistrationOnlineFormBean().getStudentName());
				stdetails.put("class_text", getDpsBudgamRegistrationOnlineFormBean().getClassText());
				stdetails.put("mobile_no", Long.parseLong(getDpsBudgamRegistrationOnlineFormBean().getMobileNo()));
				stdetails.put("amount_details",
						Double.parseDouble(getDpsBudgamRegistrationOnlineFormBean().getAmount()));

				stdetails.put("txn_amt", Double.parseDouble(getDpsBudgamRegistrationOnlineFormBean().getAmount()));
				stdetails.put("payment_details",
						Double.parseDouble(getDpsBudgamRegistrationOnlineFormBean().getAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getDpsBudgamRegistrationOnlineFormBean().getAmount()));

				// Calling API...
				/*
				 * objNode.put("data", stdetails); String jsonString1 =
				 * obMapper.writeValueAsString(objNode); logger.info("jsonString1" +
				 * jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH))
				 * .path("/store-form-data"); Invocation.Builder invocationBuilder = webTarget
				 * .request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE); Response response
				 * = invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				// API Response status verification ...

				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "DpsBudgamRegistrationfailure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH))
				 * .path("/get-form-data"); Invocation.Builder invocationBuilder1 = webTarget1
				 * .request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE); Response
				 * response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String student_name = dataobj.getString("student_name");
				String class_text = dataobj.getString("class_text");
				int mobile_no = dataobj.getInt("mobile_no");
				int amount_details = dataobj.getInt("amount_details");

				// Calling all Setter methods
				getDpsBudgamRegistrationOnlineFormBean().setStudentName(student_name);
				getDpsBudgamRegistrationOnlineFormBean().setClassText(class_text);
				getDpsBudgamRegistrationOnlineFormBean().setMobileNo(String.valueOf(mobile_no));
				getDpsBudgamRegistrationOnlineFormBean().setAmount(String.valueOf(amount_details));

				getDpsBudgamRegistrationOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA",
						getDpsBudgamRegistrationOnlineFormBean());

				// -----Form Engine End
				String responseString = studentRegistrationService
						.insertDpsBudgamregistrationDetails(getDpsBudgamRegistrationOnlineFormBean(), billerId);
				logger.info("DpsBudgamRegistrationStudent :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add Success Ease data.");
					return "faliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "faliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getDpsBudgamRegistrationOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getDpsBudgamRegistrationOnlineFormBean().getAmount());
				studentRegistrationFormBean.setStudentId(getDpsBudgamRegistrationOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getDpsBudgamRegistrationOnlineFormBean().getStudentRegistrationId());
				logger.info("DpsBudgamRegistrationStudent --feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "faliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String getInderPrastaDetails() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------InderPrastaStudent------------------------------------------------");
			logger.info("InderPrastaStudent : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getInderPrasthaOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

			if (AmountValidation(getInderPrasthaOnlineFormBean().getAmount(),
					getInderPrasthaOnlineFormBean().getPayment())) {
				// -------Form Engine starts
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();

				// Getters atarted...
				stdetails.put("university_rollno", getInderPrasthaOnlineFormBean().getUniversityRollNo());
				stdetails.put("student_name", getInderPrasthaOnlineFormBean().getStudentName());
				stdetails.put("father_name", getInderPrasthaOnlineFormBean().getFatherName());
				stdetails.put("branch_name", getInderPrasthaOnlineFormBean().getBranch());
				stdetails.put("year_details", getInderPrasthaOnlineFormBean().getYear());
				stdetails.put("seater_type", getInderPrasthaOnlineFormBean().getSeater());
				stdetails.put("amount_details", getInderPrasthaOnlineFormBean().getAmount());

				stdetails.put("txn_amt", Double.parseDouble(getInderPrasthaOnlineFormBean().getAmount()));
				stdetails.put("payment_details", Double.parseDouble(getInderPrasthaOnlineFormBean().getAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getInderPrasthaOnlineFormBean().getAmount()));

				// Calling API...
				/*
				 * objNode.put("data", stdetails); String jsonString1 =
				 * obMapper.writeValueAsString(objNode); logger.info("jsonString1" +
				 * jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();

				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/store-form-data"); Invocation.Builder invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response//commented by priya for formengine response =
				 * invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */

				// API Response status verification ...
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "InderPrasthafailure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * "/get-form-data"); Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);//
				 * commented by priya for form engine Response response1 =
				 * invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);
				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String university_rollno = dataobj.getString("university_rollno");
				String student_name = dataobj.getString("studentName");
				String father_name = dataobj.getString("father_name");
				String branch_name = dataobj.getString("branch_name");
				String year_details = dataobj.getString("year_details");
				String seater_type = dataobj.getString("seater_type");
				String amount_details = dataobj.getString("amount_details");

				// Calling all Setter methods
				getInderPrasthaOnlineFormBean().setUniversityRollNo(university_rollno);
				getInderPrasthaOnlineFormBean().setStudentName(student_name);
				getInderPrasthaOnlineFormBean().setFatherName(father_name);
				getInderPrasthaOnlineFormBean().setBranch(branch_name);
				getInderPrasthaOnlineFormBean().setYear(year_details);
				getInderPrasthaOnlineFormBean().setSeater(seater_type);
				getInderPrasthaOnlineFormBean().setAmount(amount_details);

				getInderPrasthaOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getInderPrasthaOnlineFormBean());

				// ------End form engine
				String responseString = studentRegistrationService
						.insertInderPrasthaDetails(getInderPrasthaOnlineFormBean(), billerId);
				logger.info("InderPrastaStudent :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add Success Ease data.");
					return "faliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "faliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getInderPrasthaOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getInderPrasthaOnlineFormBean().getAmount());
				studentRegistrationFormBean.setStudentId(getInderPrasthaOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getInderPrasthaOnlineFormBean().getStudentRegistrationId());
				logger.info("InderPrastaStudent --feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "faliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String getInderPrastaNewDetails() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------InderPrastaStudent------------------------------------------------");
			logger.info("InderPrastaNewStudent : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getInderPrasthaNewOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

			if (AmountValidation(getInderPrasthaNewOnlineFormBean().getAmount(),
					getInderPrasthaNewOnlineFormBean().getPayment())) {
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();
				// Getters atarted...
				stdetails.put("collegefee", Double.parseDouble(getInderPrasthaNewOnlineFormBean().getCollegeFee()));
				stdetails.put("mobileno", Long.parseLong(getInderPrasthaNewOnlineFormBean().getMobileNo()));
				stdetails.put("mailid", getInderPrasthaNewOnlineFormBean().getMailId());
				stdetails.put("studentname", getInderPrasthaNewOnlineFormBean().getStudentName());
				stdetails.put("fathername", getInderPrasthaNewOnlineFormBean().getFatherName());
				stdetails.put("branch", getInderPrasthaNewOnlineFormBean().getBranch());
				stdetails.put("year", getInderPrasthaNewOnlineFormBean().getYear());
				stdetails.put("seater", getInderPrasthaNewOnlineFormBean().getSeater());
				stdetails.put("amount", Double.parseDouble(getInderPrasthaNewOnlineFormBean().getAmount()));
				stdetails.put("partialpayment",
						StringUtils.isBlank(getInderPrasthaNewOnlineFormBean().getPartialPayment()) ? " "
								: getInderPrasthaNewOnlineFormBean().getPartialPayment());
				stdetails.put("partialamount",
						Double.parseDouble(getInderPrasthaNewOnlineFormBean().getPartialAmount()));

				stdetails.put("txn_amt", Double.parseDouble(getInderPrasthaNewOnlineFormBean().getAmount()));
				stdetails.put("payment_details", Double.parseDouble(getInderPrasthaNewOnlineFormBean().getAmount()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getInderPrasthaNewOnlineFormBean().getAmount()));

				// Calling API...
				/*
				 * objNode.put(PropertyReader.getProperty(TPSLConstants.FORM_DATA),stdetails);
				 * String jsonString1 = obMapper.writeValueAsString(objNode);
				 * logger.info("jsonString1" + jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());

				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.ADD_FORM_DATA)); Invocation.Builder
				 * invocationBuilder =
				 * webTarget.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE); Response
				 * response = invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */
				// API Response status verification ...
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "faliure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path(
				 * PropertyReader.getProperty(TPSLConstants.FETCH_FORM_DATA));
				 * Invocation.Builder invocationBuilder1 =
				 * webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
				 * Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				// JSONArray jsonArray = jsonObject.getJSONArray("message");
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				;
				logger.info("jsonArray" + jsonArray);

				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String studentname = dataobj.getString("studentname");
				String fathername = dataobj.getString("fathername");
				String branch = dataobj.getString("branch");
				String year = dataobj.getString("year");
				String seater = dataobj.getString("seater");
				Long mobileno = dataobj.getLong("mobileno");
				String mailid = dataobj.getString("mailid");
				int collegefee = dataobj.getInt("collegefee");
				String partialpayment = dataobj.getString("partialpayment");
				int partialamount = dataobj.getInt("partialamount");
				int amount = dataobj.getInt("amount");

				// Calling all Setter methods
				getInderPrasthaNewOnlineFormBean().setCollegeFee(String.valueOf(collegefee));
				getInderPrasthaNewOnlineFormBean().setMobileNo(String.valueOf(mobileno));
				getInderPrasthaNewOnlineFormBean().setMailId(mailid);
				getInderPrasthaNewOnlineFormBean().setStudentName(studentname);
				getInderPrasthaNewOnlineFormBean().setFatherName(fathername);
				getInderPrasthaNewOnlineFormBean().setBranch(branch);
				getInderPrasthaNewOnlineFormBean().setYear(year);
				getInderPrasthaNewOnlineFormBean().setSeater(seater);
				getInderPrasthaNewOnlineFormBean().setAmount(String.valueOf(amount));

				getInderPrasthaNewOnlineFormBean().setPartialPayment(partialpayment);
				getInderPrasthaNewOnlineFormBean().setPartialAmount(String.valueOf(partialamount));

				getInderPrasthaNewOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getInderPrasthaNewOnlineFormBean());

				String responseString = studentRegistrationService
						.insertInderPrasthaNewDetails(getInderPrasthaNewOnlineFormBean(), billerId);
				logger.info("InderPrastaStudent :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add Success Ease data.");
					return "faliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "faliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getInderPrasthaNewOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getInderPrasthaNewOnlineFormBean().getAmount());
				studentRegistrationFormBean.setStudentId(getInderPrasthaNewOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getInderPrasthaNewOnlineFormBean().getStudentRegistrationId());
				logger.info("InderPrastaNewStudent --feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "faliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String getInderPrastaExistDetails() {
		if (!super.isValidSession()) {
			return INVALID_SESSION;
		}
		try {
			logger.info("---------InderPrastaExistStudent------------------------------------------------");
			logger.info("InderPrastaExistStudent : - " + getAppData().getStudentRegistrationId());
			logger.info("---------------------------------------------------------");
			String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
			String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
			logger.info("registeredUserId.." + registeredUserId);
			getInderPrasthaExistOnlineFormBean().setRegisteredUserId(registeredUserId);
			StudentRegistrationService studentRegistrationService = new StudentRegistrationService();

			if (AmountValidation(getInderPrasthaExistOnlineFormBean().getAmount(),
					getInderPrasthaExistOnlineFormBean().getPayment())) {
				// ------Form Engine starts
				// Object Node declaration
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService
						.getInstituteFormDetails(billerId);

				// Object Node declaration
				objNode.put("application_id", "SMARTHUB");
				objNode.put("form_name", instituteFormDetailsBean.getInstituteCode());
				objNode.put("context_id", instituteFormDetailsBean.getMerchantID());
				ObjectNode stdetails = obMapper.createObjectNode();

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = new Date();
				// Getters atarted...

				stdetails.put("college_fee", getInderPrasthaExistOnlineFormBean().getCollegeFee());
				stdetails.put("roll_no", getInderPrasthaExistOnlineFormBean().getRollNo());
				stdetails.put("mobile_no", getInderPrasthaExistOnlineFormBean().getMobileNo());
				stdetails.put("mail_id", getInderPrasthaExistOnlineFormBean().getMailId());
				stdetails.put("student_name", getInderPrasthaExistOnlineFormBean().getStudentName());
				stdetails.put("father_name", getInderPrasthaExistOnlineFormBean().getFatherName());
				stdetails.put("branch_name", getInderPrasthaExistOnlineFormBean().getBranch());
				stdetails.put("year_details", getInderPrasthaExistOnlineFormBean().getYear());
				stdetails.put("seater_type", getInderPrasthaExistOnlineFormBean().getSeater());
				stdetails.put("amount_details", getInderPrasthaExistOnlineFormBean().getAmount());

				stdetails.put("txn_amt", Double.parseDouble(getMahaEduOnlineFormBean().getAmount()));
				stdetails.put("payment_details", Double.parseDouble(getMahaEduOnlineFormBean().getPayment()));
				stdetails.put("registered_userId", registeredUserId);
				stdetails.put("student_registrationid", "0");
				stdetails.put("application_no", "0");
				stdetails.put("recon_date", formatter.format(date));
				stdetails.put("r_cre_time", formatter.format(date));
				stdetails.put("r_mod_time", formatter.format(date));
				stdetails.put("pg_pmt_status", "A");
				stdetails.put("Acc_Holder_Name", " ");
				stdetails.put("Res_Msg", " ");
				stdetails.put("Payment_Mode", " ");
				stdetails.put("Bank_Name", " ");
				stdetails.put("ALT_ERROR_DESC", " ");
				stdetails.put("Pmt_Id", "");
				stdetails.put("Payment_id", "");
				stdetails.put("PGTxnID", "");
				stdetails.put("BANK_ID", "");
				stdetails.put("Txn_Amt", Double.parseDouble(getMahaEduOnlineFormBean().getPayment()));
				// Calling API...
				/*
				 * objNode.put("data", stdetails); String jsonString1 =
				 * obMapper.writeValueAsString(objNode); logger.info("jsonString1" +
				 * jsonString1.toString());
				 */
				objNode.put("form_data", stdetails);

				String jsonString1 = obMapper.writeValueAsString(objNode);

				logger.info("jsonString1" + jsonString1.toString());
				// code added by priya

				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				// String clientId = "actual-smarthub-node-ip";
				// String clientKeyStr =
				// "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				// secureAPIBuilder.setAuthenticationAlias(clientId);

				// byte[] clientKey = hexStringToByteArray(clientKeyStr);
				// secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				/*** *** *** Initialization complete *** *** ***/

				// CODE END
				Client client = ClientBuilder.newClient();
				/*
				 * WebTarget webTarget =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH))
				 * .path("/store-form-data"); Invocation.Builder invocationBuilder = webTarget
				 * .request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE); Response response
				 * = invocationBuilder.post(Entity.json(jsonString1.toString()));
				 * logger.info("response" + response.toString());
				 */

				// API Response status verification ...
				APIResponse apiResponse = null;

				apiResponse = secureAPI.callSecureAPI("POST", "/api/1/add_form_data", jsonString1.toString());

				System.out.println("HTTP version: " + apiResponse.getHTTPVersion() + ", response code: "
						+ apiResponse.getResponseCode());

				String responseBody = apiResponse.getData().toString();

				logger.info("response" + apiResponse.toString());
				if (apiResponse.getResponseCode() != 201) {
					String outputError = apiResponse.getData().toString();
					JSONObject json = new JSONObject(outputError);
					String messageerror = json.getString("message");
					String friendlyMessageFromAPIError = ValidationErrorHandler.getFriendlyMessageFromAPIError(messageerror);
					messageerror=friendlyMessageFromAPIError;
					logger.info("messageerror"+messageerror);
					addActionMessage(messageerror);
					logger.info("messageerror" + messageerror);
					addActionMessage(messageerror);
					return "InderPrasthaExistfailure";
				}

				logger.info("Output from Server...");
				String output = apiResponse.getData().toString();
				JSONObject json = new JSONObject(output);
				JSONObject data1 = json.getJSONObject("data");
				String formId = data1.getString("form_id");
				logger.info("formId" + formId);

				getUserSessionMap().put("application_id", "SMARTHUB");
				getUserSessionMap().put("form_name", instituteFormDetailsBean.getInstituteCode());
				getUserSessionMap().put("context_id", instituteFormDetailsBean.getMerchantID());
				getUserSessionMap().put("form_id", formId);

				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean = new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteFormDetailsBean.getInstituteCode());
				smartHubFetchOnlineFormBean.setContext_id(instituteFormDetailsBean.getMerchantID());
				smartHubFetchOnlineFormBean.setForm_id(formId);
				String jsonString2 = obMapper.writeValueAsString(smartHubFetchOnlineFormBean);

				// Pusing data to template ...
				logger.info("jsonString2" + jsonString2);
				/*
				 * WebTarget webTarget1 =
				 * client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH))
				 * .path("/get-form-data"); Invocation.Builder invocationBuilder1 = webTarget1
				 * .request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE); Response
				 * response1 = invocationBuilder1.post(Entity.json(jsonString2));
				 * logger.info("responseString", response1.toString());
				 */
				// code added by priya form engine
				APIResponse apiResponse1 = null;

				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: "
						+ apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());
				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed: HTTP error code: " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server....");
				String output1 = apiResponse1.getData().toString();
				logger.info("output1" + output1);
				JSONObject jsonObject = new JSONObject(output1);
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray" + jsonArray);
				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String roll_no = dataobj.getString("roll_no");
				String student_name = dataobj.getString("student_name");
				String father_name = dataobj.getString("father_name");
				String branch_name = dataobj.getString("branch_name");
				String year_details = dataobj.getString("year_details");
				String seater_type = dataobj.getString("seater_type");
				int mobile_no = dataobj.getInt("mobile_no");
				String mail_id = dataobj.getString("mail_id");
				int college_fee = dataobj.getInt("college_fee");
				int amount_details = dataobj.getInt("amount_details");

				// Calling all Setter methods
				getInderPrasthaExistOnlineFormBean().setRollNo(roll_no);
				getInderPrasthaExistOnlineFormBean().setStudentName(student_name);
				getInderPrasthaExistOnlineFormBean().setFatherName(father_name);
				getInderPrasthaExistOnlineFormBean().setBranch(branch_name);
				getInderPrasthaExistOnlineFormBean().setYear(year_details);
				getInderPrasthaExistOnlineFormBean().setSeater(seater_type);
				getInderPrasthaExistOnlineFormBean().setMobileNo(String.valueOf(mobile_no));
				getInderPrasthaExistOnlineFormBean().setMailId(mail_id);
				getInderPrasthaExistOnlineFormBean().setCollegeFee(String.valueOf(college_fee));
				getInderPrasthaExistOnlineFormBean().setAmount(String.valueOf(amount_details));

				getInderPrasthaExistOnlineFormBean().setApplicationNo(formId);
				getUserSessionMap().put("ONLINEFORMDATA", getInderPrasthaExistOnlineFormBean());

				// ------End Form Engine
				String responseString = studentRegistrationService
						.insertInderPrasthaExistDetails(getInderPrasthaExistOnlineFormBean(), billerId);
				logger.info("InderPrastaExistStudent :" + responseString);

				if (responseString != null && !"".equalsIgnoreCase(responseString)
						&& "success".equalsIgnoreCase(responseString)) {
					addActionMessage(ErrorPropertyReader.getProperty("student.data.added.successfully"));
				} else if ("NA".equalsIgnoreCase(responseString)) {
					addActionMessage("Failed to add Success Ease data.");
					return "faliure";
				} else {
					addActionMessage("Error occured contact administrator.");
					return "faliure";
				}

				studentRegistrationFormBean = super.getRegisteredStudentDetails(
						getInderPrasthaExistOnlineFormBean().getStudentRegistrationId());
				studentRegistrationFormBean.setTotalPayableFees(getInderPrasthaExistOnlineFormBean().getAmount());
				studentRegistrationFormBean.setStudentId(getInderPrasthaExistOnlineFormBean().getApplicationNo());
				super.applyFees(studentRegistrationFormBean);

				QuickPayAction quickPayAction = new QuickPayAction();
				appData1 = new PaymentRequestBean();
				appData1.setStudentRegistrationId(getInderPrasthaExistOnlineFormBean().getStudentRegistrationId());
				logger.info("InderPrastaStudent --feesPayList :: " + feesPayList);
				quickPayAction.setAppDataFromStudentBean(this.appData1, studentRegistrationFormBean, feesPayList);

				getUserSessionMap().put("APPDATA", getAppData1());

			} else {
				addActionMessage("Amount Mismatched.");
				return "faliure";
			}
		} catch (Exception e) {
			logger.error("Exception  " + e);
			return ERROR;

		}
		return SUCCESS;
	}

	public String inderPrasthaFirstForm() {
		logger.info("-------------------------inderPrasthaFirstForm()--------------------------------");
		logger.info("StudentRegistrationId : - " + getAppData().getStudentRegistrationId());
		logger.info("---------------------------------------------------------");
		String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		String registeredUserId = ((FJBean) getUserSessionMap().get("BASEDATA")).getRegisteredUserId();
		String instCode = ((String) getUserSessionMap().get("_institutecode"));

		// System.out.println("Biller Id"+billerId+"\t"+registeredUserId+"\t"+instCode);
		// //System.out.println( ((String) getUserSessionMap().get("aadharId")));
		/*
		 * getVanarasiNewOnlineFormBean().setRegisteredUserId(registeredUserId);
		 * StudentRegistrationService studentRegistrationService = new
		 * StudentRegistrationService();
		 * //System.out.println(getVanarasiNewOnlineFormBean().toString());
		 */
		return "success";
	}

	public static byte[] hexStringToByteArray(String hexstring) throws InvalidHexDataException {
		int len = hexstring.length();

		if (len % 2 != 0) {
			throw new InvalidHexDataException("Invalid hex data, odd in number");
		}

		byte[] bytes = new byte[len / 2];
		for (int i = 0; i < len; i += 2) {
			bytes[i / 2] = (byte) ((Character.digit(hexstring.charAt(i), 16) << 4)
					+ Character.digit(hexstring.charAt(i + 1), 16));
		}

		return bytes;
	}

}
