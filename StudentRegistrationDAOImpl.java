package com.app.feejunction.dao;

import java.io.InputStream;
import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.app.feejunction.bean.*;
import com.app.feejunction.service.StudentRegistrationService;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.ingenico.secure.client.api.gateway.APIResponse;
import com.ingenico.secure.client.api.gateway.SecureAPIBuilder;
import com.ingenico.secure.client.api.gateway.SecureAPIConnection;

import org.apache.commons.lang3.StringUtils;
import org.json.JSONArray;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StudentRegistrationDAOImpl extends BaseDAOImpl implements StudentRegistrationDAO {
	//private static final Logger logger = Logger.getLogger(StudentRegistrationDAOImpl.class);	
	private static final Logger logger = LoggerFactory.getLogger(StudentRegistrationDAOImpl.class);
	private static final Logger audit = LoggerFactory.getLogger("audit");
	CallableStatement callableStatement = null;
	ResultSet resultSet = null;
	

	public String insertStudentDetails(StudentRegistrationFormBean studentRegistrationFormBean) {
		long startTime = System.currentTimeMillis();
		logger.info("insertStudentDetails(" + studentRegistrationFormBean + ") - START");
		String responseString = null;
		try {
			logger.info("SP_FJT_insertStudentDetails - " + studentRegistrationFormBean.getStudentRegistrationId() + "," + studentRegistrationFormBean.getBillerBranchId() + "," + studentRegistrationFormBean.getStrCourse() + "," +
					studentRegistrationFormBean.getStrCourseDetails() + "," + studentRegistrationFormBean.getStrCoursePattern() + "," + studentRegistrationFormBean.getStrCourseTerm() + "," +
					studentRegistrationFormBean.getStrCourseType() + "," + "" + "," + ""+ "," +
					studentRegistrationFormBean.getStudentAlias() + ", OUT, OUT");            

			/*callableStatement = con.prepareCall("{call SP_FJT_insertStudentDetails_prat(?,?,?,?,?,?,?,?,?,?,?,?)}");*/
			callableStatement = con.prepareCall("{call SP_FJT_insertStudentDetails(?,?,?,?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1, studentRegistrationFormBean.getStudentRegistrationId());
			callableStatement.setString(2, studentRegistrationFormBean.getBillerBranchId());
			callableStatement.setString(3, studentRegistrationFormBean.getStrCourse());
			callableStatement.setString(4, studentRegistrationFormBean.getStrCourseDetails());
			callableStatement.setString(5, studentRegistrationFormBean.getStrCoursePattern());
			callableStatement.setString(6, studentRegistrationFormBean.getStrCourseTerm());
			callableStatement.setString(7, studentRegistrationFormBean.getStrCourseType());
			callableStatement.setString(8, studentRegistrationFormBean.getStudentId());
			callableStatement.setString(9, studentRegistrationFormBean.getStudentName());
			callableStatement.setString(10, studentRegistrationFormBean.getStudentAlias());
			callableStatement.registerOutParameter(11, Types.VARCHAR);
			callableStatement.registerOutParameter(12, Types.VARCHAR);
			callableStatement.execute();
			callableStatement.getString(11);
			responseString = callableStatement.getString(12);
			studentRegistrationFormBean.setStudentRegistrationId(callableStatement.getString(11));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertStudentDetails(" + studentRegistrationFormBean + ") - END");
		return responseString;
	}

	public String deleteStudentDetails(String studentId) {
		long startTime = System.currentTimeMillis();
		logger.info("deleteStudentDetails(" + studentId + ") - START");
		String key = null;
		try {
			logger.info("SP_FJT_deleteStudentDetails - " + studentId + ", OUT");
			callableStatement = con.prepareCall("{call SP_FJT_deleteStudentDetails(?,?)}");
			callableStatement.setString(1, studentId);
			callableStatement.registerOutParameter(2, Types.VARCHAR);
			callableStatement.execute();
			key = callableStatement.getString(2);
			logger.info("key : - " + key);
		} catch (Exception e) {
			logger.error("Exception inside catch deleteStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch deleteStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("deleteStudentDetails(" + studentId + ") - END");
		return key;
	}

	public StudentRegistrationFormBean getStudentCourseDetails(String studentRegistrationId) {
		long startTime = System.currentTimeMillis();
		logger.info("getStudentCourseDetails(" + studentRegistrationId + ") - START");
		StudentRegistrationFormBean studentRegistrationFormBean = null;
		try {
			logger.info("SP_FJT_getStudentCourseDetails - " + studentRegistrationId);
			callableStatement = con.prepareCall("{call SP_FJT_getStudentCourseDetails(?)}");
			//callableStatement = con.prepareCall("{call SP_FJT_getStudentCourseDetails_new(?)}");
			callableStatement.setString(1, studentRegistrationId);
			resultSet = callableStatement.executeQuery();
			while (resultSet.next()) {
				studentRegistrationFormBean = new StudentRegistrationFormBean();

				studentRegistrationFormBean.setStudentRegistrationId(resultSet.getString("studentRegistrationId"));
				studentRegistrationFormBean.setStudentAlias(resultSet.getString("studentAlias"));

				studentRegistrationFormBean.setBillerBranchId(resultSet.getString("branchId"));
				studentRegistrationFormBean.setStudentInstituteBranchName(resultSet.getString("branchName"));

				studentRegistrationFormBean.setStrCourse(resultSet.getString("courseId"));
				/*studentRegistrationFormBean.setStudentCourseName(resultSet.getString("courseName"));*/
				studentRegistrationFormBean.setStudentCourseName(resultSet.getString("courseDesc"));

				studentRegistrationFormBean.setStrCourseDetails(resultSet.getString("specializationId"));
				studentRegistrationFormBean.setStudentSpecializationName(resultSet.getString("specializationName"));

				studentRegistrationFormBean.setStrCourseType(resultSet.getString("specializationTypeId"));
				studentRegistrationFormBean.setStudentCourseType(resultSet.getString("specializationTypeName"));

				studentRegistrationFormBean.setStrCoursePattern(resultSet.getString("specializationPatternId"));
				studentRegistrationFormBean.setStudentCoursePattern(resultSet.getString("specializationPatternName"));
				studentRegistrationFormBean.setStrCourseTerm(resultSet.getString("specializationTermId"));
				studentRegistrationFormBean.setStudentCourseTerm(resultSet.getString("specializationTermName"));

				studentRegistrationFormBean.setStudentId(resultSet.getString("studentId"));
				studentRegistrationFormBean.setStudentName(resultSet.getString("studentName"));
				studentRegistrationFormBean.setStudentFirstName(resultSet.getString("studentFirstName"));
				studentRegistrationFormBean.setStudentMiddleName(resultSet.getString("studentMiddleName"));
				studentRegistrationFormBean.setStudentLastName(resultSet.getString("studentLastName"));
				studentRegistrationFormBean.setStudentEmailId(resultSet.getString("studentEmailId"));
				studentRegistrationFormBean.setStudentMobileNumber(resultSet.getString("studentMobileNumber"));
				studentRegistrationFormBean.setRegistrationId(resultSet.getString("registrationId"));
				studentRegistrationFormBean.setStudentFatherName(resultSet.getString("fathername"));
				studentRegistrationFormBean.setRdStudentEmailId(resultSet.getString("rdstudentEmailId"));

				studentRegistrationFormBean.setCoursePattern(resultSet.getString("course_pattern"));
				studentRegistrationFormBean.setCourseType(resultSet.getString("course_type"));
				studentRegistrationFormBean.setCourseYear(resultSet.getString("Academic_Year"));


			}
		} catch (Exception e) {
			logger.error("Exception inside catch getStudentCourseDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getStudentCourseDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getStudentCourseDetails(" + studentRegistrationId + ") - END");
		return studentRegistrationFormBean;
	}

	/*public List getStudentFeesDetails(String studentSpecializationTypePatternId) {
        List returnList = null;
        try {
            callableStatement = con.prepareCall("{call SP_FJT_getStudentFeesDetails(?)}");
            callableStatement.setString(1, studentSpecializationTypePatternId);
        } catch (Exception e) {
           	        	logger.error("Exception inside catch insertSWARAStudentDetails"+e);
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                }
                if (callableStatement != null) {
                    callableStatement.close();
                }
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
               	        	logger.error("Exception inside catch insertSWARAStudentDetails"+e);
            }
        }
        return null;
    }*/

	public String editStudentDetails(StudentRegistrationFormBean studentRegistrationFormBean) {
		long startTime = System.currentTimeMillis();
		logger.info("editStudentDetails(" + studentRegistrationFormBean + ") - START");
		String key = null;
		try {
			logger.info("SP_FJT_editStudentDetails - " + studentRegistrationFormBean.getStrID() + "," + studentRegistrationFormBean.getBillerBranchId() + "," + studentRegistrationFormBean.getStrCourse() + "," +
					studentRegistrationFormBean.getStrCourseDetails() + "," + studentRegistrationFormBean.getStrCoursePattern() + "," + studentRegistrationFormBean.getStrCourseType() + "," +
					studentRegistrationFormBean.getStudentId() + "," + studentRegistrationFormBean.getStudentName() + ", OUT");

			callableStatement = con.prepareCall("{call SP_FJT_editStudentDetails(?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1, studentRegistrationFormBean.getStrID());
			callableStatement.setString(2, studentRegistrationFormBean.getBillerBranchId());
			callableStatement.setString(3, studentRegistrationFormBean.getStrCourse());
			callableStatement.setString(4, studentRegistrationFormBean.getStrCourseDetails());
			callableStatement.setString(5, studentRegistrationFormBean.getStrCoursePattern());
			callableStatement.setString(6, studentRegistrationFormBean.getStrCourseType());
			callableStatement.setString(7, studentRegistrationFormBean.getStudentId());
			callableStatement.setString(8, studentRegistrationFormBean.getStudentName());
			callableStatement.registerOutParameter(9, Types.VARCHAR);


			callableStatement.execute();
			key = callableStatement.getString(9);
			logger.info("key : - " + key);
		} catch (Exception e) {
			logger.error("Exception inside catch editStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch editStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("editStudentDetails(" + studentRegistrationFormBean + ") - END");
		return key;
	}


	public String getStudentRegistrationIdFromUniqueId(String uniqueIdentificationId,String defaultGuestUserId){
		long startTime = System.currentTimeMillis();
		logger.info("getStudentRegistrationIdFromUniqueId(" + uniqueIdentificationId + "," + defaultGuestUserId + ") - START");
		String studentRegistrationId = null;
		try {
			logger.info("SP_FJT_getStudentRegistrationIdFromUniqueId - " + uniqueIdentificationId + "," + defaultGuestUserId);
			callableStatement = con.prepareCall("{call SP_FJT_getStudentRegistrationIdFromUniqueId(?,?)}");
			callableStatement.setString(1, uniqueIdentificationId);
			callableStatement.setString(2, defaultGuestUserId);
			resultSet = callableStatement.executeQuery();
			while (resultSet.next()) {
				studentRegistrationId = resultSet.getString("studentRegistrationId");
			}
		} catch (Exception e) {
			logger.error("Exception inside catch getStudentRegistrationIdFromUniqueId"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getStudentRegistrationIdFromUniqueId"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("EXIT getStudentRegistrationIdFromUniqueId(" + uniqueIdentificationId + "," + defaultGuestUserId + ") - END");
		return studentRegistrationId;
	}
	public String getStudentRegistrationIdFromUniqueStudentId (String uniqueIdentificationId, String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("getStudentRegistrationIdFromUniqueStudentId(" + uniqueIdentificationId  + "," + instituteId + " ) - START");
		String studentRegistrationId = null;
		try {
			logger.info("SP_FJT_getStudentRegistrationIdFromUniqueStudentId - " + uniqueIdentificationId );
			callableStatement = con.prepareCall("{call SP_FJT_getStudentRegistrationIdFromUniqueStudentId(?,?)}");
			callableStatement.setString(1, uniqueIdentificationId);
			callableStatement.setString(2, instituteId);
			resultSet = callableStatement.executeQuery();
			String registrationId = null;
			while (resultSet.next()) {
				registrationId = resultSet.getString("registrationId");
				if(registrationId != null && !"".equalsIgnoreCase(registrationId.trim())) {
					studentRegistrationId = "AE";
				} else {
					studentRegistrationId = resultSet.getString("studentRegistrationId");
				}

			}
		} catch (Exception e) {
			logger.error("Exception inside catch getStudentRegistrationIdFromUniqueStudentId"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getStudentRegistrationIdFromUniqueStudentId"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getStudentRegistrationIdFromUniqueStudentId(" + uniqueIdentificationId + "," + instituteId + ") - END");
		return studentRegistrationId;
	}

	public String associateStudent(String studentRegistrationId,String registeredUserId,String loginId) {
		long startTime = System.currentTimeMillis();
		logger.info("associateStudent(" + studentRegistrationId  + "," + registeredUserId + "," + loginId +") - START");
		String statusUpdate = null;
		try {
			logger.info("SP_FJT_associateStudent - " + studentRegistrationId + "," + registeredUserId + "," + loginId );
			callableStatement = con.prepareCall("{call SP_FJT_associateStudent(?,?,?,?)}");
			callableStatement.setString(1, studentRegistrationId);
			callableStatement.setString(2, registeredUserId);
			callableStatement.setString(3, loginId);
			callableStatement.registerOutParameter(4, Types.VARCHAR);
			callableStatement.execute();
			statusUpdate = callableStatement.getString(4);
		} catch (Exception e) {
			logger.error("Exception inside catch associateStudent"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch associateStudent"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("associateStudent(" + studentRegistrationId  + "," + registeredUserId + "," + loginId +") - END");
		return statusUpdate;
	}

	public List getStudentRegistrationIdList(String registrationId) {
		long startTime = System.currentTimeMillis();
		logger.info("getStudentRegistrationIdList(" + registrationId + ") - START");
		List studentRegistrationIdList = null;
		try {
			logger.info("SP_FJT_getStudentRegistrationIdList - " + registrationId);
			callableStatement = con.prepareCall("{call SP_FJT_getStudentRegistrationIdList(?)}");
			callableStatement.setString(1, registrationId);
			resultSet = callableStatement.executeQuery();
			studentRegistrationIdList = new ArrayList();
			while (resultSet.next()) {
				studentRegistrationIdList.add(resultSet.getString("studentRegistrationId"));
			}
			logger.info("getStudentRegistrationIdList - 000");
		} catch (Exception e) {
			logger.error("Exception inside catch getStudentRegistrationIdList"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getStudentRegistrationIdList"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getStudentRegistrationIdList(" + registrationId + ") - END");
		return studentRegistrationIdList;
	}
	//start
	public List getStudentTranDetailsList(String studentId) {
		long startTime = System.currentTimeMillis();
		logger.info("getStudentTranDetailsList(" + studentId + ") - START");
		List studentRegistrationIdList = null;

		try {
			logger.info("SP_FJT_getPrintEReceiptDetailsList - " + studentId);
			callableStatement = con.prepareCall("{call SP_FJT_getPrintEReceiptDetailsList(?)}");
			callableStatement.setString(1, studentId);
			resultSet = callableStatement.executeQuery();
			studentRegistrationIdList = new ArrayList();
			StudentRegistrationFormBean studentRegistrationFormBean;
			while (resultSet.next()) {
				studentRegistrationFormBean = new StudentRegistrationFormBean();
				studentRegistrationFormBean.setStrstudentNameEreceipt(resultSet.getString("student_name"));
				studentRegistrationFormBean.setStrTranscationIdereceipt(resultSet.getString("Pmt_Id"));
				studentRegistrationFormBean.setStrpaymentDateEreceipt(resultSet.getString("paymentDateEreceipt"));



				studentRegistrationIdList.add(studentRegistrationFormBean);
			}
			logger.info("getStudentRegistrationIdList - 000");
		} catch (Exception e) {
			logger.error("Exception inside catch getStudentTranDetailsList"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getStudentTranDetailsList"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getStudentTranDetailsList(" + studentId + ") - END");
		return studentRegistrationIdList;
	}
	public List getStudentTranscationDetails(String registrationId, String studentRegistrationId) {
		long startTime = System.currentTimeMillis();
		logger.info("getStudentTranscationDetails(" + registrationId + "," + studentRegistrationId + ") - START");
		List studentTranscationDetailsList = null;
		try {
			logger.info("SP_FJT_getStudentTranscationDetails - " + registrationId + " , " + studentRegistrationId);
			callableStatement = con.prepareCall("{call SP_FJT_getStudentTranscationDetails(?,?)}");
			callableStatement.setString(1, registrationId);
			callableStatement.setString(2, studentRegistrationId);
			resultSet = callableStatement.executeQuery();
			studentTranscationDetailsList = new ArrayList();
			/*fjn_ppd.Payment_id as prePaymentId, 
			fjn_ppd.student_id as studentId, 
			fjn_ppd.student_name as studentName,
			fjn_ppd.Course_Id as courseId,
			fjn_ppd.course_name as courseName,
			fjn_ppd.Special_Id as specializationId,
			fjn_ppd.course_desc as specializationName,
			fjn_ppd.Course_Type_id as courseTypeId,
			fjn_ppd.COURSE_TYPE as courseTypeName,
			fjn_ppd.Course_Pattern_Id as coursePatternId,
			fjn_ppd.Course_Pattern as coursePatternName,
			fjn_ppd.Course_Term_Id as courseTermId,
			fjn_ppd.Course_Term as courseTermName,
			fjn_ppfd.Prepayment_Fees_Id as prePaymentFeesId,
			fjn_ppfd.Payment_Id as paymentId,
			fjn_ppfd.Fee_Pay_Id as feePayId,
			fjn_ppfd.Fees_Type_Id as feeTypeId,
			fjn_ppfd.Total_Fees_Payable as totalFeesPayable,
			sj_bp.Pmt_Id as paymentId,
			sj_bp.pg_pmt_status as pgPmtStatus*/
			while (resultSet.next()) {
				TranscationDetailsBean transcationDetailsBean = new TranscationDetailsBean();
				transcationDetailsBean.setPrePaymentId(resultSet.getString("prePaymentId"));
				transcationDetailsBean.setStudentUniqueId(resultSet.getString("studentId"));
				transcationDetailsBean.setCourseId(resultSet.getString("courseId"));
				transcationDetailsBean.setCourseName(resultSet.getString("courseName"));
				transcationDetailsBean.setSpecializationId(resultSet.getString("specializationId"));
				transcationDetailsBean.setSpecializationName(resultSet.getString("specializationName"));
				transcationDetailsBean.setCourseTypeId(resultSet.getString("courseTypeId"));
				transcationDetailsBean.setCourseTypeName(resultSet.getString("courseTypeName"));
				transcationDetailsBean.setCoursePatternId(resultSet.getString("coursePatternId"));
				transcationDetailsBean.setCoursePatternName(resultSet.getString("coursePatternName"));
				transcationDetailsBean.setCourseTermId(resultSet.getString("courseTermId"));
				transcationDetailsBean.setCourseTermName(resultSet.getString("courseTermName"));
				transcationDetailsBean.setPrePaymentFeesId(resultSet.getString("prePaymentFeesId"));
				transcationDetailsBean.setFeePayId(resultSet.getString("feePayId"));
				transcationDetailsBean.setFeeTypeId(resultSet.getString("feeTypeId"));
				transcationDetailsBean.setFeeAmount(resultSet.getString("totalFeesPayable"));
				transcationDetailsBean.setPaymentId(resultSet.getString("paymentId"));
				transcationDetailsBean.setPg_pmt_status(resultSet.getString("pgPmtStatus"));
				transcationDetailsBean.setRegistrationId(registrationId);
				transcationDetailsBean.setStudentRegistrationId(studentRegistrationId);
				studentTranscationDetailsList.add(transcationDetailsBean);


			}
			logger.info("getStudentTranscationDetails - 000");
		} catch (Exception e) {
			logger.error("Exception inside catch getStudentTranscationDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getStudentTranscationDetails"+e);
			}
		}


		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getStudentTranscationDetails(" + registrationId + "," + studentRegistrationId + ") - END");
		return studentTranscationDetailsList;
	}

	public String insertMemberRegDetails(BhuLoginActionFormBean bhuLoginActionFormBean) {
		long startTime = System.currentTimeMillis();
		logger.info("insertMemberRegDetails(" + bhuLoginActionFormBean + ") - START");
		String responseString = null;
		try {
			/*logger.info("SP_FJT_insertStudentDetails - " + bhuLoginActionFormBean.getStudentRegistrationId() + "," + studentRegistrationFormBean.getBillerBranchId() + "," + studentRegistrationFormBean.getStrCourse() + "," +
        			bhuLoginActionFormBean.getStrCourseDetails() + "," + bhuLoginActionFormBean.getStrCoursePattern() + "," + studentRegistrationFormBean.getStrCourseTerm() + "," +
        			bhuLoginActionFormBean.getStrCourseType() + "," + bhuLoginActionFormBean.getStudentId() + "," + studentRegistrationFormBean.getStudentName() + "," +
        			bhuLoginActionFormBean.getStudentAlias() + ", OUT, OUT");*/

			/*callableStatement = con.prepareCall("{call SP_FJT_insertStudentDetails_prat(?,?,?,?,?,?,?,?,?,?,?,?)}");*/

			logger.info("SP_FJT_Bhu_Registration_Details - " + bhuLoginActionFormBean );
			callableStatement = con.prepareCall("{call SP_FJT_Bhu_Registration_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1, bhuLoginActionFormBean.getParticipantName());
			callableStatement.setString(2, bhuLoginActionFormBean.getParticipantAddress());
			callableStatement.setString(3, bhuLoginActionFormBean.getParticipantCity());
			callableStatement.setString(4, bhuLoginActionFormBean.getParticipantPIN());
			callableStatement.setString(5, bhuLoginActionFormBean.getParticipantEmail());
			callableStatement.setString(6, bhuLoginActionFormBean.getParticipantIOSNo());
			callableStatement.setString(7, bhuLoginActionFormBean.getStatus_select());
			callableStatement.setString(8, bhuLoginActionFormBean.getParticipantCollage());
			callableStatement.setString(9, bhuLoginActionFormBean.getTypeofmem());
			callableStatement.setString(10, bhuLoginActionFormBean.getSelf_Amt1());
			callableStatement.setString(11, bhuLoginActionFormBean.getAccomp_person());
			callableStatement.setString(12, bhuLoginActionFormBean.getAcm_Amt1());
			callableStatement.setString(13, bhuLoginActionFormBean.getTot_Amt1());
			callableStatement.setString(14, bhuLoginActionFormBean.getRegisteredUserId());  
			callableStatement.registerOutParameter(15, Types.VARCHAR);
			callableStatement.registerOutParameter(16, Types.VARCHAR);
			callableStatement.execute();           
			responseString = callableStatement.getString(16); 
			bhuLoginActionFormBean.setStudentRegistrationId(callableStatement.getString(15));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertMemberRegDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertMemberRegDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertMemberRegDetails(" + bhuLoginActionFormBean + ") - END");
		return responseString;
	}

	public String insertGNLUStudentDetails(GNLULoginActionFormBean gnluLoginActionFormBean,String billerId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertGNLUStudentDetails(" + gnluLoginActionFormBean + ") - START");
		String responseString = null;
		try {
			/*logger.info("SP_FJT_insertStudentDetails - " + bhuLoginActionFormBean.getStudentRegistrationId() + "," + studentRegistrationFormBean.getBillerBranchId() + "," + studentRegistrationFormBean.getStrCourse() + "," +
        			bhuLoginActionFormBean.getStrCourseDetails() + "," + bhuLoginActionFormBean.getStrCoursePattern() + "," + studentRegistrationFormBean.getStrCourseTerm() + "," +
        			bhuLoginActionFormBean.getStrCourseType() + "," + bhuLoginActionFormBean.getStudentId() + "," + studentRegistrationFormBean.getStudentName() + "," +
        			bhuLoginActionFormBean.getStudentAlias() + ", OUT, OUT");*/


			/*callableStatement = con.prepareCall("{call SP_FJT_insertStudentDetails_prat(?,?,?,?,?,?,?,?,?,?,?,?)}");*/
			/*
			 * logger.info("SP_FJT_GNLU_Registration_Details - " ); callableStatement = con.
			 * prepareCall("{call SP_FJT_GNLU_Registration_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}"
			 * );
			 * 
			 * callableStatement.setString(1, gnluLoginActionFormBean.getStdFirstName());
			 * callableStatement.setString(2, gnluLoginActionFormBean.getStdMiddleName());
			 * callableStatement.setString(3, gnluLoginActionFormBean.getStdLastName());
			 * callableStatement.setString(4, gnluLoginActionFormBean.getGender());
			 * callableStatement.setString(5, gnluLoginActionFormBean.getStdFatherName());
			 * callableStatement.setString(6, gnluLoginActionFormBean.getCategory());
			 * callableStatement.setString(7, gnluLoginActionFormBean.getStdNationality());
			 * callableStatement.setString(8, gnluLoginActionFormBean.getStdDOB());
			 * callableStatement.setString(9, gnluLoginActionFormBean.getStdAddress1());
			 * callableStatement.setString(10, gnluLoginActionFormBean.getStdAddress2());
			 * callableStatement.setString(11, gnluLoginActionFormBean.getStdCity());
			 * callableStatement.setString(12, gnluLoginActionFormBean.getStdState());
			 * callableStatement.setString(13, gnluLoginActionFormBean.getStdPinCode());
			 * callableStatement.setString(14, gnluLoginActionFormBean.getStdCountry());
			 * callableStatement.setString(15, gnluLoginActionFormBean.getStdMobile());
			 * callableStatement.setString(16, gnluLoginActionFormBean.getStdLandLine());
			 * callableStatement.setString(17, gnluLoginActionFormBean.getStdEmailId());
			 * callableStatement.setString(18, gnluLoginActionFormBean.getBoardName());
			 * callableStatement.setString(19, gnluLoginActionFormBean.getSchoolName());
			 * callableStatement.setString(20,
			 * gnluLoginActionFormBean.getStreamDropdowmn());
			 * callableStatement.setString(21, gnluLoginActionFormBean.getSscClass());
			 * callableStatement.setString(22, gnluLoginActionFormBean.getStdPercentage());
			 * callableStatement.setString(23, gnluLoginActionFormBean.getStdUniversity());
			 * callableStatement.setString(24, gnluLoginActionFormBean.getStdDegree());
			 * callableStatement.setString(25, gnluLoginActionFormBean.getStdCollege());
			 * callableStatement.setString(26, gnluLoginActionFormBean.getGraduateClass());
			 * callableStatement.setString(27, gnluLoginActionFormBean.getOverallAggr());
			 * callableStatement.setString(28, gnluLoginActionFormBean.getOrganization());
			 * callableStatement.setString(29, gnluLoginActionFormBean.getDesignation());
			 * callableStatement.setString(30,
			 * gnluLoginActionFormBean.getNatureResponsibility());
			 * callableStatement.setString(31, gnluLoginActionFormBean.getFromDate());
			 * callableStatement.setString(32, gnluLoginActionFormBean.getToDate());
			 * callableStatement.setString(33,
			 * gnluLoginActionFormBean.getRegisteredUserId());
			 * callableStatement.setString(34, gnluLoginActionFormBean.getAmt1());
			 * callableStatement.setString(35, gnluLoginActionFormBean.getRegistrationNo());
			 * callableStatement.setString(36, gnluLoginActionFormBean.getEntranceexam());
			 * callableStatement.setString(37, gnluLoginActionFormBean.getStdMotherName());
			 * callableStatement.setString(38,
			 * gnluLoginActionFormBean.getStdDOBNationality());
			 * callableStatement.setString(39, gnluLoginActionFormBean.getSourceOfInfo());
			 * callableStatement.setString(40, gnluLoginActionFormBean.getStdAddress3());
			 * callableStatement.setString(41, gnluLoginActionFormBean.getStdPhone());
			 * callableStatement.setString(42, gnluLoginActionFormBean.getParentPhone());
			 * callableStatement.setString(43, gnluLoginActionFormBean.getParentMobile());
			 * callableStatement.setString(44, gnluLoginActionFormBean.getParentEmailId());
			 * callableStatement.setString(45, gnluLoginActionFormBean.getMediumOfSSC());
			 * callableStatement.setString(46, gnluLoginActionFormBean.getTotalSSCMark());
			 * callableStatement.setString(47,
			 * gnluLoginActionFormBean.getObtainedSSCMark());
			 * callableStatement.setString(48, gnluLoginActionFormBean.getHscBoardName());
			 * callableStatement.setString(49, gnluLoginActionFormBean.getHscSchoolName());
			 * callableStatement.setString(50,
			 * gnluLoginActionFormBean.getHscStreamDropdowmn());
			 * callableStatement.setString(51, gnluLoginActionFormBean.getMediumOfHSC());
			 * callableStatement.setString(52, gnluLoginActionFormBean.getHscClass());
			 * callableStatement.setString(53, gnluLoginActionFormBean.getTotalHSCMark());
			 * callableStatement.setString(54,
			 * gnluLoginActionFormBean.getObtainedHSCMark());
			 * callableStatement.setString(55,
			 * gnluLoginActionFormBean.getHscAggPercentage());
			 * callableStatement.setString(56, gnluLoginActionFormBean.getGradStream());
			 * callableStatement.setString(57, gnluLoginActionFormBean.getMediumOfGrad());
			 * callableStatement.setString(58,
			 * gnluLoginActionFormBean.getConversionFormula());
			 * callableStatement.setString(59, gnluLoginActionFormBean.getTotalGradMark());
			 * callableStatement.setString(60,
			 * gnluLoginActionFormBean.getObtainedGradMark());
			 * callableStatement.setString(61, gnluLoginActionFormBean.getPhoto_Self());
			 * callableStatement.setString(62, gnluLoginActionFormBean.getPhoto_Proof());
			 * 
			 * 
			 * callableStatement.registerOutParameter(63, Types.VARCHAR);
			 * callableStatement.registerOutParameter(64, Types.VARCHAR);
			 */
			/*
			 * callableStatement.execute(); responseString =
			 * callableStatement.getString(64);
			 * gnluLoginActionFormBean.setStudentRegistrationId(callableStatement.getString(
			 * 63)); logger.info("responseString : - " + responseString);
			 */
			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,gnluLoginActionFormBean.getAmt1());
			callableStatement.setString(2,gnluLoginActionFormBean.getApplicationNo());
			callableStatement.setString(3,gnluLoginActionFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			gnluLoginActionFormBean.setStudentRegistrationId(callableStatement.getString(6));
			gnluLoginActionFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);

		} catch (Exception e) {
			logger.error("Exception inside catch insertGNLUStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertGNLUStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertGNLUStudentDetails(" + gnluLoginActionFormBean + ") - END");
		return responseString;
	}    

	public String getSpsApplicationNo(String uniqueIdentificationId, String defaultGuestUserId) {
		long startTime = System.currentTimeMillis();
		logger.info("getSpsApplicationNo(" + uniqueIdentificationId+"," +defaultGuestUserId + ") - START");
		String studentRegistrationId = null;
		try {
			logger.info("SP_FJT_getSpsApplicationNoId - " + uniqueIdentificationId+","+defaultGuestUserId);
			callableStatement = con.prepareCall("{call SP_FJT_getSpsApplicationNoId(?,?)}");
			callableStatement.setString(1, uniqueIdentificationId);
			callableStatement.setString(2, defaultGuestUserId);
			resultSet = callableStatement.executeQuery();
			while (resultSet.next()) {
				studentRegistrationId = resultSet.getString("Application_No");
			}
		} catch (Exception e) {
			logger.error("Exception inside catch getSpsApplicationNo"+e);

		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getSpsApplicationNo"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getSpsApplicationNo(" + uniqueIdentificationId + "," + defaultGuestUserId + ") - END");
		return studentRegistrationId;
	}

	public StudentRegistrationFormBean getSCIndiaAdmissionNo(String uniqueIdentificationId, String defaultGuestUserId) {
		long startTime = System.currentTimeMillis();
		logger.info("getSCIndiaAdmissionNo(" + uniqueIdentificationId  + ") - START");
		String studentRegistrationId = null;
		StudentRegistrationFormBean studentRegistrationFormBean=null;
		try {        	   
			logger.info("SP_FJT_getSKVAdmissionNo - " + uniqueIdentificationId );
			callableStatement = con.prepareCall("{call SP_FJT_getSKVAdmissionNo(?,?)}");
			callableStatement.setString(1, uniqueIdentificationId);
			callableStatement.setString(2, defaultGuestUserId);
			resultSet = callableStatement.executeQuery();               
			while (resultSet.next()) {
				studentRegistrationFormBean = new StudentRegistrationFormBean();
				studentRegistrationFormBean.setStudentName(resultSet.getString("StudentName"));
				studentRegistrationFormBean.setApplication_No(resultSet.getString("AdmissionNo"));   
				//studentRegistrationId = resultSet.getString("AdmissionNo");
			}
		} catch (Exception e) {
			logger.error("Exception inside catch getSCIndiaAdmissionNo"+e);

		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getSCIndiaAdmissionNo"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getSCIndiaAdmissionNo(" + uniqueIdentificationId + "," + defaultGuestUserId + ") - END");
		return studentRegistrationFormBean;
	}

	public String insertRamaStudentDetails(RamaCollageFormBean ramaCollageFormBean) {
		long startTime = System.currentTimeMillis();
		logger.info("insertRamaStudentDetails(" + ramaCollageFormBean + ") - START");
		String responseString = null;
		try {
			/*logger.info("SP_FJT_insertStudentDetails - " + bhuLoginActionFormBean.getStudentRegistrationId() + "," + studentRegistrationFormBean.getBillerBranchId() + "," + studentRegistrationFormBean.getStrCourse() + "," +
        			bhuLoginActionFormBean.getStrCourseDetails() + "," + bhuLoginActionFormBean.getStrCoursePattern() + "," + studentRegistrationFormBean.getStrCourseTerm() + "," +
        			bhuLoginActionFormBean.getStrCourseType() + "," + bhuLoginActionFormBean.getStudentId() + "," + studentRegistrationFormBean.getStudentName() + "," +
        			bhuLoginActionFormBean.getStudentAlias() + ", OUT, OUT");*/


			/*callableStatement = con.prepareCall("{call SP_FJT_insertStudentDetails_prat(?,?,?,?,?,?,?,?,?,?,?,?)}");*/

			logger.info("SP: PROC_FJT_RAMA_Registration_Details - "  );
			callableStatement = con.prepareCall("{call PROC_FJT_RAMA_Registration_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1, ramaCollageFormBean.getStdFirstName());
			callableStatement.setString(2, ramaCollageFormBean.getStdMiddleName1());
			callableStatement.setString(3, ramaCollageFormBean.getStdLastName());
			callableStatement.setString(4, ramaCollageFormBean.getEdBachground());
			callableStatement.setString(5, ramaCollageFormBean.getStdAddress1());
			callableStatement.setString(6, ramaCollageFormBean.getStdCountry());            
			callableStatement.setString(7, ramaCollageFormBean.getStdCity());
			callableStatement.setString(8, ramaCollageFormBean.getStdState());
			callableStatement.setString(9, ramaCollageFormBean.getStdPinCode());
			callableStatement.setString(10, ramaCollageFormBean.getStdLandLine1());
			callableStatement.setString(11, ramaCollageFormBean.getStdEmailId());
			callableStatement.setString(12, ramaCollageFormBean.getStdMobile());
			callableStatement.setString(13, ramaCollageFormBean.getCompanyName());
			callableStatement.setString(14, ramaCollageFormBean.getDesignation());
			callableStatement.setString(15, ramaCollageFormBean.getWorkExperience());
			callableStatement.setString(16, ramaCollageFormBean.getStdAddress2());
			callableStatement.setString(17, ramaCollageFormBean.getWorkPhone());                 
			callableStatement.setString(18, ramaCollageFormBean.getTypeName());                                   
			callableStatement.setString(19, ramaCollageFormBean.getAmt1());
			callableStatement.setString(20, ramaCollageFormBean.getRegisteredUserId());



			callableStatement.registerOutParameter(21, Types.VARCHAR);
			callableStatement.registerOutParameter(22, Types.VARCHAR);
			callableStatement.registerOutParameter(23, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(23); 
			ramaCollageFormBean.setStudentRegistrationId(callableStatement.getString(22));
			ramaCollageFormBean.setApplicationNo(callableStatement.getString(21));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertRamaStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertRamaStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertRamaStudentDetails(" + ramaCollageFormBean + ") - END");
		return responseString;
	} 




	public RamaCollageFormBeanResponse getRamaStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getRamaStudentDetails(" + applicationNo + ") - START");  
		RamaCollageFormBeanResponse ramaCollageFormBeanResponse = null;
		try {
			/*logger.info("SP_FJT_insertStudentDetails - " + bhuLoginActionFormBean.getStudentRegistrationId() + "," + studentRegistrationFormBean.getBillerBranchId() + "," + studentRegistrationFormBean.getStrCourse() + "," +
        			bhuLoginActionFormBean.getStrCourseDetails() + "," + bhuLoginActionFormBean.getStrCoursePattern() + "," + studentRegistrationFormBean.getStrCourseTerm() + "," +
        			bhuLoginActionFormBean.getStrCourseType() + "," + bhuLoginActionFormBean.getStudentId() + "," + studentRegistrationFormBean.getStudentName() + "," +
        			bhuLoginActionFormBean.getStudentAlias() + ", OUT, OUT");*/


			/*callableStatement = con.prepareCall("{call SP_FJT_insertStudentDetails_prat(?,?,?,?,?,?,?,?,?,?,?,?)}");*/
			logger.info("SP: PROC_FJT_RAMA_GET_Details - " +applicationNo );
			callableStatement = con.prepareCall("{call PROC_FJT_RAMA_GET_Details(?)}");

			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {
				ramaCollageFormBeanResponse = new RamaCollageFormBeanResponse();
				ramaCollageFormBeanResponse.setStdFirstName(resultSet.getString("stdFirstName"));
				ramaCollageFormBeanResponse.setStdMiddleName1(resultSet.getString("stdMiddleName"));
				ramaCollageFormBeanResponse.setStdLastName(resultSet.getString("stdLastName"));
				ramaCollageFormBeanResponse.setEdBachground(resultSet.getString("educationBachground"));
				ramaCollageFormBeanResponse.setStdAddress1(resultSet.getString("stdAddress1"));
				ramaCollageFormBeanResponse.setStdCountry(resultSet.getString("stdCountry"));
				ramaCollageFormBeanResponse.setStdCity(resultSet.getString("stdCity"));
				ramaCollageFormBeanResponse.setStdState(resultSet.getString("stdState"));
				ramaCollageFormBeanResponse.setStdPinCode(resultSet.getString("stdPinCode"));
				ramaCollageFormBeanResponse.setStdLandLine1(resultSet.getString("stdLandLine"));
				ramaCollageFormBeanResponse.setStdEmailId(resultSet.getString("stdEmailId"));
				ramaCollageFormBeanResponse.setStdMobile(resultSet.getString("stdMobile"));
				ramaCollageFormBeanResponse.setCompanyName(resultSet.getString("companyName"));
				ramaCollageFormBeanResponse.setDesignation(resultSet.getString("designation"));
				ramaCollageFormBeanResponse.setWorkExperience(resultSet.getString("workExperience"));
				ramaCollageFormBeanResponse.setStdAddress2(resultSet.getString("stdAddress2"));
				ramaCollageFormBeanResponse.setWorkPhone(resultSet.getString("workPhone"));
				ramaCollageFormBeanResponse.setTypeName(resultSet.getString("category"));
				ramaCollageFormBeanResponse.setAmt1(resultSet.getString("Amount"));
				ramaCollageFormBeanResponse.setApplicationNo(resultSet.getString("ApplicationNo"));

			}



		} catch (Exception e) {
			logger.error("Exception inside catch getRamaStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getRamaStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getRamaStudentDetails(" + ramaCollageFormBeanResponse + ") - END");
		return ramaCollageFormBeanResponse;
	} 


	public String insertIMSStudentDetails(IMSUniversityFormBean imsUniversityFormBean) {
		long startTime = System.currentTimeMillis();
		logger.info("insertIMSStudentDetails(" + imsUniversityFormBean + ") - START");
		String responseString = null;
		try {
			logger.info("SP: PROC_FJT_IMS_Registration_Details - " );
			callableStatement = con.prepareCall("{call PROC_FJT_IMS_Registration_Details(?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1, imsUniversityFormBean.getImsAppNo());
			callableStatement.setString(2, imsUniversityFormBean.getImsStudentName());
			callableStatement.setString(3, imsUniversityFormBean.getImsMobileNo());
			callableStatement.setString(4, imsUniversityFormBean.getImsAppFee());
			callableStatement.setString(5, imsUniversityFormBean.getImsDateofBirth());
			callableStatement.setString(6, imsUniversityFormBean.getRegisteredUserId());

			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.registerOutParameter(8, Types.VARCHAR);
			callableStatement.registerOutParameter(9, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(9); 
			imsUniversityFormBean.setStudentRegistrationId(callableStatement.getString(8));
			imsUniversityFormBean.setApplicationNo(callableStatement.getString(7));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertIMSStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertIMSStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertIMSStudentDetails(" + imsUniversityFormBean + ") - END");
		return responseString;
	}

	@Override
	public List<String> getOnlineInstituteAmountList(String billerId) {
		List<String> amountList=new ArrayList<String>();
		logger.info("getOnlineInstituteAmountList(" + billerId + ") - START");
		try
		{		
			logger.info("SP: PROC_FETCH_INSTITUTE_ONLINE_FEES - "+billerId );
			callableStatement = con.prepareCall("{call PROC_FETCH_INSTITUTE_ONLINE_FEES(?)}");
			callableStatement.setString(1, billerId);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {
				amountList.add(resultSet.getString("amount"));
			}      
		} catch (Exception e) {
			logger.error("Exception inside catch getOnlineInstituteAmountList"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getOnlineInstituteAmountList"+e);
			}
		}
		logger.info("getOnlineInstituteAmountList(" + billerId + ") - END");
		return amountList;
	} 
	@Override
	public String insertGLAUniversityStudentDetails(
			URLInstituteRequestBean glaUniversityStudentFormBean,
			String billerId) {


		long startTime = System.currentTimeMillis();
		logger.info("insertGLAUniversityStudentDetails(" + glaUniversityStudentFormBean + ") - START");
		String responseString = null;
		try {

			String firstLevelParsing[]=glaUniversityStudentFormBean.getCartDetails().split("~");
			for(int i=0;i<firstLevelParsing.length;i++){
				String feecred[]=firstLevelParsing[i].split("_");
				logger.info("SP: PROC_FJT_DY_UNIVERSITY_REGISTRATION_DETAILS - ");
				callableStatement = con.prepareCall("{call PROC_FJT_DY_UNIVERSITY_REGISTRATION_DETAILS(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
				callableStatement.setInt(1, i);
				callableStatement.setString(2, glaUniversityStudentFormBean.getRequestType());
				callableStatement.setString(3, glaUniversityStudentFormBean.getMerchantCode());
				callableStatement.setString(4, glaUniversityStudentFormBean.getMerchantRefNo());
				callableStatement.setString(5, glaUniversityStudentFormBean.getTrnxAmount());
				callableStatement.setString(6, glaUniversityStudentFormBean.getCurrency());
				callableStatement.setString(7, glaUniversityStudentFormBean.getAddInfo());
				callableStatement.setString(8, glaUniversityStudentFormBean.getReturnURL());
				callableStatement.setString(9, glaUniversityStudentFormBean.getTrnxDate());
				callableStatement.setString(10, glaUniversityStudentFormBean.getPaymentMode());
				callableStatement.setString(11, glaUniversityStudentFormBean.getBankCode());
				callableStatement.setString(12, glaUniversityStudentFormBean.getCustomerName());
				callableStatement.setString(13, glaUniversityStudentFormBean.getCustomerEmailId());
				callableStatement.setString(14, glaUniversityStudentFormBean.getCustomerMobileNo());
				callableStatement.setString(15, glaUniversityStudentFormBean.getCustomerUniqueId());
				callableStatement.setString(16, glaUniversityStudentFormBean.getTrnxId());
				callableStatement.setString(17, glaUniversityStudentFormBean.getRegisteredUserId());
				callableStatement.setString(18, billerId);
				callableStatement.setString(19, feecred[0]);
				callableStatement.setString(20, feecred[1]);
				callableStatement.setString(21, feecred[2]);


				callableStatement.registerOutParameter(22, Types.VARCHAR);
				callableStatement.registerOutParameter(23, Types.VARCHAR);
				callableStatement.registerOutParameter(24, Types.VARCHAR);
				callableStatement.registerOutParameter(25, Types.VARCHAR);

				callableStatement.execute(); 


				responseString = callableStatement.getString(24); 
				glaUniversityStudentFormBean.setStudentRegistrationId(callableStatement.getString(23));
				glaUniversityStudentFormBean.setApplicationNo(callableStatement.getString(22));
				glaUniversityStudentFormBean.setStudentId(callableStatement.getString(25));			            
				logger.info("responseString : - " + responseString);
			}

		} catch (Exception e) {
			logger.error("Exception inside catch insertGLAUniversityStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertGLAUniversityStudentDetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertGLAUniversityStudentDetails(" + glaUniversityStudentFormBean + ") - END");
		return responseString;
	}


	@Override
	public String insertGLAUniversityStudentDetails(
			GLAUniversityStudentFormBean glaUniversityStudentFormBean,
			String billerId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertGLAUniversityStudentDetails(" + glaUniversityStudentFormBean + ") - START");
		String responseString = null;
		try {
			logger.info("PROC_FJT_GLA_UNIVERSITY_REGISTRATION_DETAILS-");
			callableStatement = con.prepareCall("{call PROC_FJT_GLA_UNIVERSITY_REGISTRATION_DETAILS(?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1, glaUniversityStudentFormBean.getMerchantCode());
			callableStatement.setString(2, glaUniversityStudentFormBean.getMerchantTxnRefNumber());
			callableStatement.setString(3, glaUniversityStudentFormBean.getStudentId());
			callableStatement.setString(4, glaUniversityStudentFormBean.getStudentName());
			callableStatement.setString(5, glaUniversityStudentFormBean.getMobile());
			callableStatement.setString(6, glaUniversityStudentFormBean.getEmailId());
			callableStatement.setString(7, glaUniversityStudentFormBean.getFeeAmount());
			callableStatement.setString(8, glaUniversityStudentFormBean.getReturnUrl());
			callableStatement.setString(9, glaUniversityStudentFormBean.getRegisteredUserId());
			callableStatement.setString(10, billerId);
			callableStatement.setString(11, glaUniversityStudentFormBean.getTransactionDateTime());

			callableStatement.registerOutParameter(12, Types.VARCHAR);
			callableStatement.registerOutParameter(13, Types.VARCHAR);
			callableStatement.registerOutParameter(14, Types.VARCHAR);

			callableStatement.execute(); 


			responseString = callableStatement.getString(14); 
			glaUniversityStudentFormBean.setStudentRegistrationId(callableStatement.getString(13));
			glaUniversityStudentFormBean.setApplicationNo(callableStatement.getString(12));

			logger.info("responseString : - " + responseString);


		} catch (Exception e) {
			logger.error("Exception inside catch insertGLAUniversityStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertGLAUniversityStudentDetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertGLAUniversityStudentDetails(" + glaUniversityStudentFormBean + ") - END");
		return responseString;
	}	

	public String insertHIMStudentDetails(HIMAFormBean himaFormBean, String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertHIMStudentDetails(himaFormBean=" + himaFormBean + ",instituteId="+instituteId+") - START");
		String responseString = null;
		try {
			logger.info("PROC_FJT_HIM_Registration_Details-");
			callableStatement = con.prepareCall("{call PROC_FJT_HIM_Registration_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1, himaFormBean.getDateAdmissionTest());
			callableStatement.setString(2, himaFormBean.getRegistrationDate());
			callableStatement.setString(3, himaFormBean.getRegistrationFee());
			callableStatement.setString(4, himaFormBean.getReceiptNo());
			callableStatement.setString(5, himaFormBean.getAdmissionClass());
			callableStatement.setString(6, himaFormBean.getOptionalSubject());
			callableStatement.setString(7, himaFormBean.getStudentName());
			callableStatement.setString(8, himaFormBean.getGender());
			callableStatement.setString(9, himaFormBean.getCategory());
			callableStatement.setString(10, himaFormBean.getReligion());
			callableStatement.setString(11, himaFormBean.getDateOfBirth());
			callableStatement.setString(12, himaFormBean.getSchoolPresPrevStudied());
			callableStatement.setString(13, himaFormBean.getMediumOfStudy());
			callableStatement.setString(14, himaFormBean.getHostelRequired());
			callableStatement.setString(15, himaFormBean.getPrevBoard());
			callableStatement.setString(16, himaFormBean.getFatherName());
			callableStatement.setString(17, himaFormBean.getFatherQualification());
			callableStatement.setString(18, himaFormBean.getFatherOccupation());
			callableStatement.setString(19, himaFormBean.getFatherOffAdd());
			callableStatement.setString(20, himaFormBean.getFatherPinCode());
			callableStatement.setString(21, himaFormBean.getFatherMobileNo());
			callableStatement.setString(22, himaFormBean.getFatherEmailId());
			callableStatement.setString(23, himaFormBean.getMotherName());
			callableStatement.setString(24, himaFormBean.getMotherQualification());
			callableStatement.setString(25, himaFormBean.getMotherOccupation());
			callableStatement.setString(26, himaFormBean.getMotherOffAdd());
			callableStatement.setString(27, himaFormBean.getMotherMobileNo());
			callableStatement.setString(28, himaFormBean.getMotherPinCode());
			callableStatement.setString(29, himaFormBean.getMotherEmailId());
			callableStatement.setString(30, himaFormBean.getPermanentAdd());
			callableStatement.setString(31, himaFormBean.getPermanentAddPinCode());
			callableStatement.setString(32, himaFormBean.getCorrespondAdd());
			callableStatement.setString(33, himaFormBean.getCorresspondAddPinCode());
			callableStatement.setString(34, himaFormBean.getRegisteredUserId());
			callableStatement.setString(35, instituteId);


			callableStatement.registerOutParameter(36, Types.VARCHAR);
			callableStatement.registerOutParameter(37, Types.VARCHAR);
			callableStatement.registerOutParameter(38, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(38); 
			himaFormBean.setStudentRegistrationId(callableStatement.getString(37));
			himaFormBean.setApplicationNo(callableStatement.getString(36));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertHIMStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertHIMStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertHIMStudentDetails(" + himaFormBean + ") - END");
		return responseString;
	}
	@Override
	public DYPatilResponseBean fetchInstituteDYPatilReport(String instId,
			String merchantID, String merchantTxnRefNumber, String date) {
		logger.info("fetchInstituteDYPatilReport(" + instId +","+merchantID+","+merchantTxnRefNumber+ ") - END");
		long startTime = System.currentTimeMillis();
		logger.info("institute id : "+instId);
		logger.info("merchant id : "+merchantID); 
		logger.info("merchantTxnRefNumber : "+merchantTxnRefNumber); 
		logger.info("date : "+date); 
		DYPatilResponseBean dyPatilResponseBean = new DYPatilResponseBean();
		List<DYPatilResponseBean> urlInstituteResponseBeanlist=new ArrayList<DYPatilResponseBean>(); 
		try {
			logger.info("PROC_FETCH_DYPATIL_STATUS-");
			callableStatement = con.prepareCall("{call PROC_FETCH_DYPATIL_STATUS(?,?,?,?)}");
			callableStatement.setString(1, instId);
			callableStatement.setString(2, merchantID);
			callableStatement.setString(3, merchantTxnRefNumber);	
			callableStatement.setString(4, date);	
			resultSet = callableStatement.executeQuery(); 

			while (resultSet.next()) {
				DYPatilResponseBean urlInstituteResponseBean2 = new DYPatilResponseBean();

				urlInstituteResponseBean2.setMerchantId(resultSet.getString("MerchantID"));
				urlInstituteResponseBean2.setStatus(resultSet.getString("Status"));
				urlInstituteResponseBean2.setErrMsg(resultSet.getString("ERR_MSG"));
				urlInstituteResponseBean2.setMerchantRefNo(resultSet.getString("MerchantTxnRefNumber"));
				urlInstituteResponseBean2.setBankCode(resultSet.getString("bankcode"));
				urlInstituteResponseBean2.setUniqueId(resultSet.getString("uniqueid"));
				urlInstituteResponseBean2.setAmnt(resultSet.getString("amount"));
				urlInstituteResponseBean2.setTrnxTime(resultSet.getString("ProcessingDateTime"));

				urlInstituteResponseBeanlist.add(urlInstituteResponseBean2);
			}

			dyPatilResponseBean.setDyPatilResponseBeanList(urlInstituteResponseBeanlist);
		} catch (Exception e) {
			logger.error("Exception inside catch fetchInstituteDYPatilReport"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch fetchInstituteDYPatilReport"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		return dyPatilResponseBean;
	}    

	public String insertIITBStudentDetails(IITBActionFormBean iitbActionFormBean) {
		long startTime = System.currentTimeMillis();
		logger.info("insertIITBStudentDetails(" + iitbActionFormBean + ") - START");
		String responseString = null;
		try {
			logger.info("PROC_FJT_IITB_Registration_Details-");        
			/*callableStatement = con.prepareCall("{call SP_FJT_insertStudentDetails_prat(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");*/
			callableStatement = con.prepareCall("{call PROC_FJT_IITB_Registration_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1, iitbActionFormBean.getNametitle());
			callableStatement.setString(2, iitbActionFormBean.getStdtName());
			callableStatement.setString(3, iitbActionFormBean.getStdDOB());
			callableStatement.setString(4, iitbActionFormBean.getGender());
			callableStatement.setString(5, iitbActionFormBean.getCntryofbrth());
			callableStatement.setString(6, iitbActionFormBean.getCountryofcitizen());
			callableStatement.setString(7, iitbActionFormBean.getPlaceOfBrt());
			callableStatement.setString(8, iitbActionFormBean.getAadharno());
			callableStatement.setString(9, iitbActionFormBean.getStdMotherName());
			callableStatement.setString(10, iitbActionFormBean.getStdFatherName());
			callableStatement.setString(11, iitbActionFormBean.getStdEmailId());
			callableStatement.setString(12, iitbActionFormBean.getPhncntrycode());
			callableStatement.setString(13, iitbActionFormBean.getStdLandLine1());
			callableStatement.setString(14, iitbActionFormBean.getStdMobile());
			callableStatement.setString(15, iitbActionFormBean.getStdAddress1());
			callableStatement.setString(16, iitbActionFormBean.getStdAddress2());
			callableStatement.setString(17, iitbActionFormBean.getStdAddress3());
			callableStatement.setString(18, iitbActionFormBean.getStdCity());
			callableStatement.setString(19, iitbActionFormBean.getStdState());
			callableStatement.setString(20, iitbActionFormBean.getStdPinCode());
			callableStatement.setString(21, iitbActionFormBean.getStdCountry());
			callableStatement.setString(22, iitbActionFormBean.getStdAddressperm1());
			callableStatement.setString(23, iitbActionFormBean.getStdPermAddress2());
			callableStatement.setString(24, iitbActionFormBean.getStdPermAddress3());
			callableStatement.setString(25, iitbActionFormBean.getStdPermnCity());
			callableStatement.setString(26, iitbActionFormBean.getStdPermState());
			callableStatement.setString(27, iitbActionFormBean.getStdPermPinCode());
			callableStatement.setString(28, iitbActionFormBean.getStdpermCountry());
			callableStatement.setString(29, iitbActionFormBean.getPermphncontrcode());
			callableStatement.setString(30, iitbActionFormBean.getPermlandlnnumb());
			callableStatement.setString(31, iitbActionFormBean.getStdpermMobile());

			callableStatement.setString(32, iitbActionFormBean.getAdmyear());
			callableStatement.setString(33, iitbActionFormBean.getAdmterm());
			callableStatement.setString(34, iitbActionFormBean.getAmount());
			callableStatement.setString(35, iitbActionFormBean.getDgredrpdwn());
			callableStatement.setString(36, iitbActionFormBean.getBoardName());
			callableStatement.setString(37, iitbActionFormBean.getInstitutename());
			callableStatement.setString(38, iitbActionFormBean.getSscgrptype());
			callableStatement.setString(39, iitbActionFormBean.getTotalSSCMark());
			callableStatement.setString(40, iitbActionFormBean.getObtainedSSCMark());
			callableStatement.setString(41, iitbActionFormBean.getYearcomp());
			callableStatement.setString(42, iitbActionFormBean.getHscBoardName());
			callableStatement.setString(43, iitbActionFormBean.getHscSchoolName());
			callableStatement.setString(44, iitbActionFormBean.getHscgrptype());
			callableStatement.setString(45, iitbActionFormBean.getHSCMaximumScore());
			callableStatement.setString(46, iitbActionFormBean.getObtainedHSCMark());
			callableStatement.setString(47, iitbActionFormBean.getHscyrcomp());
			callableStatement.setString(48, iitbActionFormBean.getQualificationname());
			callableStatement.setString(49, iitbActionFormBean.getDepuniversity());
			callableStatement.setString(50, iitbActionFormBean.getDiplomainst());
			callableStatement.setString(51, iitbActionFormBean.getDipgrptype());
			callableStatement.setString(52, iitbActionFormBean.getDipmaxscore());
			callableStatement.setString(53, iitbActionFormBean.getDipobtscore());
			callableStatement.setString(54, iitbActionFormBean.getYearofcompletion());
			callableStatement.setString(55, iitbActionFormBean.getGradqualificationame());
			callableStatement.setString(56, iitbActionFormBean.getGradUniversity());
			callableStatement.setString(57, iitbActionFormBean.getGradinsit());
			callableStatement.setString(58, iitbActionFormBean.getGradgrptype());
			callableStatement.setString(59, iitbActionFormBean.getGraduatemaxscore());
			callableStatement.setString(60, iitbActionFormBean.getGradobtainedscore());
			callableStatement.setString(61, iitbActionFormBean.getGradyearcomp());
			callableStatement.setString(62, iitbActionFormBean.getPostgradqualificationame());
			callableStatement.setString(63, iitbActionFormBean.getPostgradUniversity());
			callableStatement.setString(64, iitbActionFormBean.getPostgradgrptype());
			callableStatement.setString(65, iitbActionFormBean.getPostgradmaxscor());
			callableStatement.setString(66, iitbActionFormBean.getPostgradobtscore());
			callableStatement.setString(67, iitbActionFormBean.getPostgradyrcomp());
			callableStatement.setString(68, iitbActionFormBean.getGateregnum());
			callableStatement.setString(69, iitbActionFormBean.getGatescoremax());
			callableStatement.setString(70, iitbActionFormBean.getGateRank());
			callableStatement.setString(71, iitbActionFormBean.getGateSubject());
			callableStatement.setString(72, iitbActionFormBean.getGateYear());
			callableStatement.setString(73, iitbActionFormBean.getGreAnalyticalScore());
			callableStatement.setString(74, iitbActionFormBean.getGreReasoningScore());
			callableStatement.setString(75, iitbActionFormBean.getGreSubject());
			callableStatement.setString(76, iitbActionFormBean.getGreVerbalReasonScore());
			callableStatement.setString(77, iitbActionFormBean.getGreYear());
			callableStatement.setString(78, iitbActionFormBean.getGreOldAnalyticalScore());
			callableStatement.setString(79, iitbActionFormBean.getGreOldQuantScore());
			callableStatement.setString(80, iitbActionFormBean.getGreOldSubject());
			callableStatement.setString(81, iitbActionFormBean.getGreOldVerbalScore());
			callableStatement.setString(82, iitbActionFormBean.getGreOldYear());
			callableStatement.setString(83, iitbActionFormBean.getToeflIbtScore());
			callableStatement.setString(84, iitbActionFormBean.getToeflIbtYear());
			callableStatement.setString(85, iitbActionFormBean.getToeflPbtScore());
			callableStatement.setString(86, iitbActionFormBean.getToeflPbtYear());
			callableStatement.setString(87, iitbActionFormBean.getJeennum());
			callableStatement.setString(88, iitbActionFormBean.getJeeScore());
			callableStatement.setString(89, iitbActionFormBean.getJeeAllIndRank());
			callableStatement.setString(90, iitbActionFormBean.getRegisteredUserId());
			callableStatement.setString(91, iitbActionFormBean.getPhoto_Proof());
			callableStatement.setString(92, iitbActionFormBean.getDipBranchName());
			callableStatement.setString(93, iitbActionFormBean.getGradBranchName());
			callableStatement.setString(94, iitbActionFormBean.getPostGradBranchName());

			callableStatement.registerOutParameter(95, Types.VARCHAR);
			callableStatement.registerOutParameter(96, Types.VARCHAR);         
			callableStatement.registerOutParameter(97, Types.VARCHAR);
			callableStatement.registerOutParameter(98, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(98); 
			iitbActionFormBean.setStudentRegistrationId(callableStatement.getString(95));
			iitbActionFormBean.setAutoGenRegisterId(callableStatement.getString(96));
			//iitbActionFormBean.setApplicationNo(callableStatement.getString(93));
			iitbActionFormBean.setCandidateId(callableStatement.getString(97));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertIITBStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertIITBStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertIITBStudentDetails(" + iitbActionFormBean + ") - END");
		return responseString;
	}    

	public String insertIITBPostHistoryDetails(IITBPostEmpHistoryFormBean iitbPostEmpHistoryFormBean,String registerId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertIITBPostHistoryDetails(" + registerId + ") - START"); 
		String responseString = null;
		try {      
			logger.info("PROC_FJT_IITB_POST_HISTORY_Details-"); 
			/*callableStatement = con.prepareCall("{call SP_FJT_insertStudentDetails_prat(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");*/
			callableStatement = con.prepareCall("{call PROC_FJT_IITB_POST_HISTORY_Details(?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1, iitbPostEmpHistoryFormBean.getEmplyname());
			callableStatement.setString(2, iitbPostEmpHistoryFormBean.getDesignation());
			callableStatement.setString(3, iitbPostEmpHistoryFormBean.getCuremp());
			callableStatement.setString(4, iitbPostEmpHistoryFormBean.getEmpstdt());
			callableStatement.setString(5, iitbPostEmpHistoryFormBean.getEmpenddate());
			callableStatement.setString(6, iitbPostEmpHistoryFormBean.getEmpphn());
			callableStatement.setString(7, iitbPostEmpHistoryFormBean.getEmpadd());
			callableStatement.setString(8, registerId);

			callableStatement.registerOutParameter(9, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(9); 
			logger.info("responseString : - " + responseString);

		} catch (Exception e) {
			logger.error("Exception inside catch insertIITBPostHistoryDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertIITBPostHistoryDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertIITBPostHistoryDetails - END");
		return responseString;

	}
	public String insertIITBAccomplishmentDetails(IITBAccomplishmentFormBean iitbAccomplishmentFormBean,String registerId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertIITBAccomplishmentDetails(" + registerId + ") - START"); 
		String responseString = null;
		try {      
			logger.info("PROC_FJT_IITB_ACCOMPLISHMENT_Details-"); 
			/*callableStatement = con.prepareCall("{call SP_FJT_insertStudentDetails_prat(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");*/
			callableStatement = con.prepareCall("{call PROC_FJT_IITB_ACCOMPLISHMENT_Details(?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1, iitbAccomplishmentFormBean.getAccomplishtype());
			callableStatement.setString(2, iitbAccomplishmentFormBean.getAccomplishment());
			callableStatement.setString(3, iitbAccomplishmentFormBean.getAccompdate());
			callableStatement.setString(4, iitbAccomplishmentFormBean.getAccompdsctn());
			callableStatement.setString(5, iitbAccomplishmentFormBean.getAward());
			callableStatement.setString(6, iitbAccomplishmentFormBean.getComments());
			callableStatement.setString(7, registerId);

			callableStatement.registerOutParameter(8, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(8); 
			logger.info("responseString : - " + responseString);

		} catch (Exception e) {
			logger.error("Exception inside catch insertIITBAccomplishmentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertIITBAccomplishmentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertIITBAccomplishmentDetails -- END");
		return responseString;

	}

	public HIMAFormBean getHimaStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getRamaStudentDetails(" + applicationNo + ") - START");  
		HIMAFormBean himaFormBean = null;
		try {
			callableStatement = con.prepareCall("{call PROC_FJT_HIM_GET_Details(?)}");

			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {
				himaFormBean = new HIMAFormBean();
				himaFormBean.setAdmissionClass(resultSet.getString("AdmissionClass"));
				himaFormBean.setCategory(resultSet.getString("Category"));
				himaFormBean.setCorrespondAdd(resultSet.getString("CorrespondAdd"));
				himaFormBean.setCorresspondAddPinCode(resultSet.getString("CorresspondAddPinCode"));
				himaFormBean.setDateAdmissionTest(resultSet.getString("DateAdmissionTest"));
				himaFormBean.setDateOfBirth(resultSet.getString("DateOfBirth"));
				himaFormBean.setFatherEmailId(resultSet.getString("FatherEmailId"));
				himaFormBean.setFatherMobileNo(resultSet.getString("FatherMobileNo"));
				himaFormBean.setFatherName(resultSet.getString("FatherName"));
				himaFormBean.setFatherOccupation(resultSet.getString("FatherOccupation"));
				himaFormBean.setFatherOffAdd(resultSet.getString("FatherOffAdd"));
				himaFormBean.setFatherPinCode(resultSet.getString("FatherPinCode"));
				himaFormBean.setFatherQualification(resultSet.getString("FatherQualification"));
				himaFormBean.setGender(resultSet.getString("Gender"));
				himaFormBean.setHostelRequired(resultSet.getString("HostelRequired"));
				himaFormBean.setMediumOfStudy(resultSet.getString("MediumOfStudy"));
				himaFormBean.setMotherEmailId(resultSet.getString("MotherEmailId"));
				himaFormBean.setMotherMobileNo(resultSet.getString("MotherMobileNo"));
				himaFormBean.setMotherName(resultSet.getString("MotherName"));
				himaFormBean.setMotherOccupation(resultSet.getString("MotherOccupation"));
				himaFormBean.setMotherOffAdd(resultSet.getString("MotherOffAdd"));
				himaFormBean.setMotherPinCode(resultSet.getString("MotherPinCode"));
				himaFormBean.setMotherQualification(resultSet.getString("MotherQualification"));
				himaFormBean.setOptionalSubject(resultSet.getString("OptionalSubject"));
				himaFormBean.setPermanentAdd(resultSet.getString("PermanentAdd"));
				himaFormBean.setPermanentAddPinCode(resultSet.getString("PermanentAddPinCode"));
				himaFormBean.setPrevBoard(resultSet.getString("PrevBoard"));
				himaFormBean.setReceiptNo(resultSet.getString("ApplicationNo"));
				himaFormBean.setRegistrationFee(resultSet.getString("RegistrationFee"));
				himaFormBean.setReligion(resultSet.getString("Religion"));
				himaFormBean.setSchoolPresPrevStudied(resultSet.getString("SchoolPresPrevStudied"));
				himaFormBean.setStudentName(resultSet.getString("StudentName"));            	            	
				himaFormBean.setApplicationNo(resultSet.getString("ApplicationNo"));
			}
		} catch (Exception e) {
			logger.error("Exception inside catch getHimaStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getHimaStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getRamaStudentDetails(" + himaFormBean + ") - END");
		return himaFormBean;
	} 
	public String insertMadhbStudentDetails(MadhavbaugCollageFormBean madhavbaugCollageFormBean) {
		long startTime = System.currentTimeMillis();
		logger.info("insertMadhbStudentDetails(" + madhavbaugCollageFormBean + ") - START");
		String responseString = null;
		try {
			/*logger.info("SP_FJT_insertStudentDetails - " + bhuLoginActionFormBean.getStudentRegistrationId() + "," + studentRegistrationFormBean.getBillerBranchId() + "," + studentRegistrationFormBean.getStrCourse() + "," +
        			bhuLoginActionFormBean.getStrCourseDetails() + "," + bhuLoginActionFormBean.getStrCoursePattern() + "," + studentRegistrationFormBean.getStrCourseTerm() + "," +
        			bhuLoginActionFormBean.getStrCourseType() + "," + bhuLoginActionFormBean.getStudentId() + "," + studentRegistrationFormBean.getStudentName() + "," +
        			bhuLoginActionFormBean.getStudentAlias() + ", OUT, OUT");*/
			/*callableStatement = con.prepareCall("{call SP_FJT_insertStudentDetails_prat(?,?,?,?,?,?,?,?,?,?,?,?)}");*/
			callableStatement = con.prepareCall("{call PROC_FJT_MADHB_Registration_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1, madhavbaugCollageFormBean.getStdApplicantsFullName());
			callableStatement.setString(2, madhavbaugCollageFormBean.getStdFatherName());
			callableStatement.setString(3, madhavbaugCollageFormBean.getStdMothersMaidenName());
			callableStatement.setString(4, madhavbaugCollageFormBean.getStdPresenLocalAddress());
			callableStatement.setString(5, madhavbaugCollageFormBean.getStdCity());
			callableStatement.setString(6, madhavbaugCollageFormBean.getStdState());            
			callableStatement.setString(7, madhavbaugCollageFormBean.getStdPinCode());
			callableStatement.setString(8, madhavbaugCollageFormBean.getStdPermanentAddress());
			callableStatement.setString(9, madhavbaugCollageFormBean.getPermanentCity());
			callableStatement.setString(10, madhavbaugCollageFormBean.getPermanentState());
			callableStatement.setString(11, madhavbaugCollageFormBean.getPermanentPinCode());
			callableStatement.setString(12, madhavbaugCollageFormBean.getStdTel());
			callableStatement.setString(13, madhavbaugCollageFormBean.getStdNationality());
			callableStatement.setString(14, madhavbaugCollageFormBean.getStdSex());
			callableStatement.setString(15, madhavbaugCollageFormBean.getStdBirthDate());
			callableStatement.setString(16, madhavbaugCollageFormBean.getStdEmailId());
			callableStatement.setString(17, madhavbaugCollageFormBean.getStdCaste());                 
			callableStatement.setString(18, madhavbaugCollageFormBean.getStdReligion());                                   
			callableStatement.setString(19, madhavbaugCollageFormBean.getStdRegistrationNo());
			callableStatement.setString(20, madhavbaugCollageFormBean.getStdThrough());
			callableStatement.setString(21, madhavbaugCollageFormBean.getIfOtherPleaseSpecify());            
			callableStatement.setString(22, madhavbaugCollageFormBean.getStdNameOfTheCollegeAndUniversity());
			callableStatement.setString(23, madhavbaugCollageFormBean.getAcademicCity());
			callableStatement.setString(24, madhavbaugCollageFormBean.getAcademicCountry());
			callableStatement.setString(25, madhavbaugCollageFormBean.getStdQualification());
			callableStatement.setString(26, madhavbaugCollageFormBean.getStdYearOfPassing());
			callableStatement.setString(27, madhavbaugCollageFormBean.getStdMarks());            
			callableStatement.setString(28, madhavbaugCollageFormBean.getStdNamOfTheCollegeInstitution());
			callableStatement.setString(29, madhavbaugCollageFormBean.getDoctorsCity());
			callableStatement.setString(30, madhavbaugCollageFormBean.getDoctorsCountry());
			callableStatement.setString(31, madhavbaugCollageFormBean.getStdSubjectOfSpecialization());
			callableStatement.setString(32, madhavbaugCollageFormBean.getDoctorsYearOfPassing());
			callableStatement.setString(33, madhavbaugCollageFormBean.getDoctorsMarks());
			callableStatement.setString(34, madhavbaugCollageFormBean.getStdAdditionalQualification());            
			callableStatement.setString(35, madhavbaugCollageFormBean.getStdNameOfTheOrganization());
			callableStatement.setString(36, madhavbaugCollageFormBean.getStdDesignation());
			callableStatement.setString(37, madhavbaugCollageFormBean.getStdYear());
			callableStatement.setString(38, madhavbaugCollageFormBean.getStdBriefOnRolesAndResponsibilities());
			callableStatement.setString(39, madhavbaugCollageFormBean.getStdCourseCode());
			callableStatement.setString(40, madhavbaugCollageFormBean.getStdCourseName());
			callableStatement.setString(41, madhavbaugCollageFormBean.getAmount());
			callableStatement.setString(42, madhavbaugCollageFormBean.getRegisteredUserId());

			callableStatement.registerOutParameter(43, Types.VARCHAR);
			callableStatement.registerOutParameter(44, Types.VARCHAR);
			callableStatement.registerOutParameter(45, Types.VARCHAR);
			callableStatement.execute();           
			responseString = callableStatement.getString(45); 
			madhavbaugCollageFormBean.setStudentRegistrationId(callableStatement.getString(44));
			madhavbaugCollageFormBean.setApplicationNo(callableStatement.getString(43));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertMadhbStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertMadhbStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertMadhbStudentDetails(" + madhavbaugCollageFormBean + ") - END");
		return responseString;
	} 

	public IITBActionFormBean getIIITBStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getIIITBStudentDetails(" + applicationNo + ") - START");  
		IITBActionFormBean iiitbActionResponseBean = null;
		try {        
			callableStatement = con.prepareCall("{call PROC_FJT_IIITB_GET_STD_Details(?)}");

			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {
				iiitbActionResponseBean = new IITBActionFormBean();

				iiitbActionResponseBean.setNametitle(resultSet.getString("nametitle"));
				iiitbActionResponseBean.setStdtName(resultSet.getString("stdtName"));
				iiitbActionResponseBean.setStdDOB(resultSet.getString("stdDOB"));
				iiitbActionResponseBean.setGender(resultSet.getString("gender"));
				iiitbActionResponseBean.setCntryofbrth(resultSet.getString("cntryofbrth"));
				iiitbActionResponseBean.setCountryofcitizen(resultSet.getString("countryofcitizen"));
				iiitbActionResponseBean.setPlaceOfBrt(resultSet.getString("placeOfBrt"));
				iiitbActionResponseBean.setAadharno(resultSet.getString("aadharno"));
				iiitbActionResponseBean.setStdMotherName(resultSet.getString("stdMotherName"));
				iiitbActionResponseBean.setStdFatherName(resultSet.getString("stdFatherName"));
				iiitbActionResponseBean.setStdEmailId(resultSet.getString("stdEmailId"));
				iiitbActionResponseBean.setPhncntrycode(resultSet.getString("phncntrycode"));
				iiitbActionResponseBean.setStdLandLine1(resultSet.getString("stdLandLine1"));
				iiitbActionResponseBean.setStdMobile(resultSet.getString("stdMobile"));
				iiitbActionResponseBean.setStdAddress1(resultSet.getString("stdAddress1"));
				iiitbActionResponseBean.setStdAddress2(resultSet.getString("stdAddress2"));
				iiitbActionResponseBean.setStdAddress3(resultSet.getString("stdAddress3"));
				iiitbActionResponseBean.setStdCity(resultSet.getString("stdCity"));
				iiitbActionResponseBean.setStdState(resultSet.getString("stdState"));
				iiitbActionResponseBean.setStdPinCode(resultSet.getString("stdPinCode"));
				iiitbActionResponseBean.setStdCountry(resultSet.getString("stdCountry"));
				iiitbActionResponseBean.setStdAddressperm1(resultSet.getString("stdAddressperm1"));
				iiitbActionResponseBean.setStdPermAddress2(resultSet.getString("stdPermAddress2"));
				iiitbActionResponseBean.setStdPermAddress3(resultSet.getString("stdPermAddress3"));
				iiitbActionResponseBean.setStdPermnCity(resultSet.getString("stdPermnCity"));
				iiitbActionResponseBean.setStdPermState(resultSet.getString("stdPermState"));
				iiitbActionResponseBean.setStdPermPinCode(resultSet.getString("stdPermPinCode"));
				iiitbActionResponseBean.setStdpermCountry(resultSet.getString("stdpermCountry"));
				iiitbActionResponseBean.setPermphncontrcode(resultSet.getString("permphncontrcode"));
				iiitbActionResponseBean.setPermlandlnnumb(resultSet.getString("permlandlnnumb"));
				iiitbActionResponseBean.setStdpermMobile(resultSet.getString("stdpermMobile"));
				iiitbActionResponseBean.setAdmyear(resultSet.getString("admyear"));
				iiitbActionResponseBean.setAdmterm(resultSet.getString("admterm"));
				iiitbActionResponseBean.setAmount(resultSet.getString("amount"));
				iiitbActionResponseBean.setDgredrpdwn(resultSet.getString("dgredrpdwn"));            	
				iiitbActionResponseBean.setBoardName(resultSet.getString("boardName"));
				iiitbActionResponseBean.setInstitutename(resultSet.getString("institutename"));
				iiitbActionResponseBean.setSscgrptype(resultSet.getString("sscgrptype"));
				iiitbActionResponseBean.setTotalSSCMark(resultSet.getString("totalSSCMark"));
				iiitbActionResponseBean.setObtainedSSCMark(resultSet.getString("obtainedSSCMark"));
				iiitbActionResponseBean.setYearcomp(resultSet.getString("yearcomp"));
				iiitbActionResponseBean.setHscBoardName(resultSet.getString("hscBoardName"));
				iiitbActionResponseBean.setHscSchoolName(resultSet.getString("hscSchoolName"));
				iiitbActionResponseBean.setHscgrptype(resultSet.getString("hscgrptype"));
				iiitbActionResponseBean.setHSCMaximumScore(resultSet.getString("HSCMaximumScore"));
				iiitbActionResponseBean.setObtainedHSCMark(resultSet.getString("obtainedHSCMark"));
				iiitbActionResponseBean.setHscyrcomp(resultSet.getString("hscyrcomp"));
				iiitbActionResponseBean.setQualificationname(resultSet.getString("qualificationname"));
				iiitbActionResponseBean.setDepuniversity(resultSet.getString("depuniversity"));
				iiitbActionResponseBean.setDiplomainst(resultSet.getString("diplomainst"));
				iiitbActionResponseBean.setDipgrptype(resultSet.getString("dipgrptype"));
				iiitbActionResponseBean.setDipmaxscore(resultSet.getString("dipmaxscore"));
				iiitbActionResponseBean.setDipobtscore(resultSet.getString("dipobtscore"));
				iiitbActionResponseBean.setYearofcompletion(resultSet.getString("yearofcompletion"));
				iiitbActionResponseBean.setGradqualificationame(resultSet.getString("gradqualificationame"));
				iiitbActionResponseBean.setGradUniversity(resultSet.getString("gradUniversity"));
				iiitbActionResponseBean.setGradinsit(resultSet.getString("gradinsit"));
				iiitbActionResponseBean.setGradgrptype(resultSet.getString("gradgrptype"));
				iiitbActionResponseBean.setGraduatemaxscore(resultSet.getString("graduatemaxscore"));
				iiitbActionResponseBean.setGradobtainedscore(resultSet.getString("gradobtainedscore"));
				iiitbActionResponseBean.setGradyearcomp(resultSet.getString("gradyearcomp"));
				iiitbActionResponseBean.setPostgradqualificationame(resultSet.getString("postgradqualificationame"));
				iiitbActionResponseBean.setPostgradUniversity(resultSet.getString("postgradUniversity"));
				iiitbActionResponseBean.setPostgradgrptype(resultSet.getString("postgradgrptype"));
				iiitbActionResponseBean.setPostgradmaxscor(resultSet.getString("postgradmaxscor"));
				iiitbActionResponseBean.setPostgradobtscore(resultSet.getString("postgradobtscore"));
				iiitbActionResponseBean.setPostgradyrcomp(resultSet.getString("postgradyrcomp"));            	
				iiitbActionResponseBean.setGateregnum(resultSet.getString("gateregnum"));
				iiitbActionResponseBean.setGatescoremax(resultSet.getString("gatescoremax"));
				iiitbActionResponseBean.setGateRank(resultSet.getString("gateRank"));
				iiitbActionResponseBean.setGateSubject(resultSet.getString("gateSubject"));
				iiitbActionResponseBean.setGateYear(resultSet.getString("gateYear"));
				iiitbActionResponseBean.setJeennum(resultSet.getString("jeennum"));
				iiitbActionResponseBean.setJeeScore(resultSet.getString("jeeScore"));
				iiitbActionResponseBean.setJeeAllIndRank(resultSet.getString("jeeAllIndRank"));
				iiitbActionResponseBean.setCandidateId(resultSet.getString("candidateId"));
				iiitbActionResponseBean.setPhoto_Proof(resultSet.getString("photo_proof"));
				iiitbActionResponseBean.setDipBranchName(resultSet.getString("dipBranchName"));
				iiitbActionResponseBean.setGradBranchName(resultSet.getString("gradBranchName"));
				iiitbActionResponseBean.setPostGradBranchName(resultSet.getString("postGradBranchName"));

			}

		} catch (Exception e) {
			logger.error("Exception inside catch getIIITBStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getIIITBStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getIIITBStudentDetails(" + iiitbActionResponseBean + ") - END");
		return iiitbActionResponseBean;
	} 
	public List getIITBPostHistoryDetails(String candidateId) {

		List<IITBPostEmpHistoryFormBean> list = null;
		try {
			logger.info("getIITBPostHistoryDetails() - ~START~");
			callableStatement = con.prepareCall("{call GET_PROC_FJT_IITB_POST_HISTORY(?)}");
			callableStatement.setString(1, candidateId);

			resultSet = callableStatement.executeQuery();

			list = new ArrayList<IITBPostEmpHistoryFormBean>();
			while (resultSet.next()) {
				IITBPostEmpHistoryFormBean iitbPostEmpHistoryFormBean = new IITBPostEmpHistoryFormBean();				
				iitbPostEmpHistoryFormBean.setEmplyname(resultSet.getString("emplyname"));
				iitbPostEmpHistoryFormBean.setDesignation(resultSet.getString("designation"));
				iitbPostEmpHistoryFormBean.setCuremp(resultSet.getString("curemp"));
				iitbPostEmpHistoryFormBean.setEmpstdt(resultSet.getString("empstdt"));
				iitbPostEmpHistoryFormBean.setEmpenddate(resultSet.getString("empenddate"));
				iitbPostEmpHistoryFormBean.setEmpphn(resultSet.getString("empphn"));
				iitbPostEmpHistoryFormBean.setEmpadd(resultSet.getString("empadd"));


				list.add(iitbPostEmpHistoryFormBean);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) { resultSet.close(); }
				if (callableStatement != null) { callableStatement.close(); }
				if (con != null) { con.close(); }
			} catch (Exception e) {
				logger.error("Exception inside catch getIITBPostHistoryDetails"+e);
			}
		}
		logger.info("getIITBPostHistoryDetails() - ~END~");
		return list;
	}

	public List getIITBAccomplishmentDetails(String candidateId) {

		List<IITBAccomplishmentFormBean> list = null;
		try {
			logger.info("getIITBAccomplishmentDetails() - ~START~");
			callableStatement = con.prepareCall("{call GET_PROC_FJT_IITB_ACCOMPLISHMENT(?)}");
			callableStatement.setString(1, candidateId);

			resultSet = callableStatement.executeQuery();

			list = new ArrayList<IITBAccomplishmentFormBean>();
			while (resultSet.next()) {
				IITBAccomplishmentFormBean iitbAccomplishmentFormBean = new IITBAccomplishmentFormBean();				
				iitbAccomplishmentFormBean.setAccomplishtype(resultSet.getString("accomplishtype"));
				iitbAccomplishmentFormBean.setAccomplishment(resultSet.getString("accomplishment"));
				iitbAccomplishmentFormBean.setAccompdate(resultSet.getString("accompdate"));
				iitbAccomplishmentFormBean.setAccompdsctn(resultSet.getString("accompdsctn"));
				iitbAccomplishmentFormBean.setAward(resultSet.getString("award"));
				iitbAccomplishmentFormBean.setComments(resultSet.getString("comments"));

				list.add(iitbAccomplishmentFormBean);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) { resultSet.close(); }
				if (callableStatement != null) { callableStatement.close(); }
				if (con != null) { con.close(); }
			} catch (Exception e) {
				logger.error("Exception inside catch getIITBAccomplishmentDetails"+e);
			}
		}
		logger.info("getIITBAccomplishmentDetails() - ~END~");
		return list;
	}

	public String insertBimtStudentDetails(BIMTExistingFormbean bmitExistingFormbean) {
		long startTime = System.currentTimeMillis();
		logger.info("insertBimtStudentDetails(" + bmitExistingFormbean + ") - START");
		String responseString = null;
		try {
			/*logger.info("SP_FJT_insertStudentDetails - " + bhuLoginActionFormBean.getStudentRegistrationId() + "," + studentRegistrationFormBean.getBillerBranchId() + "," + studentRegistrationFormBean.getStrCourse() + "," +
        			bhuLoginActionFormBean.getStrCourseDetails() + "," + bhuLoginActionFormBean.getStrCoursePattern() + "," + studentRegistrationFormBean.getStrCourseTerm() + "," +
        			bhuLoginActionFormBean.getStrCourseType() + "," + bhuLoginActionFormBean.getStudentId() + "," + studentRegistrationFormBean.getStudentName() + "," +
        			bhuLoginActionFormBean.getStudentAlias() + ", OUT, OUT");*/


			/*callableStatement = con.prepareCall("{call SP_FJT_insertStudentDetails_prat(?,?,?,?,?,?,?,?,?,?,?,?)}");*/
			callableStatement = con.prepareCall("{call PROC_FJT_BIMT_Existing_Student(?,?,?,?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1, bmitExistingFormbean.getStdName());
			callableStatement.setString(2, bmitExistingFormbean.getStdFatherName());
			callableStatement.setString(3, bmitExistingFormbean.getStdDOB());
			callableStatement.setString(4, bmitExistingFormbean.getStdMobile());
			callableStatement.setString(5, bmitExistingFormbean.getStdEmail());
			callableStatement.setString(6, bmitExistingFormbean.getStdPermAddress());
			callableStatement.setString(7, bmitExistingFormbean.getStdCourse());
			callableStatement.setString(8, bmitExistingFormbean.getAmount());                     
			callableStatement.setString(9, bmitExistingFormbean.getRegisteredUserId());



			callableStatement.registerOutParameter(10, Types.VARCHAR);
			callableStatement.registerOutParameter(11, Types.VARCHAR);
			callableStatement.registerOutParameter(12, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(12); 
			bmitExistingFormbean.setRegistrationDetId(callableStatement.getString(11));
			bmitExistingFormbean.setApplicationNo(callableStatement.getString(10));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertBimtStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertBimtStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertBimtStudentDetails(" + bmitExistingFormbean + ") - END");
		return responseString;
	} 

	public BIMTExistingFormbean getBimtStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getBimtStudentDetails(" + applicationNo + ") - START");  
		BIMTExistingFormbean bimtExistingFormbean = null;
		try {
			callableStatement = con.prepareCall("{call PROC_FJT_BIMT_Exist_GET_Details(?)}");

			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {
				bimtExistingFormbean = new BIMTExistingFormbean();
				bimtExistingFormbean.setStdName(resultSet.getString("stdName"));
				bimtExistingFormbean.setStdFatherName(resultSet.getString("stdFatherName"));
				bimtExistingFormbean.setStdDOB(resultSet.getString("stdDOB"));
				bimtExistingFormbean.setStdMobile(resultSet.getString("stdMobile"));
				bimtExistingFormbean.setStdEmail(resultSet.getString("stdEmail"));
				bimtExistingFormbean.setStdPermAddress(resultSet.getString("stdPermAddress"));
				bimtExistingFormbean.setStdCourse(resultSet.getString("stdCourse"));
				bimtExistingFormbean.setAmount(resultSet.getString("amount"));
				bimtExistingFormbean.setApplicationNo(resultSet.getString("applicationNo"));
			}
		} catch (Exception e) {
			logger.error("Exception inside catch getBimtStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getBimtStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getBimtStudentDetails(" + bimtExistingFormbean + ") - END");
		return bimtExistingFormbean;
	} 



	@Override
	public String insertBIMTStudentDetails(BIMTFormBean bimtFormBean,String instituteID) {
		long startTime = System.currentTimeMillis();
		logger.info("insertRamaStudentDetails(" + bimtFormBean + ") - START");
		String responseString = null;
		try {
			for(BIMTFeeDetailsFormBean bimtFeeDetailsFormBean : bimtFormBean.getBimtFeeDetailsFormBean())
			{
				callableStatement = con.prepareCall("{call PROC_FJT_BIMT_REGISTRATION_DETAILS(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

				callableStatement.setString(1, bimtFormBean.getCourseAppliedFor());
				callableStatement.setString(2, bimtFormBean.getPrefix());
				callableStatement.setString(3, bimtFormBean.getFirstName());
				callableStatement.setString(4, bimtFormBean.getMiddleName());
				callableStatement.setString(5, bimtFormBean.getLastName());
				callableStatement.setString(6, bimtFormBean.getAddress());
				callableStatement.setString(7, bimtFormBean.getCity());
				callableStatement.setString(8, bimtFormBean.getPinCode());
				callableStatement.setString(9, bimtFormBean.getCountry());
				callableStatement.setString(10, bimtFormBean.getState());
				callableStatement.setString(11, bimtFormBean.getPhone());
				callableStatement.setString(12, bimtFormBean.getMobileNo());
				callableStatement.setString(13, bimtFormBean.getFatherName());
				callableStatement.setString(14, bimtFormBean.getMotherName());
				callableStatement.setString(15, bimtFormBean.getDateofBirth());
				callableStatement.setString(16, bimtFormBean.getGender());
				callableStatement.setString(17, bimtFormBean.getCategory());
				callableStatement.setString(18, bimtFormBean.getUniversity());
				callableStatement.setString(19, bimtFormBean.getCollegeName());
				callableStatement.setString(20, bimtFormBean.getYear());
				callableStatement.setString(21, bimtFormBean.getPercentage());
				callableStatement.setString(22, bimtFormBean.getBoard10th());
				callableStatement.setString(23, bimtFormBean.getYear10th());
				callableStatement.setString(24, bimtFormBean.getPercentage10th());
				callableStatement.setString(25, bimtFormBean.getBoard12th());
				callableStatement.setString(26, bimtFormBean.getCollegeName12th());
				callableStatement.setString(27, bimtFormBean.getYear12th());
				callableStatement.setString(28, bimtFormBean.getPercentage12th());
				callableStatement.setString(29, bimtFormBean.getHostel());
				callableStatement.setString(30, bimtFormBean.getTransport());
				callableStatement.setString(31, bimtFormBean.getRegisteredUserId());
				callableStatement.setString(32, bimtFormBean.getRegisteredUserId());
				callableStatement.setString(33, instituteID);
				callableStatement.setString(34, bimtFeeDetailsFormBean.getFeeName());
				callableStatement.setString(35, bimtFeeDetailsFormBean.getFeeAmount());
				callableStatement.setString(36, bimtFeeDetailsFormBean.getPaymentStatus());

				callableStatement.registerOutParameter(37, Types.VARCHAR);
				callableStatement.registerOutParameter(38, Types.VARCHAR);
				callableStatement.registerOutParameter(39, Types.VARCHAR);
				callableStatement.registerOutParameter(40, Types.VARCHAR);

				callableStatement.execute();           
				responseString = callableStatement.getString(40); 
				bimtFormBean.setStudentRegistrationId(callableStatement.getString(39));
				bimtFormBean.setApplicationNo(callableStatement.getString(38));
				bimtFormBean.setAmount(callableStatement.getString(37));
				logger.info("responseString : - " + responseString);

			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertBIMTStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertBIMTStudentDetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertRamaStudentDetails(" + bimtFormBean + ") - END");
		return responseString;
	}

	@Override
	public BIMTFormBean getBIMTSudentDetails(String registeredUserId,String courseAppliedFor,String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getRamaStudentDetails(" + registeredUserId + ") - START");  
		BIMTFormBean bimtFormBean = new BIMTFormBean();
		List<BIMTFeeDetailsFormBean> bimtFeeDetailsFormBeansList=new ArrayList<BIMTFeeDetailsFormBean>();
		try {
			callableStatement = con.prepareCall("{call PROC_GETBIMTSTUDENTDETAILS(?,?,?)}");

			callableStatement.setString(1, registeredUserId);
			callableStatement.setString(2, courseAppliedFor);
			callableStatement.setString(3, applicationNo);

			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {
				BIMTFeeDetailsFormBean bimtFeeDetailsFormBean=new BIMTFeeDetailsFormBean();
				bimtFormBean.setCourseAppliedFor(resultSet.getString("CourseAppliedFor"));
				bimtFormBean.setPrefix(resultSet.getString("Prefix"));
				bimtFormBean.setFirstName(resultSet.getString("FirstName"));
				bimtFormBean.setMiddleName(resultSet.getString("MiddleName"));
				bimtFormBean.setLastName(resultSet.getString("LastName"));
				bimtFormBean.setAddress(resultSet.getString("Address"));
				bimtFormBean.setCity(resultSet.getString("City"));
				bimtFormBean.setPinCode(resultSet.getString("PinCode"));
				bimtFormBean.setCountry(resultSet.getString("Country"));
				bimtFormBean.setState(resultSet.getString("State"));
				bimtFormBean.setPhone(resultSet.getString("Phone"));
				bimtFormBean.setMobileNo(resultSet.getString("MobileNo"));
				bimtFormBean.setFatherName(resultSet.getString("FatherName"));
				bimtFormBean.setMotherName(resultSet.getString("MotherName"));
				bimtFormBean.setDateofBirth(resultSet.getString("DateofBirth"));
				bimtFormBean.setGender(resultSet.getString("Gender"));
				bimtFormBean.setCategory(resultSet.getString("Category"));
				bimtFormBean.setUniversity(resultSet.getString("University"));
				bimtFormBean.setCollegeName(resultSet.getString("CollegeName"));
				bimtFormBean.setYear(resultSet.getString("Year"));
				bimtFormBean.setPercentage(resultSet.getString("Percentage"));
				bimtFormBean.setBoard10th(resultSet.getString("Board10th"));
				bimtFormBean.setYear10th(resultSet.getString("Year10th"));
				bimtFormBean.setPercentage10th(resultSet.getString("Percentage10th"));
				bimtFormBean.setBoard12th(resultSet.getString("Board12th"));
				bimtFormBean.setCollegeName12th(resultSet.getString("CollegeName12th"));
				bimtFormBean.setYear12th(resultSet.getString("Year12th"));
				bimtFormBean.setPercentage12th(resultSet.getString("Percentage12th"));
				bimtFormBean.setHostel(resultSet.getString("Hostel"));
				bimtFormBean.setTransport(resultSet.getString("Transport"));
				bimtFormBean.setLoginid(resultSet.getString("loginid"));
				bimtFormBean.setRegisteredUserId(registeredUserId);
				bimtFormBean.setAmount(resultSet.getString("Amount"));
				bimtFormBean.setApplicationNo(resultSet.getString("ApplicationNo"));
				bimtFormBean.setStudentRegistrationId(resultSet.getString("RegisteredId"));

				bimtFeeDetailsFormBean.setBIMTRegistrationId(resultSet.getString("BIMTRegistrationId"));
				bimtFeeDetailsFormBean.setFeeAmount(resultSet.getString("FeeAmount"));
				bimtFeeDetailsFormBean.setFeeName(resultSet.getString("FeeName"));
				bimtFeeDetailsFormBean.setFeeType(resultSet.getString("FeeType"));
				bimtFeeDetailsFormBean.setPaymentStatus(resultSet.getString("PaymentStatus"));

				bimtFeeDetailsFormBeansList.add(bimtFeeDetailsFormBean);

			}

			bimtFormBean.setBimtFeeDetailsFormBean(bimtFeeDetailsFormBeansList);
		} catch (Exception e) {
			logger.error("Exception inside catch getBIMTSudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getBIMTSudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getRamaStudentDetails(" + bimtFormBean + ") - END");
		return bimtFormBean;
	}
	public String insertWBUTEAStudentDetails(WBUTUniversityFormBean wbutUniversityFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertRamaStudentDetails(" + wbutUniversityFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_FJT_WBUTEA_Registration_Details(?,?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1, wbutUniversityFormBean.getPurpose());
			callableStatement.setString(2, wbutUniversityFormBean.getApplicationID());
			callableStatement.setString(3, wbutUniversityFormBean.getCollegeName());
			callableStatement.setString(4, wbutUniversityFormBean.getContactNo());
			callableStatement.setString(5, wbutUniversityFormBean.getFees());
			callableStatement.setString(6, wbutUniversityFormBean.getRegisteredUserId());
			callableStatement.setString(7, instituteId);


			callableStatement.registerOutParameter(8, Types.VARCHAR);
			callableStatement.registerOutParameter(9, Types.VARCHAR);
			callableStatement.registerOutParameter(10, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(10); 
			wbutUniversityFormBean.setStudentRegistrationId(callableStatement.getString(9));
			wbutUniversityFormBean.setApplicationNo(callableStatement.getString(8));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertWBUTEAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertWBUTEAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertRamaStudentDetails(" + wbutUniversityFormBean + ") - END");
		return responseString;
	}
	public WBUTUniversityFormBean getWbutStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getWbutStudentDetails(" + applicationNo + ") - START");  
		WBUTUniversityFormBean wbutUniversityFormBean = null;
		try {
			callableStatement = con.prepareCall("{call PROC_FJT_WBUT_GET_Details(?)}");

			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {
				wbutUniversityFormBean = new WBUTUniversityFormBean();

				wbutUniversityFormBean.setPurpose(resultSet.getString("Purpose"));
				wbutUniversityFormBean.setApplicationID(resultSet.getString("applicationID"));
				wbutUniversityFormBean.setCollegeName(resultSet.getString("collegeName"));
				wbutUniversityFormBean.setContactNo(resultSet.getString("contactNo"));
				wbutUniversityFormBean.setFees(resultSet.getString("fees"));
				wbutUniversityFormBean.setApplicationNo(resultSet.getString("applicationNo"));
			}
		} catch (Exception e) {
			logger.error("Exception inside catch getWbutStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getWbutStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getWbutStudentDetails(" + wbutUniversityFormBean + ") - END");
		return wbutUniversityFormBean;
	}

	@Override
	public String insertUnisonStudentDetails(UnisonFormBean unisonFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertHIMStudentDetails(" + unisonFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_FJT_UNISON_Registration_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1, unisonFormBean.getNewStudent());
			callableStatement.setString(2, unisonFormBean.getExistingStudent());
			callableStatement.setString(3, unisonFormBean.getStudentName());
			callableStatement.setString(4, unisonFormBean.getFatherName());
			callableStatement.setString(5, unisonFormBean.getAcademicSession());
			callableStatement.setString(6, unisonFormBean.getYear());
			callableStatement.setString(7, unisonFormBean.getCurriculum());
			callableStatement.setString(8, unisonFormBean.getNationality());
			callableStatement.setString(9, unisonFormBean.getSibling());
			callableStatement.setString(10, unisonFormBean.getAdmissionFee());
			callableStatement.setString(11, unisonFormBean.getJoiningKitFees());
			callableStatement.setString(12, unisonFormBean.getRegisterationFees());
			callableStatement.setString(13, unisonFormBean.getImprestDeposit());
			callableStatement.setString(14, unisonFormBean.getSecurityDeposit());
			callableStatement.setString(15, unisonFormBean.getSchoolFee());
			callableStatement.setString(16, unisonFormBean.getOthers());
			callableStatement.setString(17, unisonFormBean.getAmntdDepositINR());
			callableStatement.setString(18, unisonFormBean.getAmntdDepositUSD());
			callableStatement.setString(19, unisonFormBean.getConversionRate());
			callableStatement.setString(20, unisonFormBean.getTotalAmount());
			callableStatement.setString(21, unisonFormBean.getConvertedAmount());
			callableStatement.setString(22, unisonFormBean.getAmountWords());
			callableStatement.setString(23, unisonFormBean.getPanNo());
			callableStatement.setString(24, unisonFormBean.getPhoneNo());
			callableStatement.setString(25, unisonFormBean.getEmail());
			callableStatement.setString(26, unisonFormBean.getRegisteredUserId());
			callableStatement.setString(27, instituteId);

			callableStatement.registerOutParameter(28, Types.VARCHAR);
			callableStatement.registerOutParameter(29, Types.VARCHAR);
			callableStatement.registerOutParameter(30, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(30); 
			unisonFormBean.setStudentRegistrationId(callableStatement.getString(29));
			unisonFormBean.setApplicationNo(callableStatement.getString(28));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertUnisonStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertUnisonStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertRamaStudentDetails(" + unisonFormBean + ") - END");
		return responseString;
	} 			
	@Override
	public String insertIIMLStudentDetails(IIMLOnlineFormBean iimlOnlineFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertIIMLStudentDetails(" + iimlOnlineFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_FJT_IIML_Student_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1, iimlOnlineFormBean.getStdName());
			callableStatement.setString(2, iimlOnlineFormBean.getFathername());
			callableStatement.setString(3, iimlOnlineFormBean.getMothername());
			callableStatement.setString(4, iimlOnlineFormBean.getStdDOB());
			callableStatement.setString(5, iimlOnlineFormBean.getGender());
			callableStatement.setString(6, iimlOnlineFormBean.getPermAddress());
			callableStatement.setString(7, iimlOnlineFormBean.getCity());
			callableStatement.setString(8, iimlOnlineFormBean.getPincode());
			callableStatement.setString(9, iimlOnlineFormBean.getPolicestn());
			callableStatement.setString(10, iimlOnlineFormBean.getRailstn());
			callableStatement.setString(11, iimlOnlineFormBean.getMobile());
			callableStatement.setString(12, iimlOnlineFormBean.getAddmobile());
			callableStatement.setString(13, iimlOnlineFormBean.getEmail());
			callableStatement.setString(14, iimlOnlineFormBean.getCitizenship());
			callableStatement.setString(15, iimlOnlineFormBean.getMaritalStatus());
			callableStatement.setString(16, iimlOnlineFormBean.getCategory());
			callableStatement.setString(17, iimlOnlineFormBean.getCasteCertNo());
			callableStatement.setString(18, iimlOnlineFormBean.getIncomeCertNo());
			callableStatement.setString(19, iimlOnlineFormBean.getSubCategory());
			callableStatement.setString(20, iimlOnlineFormBean.getCaste());
			callableStatement.setString(21, iimlOnlineFormBean.getWeightage());
			callableStatement.setString(22, iimlOnlineFormBean.getHsyearOfPass());
			callableStatement.setString(23, iimlOnlineFormBean.getHsBoard());

			callableStatement.setString(24, iimlOnlineFormBean.getHsRollNo());
			callableStatement.setString(25, iimlOnlineFormBean.getHsMaxMark());
			callableStatement.setString(26, iimlOnlineFormBean.getHsObtMark());
			callableStatement.setString(27, iimlOnlineFormBean.getImyearOfPass());
			callableStatement.setString(28, iimlOnlineFormBean.getImBoard());
			callableStatement.setString(29, iimlOnlineFormBean.getImRollNo());
			callableStatement.setString(30, iimlOnlineFormBean.getBloodGrp());
			callableStatement.setString(31, iimlOnlineFormBean.getAddrProof());
			callableStatement.setString(32, iimlOnlineFormBean.getApplicationfees());
			callableStatement.setString(33, iimlOnlineFormBean.getPhotoProof());
			callableStatement.setString(34, iimlOnlineFormBean.getSignatureProof());
			callableStatement.setString(35, iimlOnlineFormBean.getMarksheetProof());                        
			callableStatement.setString(36, iimlOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(37, instituteId);


			callableStatement.registerOutParameter(38, Types.VARCHAR);
			callableStatement.registerOutParameter(39, Types.VARCHAR);
			callableStatement.registerOutParameter(40, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(40); 
			iimlOnlineFormBean.setStudentRegistrationId(callableStatement.getString(39));
			iimlOnlineFormBean.setApplicationNo(callableStatement.getString(38));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertIIMLStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertIIMLStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertIIMLStudentDetails(" + iimlOnlineFormBean + ") - END");
		return responseString;
	} 	
	@Override
	public String insertIimlSubjectMarkDetails(IIMLSubjectMarkFormBean iimlSubjectMarkFormBean,String ApplicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("insertIimlSubjectMarkDetails(" + iimlSubjectMarkFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_FJT_IIML_Subject_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1, iimlSubjectMarkFormBean.getObtSub1Mark());
			callableStatement.setString(2, iimlSubjectMarkFormBean.getMaxSub1Mark());
			callableStatement.setString(3, iimlSubjectMarkFormBean.getObtSub2Mark());
			callableStatement.setString(4, iimlSubjectMarkFormBean.getMaxSub2Mark());
			callableStatement.setString(5, iimlSubjectMarkFormBean.getObtSub3Mark());
			callableStatement.setString(6, iimlSubjectMarkFormBean.getMaxSub3Mark());
			callableStatement.setString(7, iimlSubjectMarkFormBean.getObtSub4Mark());
			callableStatement.setString(8, iimlSubjectMarkFormBean.getMaxSub4Mark());
			callableStatement.setString(9, iimlSubjectMarkFormBean.getObtSub5Mark());
			callableStatement.setString(10, iimlSubjectMarkFormBean.getMaxSub5Mark());
			callableStatement.setString(11, iimlSubjectMarkFormBean.getObtSub6Mark());
			callableStatement.setString(12, iimlSubjectMarkFormBean.getMaxSub6Mark());
			callableStatement.setString(13, iimlSubjectMarkFormBean.getObtSub7Mark());
			callableStatement.setString(14, iimlSubjectMarkFormBean.getMaxSub7Mark());
			callableStatement.setString(15, iimlSubjectMarkFormBean.getObtSub8Mark());
			callableStatement.setString(16, iimlSubjectMarkFormBean.getMaxSub8Mark());
			callableStatement.setString(17, iimlSubjectMarkFormBean.getObtSub9Mark());
			callableStatement.setString(18, iimlSubjectMarkFormBean.getMaxSub9Mark());
			callableStatement.setString(19, iimlSubjectMarkFormBean.getObtSub10Mark());
			callableStatement.setString(20, iimlSubjectMarkFormBean.getMaxSub10Mark());
			callableStatement.setString(21, ApplicationNo);
			callableStatement.registerOutParameter(22, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(22); 
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertIimlSubjectMarkDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertIimlSubjectMarkDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertIimlSubjectMarkDetails(" + iimlSubjectMarkFormBean + ") - END");
		return responseString;
	} 
	public IIMLOnlineFormBean getIIMLStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getIIMLStudentDetails(" + applicationNo + ") - START");  
		IIMLOnlineFormBean iimlOnlineFormBean = null;
		try {
			callableStatement = con.prepareCall("{call PROC_GETIIMLSTUDENTDETAILS(?)}");

			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {
				iimlOnlineFormBean = new IIMLOnlineFormBean();
				iimlOnlineFormBean.setStdName(resultSet.getString("stdName"));
				iimlOnlineFormBean.setFathername(resultSet.getString("fathername"));
				iimlOnlineFormBean.setMothername(resultSet.getString("mothername"));            	
				iimlOnlineFormBean.setStdDOB(resultSet.getString("stdDOB"));
				iimlOnlineFormBean.setGender(resultSet.getString("gender"));
				iimlOnlineFormBean.setPermAddress(resultSet.getString("permAddress"));
				iimlOnlineFormBean.setCity(resultSet.getString("city"));
				iimlOnlineFormBean.setPincode(resultSet.getString("pincode"));
				iimlOnlineFormBean.setPolicestn(resultSet.getString("policestn"));
				iimlOnlineFormBean.setRailstn(resultSet.getString("railstn"));            	            	            
				iimlOnlineFormBean.setMobile(resultSet.getString("mobile"));
				iimlOnlineFormBean.setAddmobile(resultSet.getString("addmobile"));
				iimlOnlineFormBean.setEmail(resultSet.getString("email"));
				iimlOnlineFormBean.setCitizenship(resultSet.getString("citizenship"));
				iimlOnlineFormBean.setMaritalStatus(resultSet.getString("maritalStatus"));
				iimlOnlineFormBean.setCategory(resultSet.getString("category"));
				iimlOnlineFormBean.setCasteCertNo(resultSet.getString("casteCertNo"));
				iimlOnlineFormBean.setIncomeCertNo(resultSet.getString("incomeCertNo"));
				iimlOnlineFormBean.setSubCategory(resultSet.getString("subCategory"));
				iimlOnlineFormBean.setCaste(resultSet.getString("caste"));
				iimlOnlineFormBean.setWeightage(resultSet.getString("weightage"));
				iimlOnlineFormBean.setHsyearOfPass(resultSet.getString("hsyearOfPass"));
				iimlOnlineFormBean.setHsBoard(resultSet.getString("hsBoard"));
				iimlOnlineFormBean.setHsRollNo(resultSet.getString("hsRollNo"));
				iimlOnlineFormBean.setHsMaxMark(resultSet.getString("hsMaxMark"));
				iimlOnlineFormBean.setHsObtMark(resultSet.getString("hsObtMark"));
				iimlOnlineFormBean.setImyearOfPass(resultSet.getString("imyearOfPass"));
				iimlOnlineFormBean.setImBoard(resultSet.getString("imBoard"));
				iimlOnlineFormBean.setImRollNo(resultSet.getString("imRollNo"));
				iimlOnlineFormBean.setBloodGrp(resultSet.getString("bloodGrp"));
				iimlOnlineFormBean.setAddrProof(resultSet.getString("addrProof"));            	
				iimlOnlineFormBean.setApplicationfees(resultSet.getString("applicationfees"));
				iimlOnlineFormBean.setApplicationNo(resultSet.getString("applicationNo"));
			}
		} catch (Exception e) {
			logger.error("Exception inside catch getIIMLStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getIIMLStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getIIMLStudentDetails(" + iimlOnlineFormBean + ") - END");
		return iimlOnlineFormBean;
	} 
	public List<IIMLSubjectMarkFormBean> getIIMLSubjectDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getIIMLSubjectDetails(" + applicationNo + ") - START");  
		IIMLSubjectMarkFormBean iimlSubjectMarkFormBean = null;
		List<IIMLSubjectMarkFormBean> list = null;
		try {
			list = new ArrayList<IIMLSubjectMarkFormBean>();
			callableStatement = con.prepareCall("{call PROC_GETIIMLSUBJECTDETAILS(?)}");

			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery(); 

			while (resultSet.next()) {
				iimlSubjectMarkFormBean = new IIMLSubjectMarkFormBean();
				iimlSubjectMarkFormBean.setObtSub1Mark(resultSet.getString("obtSub1Mark"));
				iimlSubjectMarkFormBean.setMaxSub1Mark(resultSet.getString("maxSub1Mark"));
				iimlSubjectMarkFormBean.setObtSub2Mark(resultSet.getString("obtSub2Mark"));
				iimlSubjectMarkFormBean.setMaxSub2Mark(resultSet.getString("maxSub2Mark"));            	
				iimlSubjectMarkFormBean.setObtSub3Mark(resultSet.getString("obtSub3Mark"));
				iimlSubjectMarkFormBean.setMaxSub3Mark(resultSet.getString("maxSub3Mark"));
				iimlSubjectMarkFormBean.setObtSub4Mark(resultSet.getString("obtSub4Mark"));
				iimlSubjectMarkFormBean.setMaxSub4Mark(resultSet.getString("maxSub4Mark"));
				iimlSubjectMarkFormBean.setObtSub5Mark(resultSet.getString("obtSub5Mark"));
				iimlSubjectMarkFormBean.setMaxSub5Mark(resultSet.getString("maxSub5Mark"));
				iimlSubjectMarkFormBean.setObtSub6Mark(resultSet.getString("obtSub6Mark"));            	            	            
				iimlSubjectMarkFormBean.setMaxSub6Mark(resultSet.getString("maxSub6Mark"));
				iimlSubjectMarkFormBean.setObtSub7Mark(resultSet.getString("obtSub7Mark"));
				iimlSubjectMarkFormBean.setMaxSub7Mark(resultSet.getString("maxSub7Mark"));
				iimlSubjectMarkFormBean.setObtSub8Mark(resultSet.getString("obtSub8Mark"));
				iimlSubjectMarkFormBean.setMaxSub8Mark(resultSet.getString("maxSub8Mark"));
				iimlSubjectMarkFormBean.setObtSub9Mark(resultSet.getString("obtSub9Mark"));
				iimlSubjectMarkFormBean.setMaxSub9Mark(resultSet.getString("maxSub9Mark"));
				iimlSubjectMarkFormBean.setObtSub10Mark(resultSet.getString("obtSub10Mark"));
				iimlSubjectMarkFormBean.setMaxSub10Mark(resultSet.getString("maxSub10Mark"));

				list.add(iimlSubjectMarkFormBean);
			}
		} catch (Exception e) {
			logger.error("Exception inside catch getIIMLSubjectDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getIIMLSubjectDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getIIMLSubjectDetails(" + iimlSubjectMarkFormBean + ") - END");
		return list;
	} 
	@Override
	public String insertGPSStudentDetails(GPSOnlineFormBean gpsOnlineFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertGPSStudentDetails(" + gpsOnlineFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_FJT_GPS_Student_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1, gpsOnlineFormBean.getAdmitCard());
			callableStatement.setString(2, gpsOnlineFormBean.getReportCard());
			callableStatement.setString(3, gpsOnlineFormBean.getPassPhoto());
			callableStatement.setString(4, gpsOnlineFormBean.getIdProof());
			callableStatement.setString(5, gpsOnlineFormBean.getMotFatPhoto());
			callableStatement.setString(6, gpsOnlineFormBean.getAdmissionDate());
			callableStatement.setString(7, gpsOnlineFormBean.getRegisterdate());
			callableStatement.setString(8, gpsOnlineFormBean.getApplicantName());
			callableStatement.setString(9, gpsOnlineFormBean.getStdDOB());
			callableStatement.setString(10, gpsOnlineFormBean.getCurrentClass());
			callableStatement.setString(11, gpsOnlineFormBean.getPrevClass());
			callableStatement.setString(12, gpsOnlineFormBean.getMotherTongue());
			callableStatement.setString(13, gpsOnlineFormBean.getReligion());
			callableStatement.setString(14, gpsOnlineFormBean.getCategory());
			callableStatement.setString(15, gpsOnlineFormBean.getFatherName());
			callableStatement.setString(16, gpsOnlineFormBean.getFatherQualification());
			callableStatement.setString(17, gpsOnlineFormBean.getFatherOccupation());
			callableStatement.setString(18, gpsOnlineFormBean.getFatherAddress());
			callableStatement.setString(19, gpsOnlineFormBean.getFatherTelNo());
			callableStatement.setString(20, gpsOnlineFormBean.getMotherName());
			callableStatement.setString(21, gpsOnlineFormBean.getMotherQualification());
			callableStatement.setString(22, gpsOnlineFormBean.getMotherOccupation());
			callableStatement.setString(23, gpsOnlineFormBean.getMotherAddress());

			callableStatement.setString(24, gpsOnlineFormBean.getMotherTelNo());
			callableStatement.setString(25, gpsOnlineFormBean.getLocalAddress());
			callableStatement.setString(26, gpsOnlineFormBean.getTelephoneNo());
			callableStatement.setString(27, gpsOnlineFormBean.getClassXExam());
			callableStatement.setString(28, gpsOnlineFormBean.getClassXBoard());
			callableStatement.setString(29, gpsOnlineFormBean.getClassXRollNo());
			callableStatement.setString(30, gpsOnlineFormBean.getClassXYear());
			callableStatement.setString(31, gpsOnlineFormBean.getClassXSubject());
			callableStatement.setString(32, gpsOnlineFormBean.getClassXAttempts());
			callableStatement.setString(33, gpsOnlineFormBean.getNameOfLastSchool());
			callableStatement.setString(34, gpsOnlineFormBean.getMediamOfInst());
			callableStatement.setString(35, gpsOnlineFormBean.getStdSeeksAdmission());

			callableStatement.setString(36, gpsOnlineFormBean.getSubjectOffered());
			callableStatement.setString(37, gpsOnlineFormBean.getPhysicalHandicap());
			callableStatement.setString(38, gpsOnlineFormBean.getAnnualIncome());
			callableStatement.setString(39, gpsOnlineFormBean.getAmount());
			callableStatement.setString(40, gpsOnlineFormBean.getPhotoProof());

			callableStatement.setString(41, gpsOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(42, instituteId);


			callableStatement.registerOutParameter(43, Types.VARCHAR);
			callableStatement.registerOutParameter(44, Types.VARCHAR);
			callableStatement.registerOutParameter(45, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(45); 
			gpsOnlineFormBean.setStudentRegistrationId(callableStatement.getString(44));
			gpsOnlineFormBean.setApplicationNo(callableStatement.getString(43));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertGPSStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertGPSStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertGPSStudentDetails(" + gpsOnlineFormBean + ") - END");
		return responseString;
	}
	public GPSOnlineFormBean getGPSStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getGPSStudentDetails(" + applicationNo + ") - START");  
		GPSOnlineFormBean gpsOnlineFormBean = null;
		try {
			callableStatement = con.prepareCall("{call PROC_GETGPSSTUDENTDETAILS(?)}");

			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {
				gpsOnlineFormBean = new GPSOnlineFormBean();
				gpsOnlineFormBean.setAdmitCard(resultSet.getString("admitCard"));
				gpsOnlineFormBean.setReportCard(resultSet.getString("reportCard"));
				gpsOnlineFormBean.setPassPhoto(resultSet.getString("passPhoto"));            	
				gpsOnlineFormBean.setIdProof(resultSet.getString("idProof"));
				gpsOnlineFormBean.setMotFatPhoto(resultSet.getString("motFatPhoto"));
				gpsOnlineFormBean.setAdmissionDate(resultSet.getString("admissionDate"));
				gpsOnlineFormBean.setRegisterdate(resultSet.getString("registerdate"));
				gpsOnlineFormBean.setApplicantName(resultSet.getString("applicantName"));
				gpsOnlineFormBean.setStdDOB(resultSet.getString("stdDOB"));
				gpsOnlineFormBean.setCurrentClass(resultSet.getString("currentClass"));            	            	            
				gpsOnlineFormBean.setPrevClass(resultSet.getString("prevClass"));
				gpsOnlineFormBean.setMotherTongue(resultSet.getString("motherTongue"));
				gpsOnlineFormBean.setReligion(resultSet.getString("religion"));
				gpsOnlineFormBean.setCategory(resultSet.getString("category"));
				gpsOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				gpsOnlineFormBean.setFatherQualification(resultSet.getString("fatherQualification"));
				gpsOnlineFormBean.setFatherOccupation(resultSet.getString("fatherOccupation"));
				gpsOnlineFormBean.setFatherAddress(resultSet.getString("fatherAddress"));
				gpsOnlineFormBean.setFatherTelNo(resultSet.getString("fatherTelNo"));
				gpsOnlineFormBean.setMotherName(resultSet.getString("motherName"));
				gpsOnlineFormBean.setMotherQualification(resultSet.getString("motherQualification"));
				gpsOnlineFormBean.setMotherOccupation(resultSet.getString("motherOccupation"));
				gpsOnlineFormBean.setMotherAddress(resultSet.getString("motherAddress"));
				gpsOnlineFormBean.setMotherTelNo(resultSet.getString("motherTelNo"));
				gpsOnlineFormBean.setLocalAddress(resultSet.getString("localAddress"));
				gpsOnlineFormBean.setTelephoneNo(resultSet.getString("telephoneNo"));            	
				gpsOnlineFormBean.setClassXExam(resultSet.getString("classXExam"));
				gpsOnlineFormBean.setClassXBoard(resultSet.getString("classXBoard"));
				gpsOnlineFormBean.setClassXRollNo(resultSet.getString("classXRollNo"));
				gpsOnlineFormBean.setClassXYear(resultSet.getString("classXYear"));
				gpsOnlineFormBean.setClassXSubject(resultSet.getString("classXSubject"));            	
				gpsOnlineFormBean.setClassXAttempts(resultSet.getString("classXAttempts"));
				gpsOnlineFormBean.setNameOfLastSchool(resultSet.getString("nameOfLastSchool"));
				gpsOnlineFormBean.setMediamOfInst(resultSet.getString("mediamOfInst"));
				gpsOnlineFormBean.setStdSeeksAdmission(resultSet.getString("stdSeeksAdmission"));
				gpsOnlineFormBean.setSubjectOffered(resultSet.getString("subjectOffered"));            	
				gpsOnlineFormBean.setPhysicalHandicap(resultSet.getString("physicalHandicap"));
				gpsOnlineFormBean.setAnnualIncome(resultSet.getString("annualIncome"));
				gpsOnlineFormBean.setPhotoProof(resultSet.getString("photoProof"));             	
				gpsOnlineFormBean.setAmount(resultSet.getString("amount"));
				gpsOnlineFormBean.setApplicationNo(resultSet.getString("applicationNo"));
			}
		} catch (Exception e) {
			logger.error("Exception inside catch getGPSStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getGPSStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getGPSStudentDetails(" + gpsOnlineFormBean + ") - END");
		return gpsOnlineFormBean;
	} 

	@Override
	public List<String> insertSpringDaleStudentDetails(
			SpringDaleStudentFormBean springDaleStudentFormBean, String billerId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertRamaStudentDetails(" + springDaleStudentFormBean + ") - START");
		List<String> responses = new ArrayList<String>();
		try {
			int i=0;
			for(SpringDaleStudentFeesFormBean springDaleStudentFeesFormBean : springDaleStudentFormBean.getSpringDaleStudentFeesFormBeanList())
			{


				callableStatement = con.prepareCall("{call PROC_FJT_SPRINGDALE_REGISTRATION_DETAILS(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

				callableStatement.setString(1, springDaleStudentFormBean.getMerchantId());
				callableStatement.setString(2, springDaleStudentFormBean.getBranchName());
				callableStatement.setString(3, springDaleStudentFormBean.getAcademicYear());
				callableStatement.setString(4, springDaleStudentFormBean.getCourseTerm());
				callableStatement.setString(5, springDaleStudentFormBean.getStudentId());
				callableStatement.setString(6, springDaleStudentFormBean.getStudentName());
				callableStatement.setString(7, springDaleStudentFormBean.getCourseName());
				callableStatement.setString(8, springDaleStudentFormBean.getSpecialization());
				callableStatement.setString(9, springDaleStudentFormBean.getCoursePattern());
				callableStatement.setString(10, springDaleStudentFormBean.getCourseType());
				callableStatement.setString(11, springDaleStudentFormBean.getFatherName());
				callableStatement.setString(12, springDaleStudentFormBean.getCity());
				callableStatement.setString(13, springDaleStudentFormBean.getState());
				callableStatement.setString(14, springDaleStudentFormBean.getMobile());
				callableStatement.setString(15, springDaleStudentFormBean.getEmailId());
				callableStatement.setString(16, springDaleStudentFeesFormBean.getDueDate());
				callableStatement.setString(17, springDaleStudentFeesFormBean.getExpiryDate());
				callableStatement.setString(18, springDaleStudentFeesFormBean.getFeeAmount());
				callableStatement.setString(19, springDaleStudentFeesFormBean.getFeeType());
				callableStatement.setString(20, springDaleStudentFeesFormBean.getLateFee());
				callableStatement.setString(21, springDaleStudentFeesFormBean.getStartDate());
				callableStatement.setString(22, springDaleStudentFormBean.getApplicationNo()==null?"0":springDaleStudentFormBean.getApplicationNo());
				callableStatement.setString(23, springDaleStudentFormBean.getRegisteredUserId());
				callableStatement.setString(24, billerId);
				callableStatement.setString(25, springDaleStudentFormBean.getReqType()==null?"A":springDaleStudentFormBean.getReqType());
				callableStatement.setInt(26, i);


				callableStatement.registerOutParameter(27, Types.VARCHAR);
				callableStatement.registerOutParameter(28, Types.VARCHAR);
				callableStatement.registerOutParameter(29, Types.VARCHAR);
				callableStatement.registerOutParameter(30, Types.VARCHAR);

				callableStatement.execute(); 
				springDaleStudentFormBean.setAmount(callableStatement.getString(27));
				responses.add(callableStatement.getString(30)); 
				springDaleStudentFormBean.setStudentRegistrationId(callableStatement.getString(29));
				springDaleStudentFormBean.setApplicationNo(callableStatement.getString(28));



				logger.info("responseString : - " + responses);
				i++;
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSpringDaleStudentDetails"+e);
			responses.add(e.getMessage());
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSpringDaleStudentDetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertRamaStudentDetails(" + springDaleStudentFormBean + ") - END");
		return responses;
	}

	@Override
	public String updateOnlineInstitutePaymentStatus(String instCode,String applicationNo,
			String paymentId,String transactionDateTime, String transactionId,
			String paymentMode, String errorCode, String errorDesc,String transactionAmount) {
		long startTime = System.currentTimeMillis();
		String responseString = null;
		try {

			callableStatement = con.prepareCall("{call PROC_FJT_UPDATE_ONLINE_INST_REGISTRATION_DETAILS(?,?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1, instCode);
			callableStatement.setString(2, applicationNo);
			callableStatement.setString(3, paymentId);
			callableStatement.setString(4, transactionDateTime);
			callableStatement.setString(5, transactionId);
			callableStatement.setString(6, paymentMode);
			callableStatement.setString(7, errorCode);
			callableStatement.setString(8, errorDesc);
			callableStatement.setString(9, transactionAmount);


			callableStatement.registerOutParameter(10, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(10); 


			logger.info("responseString : - " + responseString);


		} catch (Exception e) {
			logger.error("Exception inside catch updateOnlineInstitutePaymentStatus"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch updateOnlineInstitutePaymentStatus"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));

		return responseString;
	}
	public String insertGpullaReadyStudentDetails(GpullaReadyFormBean gpullaReadyFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertGpullaReadyStudentDetails(" + gpullaReadyFormBean + ") - START");
		String responseString = null;
		try {
			/*logger.info("SP_FJT_insertStudentDetails - " + bhuLoginActionFormBean.getStudentRegistrationId() + "," + studentRegistrationFormBean.getBillerBranchId() + "," + studentRegistrationFormBean.getStrCourse() + "," +
	        			bhuLoginActionFormBean.getStrCourseDetails() + "," + bhuLoginActionFormBean.getStrCoursePattern() + "," + studentRegistrationFormBean.getStrCourseTerm() + "," +
	        			bhuLoginActionFormBean.getStrCourseType() + "," + bhuLoginActionFormBean.getStudentId() + "," + studentRegistrationFormBean.getStudentName() + "," +
	        			bhuLoginActionFormBean.getStudentAlias() + ", OUT, OUT");*/
			/*callableStatement = con.prepareCall("{call SP_FJT_insertStudentDetails_prat(?,?,?,?,?,?,?,?,?,?,?,?)}");*/
			callableStatement = con.prepareCall("{call PROC_FJT_GPULLAREDDY_Registration_Details (?,?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1, gpullaReadyFormBean.getStdName());
			callableStatement.setString(2, gpullaReadyFormBean.getStdRegistrationnumber());
			callableStatement.setString(3, gpullaReadyFormBean.getStdMobileNumber());
			callableStatement.setString(4, gpullaReadyFormBean.getStdEmailID());
			callableStatement.setString(5, gpullaReadyFormBean.getStdHostelFee());   
			callableStatement.setString(6, gpullaReadyFormBean.getRegisteredUserId());
			callableStatement.setString(7, instituteId);
			callableStatement.registerOutParameter(8, Types.VARCHAR);
			callableStatement.registerOutParameter(9, Types.VARCHAR);
			callableStatement.registerOutParameter(10, Types.VARCHAR);
			callableStatement.execute();           
			responseString = callableStatement.getString(10); 
			gpullaReadyFormBean.setStudentRegistrationId(callableStatement.getString(9));
			gpullaReadyFormBean.setApplicationNo(callableStatement.getString(8));



			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertGpullaReadyStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertGpullaReadyStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertGpullaReadyStudentDetails(" + gpullaReadyFormBean + ") - END");
		return responseString;
	} 
	public GpullaReadyFormBean getGpullaReddyStudentdetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getGpullaReddyStudentdetails(" + applicationNo + ") - START");  
		GpullaReadyFormBean gpullaReadyFormBean = null;
		try {
			callableStatement = con.prepareCall("{call PROC_FJT_GPULLAREDDY_GET_Details(?)}");

			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {
				gpullaReadyFormBean = new GpullaReadyFormBean();

				gpullaReadyFormBean.setStdName(resultSet.getString("stdName"));
				gpullaReadyFormBean.setStdRegistrationnumber(resultSet.getString("stdRegistrationnumber"));
				gpullaReadyFormBean.setStdMobileNumber(resultSet.getString("stdMobileNumber"));
				gpullaReadyFormBean.setStdEmailID(resultSet.getString("stdEmailID"));
				gpullaReadyFormBean.setStdHostelFee(resultSet.getString("stdHostelFee"));
				gpullaReadyFormBean.setApplicationNo(resultSet.getString("applicationNo"));
			}
		} catch (Exception e) {
			logger.error("Exception inside catch getGpullaReddyStudentdetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getGpullaReddyStudentdetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getGpullaReddyStudentdetails(" + gpullaReadyFormBean + ") - END");
		return gpullaReadyFormBean;
	}  
	@Override
	public String insertYMCAStudentDetails(YMCAOnlineFormBean ymcaOnlineFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertYMCAStudentDetails(" + ymcaOnlineFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_FJT_YMCA_Student_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1, ymcaOnlineFormBean.getOtherCourse());
			callableStatement.setString(2, ymcaOnlineFormBean.getCategory());
			callableStatement.setString(3, ymcaOnlineFormBean.getCastCert_Proof());
			callableStatement.setString(4, ymcaOnlineFormBean.getGender());	           
			callableStatement.setString(5, ymcaOnlineFormBean.getApplicantName());
			callableStatement.setString(6, ymcaOnlineFormBean.getFatherName());
			callableStatement.setString(7, ymcaOnlineFormBean.getMotherName());
			callableStatement.setString(8, ymcaOnlineFormBean.getApplicantDOB());
			callableStatement.setString(9, ymcaOnlineFormBean.getCorrAddress());
			callableStatement.setString(10, ymcaOnlineFormBean.getPincode());
			callableStatement.setString(11, ymcaOnlineFormBean.getTelphnNo());
			callableStatement.setString(12, ymcaOnlineFormBean.getMobileNo());
			callableStatement.setString(13, ymcaOnlineFormBean.getEmailId());
			callableStatement.setString(14, ymcaOnlineFormBean.getDeclarationName());
			callableStatement.setString(15, ymcaOnlineFormBean.getFormDate());
			callableStatement.setString(16, ymcaOnlineFormBean.getPhoto_Proof());
			callableStatement.setString(17, ymcaOnlineFormBean.getAmount());
			callableStatement.setString(18, ymcaOnlineFormBean.getDebarExam());
			callableStatement.setString(19, ymcaOnlineFormBean.getReceiptDate());
			callableStatement.setString(20, ymcaOnlineFormBean.getFormNumber());
			callableStatement.setString(21, ymcaOnlineFormBean.getMtechDept());
			callableStatement.setString(22, ymcaOnlineFormBean.getMtechBranch());

			callableStatement.setString(23, ymcaOnlineFormBean.getMtechSpec1());
			callableStatement.setString(24, ymcaOnlineFormBean.getMtechSpec2());
			callableStatement.setString(25, ymcaOnlineFormBean.getMtechSpec3());
			callableStatement.setString(26, ymcaOnlineFormBean.getGateQualify());
			callableStatement.setString(27, ymcaOnlineFormBean.getOtherDept());
			callableStatement.setString(28, ymcaOnlineFormBean.getValidGateScore());
			callableStatement.setString(29, ymcaOnlineFormBean.getGateExam());
			callableStatement.setString(30, ymcaOnlineFormBean.getGateYear());
			callableStatement.setString(31, ymcaOnlineFormBean.getGateRollNo());
			callableStatement.setString(32, ymcaOnlineFormBean.getGateScore());
			callableStatement.setString(33, ymcaOnlineFormBean.getGateQualifyMark());
			callableStatement.setString(34, ymcaOnlineFormBean.getGateScoreValid());                        
			callableStatement.setString(35, ymcaOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(36, ymcaOnlineFormBean.getPlsSpecify());
			callableStatement.setString(37, ymcaOnlineFormBean.getExamDetails());
			callableStatement.setString(38, ymcaOnlineFormBean.getPlace());
			callableStatement.setString(39, ymcaOnlineFormBean.getSign_Proof());

			callableStatement.setString(40, ymcaOnlineFormBean.getEsmDoc());
			callableStatement.setString(41, ymcaOnlineFormBean.getEsm_proof());
			callableStatement.setString(42, ymcaOnlineFormBean.getGateScore_proof());
			callableStatement.setString(43, instituteId);


			callableStatement.registerOutParameter(44, Types.VARCHAR);
			callableStatement.registerOutParameter(45, Types.VARCHAR);
			callableStatement.registerOutParameter(46, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(46); 
			ymcaOnlineFormBean.setStudentRegistrationId(callableStatement.getString(45));
			ymcaOnlineFormBean.setApplicationNo(callableStatement.getString(44));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertYMCAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertYMCAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertYMCAStudentDetails(" + ymcaOnlineFormBean + ") - END");
		return responseString;
	} 
	@Override
	public String insertYMCAEducationDetails(EducationDetailsFormbean educationDetailsFormbean,String ApplicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("insertYMCAEducationDetails(" + educationDetailsFormbean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_FJT_YMCA_EDU_Details(?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1, educationDetailsFormbean.getQualName());
			callableStatement.setString(2, educationDetailsFormbean.getQualYear());
			callableStatement.setString(3, educationDetailsFormbean.getQualRollNo());
			callableStatement.setString(4, educationDetailsFormbean.getQualObtMarks());
			callableStatement.setString(5, educationDetailsFormbean.getQualMaxMarks());
			callableStatement.setString(6, educationDetailsFormbean.getQualPercentage());
			callableStatement.setString(7, educationDetailsFormbean.getQualCollegeName());	           
			callableStatement.setString(8, ApplicationNo);
			callableStatement.registerOutParameter(9, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(9); 
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertYMCAEducationDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertYMCAEducationDetails"+e);
			}
		} 
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertYMCAEducationDetails(" + educationDetailsFormbean + ") - END");
		return responseString;
	} 
	public YMCAOnlineFormBean getYMCAStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getYMCAStudentDetails(" + applicationNo + ") - START");  
		YMCAOnlineFormBean ymcaOnlineFormBean = null;
		try {
			callableStatement = con.prepareCall("{call PROC_GETYMCASTUDENTDETAILS(?)}");

			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {
				ymcaOnlineFormBean = new YMCAOnlineFormBean();
				ymcaOnlineFormBean.setOtherCourse(resultSet.getString("otherCourse"));
				ymcaOnlineFormBean.setCategory(resultSet.getString("category"));
				ymcaOnlineFormBean.setCastCert_Proof(resultSet.getString("castCert_Proof"));            	
				ymcaOnlineFormBean.setGender(resultSet.getString("gender"));
				ymcaOnlineFormBean.setApplicantName(resultSet.getString("applicantName"));
				ymcaOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				ymcaOnlineFormBean.setMotherName(resultSet.getString("motherName"));
				ymcaOnlineFormBean.setApplicantDOB(resultSet.getString("applicantDOB"));
				ymcaOnlineFormBean.setCorrAddress(resultSet.getString("corrAddress"));
				ymcaOnlineFormBean.setPincode(resultSet.getString("pincode"));            	            	            
				ymcaOnlineFormBean.setTelphnNo(resultSet.getString("telphnNo"));
				ymcaOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));
				ymcaOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				ymcaOnlineFormBean.setDeclarationName(resultSet.getString("DeclarationName"));
				ymcaOnlineFormBean.setFormDate(resultSet.getString("formDate"));
				ymcaOnlineFormBean.setPhoto_Proof(resultSet.getString("photo_Proof"));
				ymcaOnlineFormBean.setAmount(resultSet.getString("amount"));
				ymcaOnlineFormBean.setDebarExam(resultSet.getString("debarExam"));
				ymcaOnlineFormBean.setReceiptDate(resultSet.getString("receiptDate"));
				ymcaOnlineFormBean.setFormNumber(resultSet.getString("formNumber"));
				ymcaOnlineFormBean.setMtechDept(resultSet.getString("mtechDept"));
				ymcaOnlineFormBean.setMtechBranch(resultSet.getString("mtechBranch"));
				ymcaOnlineFormBean.setMtechSpec1(resultSet.getString("mtechSpec1"));
				ymcaOnlineFormBean.setMtechSpec2(resultSet.getString("mtechSpec2"));
				ymcaOnlineFormBean.setMtechSpec3(resultSet.getString("mtechSpec3"));
				ymcaOnlineFormBean.setGateQualify(resultSet.getString("gateQualify"));
				ymcaOnlineFormBean.setOtherDept(resultSet.getString("otherDept"));
				ymcaOnlineFormBean.setValidGateScore(resultSet.getString("validGateScore"));
				ymcaOnlineFormBean.setGateExam(resultSet.getString("gateExam"));
				ymcaOnlineFormBean.setGateYear(resultSet.getString("gateYear"));
				ymcaOnlineFormBean.setGateRollNo(resultSet.getString("gateRollNo"));            	
				ymcaOnlineFormBean.setGateScore(resultSet.getString("gateScore"));
				ymcaOnlineFormBean.setGateQualifyMark(resultSet.getString("gateQualifyMark"));
				ymcaOnlineFormBean.setGateScoreValid(resultSet.getString("gateScoreValid"));
				ymcaOnlineFormBean.setPlsSpecify(resultSet.getString("plsSpecify"));
				ymcaOnlineFormBean.setExamDetails(resultSet.getString("examDetails"));
				ymcaOnlineFormBean.setPlace(resultSet.getString("place"));
				ymcaOnlineFormBean.setSign_Proof(resultSet.getString("sign_Proof"));
				ymcaOnlineFormBean.setEsmDoc(resultSet.getString("esmDropdown"));
				ymcaOnlineFormBean.setEsm_proof(resultSet.getString("esm_proof"));
				ymcaOnlineFormBean.setGateScore_proof(resultSet.getString("gateScore_proof"));
				ymcaOnlineFormBean.setApplicationNo(applicationNo);
			}
		} catch (Exception e) {
			logger.error("Exception inside catch getYMCAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getYMCAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getYMCAStudentDetails(" + ymcaOnlineFormBean + ") - END");
		return ymcaOnlineFormBean;
	}
	public List getYMCAEducationDetails(String applicationNo) {

		List<EducationDetailsFormbean> list = null;
		try {
			logger.info("getYMCAEducationDetails() - ~START~");
			callableStatement = con.prepareCall("{call PROC_GETYMCAEDUCATIONDETAILS(?)}");
			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery();

			list = new ArrayList<EducationDetailsFormbean>();
			while (resultSet.next()) {
				EducationDetailsFormbean educationDetailsFormbean = new EducationDetailsFormbean();				
				educationDetailsFormbean.setQualName(resultSet.getString("qualName"));
				educationDetailsFormbean.setQualYear(resultSet.getString("qualYear"));
				educationDetailsFormbean.setQualRollNo(resultSet.getString("qualRollNo"));
				educationDetailsFormbean.setQualObtMarks(resultSet.getString("qualObtMarks"));
				educationDetailsFormbean.setQualMaxMarks(resultSet.getString("qualMaxMarks"));
				educationDetailsFormbean.setQualPercentage(resultSet.getString("qualPercentage"));
				educationDetailsFormbean.setQualCollegeName(resultSet.getString("qualCollegeName"));
				list.add(educationDetailsFormbean);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) { resultSet.close(); }
				if (callableStatement != null) { callableStatement.close(); }
				if (con != null) { con.close(); }
			} catch (Exception e) {
				logger.error("Exception inside catch getYMCAEducationDetails"+e);
			}
		}
		logger.info("getYMCAEducationDetails() - ~END~");
		return list;
	}
	public String insertNehuStudentDetails(NEHUFormBean nehuFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertNehuStudentDetails(" + nehuFormBean + ") - START");
		String responseString = null;
		try {
			/*logger.info("SP_FJT_insertStudentDetails - " + bhuLoginActionFormBean.getStudentRegistrationId() + "," + studentRegistrationFormBean.getBillerBranchId() + "," + studentRegistrationFormBean.getStrCourse() + "," +
			        			bhuLoginActionFormBean.getStrCourseDetails() + "," + bhuLoginActionFormBean.getStrCoursePattern() + "," + studentRegistrationFormBean.getStrCourseTerm() + "," +
			        			bhuLoginActionFormBean.getStrCourseType() + "," + bhuLoginActionFormBean.getStudentId() + "," + studentRegistrationFormBean.getStudentName() + "," +
			        			bhuLoginActionFormBean.getStudentAlias() + ", OUT, OUT");*/
			/*callableStatement = con.prepareCall("{call SP_FJT_insertStudentDetails_prat(?,?,?,?,?,?,?,?,?,?,?,?)}");*/
			callableStatement = con.prepareCall("{call PROC_FJT_NEHU_Registration_Details(?,?,?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1, nehuFormBean.getStdName());
			callableStatement.setString(2, nehuFormBean.getStdDateOfBirth());
			callableStatement.setString(3, nehuFormBean.getStdPurposeOfChallan());
			callableStatement.setString(4, nehuFormBean.getStdAmount());
			callableStatement.setString(5, nehuFormBean.getStdMobileNumber());
			callableStatement.setString(6, nehuFormBean.getStdCourse());
			callableStatement.setString(7, nehuFormBean.getRegisteredUserId());
			callableStatement.setString(8, instituteId);

			callableStatement.registerOutParameter(9, Types.VARCHAR);
			callableStatement.registerOutParameter(10, Types.VARCHAR);
			callableStatement.registerOutParameter(11, Types.VARCHAR);
			callableStatement.execute();           
			responseString = callableStatement.getString(11); 
			nehuFormBean.setStudentRegistrationId(callableStatement.getString(10));
			nehuFormBean.setApplicationNo(callableStatement.getString(9));



			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertNehuStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertNehuStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertNehuStudentDetails(" + nehuFormBean + ") - END");
		return responseString;
	} 
	public NEHUFormBean getNehuStudentdetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getNehuStudentdetails(" + applicationNo + ") - START");  
		NEHUFormBean nehuFormBean = null;
		try {
			callableStatement = con.prepareCall("{call PROC_FJT_NEHU_GET_Details(?)}");

			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {
				nehuFormBean = new NEHUFormBean();

				nehuFormBean.setStdName(resultSet.getString("stdName"));
				nehuFormBean.setStdDateOfBirth(resultSet.getString("stdDateOfBirth"));
				nehuFormBean.setStdPurposeOfChallan(resultSet.getString("stdPurposeOfChallan"));
				nehuFormBean.setStdAmount(resultSet.getString("stdAmount"));
				nehuFormBean.setStdMobileNumber(resultSet.getString("stdMobileNumber"));
				nehuFormBean.setStdCourse(resultSet.getString("stdCourse"));
				nehuFormBean.setApplicationNo(resultSet.getString("applicationNo"));
			}
		} catch (Exception e) {
			logger.error("Exception inside catch getNehuStudentdetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getNehuStudentdetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getNehuStudentdetails(" + nehuFormBean + ") - END");
		return nehuFormBean;
	}

	@Override
	public URLInstituteResponseBean fetchInstituteSuccessTransReport(String instituteId, String fromDate, String toDate) {
		long startTime = System.currentTimeMillis();
		logger.info("institute id : "+instituteId);
		logger.info("from date : "+fromDate); 
		logger.info("to date : "+toDate); 
		URLInstituteResponseBean urlInstituteResponseBean = new URLInstituteResponseBean();
		List<URLInstituteResponseBean> urlInstituteResponseBeanlist=new ArrayList<URLInstituteResponseBean>(); 
		try {
			callableStatement = con.prepareCall("{call PROC_FETCH_URL_SUCCESS_FEE_TRANSACTIONS_REPORT(?,?,?)}");
			callableStatement.setString(1, instituteId);
			callableStatement.setString(2, fromDate);
			callableStatement.setString(3, toDate);			 
			resultSet = callableStatement.executeQuery(); 

			while (resultSet.next()) {
				URLInstituteResponseBean urlInstituteResponseBean2 = new URLInstituteResponseBean();

				urlInstituteResponseBean2.setMerchantId(resultSet.getString("MERCHANT_ID"));
				urlInstituteResponseBean2.setStudentId(resultSet.getString("student_id"));
				urlInstituteResponseBean2.setStudentName(resultSet.getString("student_name"));
				urlInstituteResponseBean2.setTrxDateTime(resultSet.getString("R_Cre_Time"));
				urlInstituteResponseBean2.setTrxStatus(resultSet.getString("TRANSACTION_STATUS"));
				urlInstituteResponseBean2.setTrxId(resultSet.getString("PGTxnID"));
				urlInstituteResponseBean2.setAmount(resultSet.getString("Txn_Amt"));

				urlInstituteResponseBeanlist.add(urlInstituteResponseBean2);
			}

			urlInstituteResponseBean.setUrlInstituteResponseBean(urlInstituteResponseBeanlist);
		} catch (Exception e) {
			logger.error("Exception inside catch fetchInstituteSuccessTransReport"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch fetchInstituteSuccessTransReport"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		return urlInstituteResponseBean;
	}  
	@Override
	public String insertIIMMLStudentDetails(IIMLucknowFormBean iimlucknowFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertIIMMLStudentDetails(" + iimlucknowFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_FJT_IIMLucknow_Registration_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1, iimlucknowFormBean.getStdPaymentcategory());
			callableStatement.setString(2, iimlucknowFormBean.getStdAmount());
			callableStatement.setString(3, iimlucknowFormBean.getStdRollNo());
			callableStatement.setString(4, iimlucknowFormBean.getStdTerm());
			callableStatement.setString(5, iimlucknowFormBean.getStdCourse());
			callableStatement.setString(6, iimlucknowFormBean.getStdNameOfStudent());
			callableStatement.setString(7, iimlucknowFormBean.getStdDateOfBirth());
			callableStatement.setString(8, iimlucknowFormBean.getStdNameOfFather());
			callableStatement.setString(9, iimlucknowFormBean.getStdMobileNumber());
			callableStatement.setString(10, iimlucknowFormBean.getStdEmailId());			            
			callableStatement.setString(11, iimlucknowFormBean.getStdPurpose());
			callableStatement.setString(12, iimlucknowFormBean.getStdComputerPrinting());
			callableStatement.setString(13, iimlucknowFormBean.getStdotherCharges());
			callableStatement.setString(14, iimlucknowFormBean.getStdRemarks());

			callableStatement.setString(15, iimlucknowFormBean.getRegisteredUserId());
			callableStatement.setString(16, instituteId);

			callableStatement.registerOutParameter(17, Types.VARCHAR);
			callableStatement.registerOutParameter(18, Types.VARCHAR);
			callableStatement.registerOutParameter(19, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(19); 
			iimlucknowFormBean.setStudentRegistrationId(callableStatement.getString(18));
			iimlucknowFormBean.setApplicationNo(callableStatement.getString(17));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertIIMMLStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertIIMMLStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertRamaStudentDetails(" + iimlucknowFormBean + ") - END");
		return responseString;
	} 	
	public IIMLucknowFormBean getIIMLucknowStudentdetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getIIMLucknowStudentdetails(" + applicationNo + ") - START");  
		IIMLucknowFormBean iimlucknowFormBean = null;
		try {
			callableStatement = con.prepareCall("{call PROC_FJT_IIMLucknow_GET_Details(?)}");

			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {
				iimlucknowFormBean = new IIMLucknowFormBean();

				iimlucknowFormBean.setStdPaymentcategory(resultSet.getString("stdPaymentcategory"));
				iimlucknowFormBean.setStdAmount(resultSet.getString("stdAmount"));
				iimlucknowFormBean.setStdRollNo(resultSet.getString("stdRollNo"));
				iimlucknowFormBean.setStdTerm(resultSet.getString("stdTerm"));
				iimlucknowFormBean.setStdCourse(resultSet.getString("stdCourse"));
				iimlucknowFormBean.setStdNameOfStudent(resultSet.getString("stdNameOfStudent"));
				iimlucknowFormBean.setStdDateOfBirth(resultSet.getString("stdDateOfBirth"));
				iimlucknowFormBean.setStdNameOfFather(resultSet.getString("stdNameOfFather"));
				iimlucknowFormBean.setStdMobileNumber(resultSet.getString("stdMobileNumber"));
				iimlucknowFormBean.setStdEmailId(resultSet.getString("stdEmailId"));
				iimlucknowFormBean.setStdPurpose(resultSet.getString("stdPurpose"));
				iimlucknowFormBean.setStdComputerPrinting(resultSet.getString("stdComputerPrinting"));
				iimlucknowFormBean.setStdotherCharges(resultSet.getString("stdotherCharges"));
				iimlucknowFormBean.setStdRemarks(resultSet.getString("stdRemarks"));
				iimlucknowFormBean.setApplicationNo(resultSet.getString("applicationNo"));
			}
		} catch (Exception e) {
			logger.error("Exception inside catch getIIMLucknowStudentdetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getIIMLucknowStudentdetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getNehuStudentdetails(" + iimlucknowFormBean + ") - END");
		return iimlucknowFormBean;
	}
	@Override
	public String insertNITMeghStudentDetails(NITOnlineFormBean nitOnlineFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertNITMeghStudentDetails(" + nitOnlineFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_FJTNITMEGH_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1, nitOnlineFormBean.getRollNo());
			callableStatement.setString(2, nitOnlineFormBean.getStdName());
			callableStatement.setString(3, nitOnlineFormBean.getProgramme());
			callableStatement.setString(4, nitOnlineFormBean.getDiscipline());	           
			callableStatement.setString(5, nitOnlineFormBean.getPurpose());
			callableStatement.setString(6, nitOnlineFormBean.getSpecify());
			callableStatement.setString(7, nitOnlineFormBean.getCategory());
			callableStatement.setString(8, nitOnlineFormBean.getAmount());
			callableStatement.setString(9, nitOnlineFormBean.getMobile());
			callableStatement.setString(10, nitOnlineFormBean.getEmail());
			callableStatement.setString(11, nitOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(12, instituteId);


			callableStatement.registerOutParameter(13, Types.VARCHAR);
			callableStatement.registerOutParameter(14, Types.VARCHAR);
			callableStatement.registerOutParameter(15, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(15); 
			nitOnlineFormBean.setStudentRegistrationId(callableStatement.getString(14));
			nitOnlineFormBean.setApplicationNo(callableStatement.getString(13));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertNITMeghStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertNITMeghStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertNITMeghStudentDetails(" + nitOnlineFormBean + ") - END");
		return responseString;
	} 
	public NITOnlineFormBean getNITMeghStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getNITMeghStudentDetails(" + applicationNo + ") - START");  
		NITOnlineFormBean nitOnlineFormBean = null;
		try {
			callableStatement = con.prepareCall("{call PROC_GETNITMEGHSTUDENTDETAILS(?)}");

			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {
				nitOnlineFormBean = new NITOnlineFormBean();
				nitOnlineFormBean.setRollNo(resultSet.getString("rollNo"));
				nitOnlineFormBean.setStdName(resultSet.getString("stdName"));
				nitOnlineFormBean.setProgramme(resultSet.getString("programme"));            	
				nitOnlineFormBean.setDiscipline(resultSet.getString("discipline"));
				nitOnlineFormBean.setPurpose(resultSet.getString("purpose"));
				nitOnlineFormBean.setSpecify(resultSet.getString("specify"));
				nitOnlineFormBean.setCategory(resultSet.getString("category"));
				nitOnlineFormBean.setAmount(resultSet.getString("amount"));
				nitOnlineFormBean.setMobile(resultSet.getString("mobile"));
				nitOnlineFormBean.setEmail(resultSet.getString("email"));				  
				nitOnlineFormBean.setApplicationNo(applicationNo);
			}
		} catch (Exception e) {
			logger.error("Exception inside catch getNITMeghStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getNITMeghStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getNITMeghStudentDetails(" + nitOnlineFormBean + ") - END");
		return nitOnlineFormBean;
	}
	@Override
	public String insertCampionSchoolDetails(CampionSchoolFormBean campionSchoolFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertCampionSchoolDetails(" + campionSchoolFormBean + ") - START");
		String responseString = null;
		try {
			for(CampionFeesDetailsFormBean campFeeDetailsFormBean : campionSchoolFormBean.getCampionFeeDetailsFormBean())
			{
				callableStatement = con.prepareCall("{call PROC_CampionStudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
				callableStatement.setString(1, campionSchoolFormBean.getSelectClass());
				callableStatement.setString(2, campionSchoolFormBean.getSelectDivision());
				callableStatement.setString(3, campionSchoolFormBean.getStdRollNo());
				callableStatement.setString(4, campionSchoolFormBean.getStdMobile());	           
				callableStatement.setString(5, campionSchoolFormBean.getStdEmailId());
				callableStatement.setString(6, campionSchoolFormBean.getTutionFee());
				callableStatement.setString(7, campionSchoolFormBean.getTermFee());
				callableStatement.setString(8, campionSchoolFormBean.getPtaFee());
				callableStatement.setString(9, campionSchoolFormBean.getComputerFee());
				// callableStatement.setString(10, campionSchoolFormBean.getAmount());
				callableStatement.setString(10, campionSchoolFormBean.getStdName());
				callableStatement.setString(11, campionSchoolFormBean.getRegisteredUserId());
				callableStatement.setString(12, instituteId);
				callableStatement.setString(13,campFeeDetailsFormBean.getFeeType());
				callableStatement.setString(14,campFeeDetailsFormBean.getFeeAmount());
				callableStatement.setString(15, campionSchoolFormBean.getApplicationNo()==null?"0":campionSchoolFormBean.getApplicationNo());


				callableStatement.registerOutParameter(15, Types.VARCHAR);
				callableStatement.registerOutParameter(16, Types.VARCHAR);
				callableStatement.registerOutParameter(17, Types.VARCHAR);

				callableStatement.execute();           
				responseString = callableStatement.getString(17); 
				campionSchoolFormBean.setStudentRegistrationId(callableStatement.getString(16));
				campionSchoolFormBean.setApplicationNo(callableStatement.getString(15));
				logger.info("responseString : - " + responseString);
			}} catch (Exception e) {
				logger.error("Exception inside catch insertCampionSchoolDetails"+e);
			} finally {
				try {
					if (resultSet != null) {
						resultSet.close();
					}
					if (callableStatement != null) {
						callableStatement.close();
					}
					if (con != null) {
						con.close();
					}
				} catch (Exception e) {
					logger.error("Exception inside catch insertCampionSchoolDetails"+e);
				}
			}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertCampionSchoolDetails(" + campionSchoolFormBean + ") - END");
		return responseString;
	}
	public CampionSchoolFormBean getCampionStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getCampionStudentDetails(" + applicationNo + ") - START");  
		CampionSchoolFormBean campionSchoolFormBean = new CampionSchoolFormBean();
		try {
			callableStatement = con.prepareCall("{call PROC_GETCAMPIONSTUDENTDETAILS(?)}");

			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {
				campionSchoolFormBean.setSelectClass(resultSet.getString("selectClass"));
				campionSchoolFormBean.setSelectDivision(resultSet.getString("selectDivision"));
				campionSchoolFormBean.setStdRollNo(resultSet.getString("stdRollNo"));            	
				campionSchoolFormBean.setStdMobile(resultSet.getString("stdMobile"));
				campionSchoolFormBean.setStdEmailId(resultSet.getString("stdEmailId"));
				campionSchoolFormBean.setTutionFee(resultSet.getString("tutionFee"));
				campionSchoolFormBean.setTermFee(resultSet.getString("termFee"));
				campionSchoolFormBean.setPtaFee(resultSet.getString("ptaFee"));
				campionSchoolFormBean.setComputerFee(resultSet.getString("computerFee"));
				campionSchoolFormBean.setAmount(resultSet.getString("TotalAmount"));
				campionSchoolFormBean.setStdName(resultSet.getString("stdName"));
				campionSchoolFormBean.setApplicationNo(applicationNo);
			}
		} catch (Exception e) {
			logger.error("Exception inside catch getCampionStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getCampionStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getCampionStudentDetails(" + campionSchoolFormBean + ") - END");
		return campionSchoolFormBean;
	}
	@Override
	public String insertHaryanaStudentDetails(HaryanaFormBean haryanaFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertHaryanaStudentDetails(" + haryanaFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_FJT_Haryana_Registration_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1, haryanaFormBean.getEnrollmentNo());
			callableStatement.setString(2, haryanaFormBean.getRegisterID());
			callableStatement.setString(3, haryanaFormBean.getSubject());
			callableStatement.setString(4, haryanaFormBean.getCourse());
			callableStatement.setString(5, haryanaFormBean.getName());
			callableStatement.setString(6, haryanaFormBean.getFathersName());
			callableStatement.setString(7, haryanaFormBean.getMothersName());
			callableStatement.setString(8, haryanaFormBean.getDateofBirth());
			callableStatement.setString(9, haryanaFormBean.getGender());
			callableStatement.setString(10, haryanaFormBean.getPermanentAddress());			            
			callableStatement.setString(11, haryanaFormBean.getLocalAddress());
			callableStatement.setString(12, haryanaFormBean.getPincode());
			callableStatement.setString(13, haryanaFormBean.getCity());
			callableStatement.setString(14, haryanaFormBean.getMobileNumber());
			callableStatement.setString(15, haryanaFormBean.getAdditionalMobileNo());
			callableStatement.setString(16, haryanaFormBean.getCategory());
			callableStatement.setString(17, haryanaFormBean.getEmail());
			callableStatement.setString(18, haryanaFormBean.getApplicationFee());
			callableStatement.setString(19, haryanaFormBean.getExaminationYear());
			/*     callableStatement.setString(20, haryanaFormBean.getYear());
        callableStatement.setString(21, haryanaFormBean.getRollNo());
        callableStatement.setString(22, haryanaFormBean.getMarksObtained());
        callableStatement.setString(23, haryanaFormBean.getMaxMarks());
        callableStatement.setString(24, haryanaFormBean.getPercentage());*/
			callableStatement.setString(20, haryanaFormBean.getPhoto_upload());
			callableStatement.setString(21, haryanaFormBean.getSignature_upload());
			callableStatement.setString(22, haryanaFormBean.getMarksheet_upload());
			callableStatement.setString(23, haryanaFormBean.getPreference1());
			callableStatement.setString(24, haryanaFormBean.getPreference2());
			callableStatement.setString(25, haryanaFormBean.getPreference3());
			callableStatement.setString(26, haryanaFormBean.getPreference4());
			callableStatement.setString(27, haryanaFormBean.getPercentage1());        
			callableStatement.setString(28, haryanaFormBean.getRegisteredUserId());
			callableStatement.setString(29, instituteId);

			callableStatement.registerOutParameter(30, Types.VARCHAR);
			callableStatement.registerOutParameter(31, Types.VARCHAR);
			callableStatement.registerOutParameter(32, Types.VARCHAR);
			callableStatement.execute();           
			responseString = callableStatement.getString(32); 
			haryanaFormBean.setStudentRegistrationId(callableStatement.getString(31));
			haryanaFormBean.setApplicationNo(callableStatement.getString(30));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertHaryanaStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertHaryanaStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertRamaStudentDetails(" + haryanaFormBean + ") - END");
		return responseString;
	}
	public HaryanaFormBean getHaryanaStudentdetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getHaryanaStudentdetails(" + applicationNo + ") - START");  
		HaryanaFormBean haryanaFormBean = null;
		try {
			callableStatement = con.prepareCall("{call PROC_FJT_Haryana_GET_Details(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {
				haryanaFormBean = new HaryanaFormBean();
				haryanaFormBean.setEnrollmentNo(resultSet.getString("enrollment_No"));
				haryanaFormBean.setRegisterID(resultSet.getString("Register_ID"));
				haryanaFormBean.setSubject(resultSet.getString("subject"));
				haryanaFormBean.setCourse(resultSet.getString("course"));
				haryanaFormBean.setName(resultSet.getString("name"));
				haryanaFormBean.setFathersName(resultSet.getString("fathersName"));
				haryanaFormBean.setMothersName(resultSet.getString("mothersName"));
				haryanaFormBean.setDateofBirth(resultSet.getString("dateofBirth"));
				haryanaFormBean.setGender(resultSet.getString("gender"));
				haryanaFormBean.setPermanentAddress(resultSet.getString("permanentAddress"));
				haryanaFormBean.setLocalAddress(resultSet.getString("localAddress"));
				haryanaFormBean.setPincode(resultSet.getString("pincode"));
				haryanaFormBean.setCity(resultSet.getString("City"));
				haryanaFormBean.setMobileNumber(resultSet.getString("mobileNumber"));
				haryanaFormBean.setAdditionalMobileNo(resultSet.getString("additionalMobileNumber"));
				haryanaFormBean.setCategory(resultSet.getString("category"));
				haryanaFormBean.setEmail(resultSet.getString("email"));
				haryanaFormBean.setApplicationFee(resultSet.getString("applicationFee"));
				haryanaFormBean.setExaminationYear(resultSet.getString("Exampassedprevyear"));
				/* 	haryanaFormBean.setYear(resultSet.getString("year"));
        	haryanaFormBean.setRollNo(resultSet.getString("rollNo"));
        	haryanaFormBean.setMarksObtained(resultSet.getString("marksObtained"));
        	haryanaFormBean.setMaxMarks(resultSet.getString("maxMarks"));
        	haryanaFormBean.setPercentage(resultSet.getString("percentage"));*/
				haryanaFormBean.setPhoto_upload(resultSet.getString("photo_upload"));
				haryanaFormBean.setSignature_upload(resultSet.getString("signature_upload"));
				haryanaFormBean.setMarksheet_upload(resultSet.getString("marksheet_upload"));
				haryanaFormBean.setPreference1(resultSet.getString("preference1"));
				haryanaFormBean.setPreference2(resultSet.getString("preference2"));
				haryanaFormBean.setPreference3(resultSet.getString("preference3"));
				haryanaFormBean.setPreference4(resultSet.getString("preference4"));
				haryanaFormBean.setPercentage1(resultSet.getString("percentage1"));
				haryanaFormBean.setApplicationNo(resultSet.getString("applicationNo"));
			}
		} catch (Exception e) {
			logger.error("Exception inside catch getHaryanaStudentdetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getHaryanaStudentdetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getHaryanaStudentdetails(" + haryanaFormBean + ") - END");
		return haryanaFormBean;
	}
	@Override
	public String insertBengalCollegeDetails(BengalCollegeOnlineFormBean bengalCollegeOnlineFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertBengalCollegeDetails(" + bengalCollegeOnlineFormBean + ") - START");
		String responseString = null;
		int ctr = 0;
		try {
			for(CampionFeesDetailsFormBean FeeDetailsFormBean : bengalCollegeOnlineFormBean.getCampionFeeDetailsFormBean())
			{
				callableStatement = con.prepareCall("{call PROC_FJT_BENGALCOLLAGE_Registration_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
				if(ctr == 0){
					if(bengalCollegeOnlineFormBean.getDocVerify() != null && !"".equalsIgnoreCase(bengalCollegeOnlineFormBean.getDocVerify())){
						FeeDetailsFormBean.setFeeAmount(bengalCollegeOnlineFormBean.getAcademicAmount());
					}
				}else{
					if(bengalCollegeOnlineFormBean.getHostelAmount().equalsIgnoreCase("0")){
						break;
					}else{
						FeeDetailsFormBean.setFeeAmount(bengalCollegeOnlineFormBean.getHostelAmount());
					}
				}
				callableStatement.setString(1, bengalCollegeOnlineFormBean.getSelectCourse());
				callableStatement.setString(2, bengalCollegeOnlineFormBean.getSelectSplCourse());
				callableStatement.setString(3, bengalCollegeOnlineFormBean.getExamination());
				callableStatement.setString(4, bengalCollegeOnlineFormBean.getExamRank());	           
				callableStatement.setString(5, bengalCollegeOnlineFormBean.getAdmCategory());
				callableStatement.setString(6, bengalCollegeOnlineFormBean.getStdName());
				callableStatement.setString(7, bengalCollegeOnlineFormBean.getFatherName());
				callableStatement.setString(8, bengalCollegeOnlineFormBean.getMotherName());
				callableStatement.setString(9, bengalCollegeOnlineFormBean.getStdDOB());
				callableStatement.setString(10, bengalCollegeOnlineFormBean.getGender());
				callableStatement.setString(11, bengalCollegeOnlineFormBean.getStdAddress());
				callableStatement.setString(12, bengalCollegeOnlineFormBean.getStdCity());
				callableStatement.setString(13, bengalCollegeOnlineFormBean.getStdStateNew());
				callableStatement.setString(14, bengalCollegeOnlineFormBean.getStdPinCode());
				callableStatement.setString(15, bengalCollegeOnlineFormBean.getStdCitizenship());
				callableStatement.setString(16, bengalCollegeOnlineFormBean.getStdEmailId());
				callableStatement.setString(17, bengalCollegeOnlineFormBean.getStdMobile());
				callableStatement.setString(18, bengalCollegeOnlineFormBean.getStdAddMobile());
				callableStatement.setString(19, bengalCollegeOnlineFormBean.getStdCaste());
				callableStatement.setString(20, bengalCollegeOnlineFormBean.getStdCategory());
				callableStatement.setString(21, bengalCollegeOnlineFormBean.getSscYearOfPass());
				callableStatement.setString(22, bengalCollegeOnlineFormBean.getSscBoard());

				callableStatement.setString(23, bengalCollegeOnlineFormBean.getSscOthBoard());
				callableStatement.setString(24, bengalCollegeOnlineFormBean.getObtainedSSCMark());
				callableStatement.setString(25, bengalCollegeOnlineFormBean.getPercentSSCMark());
				callableStatement.setString(26, bengalCollegeOnlineFormBean.getHscYearOfPass());
				callableStatement.setString(27, bengalCollegeOnlineFormBean.getHscBoard());
				callableStatement.setString(28, bengalCollegeOnlineFormBean.getHscOthBoard());
				callableStatement.setString(29, bengalCollegeOnlineFormBean.getObtainedHSCMark());
				callableStatement.setString(30, bengalCollegeOnlineFormBean.getPercentHSCMark());
				callableStatement.setString(31, bengalCollegeOnlineFormBean.getObtPhysicsMark());
				callableStatement.setString(32, bengalCollegeOnlineFormBean.getCompulsorySub1Mark());
				callableStatement.setString(33, bengalCollegeOnlineFormBean.getObtChemistryMark());
				callableStatement.setString(34, bengalCollegeOnlineFormBean.getCompulsorySub2Mark());                        
				callableStatement.setString(35, bengalCollegeOnlineFormBean.getObtMathsMark());
				callableStatement.setString(36, bengalCollegeOnlineFormBean.getAdditionalSub1Mark());
				callableStatement.setString(37, bengalCollegeOnlineFormBean.getObtBioMark());
				callableStatement.setString(38, bengalCollegeOnlineFormBean.getAdditionalSub2Mark());
				callableStatement.setString(39, bengalCollegeOnlineFormBean.getObtEngMark());

				callableStatement.setString(40, bengalCollegeOnlineFormBean.getObtOtherSubMark());
				callableStatement.setString(41, bengalCollegeOnlineFormBean.getOtherYearOfPass());
				callableStatement.setString(42, bengalCollegeOnlineFormBean.getOtherBoard());

				callableStatement.setString(43, bengalCollegeOnlineFormBean.getObtainedOtherMark());
				callableStatement.setString(44, bengalCollegeOnlineFormBean.getPercentOtherMark());
				callableStatement.setString(45, bengalCollegeOnlineFormBean.getPhotoProof());
				callableStatement.setString(46, bengalCollegeOnlineFormBean.getDocProof());

				callableStatement.setString(47, FeeDetailsFormBean.getFeeAmount());
				callableStatement.setString(48, bengalCollegeOnlineFormBean.getRegisteredUserId());
				callableStatement.setString(49, instituteId);
				callableStatement.setString(50, bengalCollegeOnlineFormBean.getPcmPercent());
				callableStatement.setString(51, bengalCollegeOnlineFormBean.getPcbPercent());
				callableStatement.setString(52, bengalCollegeOnlineFormBean.getDocVerify());
				callableStatement.setString(53, bengalCollegeOnlineFormBean.getHostelAmount());
				callableStatement.setString(54, bengalCollegeOnlineFormBean.getAcademicAmount());
				callableStatement.setString(55, bengalCollegeOnlineFormBean.getHostel());
				callableStatement.setString(56, bengalCollegeOnlineFormBean.getHostelcategory());

				callableStatement.setString(57, FeeDetailsFormBean.getFeeType());
				callableStatement.setString(58, bengalCollegeOnlineFormBean.getApplicationNo()==null?"0":bengalCollegeOnlineFormBean.getApplicationNo());

				callableStatement.registerOutParameter(58, Types.VARCHAR);
				callableStatement.registerOutParameter(59, Types.VARCHAR);
				callableStatement.registerOutParameter(60, Types.VARCHAR);

				callableStatement.execute();           
				responseString = callableStatement.getString(60); 
				bengalCollegeOnlineFormBean.setStudentRegistrationId(callableStatement.getString(59));
				bengalCollegeOnlineFormBean.setApplicationNo(callableStatement.getString(58));
				logger.info("responseString : - " + responseString);
				ctr++;
			} }catch (Exception e) {
				logger.error("Exception inside catch insertBengalCollegeDetails"+e);
			} finally {
				try {
					if (resultSet != null) {
						resultSet.close();
					}
					if (callableStatement != null) {
						callableStatement.close();
					}
					if (con != null) {
						con.close();
					}
				} catch (Exception e) {
					logger.error("Exception inside catch insertBengalCollegeDetails"+e);
				}
			}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertBengalCollegeDetails(" + bengalCollegeOnlineFormBean + ") - END");
		return responseString;
	}

	@Override
	public BengalCollegeOnlineFormBean loadBengalData(
			String applicationNo, String instituteCode) {
		long startTime = System.currentTimeMillis();
		logger.info("loadBengalData(" + applicationNo + ") - START");  
		BengalCollegeOnlineFormBean bengalCollegeOnlineFormBean = new BengalCollegeOnlineFormBean();
		try {
			callableStatement = con.prepareCall("{call PROC_LOAD_BENGAL_DATA(?,?)}");

			callableStatement.setString(1, applicationNo);
			callableStatement.setString(2, instituteCode);

			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {
				bengalCollegeOnlineFormBean.setSelectCourse(resultSet.getString("SELECT_COURSE"));
				bengalCollegeOnlineFormBean.setSelectSplCourse(resultSet.getString("SELECT_SPL_COURSE"));
				bengalCollegeOnlineFormBean.setExamination(resultSet.getString("EXAMINATION"));
				bengalCollegeOnlineFormBean.setAmount(resultSet.getString("AMOUNT"));
				bengalCollegeOnlineFormBean.setExamRank(resultSet.getString("EXAM_RANK"));
				bengalCollegeOnlineFormBean.setAdmCategory(resultSet.getString("ADM_CATEGORY"));
				bengalCollegeOnlineFormBean.setStdName(resultSet.getString("STD_NAME"));
				bengalCollegeOnlineFormBean.setFatherName(resultSet.getString("FATHER_NAME"));
				bengalCollegeOnlineFormBean.setMotherName(resultSet.getString("MOTHER_NAME"));
				bengalCollegeOnlineFormBean.setStdDOB(resultSet.getString("STD_DOB"));
				bengalCollegeOnlineFormBean.setGender(resultSet.getString("GENDER"));
				bengalCollegeOnlineFormBean.setStdAddress(resultSet.getString("STD_ADDRESS"));
				bengalCollegeOnlineFormBean.setStdCity(resultSet.getString("STD_CITY"));
				bengalCollegeOnlineFormBean.setStdStateNew(resultSet.getString("STD_STATE_NEW"));
				bengalCollegeOnlineFormBean.setStdPinCode(resultSet.getString("STD_PINCODE"));
				bengalCollegeOnlineFormBean.setStdCitizenship(resultSet.getString("STD_CITIZENSHIP"));
				bengalCollegeOnlineFormBean.setStdEmailId(resultSet.getString("STD_EMAILID"));
				bengalCollegeOnlineFormBean.setStdMobile(resultSet.getString("STD_MOBILE"));
				bengalCollegeOnlineFormBean.setStdAddMobile(resultSet.getString("STD_ADD_MOBILE"));
				bengalCollegeOnlineFormBean.setStdCaste(resultSet.getString("STD_CASTE"));
				bengalCollegeOnlineFormBean.setStdCategory(resultSet.getString("STD_CATEGORY"));
				bengalCollegeOnlineFormBean.setSscYearOfPass(resultSet.getString("SSC_YEAR_OF_PASS"));
				bengalCollegeOnlineFormBean.setSscBoard(resultSet.getString("SSC_BOARD"));
				bengalCollegeOnlineFormBean.setSscOthBoard(resultSet.getString("SSC_OTH_BOARD"));
				bengalCollegeOnlineFormBean.setObtainedSSCMark(resultSet.getString("OBTAINED_SSC_MARK"));
				bengalCollegeOnlineFormBean.setPercentSSCMark(resultSet.getString("PERCENT_SSC_MARK"));
				bengalCollegeOnlineFormBean.setHscYearOfPass(resultSet.getString("HSC_YEAR_OF_PASS"));
				bengalCollegeOnlineFormBean.setHscBoard(resultSet.getString("HSC_BOARD"));
				bengalCollegeOnlineFormBean.setHscOthBoard(resultSet.getString("HSC_OTH_BOARD"));
				bengalCollegeOnlineFormBean.setObtainedHSCMark(resultSet.getString("OBTAINED_HSC_MARK"));
				bengalCollegeOnlineFormBean.setPercentHSCMark(resultSet.getString("PERCENT_HSC_MARK"));
				bengalCollegeOnlineFormBean.setObtPhysicsMark(resultSet.getString("OBT_PHYSICS_MARK"));
				bengalCollegeOnlineFormBean.setObtChemistryMark(resultSet.getString("OBT_CHEMISTRY_MARK"));
				bengalCollegeOnlineFormBean.setObtMathsMark(resultSet.getString("OBT_MATHS_MARK"));
				bengalCollegeOnlineFormBean.setObtBioMark(resultSet.getString("OBT_BIO_MARK"));
				bengalCollegeOnlineFormBean.setObtEngMark(resultSet.getString("OBT_ENG_MARK"));
				bengalCollegeOnlineFormBean.setCompulsorySub1Mark(resultSet.getString("COMPULSORY_SUB1_MARK"));
				bengalCollegeOnlineFormBean.setCompulsorySub2Mark(resultSet.getString("COMPULSORY_SUB2_MARK"));
				bengalCollegeOnlineFormBean.setAdditionalSub1Mark(resultSet.getString("ADDITIONAL_SUB1_MARK"));
				bengalCollegeOnlineFormBean.setAdditionalSub2Mark(resultSet.getString("ADDITIONAL_SUB2_MARK"));
				bengalCollegeOnlineFormBean.setObtOtherSubMark(resultSet.getString("OBT_OTHER_SUB_MARK"));
				bengalCollegeOnlineFormBean.setOtherYearOfPass(resultSet.getString("OTHER_YEAR_OF_PASS"));
				bengalCollegeOnlineFormBean.setOtherBoard(resultSet.getString("OTHER_BOARD"));
				bengalCollegeOnlineFormBean.setObtainedOtherMark(resultSet.getString("OBTAINED_OTHER_MARK"));
				bengalCollegeOnlineFormBean.setPercentOtherMark(resultSet.getString("PERCENT_OTHER_MARK"));
				bengalCollegeOnlineFormBean.setPhotoProof(resultSet.getString("PHOTO_PROOF"));
				bengalCollegeOnlineFormBean.setDocProof(resultSet.getString("DOC_PROOF"));
				bengalCollegeOnlineFormBean.setPcmPercent(resultSet.getString("PCM_PERCENT"));
				bengalCollegeOnlineFormBean.setPcbPercent(resultSet.getString("PCB_PERCENT"));
				bengalCollegeOnlineFormBean.setDocVerify(resultSet.getString("DOC_VERIFY"));
				bengalCollegeOnlineFormBean.setHostelAmount(resultSet.getString("HOSTEL_AMOUNT"));
				bengalCollegeOnlineFormBean.setAcademicAmount(resultSet.getString("ACADEMIC_AMOUNT"));
				bengalCollegeOnlineFormBean.setHostel(resultSet.getString("hostel"));
				bengalCollegeOnlineFormBean.setHostelcategory(resultSet.getString("hostelType"));

				bengalCollegeOnlineFormBean.setApplicationNo(applicationNo);
			}
		} catch (Exception e) {
			logger.error("Exception inside catch loadBengalData"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch loadBengalData"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("bengalCollegeOnlineFormBean(" + bengalCollegeOnlineFormBean + ") - END");
		return bengalCollegeOnlineFormBean;
	}
	@Override
	public String getvalidateCBSData(String uniqueIdentificationId,	String defaultGuestUserId,String instId) {
		long startTime = System.currentTimeMillis();
		logger.info("getvalidateCBSData(" + uniqueIdentificationId + "," + defaultGuestUserId + ") - START");
		String studentRegistrationId = null;
		try {
			logger.info("getvalidateCBSData - " + uniqueIdentificationId + "," + defaultGuestUserId);
			callableStatement = con.prepareCall("{call SP_FJT_validateCBSData(?,?,?)}");
			callableStatement.setString(1, uniqueIdentificationId);
			callableStatement.setString(2, defaultGuestUserId);
			callableStatement.setString(3, instId);
			resultSet = callableStatement.executeQuery();
			while (resultSet.next()) {
				studentRegistrationId = resultSet.getString("studentRegistrationId");
			}
		} catch (Exception e) {
			logger.error("Exception inside catch getvalidateCBSData"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getvalidateCBSData"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getvalidateCBSData(" + uniqueIdentificationId + "," + defaultGuestUserId + ") - END");
		return studentRegistrationId;
	}
	@Override
	public String insertHaryanaEducationDetails(EducationHaryanaFormBean educationHaryanaFormBean,String ApplicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("insertHaryanaEducationDetails(" + educationHaryanaFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_FJT_HARYANA_EDU_Details(?,?,?,?,?,?,?)}");

			callableStatement.setString(1, educationHaryanaFormBean.getYear());
			callableStatement.setString(2, educationHaryanaFormBean.getRollNo());
			callableStatement.setString(3, educationHaryanaFormBean.getMarksObtained());
			callableStatement.setString(4, educationHaryanaFormBean.getMaxMarks());
			callableStatement.setString(5, educationHaryanaFormBean.getPercentage());              
			callableStatement.setString(6, ApplicationNo);
			callableStatement.registerOutParameter(7, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(7); 
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertHaryanaEducationDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertHaryanaEducationDetails"+e);
			}
		} 
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertYMCAEducationDetails(" + educationHaryanaFormBean + ") - END");
		return responseString;
	} 
	public List getHaryanaEducationDetails(String applicationNo) {

		List<EducationHaryanaFormBean> list = null;
		try {
			logger.info("getHaryanaEducationDetails() - ~START~");
			callableStatement = con.prepareCall("{call PROC_GETHARYANAEDUCATIONDETAILS(?)}");
			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery();

			list = new ArrayList<EducationHaryanaFormBean>();
			while (resultSet.next()) {
				EducationHaryanaFormBean educationHaryanaFormBean = new EducationHaryanaFormBean();				
				educationHaryanaFormBean.setYear(resultSet.getString("Year"));
				educationHaryanaFormBean.setRollNo(resultSet.getString("rollNo"));
				educationHaryanaFormBean.setMarksObtained(resultSet.getString("marksObtained"));
				educationHaryanaFormBean.setMaxMarks(resultSet.getString("maxMarks"));
				educationHaryanaFormBean.setPercentage(resultSet.getString("Percentage"));

				list.add(educationHaryanaFormBean);
			}
		} catch (Exception e) {
			logger.error("Exception inside catch getHaryanaEducationDetails"+e);
		} finally {
			try {
				if (resultSet != null) { resultSet.close(); }
				if (callableStatement != null) { callableStatement.close(); }
				if (con != null) { con.close(); }
			} catch (Exception e) {
				logger.error("Exception inside catch getHaryanaEducationDetails"+e);
			}
		}
		logger.info("getYMCAEducationDetails() - ~END~");
		return list;
	}
	@Override
	public String insertYMCAAllStudentDetails(YMCAOnlineFormBean ymcaOnlineFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertYMCAAllStudentDetails(" + ymcaOnlineFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_FJT_YMCA_ALL_Student_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1, ymcaOnlineFormBean.getCategory());
			callableStatement.setString(2, ymcaOnlineFormBean.getPlsSpecify());
			callableStatement.setString(3, ymcaOnlineFormBean.getCastCert_Proof());
			callableStatement.setString(4, ymcaOnlineFormBean.getAlreadyAdmit());
			callableStatement.setString(5, ymcaOnlineFormBean.getMentionBranch());
			callableStatement.setString(6, ymcaOnlineFormBean.getGender());	           
			callableStatement.setString(7, ymcaOnlineFormBean.getApplicantName());
			callableStatement.setString(8, ymcaOnlineFormBean.getFatherName());
			callableStatement.setString(9, ymcaOnlineFormBean.getMotherName());
			callableStatement.setString(10, ymcaOnlineFormBean.getApplicantDOB());
			callableStatement.setString(11, ymcaOnlineFormBean.getCorrAddress());
			callableStatement.setString(12, ymcaOnlineFormBean.getTelphnNo());
			callableStatement.setString(13, ymcaOnlineFormBean.getMobileNo());
			callableStatement.setString(14, ymcaOnlineFormBean.getEmailId());
			callableStatement.setString(15, ymcaOnlineFormBean.getRollNumber());
			callableStatement.setString(16, ymcaOnlineFormBean.getRank());
			callableStatement.setString(17, ymcaOnlineFormBean.getRankCard_proof());
			callableStatement.setString(18, ymcaOnlineFormBean.getMatRollNumber());
			callableStatement.setString(19, ymcaOnlineFormBean.getMatRank());
			callableStatement.setString(20, ymcaOnlineFormBean.getMatCard_proof());
			callableStatement.setString(21, ymcaOnlineFormBean.getDebarExam());
			callableStatement.setString(22, ymcaOnlineFormBean.getExamDetails());
			callableStatement.setString(23, ymcaOnlineFormBean.getAmount());            
			callableStatement.setString(24, ymcaOnlineFormBean.getDeclarationName());
			callableStatement.setString(25, ymcaOnlineFormBean.getFormDate());
			callableStatement.setString(26, ymcaOnlineFormBean.getPlace());
			callableStatement.setString(27, ymcaOnlineFormBean.getPhoto_Proof());
			callableStatement.setString(28, ymcaOnlineFormBean.getSign_Proof());                                              
			callableStatement.setString(29, ymcaOnlineFormBean.getRegisteredUserId());                                           
			callableStatement.setString(30, instituteId);


			callableStatement.registerOutParameter(31, Types.VARCHAR);
			callableStatement.registerOutParameter(32, Types.VARCHAR);
			callableStatement.registerOutParameter(33, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(33); 
			ymcaOnlineFormBean.setStudentRegistrationId(callableStatement.getString(32));
			ymcaOnlineFormBean.setApplicationNo(callableStatement.getString(31));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertYMCAAllStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertYMCAAllStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertYMCAAllStudentDetails(" + ymcaOnlineFormBean.toString() + ") - END");
		return responseString;
	}
	public YMCAOnlineFormBean getYMCAAllStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getYMCAStudentDetails(" + applicationNo + ") - START");  
		YMCAOnlineFormBean ymcaOnlineFormBean = null;
		try {
			callableStatement = con.prepareCall("{call PROC_GETYMCAALLSTUDENTDETAILS(?)}");

			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {
				ymcaOnlineFormBean = new YMCAOnlineFormBean();	            	
				ymcaOnlineFormBean.setCategory(resultSet.getString("category"));
				ymcaOnlineFormBean.setPlsSpecify(resultSet.getString("plsSpecify"));
				ymcaOnlineFormBean.setCastCert_Proof(resultSet.getString("castCert_Proof"));
				ymcaOnlineFormBean.setAlreadyAdmit(resultSet.getString("alreadyAdmit"));
				ymcaOnlineFormBean.setMentionBranch(resultSet.getString("mentionBranch"));
				ymcaOnlineFormBean.setGender(resultSet.getString("gender"));
				ymcaOnlineFormBean.setApplicantName(resultSet.getString("applicantName"));
				ymcaOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				ymcaOnlineFormBean.setMotherName(resultSet.getString("motherName"));
				ymcaOnlineFormBean.setApplicantDOB(resultSet.getString("applicantDOB"));
				ymcaOnlineFormBean.setCorrAddress(resultSet.getString("corrAddress"));	                      	            	            
				ymcaOnlineFormBean.setTelphnNo(resultSet.getString("telphnNo"));
				ymcaOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));
				ymcaOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				ymcaOnlineFormBean.setRollNumber(resultSet.getString("rollNumber"));
				ymcaOnlineFormBean.setRank(resultSet.getString("commonRank"));
				ymcaOnlineFormBean.setRankCard_proof(resultSet.getString("rankCard_proof"));
				ymcaOnlineFormBean.setMatRollNumber(resultSet.getString("matRollNumber"));
				ymcaOnlineFormBean.setMatRank(resultSet.getString("matRank"));
				ymcaOnlineFormBean.setMatCard_proof(resultSet.getString("matCard_proof"));	            	
				ymcaOnlineFormBean.setDebarExam(resultSet.getString("debarExam"));
				ymcaOnlineFormBean.setExamDetails(resultSet.getString("examDetails"));
				ymcaOnlineFormBean.setAmount(resultSet.getString("amount"));
				ymcaOnlineFormBean.setDeclarationName(resultSet.getString("DeclarationName"));
				ymcaOnlineFormBean.setFormDate(resultSet.getString("formDate"));
				ymcaOnlineFormBean.setPlace(resultSet.getString("place"));
				ymcaOnlineFormBean.setPhoto_Proof(resultSet.getString("photo_Proof"));
				ymcaOnlineFormBean.setSign_Proof(resultSet.getString("sign_Proof"));	            	
				ymcaOnlineFormBean.setApplicationNo(applicationNo);
			}
		} catch (Exception e) {
			logger.error("Exception inside catch getYMCAAllStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getYMCAAllStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getYMCAStudentDetails(" + ymcaOnlineFormBean + ") - END");
		return ymcaOnlineFormBean;
	}
	@Override
	public String insertBSEStudentDetails(BSEFormBean bseFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertBSEStudentDetails(" + bseFormBean + ") - START");
		String responseString = null;

		try {
			callableStatement = con.prepareCall("{call PROC_FJT_BSE_Registration_Details(?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1, bseFormBean.getName());
			callableStatement.setString(2, bseFormBean.getEmailID());
			callableStatement.setString(3, bseFormBean.getMobile());
			callableStatement.setString(4, bseFormBean.getCentreName());
			callableStatement.setString(5, bseFormBean.getCourseApplied());
			callableStatement.setString(6, bseFormBean.getFeepayable());
			callableStatement.setString(7, bseFormBean.getRegisteredUserId());
			callableStatement.setString(8, instituteId);                   
			callableStatement.registerOutParameter(9, Types.VARCHAR);
			callableStatement.registerOutParameter(10, Types.VARCHAR);
			callableStatement.registerOutParameter(11, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(11); 
			bseFormBean.setStudentRegistrationId(callableStatement.getString(10));
			bseFormBean.setApplicationNo(callableStatement.getString(9));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {

			logger.error("Exception inside catch insertBSEStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertBSEStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertRamaStudentDetails(" + bseFormBean + ") - END");
		return responseString;
	}
	public BSEFormBean getBSEStudentdetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getBSEStudentdetails(" + applicationNo + ") - START");  
		BSEFormBean bseFormBean = null;
		try {
			callableStatement = con.prepareCall("{call PROC_FJT_BSE_GET_Details(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {
				bseFormBean = new BSEFormBean();
				bseFormBean.setName(resultSet.getString("applicantName"));
				bseFormBean.setEmailID(resultSet.getString("email_ID"));
				bseFormBean.setMobile(resultSet.getString("mobileNo"));
				bseFormBean.setCentreName(resultSet.getString("centre_Name"));
				bseFormBean.setCourseApplied(resultSet.getString("course_Applied"));
				bseFormBean.setFeepayable(resultSet.getString("fee_payable"));
				bseFormBean.setApplicationNo(resultSet.getString("applicationNo"));
			}
		} catch (Exception e) {
			logger.error("Exception inside catch getBSEStudentdetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getBSEStudentdetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getBSEStudentdetails(" + bseFormBean + ") - END");
		return bseFormBean;
	}	   
	@Override
	public String insertWelhamSchoolDetails(WelhamSchoolFormBean welhamSchoolFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertWelhamSchoolDetails(" + welhamSchoolFormBean + ") - START");
		String responseString = null;
		int ctr = 0;
		try {
			for(CampionFeesDetailsFormBean FeeDetailsFormBean : welhamSchoolFormBean.getCampionFeeDetailsFormBean())
			{
				callableStatement = con.prepareCall("{call PROC_WelhamSchoolDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
				if(ctr == 0){	       		
					FeeDetailsFormBean.setFeeAmount(welhamSchoolFormBean.getTermFees());
				}
				else{
					FeeDetailsFormBean.setFeeAmount(welhamSchoolFormBean.getMiscFees());
				}	       
				callableStatement.setString(1, welhamSchoolFormBean.getStdSchoolNo());
				callableStatement.setString(2, welhamSchoolFormBean.getStdName());
				callableStatement.setString(3, welhamSchoolFormBean.getFatherName());
				callableStatement.setString(4, welhamSchoolFormBean.getSelectHouse());	           
				callableStatement.setString(5, welhamSchoolFormBean.getHouseCategory());
				callableStatement.setString(6, welhamSchoolFormBean.getSelectClass());
				callableStatement.setString(7, welhamSchoolFormBean.getSelectSection());
				callableStatement.setString(8, welhamSchoolFormBean.getSelectTerm());
				callableStatement.setString(9, welhamSchoolFormBean.getTermFees());
				callableStatement.setString(10, welhamSchoolFormBean.getMiscFees());
				callableStatement.setString(11, welhamSchoolFormBean.getFeesNarration());
				callableStatement.setString(12, welhamSchoolFormBean.getStdEmailId());
				callableStatement.setString(13, welhamSchoolFormBean.getStdMobile());
				callableStatement.setString(14, welhamSchoolFormBean.getTotalFees());	          	           
				callableStatement.setString(15, FeeDetailsFormBean.getFeeAmount());
				callableStatement.setString(16, FeeDetailsFormBean.getFeeType());
				callableStatement.setString(17, welhamSchoolFormBean.getRegisteredUserId()); 
				callableStatement.setString(18, instituteId);	          
				callableStatement.setString(19, welhamSchoolFormBean.getApplicationNo()==null?"0":welhamSchoolFormBean.getApplicationNo());

				callableStatement.registerOutParameter(19, Types.VARCHAR);
				callableStatement.registerOutParameter(20, Types.VARCHAR);
				callableStatement.registerOutParameter(21, Types.VARCHAR);

				callableStatement.execute();           
				responseString = callableStatement.getString(21); 
				welhamSchoolFormBean.setStudentRegistrationId(callableStatement.getString(20));
				welhamSchoolFormBean.setApplicationNo(callableStatement.getString(19));
				logger.info("responseString : - " + responseString);
				ctr++;
			} }catch (Exception e) {
				logger.error("Exception inside catch insertWelhamSchoolDetails"+e);
			} finally {
				try {
					if (resultSet != null) {
						resultSet.close();
					}
					if (callableStatement != null) {
						callableStatement.close();
					}
					if (con != null) {
						con.close();
					}
				} catch (Exception e) {
					logger.error("Exception inside catch insertWelhamSchoolDetails"+e);
				}
			}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertWelhamSchoolDetails(" + welhamSchoolFormBean + ") - END");
		return responseString;
	}
	public WelhamSchoolFormBean getWelhamSchoolDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getWelhamSchoolDetails(" + applicationNo + ") - START");  
		WelhamSchoolFormBean welhamSchoolFormBean = new WelhamSchoolFormBean();
		try {
			callableStatement = con.prepareCall("{call PROC_GETWELHAMSCHOOLDETAILS(?)}");

			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {
				welhamSchoolFormBean.setStdSchoolNo(resultSet.getString("stdSchoolNo"));
				welhamSchoolFormBean.setStdName(resultSet.getString("stdName"));
				welhamSchoolFormBean.setFatherName(resultSet.getString("fatherName"));            	
				welhamSchoolFormBean.setSelectHouse(resultSet.getString("selectHouse"));
				welhamSchoolFormBean.setHouseCategory(resultSet.getString("houseCategory"));
				welhamSchoolFormBean.setSelectClass(resultSet.getString("selectClass"));
				welhamSchoolFormBean.setSelectSection(resultSet.getString("selectSection"));
				welhamSchoolFormBean.setSelectTerm(resultSet.getString("selectTerm"));
				welhamSchoolFormBean.setTermFees(resultSet.getString("termFees"));
				welhamSchoolFormBean.setMiscFees(resultSet.getString("miscFees"));
				welhamSchoolFormBean.setFeesNarration(resultSet.getString("feesNarration"));
				welhamSchoolFormBean.setStdEmailId(resultSet.getString("stdEmailId"));
				welhamSchoolFormBean.setStdMobile(resultSet.getString("stdMobile"));
				welhamSchoolFormBean.setTotalFees(resultSet.getString("totalFees"));
				welhamSchoolFormBean.setApplicationNo(applicationNo);
			}
		} catch (Exception e) {
			logger.error("Exception inside catch getWelhamSchoolDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getWelhamSchoolDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getWelhamSchoolDetails(" + welhamSchoolFormBean + ") - END");
		return welhamSchoolFormBean;
	}

	@Override
	public ChallanOTPProcessBean fetchIITVFees(String FeePayId,String FeeType, String studentcategory) {
		long startTime = System.currentTimeMillis();
		logger.info("PROC_FETCH_IITV_FEES("+FeeType+","+studentcategory+")");  
		ChallanOTPProcessBean challanOTPProcessBean = new ChallanOTPProcessBean();
		try {
			callableStatement = con.prepareCall("{call PROC_FETCH_IITV_FEES(?,?,?,?,?)}");

			callableStatement.setString(1, FeeType);
			callableStatement.setString(2, FeePayId);
			callableStatement.setString(3, studentcategory);
			callableStatement.registerOutParameter(4, Types.VARCHAR);
			callableStatement.registerOutParameter(5, Types.VARCHAR);

			callableStatement.execute();
			challanOTPProcessBean.setAcademicFee(callableStatement.getString(4));
			challanOTPProcessBean.setResponse(callableStatement.getString(5));
			/*			            resultSet = callableStatement.executeQuery(); 
				            while (resultSet.next()) {
				            	challanOTPProcessBean.setAcademicFee(resultSet.getString("FEE_AMOUNT"));
				            	challanOTPProcessBean.setMessFee(resultSet.getString("FEE_ID"));

					}*/
		} catch (Exception e) {
			logger.error("Exception inside catch fetchIITVFees"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch fetchIITVFees"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("PROC_FETCH_IITV_FEES(" + challanOTPProcessBean + ") - END");
		return challanOTPProcessBean;
	}
	@Override
	public String insertNIPRStudentDetails(NIPROnlineFormBean niprOnlineFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertNIPRStudentDetails(" + niprOnlineFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_NIPR_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?)}");
			//callableStatement.setString(1, niprOnlineFormBean.getFormId());
			callableStatement.setString(1, niprOnlineFormBean.getStdName());
			callableStatement.setString(2, niprOnlineFormBean.getStdMobile());
			callableStatement.setString(3, niprOnlineFormBean.getStdEmailId());
			callableStatement.setString(4, niprOnlineFormBean.getSelectNationallity());	           
			callableStatement.setString(5, niprOnlineFormBean.getSelectPayCurrency());
			callableStatement.setString(6, niprOnlineFormBean.getSelectDivision());
			callableStatement.setString(7, niprOnlineFormBean.getAmount());            
			callableStatement.setString(8, niprOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(9, instituteId);


			callableStatement.registerOutParameter(10, Types.VARCHAR);
			callableStatement.registerOutParameter(11, Types.VARCHAR);
			callableStatement.registerOutParameter(12, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(12); 
			niprOnlineFormBean.setStudentRegistrationId(callableStatement.getString(11));
			niprOnlineFormBean.setApplicationNo(callableStatement.getString(10));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertNIPRStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertNIPRStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertNIPRStudentDetails(" + niprOnlineFormBean + ") - END");
		return responseString;
	}
	public NIPROnlineFormBean getNIPRSchoolDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getNIPRSchoolDetails(" + applicationNo + ") - START");  
		NIPROnlineFormBean niprOnlineFormBean = new NIPROnlineFormBean();
		try {
			callableStatement = con.prepareCall("{call PROC_GETNIPRSTUDENTDETAILS(?)}");

			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {					            	
				niprOnlineFormBean.setStdName(resultSet.getString("stdName"));
				niprOnlineFormBean.setStdMobile(resultSet.getString("stdMobile"));            	
				niprOnlineFormBean.setStdEmailId(resultSet.getString("stdEmailId"));
				niprOnlineFormBean.setSelectNationallity(resultSet.getString("selectNationallity"));
				niprOnlineFormBean.setSelectPayCurrency(resultSet.getString("selectPayCurrency"));
				niprOnlineFormBean.setSelectDivision(resultSet.getString("selectDivision"));
				niprOnlineFormBean.setAmount(resultSet.getString("amount"));					      
				niprOnlineFormBean.setApplicationNo(applicationNo);
			}
		} catch (Exception e) {
			logger.error("Exception inside catch getNIPRSchoolDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getNIPRSchoolDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getNIPRSchoolDetails(" + niprOnlineFormBean + ") - END");
		return niprOnlineFormBean;
	}
	@Override
	public String insertMGRStudentDetails(MGRMedicalOnlineFormBean mgrMedicalOnlineFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertMGRStudentDetails(" + mgrMedicalOnlineFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_MGRStudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");	        	
			callableStatement.setString(1, mgrMedicalOnlineFormBean.getStdName());
			callableStatement.setString(2, mgrMedicalOnlineFormBean.getStdMobile());
			callableStatement.setString(3, mgrMedicalOnlineFormBean.getStdEmailId());
			callableStatement.setString(4, mgrMedicalOnlineFormBean.getStdAddress());	           
			callableStatement.setString(5, mgrMedicalOnlineFormBean.getStdRegistrationNo());
			callableStatement.setString(6, mgrMedicalOnlineFormBean.getStdInstName());
			callableStatement.setString(7, mgrMedicalOnlineFormBean.getTotalAmount());
			callableStatement.setString(8, mgrMedicalOnlineFormBean.getCardHolderName());
			callableStatement.setString(9, mgrMedicalOnlineFormBean.getPincode());
			callableStatement.setString(10, mgrMedicalOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(11, instituteId);


			callableStatement.registerOutParameter(12, Types.VARCHAR);
			callableStatement.registerOutParameter(13, Types.VARCHAR);
			callableStatement.registerOutParameter(14, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(14); 
			mgrMedicalOnlineFormBean.setStudentRegistrationId(callableStatement.getString(13));
			mgrMedicalOnlineFormBean.setApplicationNo(callableStatement.getString(12));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertMGRStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertMGRStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertMGRStudentDetails(" + mgrMedicalOnlineFormBean + ") - END");
		return responseString;
	}
	public String insertFeeHeadDetails(FeeHeadFormbean feeHeadFormbean,String applicationNo){
		long startTime = System.currentTimeMillis();
		logger.info("insertFeeHeadDetails(" + feeHeadFormbean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_MGR_FEEHEADMASTER(?,?,?,?,?,?)}");
			callableStatement.setString(1, feeHeadFormbean.getStdFeeName());
			callableStatement.setString(2, feeHeadFormbean.getStdtotalAmt());
			callableStatement.setString(3, feeHeadFormbean.getNumberOfCopies());
			callableStatement.setString(4, feeHeadFormbean.getEachStdAmt());
			callableStatement.setString(5, applicationNo);	            	                                  
			callableStatement.registerOutParameter(6, Types.VARCHAR);	          

			callableStatement.execute();           
			responseString = callableStatement.getString(6); 	
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertFeeHeadDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertFeeHeadDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertFeeHeadDetails(" + feeHeadFormbean + ") - END");
		return responseString;
	}
	public MGRMedicalOnlineFormBean getMGRStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getMGRStudentDetails(" + applicationNo + ") - START");
		MGRMedicalOnlineFormBean mgrMedicalOnlineFormBean = new MGRMedicalOnlineFormBean();
		try {
			callableStatement = con.prepareCall("{call PROC_GETMGRSTUDENTDETAILS(?)}");

			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery(); 						            
			while (resultSet.next()) {						            							            	
				mgrMedicalOnlineFormBean.setStdName(resultSet.getString("stdName"));
				mgrMedicalOnlineFormBean.setStdMobile(resultSet.getString("stdMobile"));            	
				mgrMedicalOnlineFormBean.setStdEmailId(resultSet.getString("stdEmailId"));
				mgrMedicalOnlineFormBean.setStdAddress(resultSet.getString("stdAddress"));
				mgrMedicalOnlineFormBean.setStdRegistrationNo(resultSet.getString("stdRegistrationNo"));
				mgrMedicalOnlineFormBean.setStdInstName(resultSet.getString("stdInstName"));
				mgrMedicalOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));					      
				mgrMedicalOnlineFormBean.setCardHolderName(resultSet.getString("cardHolderName"));
				mgrMedicalOnlineFormBean.setPincode(resultSet.getString("pincode"));
				mgrMedicalOnlineFormBean.setPgTxnID(resultSet.getString("PGTxnID"));
				mgrMedicalOnlineFormBean.setApplicationNo(applicationNo);						            	
			}
		} catch (Exception e) {
			logger.error("Exception inside catch getMGRStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getMGRStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getMGRStudentDetails(" + applicationNo + ") - END");
		return mgrMedicalOnlineFormBean;
	}
	public List getFeeHeadDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getFeeHeadDetails(" + applicationNo + ") - START");
		List<FeeHeadFormbean> list = null;				
		try {
			callableStatement = con.prepareCall("{call PROC_GETMGRFEEHEADDETAILS(?)}");

			callableStatement.setString(1, applicationNo);						 
			resultSet = callableStatement.executeQuery(); 
			list = new ArrayList<FeeHeadFormbean>();
			while (resultSet.next()) {
				FeeHeadFormbean feeHeadFormbean = new FeeHeadFormbean();
				feeHeadFormbean.setStdFeeName(resultSet.getString("stdFeeName"));
				feeHeadFormbean.setStdtotalAmt(resultSet.getString("stdtotalAmt"));
				feeHeadFormbean.setNumberOfCopies(resultSet.getString("numberOfCopies"));
				feeHeadFormbean.setEachStdAmt(resultSet.getString("eachStdAmt"));
				list.add(feeHeadFormbean);
			}
		} catch (Exception e) {
			logger.error("Exception inside catch getFeeHeadDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getFeeHeadDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getFeeHeadDetails(" + applicationNo + ") - END");
		return list;
	}
	@Override
	public String insertSCIStudentDetails(SCIOnlineFormBean sciOnlineFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertSCIStudentDetails(" + sciOnlineFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_SCIStudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");	        	
			callableStatement.setString(1, sciOnlineFormBean.getPartcptName());
			callableStatement.setString(2, sciOnlineFormBean.getPartcptRank());
			callableStatement.setString(3, sciOnlineFormBean.getPartcptCompanyName());
			callableStatement.setString(4, sciOnlineFormBean.getPartcptDOB());	           
			callableStatement.setString(5, sciOnlineFormBean.getPartcptIndoNo());
			callableStatement.setString(6, sciOnlineFormBean.getPartcptPCNo());
			callableStatement.setString(7, sciOnlineFormBean.getPartcptCDCNo());
			callableStatement.setString(8, sciOnlineFormBean.getPartcptPassportNo());
			callableStatement.setString(9, sciOnlineFormBean.getPartcptAddress());
			callableStatement.setString(10, sciOnlineFormBean.getPartcptPhnNo());
			callableStatement.setString(11, sciOnlineFormBean.getPartcptEmailId());
			callableStatement.setString(12, sciOnlineFormBean.getPartcptBookBy());
			callableStatement.setString(13, sciOnlineFormBean.getMobileNo());
			callableStatement.setString(14, sciOnlineFormBean.getTotalAmount());
			callableStatement.setString(15, sciOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(16, instituteId);


			callableStatement.registerOutParameter(17, Types.VARCHAR);
			callableStatement.registerOutParameter(18, Types.VARCHAR);
			callableStatement.registerOutParameter(19, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(19); 
			sciOnlineFormBean.setStudentRegistrationId(callableStatement.getString(18));
			sciOnlineFormBean.setApplicationNo(callableStatement.getString(17));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSCIStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSCIStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertSCIStudentDetails(" + sciOnlineFormBean + ") - END");
		return responseString;
	}
	public String insertSCICourseDetails(SCICourseNameFormBean sciCourseNameFormBean,String applicationNo){
		long startTime = System.currentTimeMillis();
		logger.info("insertSCICourseDetails(" + sciCourseNameFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_SCI_COURSENAMEMASTER(?,?,?,?,?,?,?)}");
			callableStatement.setString(1, sciCourseNameFormBean.getCourseName());
			callableStatement.setString(2, sciCourseNameFormBean.getFromDate());
			callableStatement.setString(3, sciCourseNameFormBean.getToDate());
			callableStatement.setString(4, sciCourseNameFormBean.getCorseFees());
			callableStatement.setString(5, sciCourseNameFormBean.getCourseAmount());
			callableStatement.setString(6, applicationNo);	            	                                  
			callableStatement.registerOutParameter(7, Types.VARCHAR);	          

			callableStatement.execute();           
			responseString = callableStatement.getString(7); 	
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSCICourseDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSCICourseDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertSCICourseDetails(" + sciCourseNameFormBean + ") - END");
		return responseString;
	}
	public SCIOnlineFormBean getSCIStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getSCIStudentDetails(" + applicationNo + ") - START");
		SCIOnlineFormBean sciOnlineFormBean = new SCIOnlineFormBean();
		try {
			callableStatement = con.prepareCall("{call PROC_GETSCISTUDENTDETAILS(?)}");

			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery(); 						            
			while (resultSet.next()) {						            							            	
				sciOnlineFormBean.setPartcptName(resultSet.getString("partcptName"));
				sciOnlineFormBean.setPartcptRank(resultSet.getString("partcptRank"));            	
				sciOnlineFormBean.setPartcptCompanyName(resultSet.getString("partcptCompanyName"));
				sciOnlineFormBean.setPartcptDOB(resultSet.getString("partcptDOB"));
				sciOnlineFormBean.setPartcptIndoNo(resultSet.getString("partcptIndoNo"));
				sciOnlineFormBean.setPartcptPCNo(resultSet.getString("partcptPCNo"));							            	
				sciOnlineFormBean.setPartcptCDCNo(resultSet.getString("partcptCDCNo"));
				sciOnlineFormBean.setPartcptPassportNo(resultSet.getString("partcptPassportNo"));
				sciOnlineFormBean.setPartcptAddress(resultSet.getString("partcptAddress"));
				sciOnlineFormBean.setPartcptPhnNo(resultSet.getString("partcptPhnNo"));
				sciOnlineFormBean.setPartcptEmailId(resultSet.getString("partcptEmailId"));
				sciOnlineFormBean.setPartcptBookBy(resultSet.getString("partcptBookBy"));
				sciOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));;							            	
				sciOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));					      
				sciOnlineFormBean.setApplicationNo(applicationNo);						            	
			}
		} catch (Exception e) {
			logger.error("Exception inside catch getSCIStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getSCIStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getSCIStudentDetails(" + applicationNo + ") - END");
		return sciOnlineFormBean;
	}
	public List<SCICourseNameFormBean> getSCICourseDetails(String applicationNo,String tranStatus) {
		long startTime = System.currentTimeMillis();
		logger.info("getSCICourseDetails(" + applicationNo + ") - START");
		List<SCICourseNameFormBean> list = null;				
		try {
			callableStatement = con.prepareCall("{call PROC_GETSCICOURSENAMEDETAILS_test(?,?)}");

			callableStatement.setString(1, applicationNo);
			callableStatement.setString(2, tranStatus);
			resultSet = callableStatement.executeQuery(); 
			list = new ArrayList<SCICourseNameFormBean>();
			while (resultSet.next()) {
				SCICourseNameFormBean sciCourseNameFormBean = new SCICourseNameFormBean();
				sciCourseNameFormBean.setCourseName(resultSet.getString("courseName"));
				sciCourseNameFormBean.setFromDate(resultSet.getString("fromDate"));
				sciCourseNameFormBean.setToDate(resultSet.getString("toDate"));
				sciCourseNameFormBean.setCorseFees(resultSet.getString("corseFees"));
				list.add(sciCourseNameFormBean);
			}
		} catch (Exception e) {
			logger.error("Exception inside catch getSCICourseDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getSCICourseDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getSCICourseDetails(" + applicationNo + ") - END");
		return list;
	}

	@Override
	public Map<String, String> getStudIdExpDate(String uniqueIdentificationId) {
		logger.info("inside getStudIdExpDate() uniqueIdentificationId-------->>>" + uniqueIdentificationId);

		Map<String, String> map=new HashMap<String, String>();
		String sql = "select fsd.Student_Id,fsd.Pay_Expire_Date"
				+ " from FJN_Registration_Details frd,fjn_student_data fsd"
				+ " where frd.studentId=? and frd.Status_Flg='N' and "
				+ " frd.studentId=fsd.Unique_Identification and frd.branch_id=fsd.branch_id";

		PreparedStatement preparedStatement;
		try {
			preparedStatement = con.prepareStatement(sql);
			preparedStatement.setString(1, uniqueIdentificationId);
			ResultSet rs=preparedStatement.executeQuery();
			while(rs.next()){
				map.put(rs.getString("Student_Id"), rs.getString("Pay_Expire_Date"));						
			}					
		} catch (SQLException e) {
			logger.error("Exception inside catch getStudIdExpDate"+e);
		}
		logger.info("inside getStudIdExpDate() size of the map---------->>>"+map.size());
		return map;
	}

	@Override
	public String updatePayLaterDate(Map<String, String> res,String uniqueIdentificationId, String paylater,String yes) {
		long startTime = System.currentTimeMillis();
		String responseString = null;
		logger.info("inside updatePayLaterDate()");
		logger.info("PROC_UPDATE_PAY_LATER_DATE("+res+","+uniqueIdentificationId+","+paylater
				+ ","+yes+")");
		try {
			callableStatement = con.prepareCall("{call PROC_UPDATE_PAY_LATER_DATE(?,?,?,?,?)}");

			for (Map.Entry<String, String> entry : res.entrySet()) {
				callableStatement.setString(1, entry.getKey());
				callableStatement.setString(2, uniqueIdentificationId);
				callableStatement.setString(3, paylater);
				callableStatement.setString(4, yes);
				callableStatement.registerOutParameter(5, Types.VARCHAR);
				callableStatement.execute();
				responseString = callableStatement.getString(5);
			}
		}
		catch (Exception e) {
			logger.error("Exception inside catch updatePayLaterDate"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch updatePayLaterDate"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		return responseString;
	}

	@Override
	public void getCountofPayLaterDatesUpdated(StudentRegistrationFormBean studentRegistrationFormBean) {

		StudentFeesFormBean sffb;
		String idlist="";
		for(int i=0;i<studentRegistrationFormBean.getStudentFeesList().size();i++){
			sffb=(StudentFeesFormBean) studentRegistrationFormBean.getStudentFeesList().get(i);
			logger.info("student id-------->>>" + sffb.getFeePayId());
			idlist=idlist+sffb.getFeePayId()+",";
		}

		String sql1 = "select COUNT(1) as cnt from "
				+ "fjn_student_paylater_data paylater inner join fjn_student_data fsd"
				+ " on paylater.studentid=fsd.Student_Id"
				+ " where  paylater.studentid in ("+idlist.substring(0, idlist.length()-1)+") and "
				+ "fsd.Payment_Status is null";

		String sql2="select COUNT(1) as cnt from fjn_student_data fsd where"
				+ " fsd.Student_Id in ("+idlist.substring(0, idlist.length()-1)+") and "
				+ "fsd.Payment_Status ='P'";

		Statement statement = null;
		ResultSet rs = null;
		try {
			statement = con.createStatement();			
			rs=statement.executeQuery(sql2);
			int cnt=0;

			while(rs.next()){
				cnt=rs.getInt("cnt");							
			}
			if(studentRegistrationFormBean.getStudentFeesList().size()>cnt){
				rs=statement.executeQuery(sql1);
				while(rs.next()){
					cnt=rs.getInt("cnt");							
				}

				logger.info("count of pay later dates updated---------->>>"+cnt);
				if(cnt>=3)
					studentRegistrationFormBean.setPayLaterBtnFlg("D");
				else
					studentRegistrationFormBean.setPayLaterBtnFlg("Y");	
			}
			else{
				studentRegistrationFormBean.setPayLaterBtnFlg("D");
			}

		} catch (SQLException e) {
			logger.error("Exception inside catch getCountofPayLaterDatesUpdated"+e);
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (rs != null) {
					rs.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (statement != null) {
					statement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getCountofPayLaterDatesUpdated"+e);
			}
		}
	}

	@Override
	public String updateRSSTFees(String uniquiIdentificationId,String admissionType, String section) {
		long startTime = System.currentTimeMillis();
		String responseString = null;
		logger.info("inside updateRSSTFees()");
		logger.info("PROC_UPDATE_RSST_STUDENT_FEES("+uniquiIdentificationId+","+admissionType+","+section+")");
		try {
			callableStatement = con.prepareCall("{call PROC_UPDATE_RSST_STUDENT_FEES(?,?,?,?)}");

			callableStatement.setString(1, uniquiIdentificationId);
			callableStatement.setString(2, admissionType);
			callableStatement.setString(3, section);
			callableStatement.registerOutParameter(4, Types.VARCHAR);
			callableStatement.execute();
			responseString = callableStatement.getString(4);

		}
		catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("response from Database-------->>"+responseString);
		return responseString;
	}
	@Override
	public String insertPTUStudentDetails(PTUOnlineFormBean ptuOnlineFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertPTUStudentDetails(" + ptuOnlineFormBean + ") - START");
		String responseString = null;


		try {
			callableStatement = con.prepareCall("{call PROC_PTUStudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");	        	
			callableStatement.setString(1, ptuOnlineFormBean.getStdName());
			callableStatement.setString(2, ptuOnlineFormBean.getStdRollNum());
			callableStatement.setString(3, ptuOnlineFormBean.getStdStream());
			callableStatement.setString(4, ptuOnlineFormBean.getStdSession());	           
			callableStatement.setString(5, ptuOnlineFormBean.getStdYear());
			callableStatement.setString(6, ptuOnlineFormBean.getSelectInstName());
			callableStatement.setString(7, ptuOnlineFormBean.getStdFatherName());
			callableStatement.setString(8, ptuOnlineFormBean.getStdEmailId());
			callableStatement.setString(9, ptuOnlineFormBean.getStdMobile());
			callableStatement.setString(10, ptuOnlineFormBean.getStdAadharNum());
			callableStatement.setString(11, ptuOnlineFormBean.getSelectCourseName());
			callableStatement.setString(12, ptuOnlineFormBean.getTotalAmount());			            			            
			callableStatement.setString(13, ptuOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(14, instituteId);
			callableStatement.setString(15, ptuOnlineFormBean.getApplicationNo().equalsIgnoreCase("")?"0":ptuOnlineFormBean.getApplicationNo());

			callableStatement.registerOutParameter(15, Types.VARCHAR);
			callableStatement.registerOutParameter(16, Types.VARCHAR);
			callableStatement.registerOutParameter(17, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(17); 
			ptuOnlineFormBean.setStudentRegistrationId(callableStatement.getString(16));
			ptuOnlineFormBean.setApplicationNo(callableStatement.getString(15));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertPTUStudentDetails(" + ptuOnlineFormBean + ") - END");
		return responseString;
	}
	public String insertPTUFeeHeadDetails(FeeHeadFormbean feeHeadFormbean,String applicationNo){
		long startTime = System.currentTimeMillis();
		logger.info("insertPTUFeeHeadDetails(" + feeHeadFormbean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_PTU_FEEHEADMASTER(?,?,?,?,?)}");
			callableStatement.setString(1, feeHeadFormbean.getStdFeeName());
			callableStatement.setString(2, feeHeadFormbean.getStdtotalAmt());
			callableStatement.setString(3, feeHeadFormbean.getSelect());
			callableStatement.setString(4, applicationNo);	            	                                  
			callableStatement.registerOutParameter(5, Types.VARCHAR);	          

			callableStatement.execute();           
			responseString = callableStatement.getString(5); 	
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertPTUFeeHeadDetails(" + feeHeadFormbean + ") - END");
		return responseString;
	}
	public PTUOnlineFormBean getPTUStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getPTUStudentDetails(" + applicationNo + ") - START");
		PTUOnlineFormBean ptuOnlineFormBean = new PTUOnlineFormBean();
		try {
			callableStatement = con.prepareCall("{call PROC_GETPTU_STUDENTDETAILS(?)}");

			callableStatement.setString(1, applicationNo);								          


			resultSet = callableStatement.executeQuery(); 						            
			while (resultSet.next()) {						            							            	
				ptuOnlineFormBean.setStdName(resultSet.getString("stdName"));
				ptuOnlineFormBean.setStdRollNum(resultSet.getString("stdRollNum"));
				ptuOnlineFormBean.setStdStream(resultSet.getString("stdStream"));
				ptuOnlineFormBean.setStdSession(resultSet.getString("stdSession"));
				ptuOnlineFormBean.setStdYear(resultSet.getString("stdYear"));
				ptuOnlineFormBean.setSelectInstName(resultSet.getString("selectInstName"));
				ptuOnlineFormBean.setStdFatherName(resultSet.getString("stdFatherName"));
				ptuOnlineFormBean.setStdEmailId(resultSet.getString("stdEmailId"));
				ptuOnlineFormBean.setStdMobile(resultSet.getString("stdMobile"));            									            	
				ptuOnlineFormBean.setStdAadharNum(resultSet.getString("stdAadharNum"));
				ptuOnlineFormBean.setSelectCourseName(resultSet.getString("selectCourseName"));								            	
				ptuOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));					      
				ptuOnlineFormBean.setApplicationNo(applicationNo);						            	
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getPTUStudentDetails(" + applicationNo + ") - END");
		return ptuOnlineFormBean;
	}
	public List getPTUFeeHeadDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getPTUFeeHeadDetails(" + applicationNo + ") - START");
		List<FeeHeadFormbean> list = null;				
		try {
			callableStatement = con.prepareCall("{call PROC_GETPTU_FEEHEADDETAILS(?)}");

			callableStatement.setString(1, applicationNo);								            
			resultSet = callableStatement.executeQuery(); 
			list = new ArrayList<FeeHeadFormbean>();
			while (resultSet.next()) {
				FeeHeadFormbean feeHeadFormbean = new FeeHeadFormbean();
				feeHeadFormbean.setStdFeeName(resultSet.getString("stdFeeName"));
				feeHeadFormbean.setStdtotalAmt(resultSet.getString("stdtotalAmt"));
				feeHeadFormbean.setSelect(resultSet.getString("FeeTypeSelect"));
				list.add(feeHeadFormbean);
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getPTUFeeHeadDetails(" + applicationNo + ") - END");
		return list;
	}		
	public String insertAlgoStudentDetails(CandEntryForm candEntryForm,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertAlgoStudentDetails(" + candEntryForm + ") - START");
		String responseString = null;

		try {
			callableStatement = con.prepareCall("{call PROC_FJT_Algo_Registration_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1, candEntryForm.getSelectIndoNum());
			callableStatement.setString(2, candEntryForm.getIndoNum());
			callableStatement.setString(3, candEntryForm.getBookNum());
			callableStatement.setString(4, candEntryForm.getFirstName());
			callableStatement.setString(5, candEntryForm.getMiddleName());
			callableStatement.setString(6, candEntryForm.getLastName());	           
			callableStatement.setString(7, candEntryForm.getRank());
			callableStatement.setString(8, candEntryForm.getCompanyName());
			callableStatement.setString(9, candEntryForm.getCountryCode());
			callableStatement.setString(10, candEntryForm.getMobileNo());
			callableStatement.setString(11, candEntryForm.getEmailId());
			callableStatement.setString(12, candEntryForm.getSelectCourseType());
			callableStatement.setString(13, candEntryForm.getSelectDGCourseNameaemd());
			callableStatement.setString(14, candEntryForm.getSelectDGCourseIdaemd());
			callableStatement.setString(15, candEntryForm.getSelectNonDGCourseNameaemd());
			callableStatement.setString(16, candEntryForm.getSelectNonDGCourseIdaemd());
			callableStatement.setString(17, candEntryForm.getSelectCourseTypeMumbai());	           
			callableStatement.setString(18, candEntryForm.getSelectDGCourseNameMumbai());
			callableStatement.setString(19, candEntryForm.getSelectDGCourseIdMumbaiaemm());
			callableStatement.setString(20, candEntryForm.getSelectNonDGCourseNameMumbaiaemm());
			callableStatement.setString(21, candEntryForm.getSelectNonDGCourseIdMumbaiaemm());
			callableStatement.setString(22, candEntryForm.getSelectCourseNameAbleaeam());
			callableStatement.setString(23, candEntryForm.getSelectCourseIdAble());
			callableStatement.setString(24, candEntryForm.getFromDate());
			callableStatement.setString(25, candEntryForm.getToDate());            
			callableStatement.setString(26, candEntryForm.getSelectCourseLocation());
			callableStatement.setString(27, candEntryForm.getAmount());
			callableStatement.setString(28, candEntryForm.getCourseFeesAmt());
			callableStatement.setString(29, candEntryForm.getServiceTaxAmt());
			callableStatement.setString(30, candEntryForm.getSBCAmt());
			callableStatement.setString(31, candEntryForm.getKKCAmt());




			callableStatement.setString(32, candEntryForm.getSgstTaxAmt());
			callableStatement.setString(33, candEntryForm.getCgstTaxAmt());


			callableStatement.setString(34, candEntryForm.getNationalID());
			callableStatement.setString(35, candEntryForm.getRegisteredUserId());
			callableStatement.setString(36, instituteId);
			callableStatement.setString(37, candEntryForm.getBomId());

			callableStatement.registerOutParameter(38, Types.VARCHAR);
			callableStatement.registerOutParameter(39, Types.VARCHAR);
			callableStatement.registerOutParameter(40, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(40); 
			candEntryForm.setStudentRegistrationId(callableStatement.getString(39));
			candEntryForm.setApplicationNo(callableStatement.getString(38));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {

			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertAlgoStudentDetails(" + candEntryForm + ") - END");
		return responseString;
	}
	public CandEntryForm getAngloSchoolDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getAngloSchoolDetails(" + applicationNo + ") - START");  
		CandEntryForm candEntryForm = new CandEntryForm();
		try {
			callableStatement = con.prepareCall("{call PROC_ANGLO_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {					            	
				candEntryForm.setSelectIndoNum(resultSet.getString("selectIndoNum"));
				candEntryForm.setIndoNum(resultSet.getString("indoNum"));            	
				candEntryForm.setBookNum(resultSet.getString("bookNum"));
				candEntryForm.setFirstName(resultSet.getString("firstName"));
				candEntryForm.setMiddleName(resultSet.getString("middleName"));
				candEntryForm.setLastName(resultSet.getString("lastName"));

				candEntryForm.setRank(resultSet.getString("rank"));	
				candEntryForm.setCompanyName(resultSet.getString("companyName"));	
				candEntryForm.setCountryCode(resultSet.getString("countryCode"));	
				candEntryForm.setMobileNo(resultSet.getString("mobileNo"));	
				candEntryForm.setEmailId(resultSet.getString("emailId"));	
				candEntryForm.setSelectCourseType(resultSet.getString("selectCourseType"));	
				candEntryForm.setSelectDGCourseNameaemd(resultSet.getString("SelectDGCourseName"));	
				candEntryForm.setSelectDGCourseIdaemd(resultSet.getString("selectDGCourseId"));	
				candEntryForm.setSelectNonDGCourseNameaemd(resultSet.getString("SelectNonDGCourseName"));	
				candEntryForm.setSelectNonDGCourseIdaemd(resultSet.getString("selectNonDGCourseId"));	
				candEntryForm.setSelectCourseTypeMumbai(resultSet.getString("selectCourseTypeMumbai"));	
				candEntryForm.setSelectDGCourseNameMumbai(resultSet.getString("SelectDGCourseNameMumbai"));	
				candEntryForm.setSelectDGCourseIdMumbaiaemm(resultSet.getString("selectDGCourseIdMumbai"));	
				candEntryForm.setSelectNonDGCourseNameMumbaiaemm(resultSet.getString("SelectNonDGCourseNameMumbai"));	
				candEntryForm.setSelectNonDGCourseIdMumbaiaemm(resultSet.getString("selectNonDGCourseIdMumbai"));	
				candEntryForm.setSelectCourseNameAbleaeam(resultSet.getString("selectCourseNameAble"));	
				candEntryForm.setSelectCourseIdAble(resultSet.getString("selectCourseIdAble"));	
				candEntryForm.setFromDate(resultSet.getString("fromDate"));	
				candEntryForm.setToDate(resultSet.getString("toDate"));	
				candEntryForm.setSelectCourseLocation(resultSet.getString("selectCourseLocation"));	
				candEntryForm.setAmount(resultSet.getString("Amount"));
				candEntryForm.setCourseFeesAmt(resultSet.getString("courseFeesAmt"));	
				candEntryForm.setServiceTaxAmt(resultSet.getString("serviceTaxAmt"));
				candEntryForm.setSBCAmt(resultSet.getString("SBCAmt"));
				candEntryForm.setKKCAmt(resultSet.getString("KKCAmt"));
				candEntryForm.setCgstTaxAmt(resultSet.getString("cgstTaxAmt"));
				candEntryForm.setSgstTaxAmt(resultSet.getString("sgstTaxAmt"));

				candEntryForm.setNationalID(resultSet.getString("passport_NationalID"));
				candEntryForm.setApplicationNo(applicationNo);

				candEntryForm.setBomId(resultSet.getString("bomId"));
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getNIPRSchoolDetails(" + candEntryForm + ") - END");
		return candEntryForm;
	}
	@Override
	public String insertUGIStudentDetails(UGIOnlineFormBean ugiOnlineFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertUGIStudentDetails(" + ugiOnlineFormBean + ") - START");
		String responseString = null;


		try {
			callableStatement = con.prepareCall("{call PROC_FJT_UGI_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");	        	
			//callableStatement.setString(1, ugiOnlineFormBean.getCollege());
			callableStatement.setString(1, ugiOnlineFormBean.getStudentId());
			callableStatement.setString(2, ugiOnlineFormBean.getStudentName());
			callableStatement.setString(3, ugiOnlineFormBean.getCourse());	           
			callableStatement.setString(4, ugiOnlineFormBean.getNumofYears());
			callableStatement.setString(5, ugiOnlineFormBean.getYears());	       	        
			callableStatement.setString(6, ugiOnlineFormBean.getChkTutionFee()== null ? "N":ugiOnlineFormBean.getChkTutionFee());
			callableStatement.setString(7, ugiOnlineFormBean.getTutionFee());
			callableStatement.setString(8, ugiOnlineFormBean.getChkBusFee() == null ? "N":ugiOnlineFormBean.getChkBusFee());
			callableStatement.setString(9, ugiOnlineFormBean.getBusFee());
			callableStatement.setString(10, ugiOnlineFormBean.getChkHostelFee() == null ? "N":ugiOnlineFormBean.getChkHostelFee());
			callableStatement.setString(11, ugiOnlineFormBean.getHostelFee());
			callableStatement.setString(12, ugiOnlineFormBean.getChkCautionMoney() == null ? "N":ugiOnlineFormBean.getChkCautionMoney());
			callableStatement.setString(13, ugiOnlineFormBean.getCautionMoney());
			callableStatement.setString(14, ugiOnlineFormBean.getChkOthersFees() == null ? "N":ugiOnlineFormBean.getChkOthersFees());
			callableStatement.setString(15, ugiOnlineFormBean.getOthersFees());
			callableStatement.setString(16, ugiOnlineFormBean.getPlsSpecify());
			callableStatement.setString(17, ugiOnlineFormBean.getTotalAmount());
			callableStatement.setString(18, ugiOnlineFormBean.getTotalAmountinWords());
			callableStatement.setString(19, ugiOnlineFormBean.getEmailId());
			callableStatement.setString(20, ugiOnlineFormBean.getStdMobileNo());
			callableStatement.setString(21, ugiOnlineFormBean.getSelectBranch() == null ? "0":ugiOnlineFormBean.getSelectBranch());

			callableStatement.setString(22, ugiOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(23, instituteId);	        

			callableStatement.registerOutParameter(24, Types.VARCHAR);
			callableStatement.registerOutParameter(25, Types.VARCHAR);
			callableStatement.registerOutParameter(26, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(26); 
			ugiOnlineFormBean.setStudentRegistrationId(callableStatement.getString(25));
			ugiOnlineFormBean.setApplicationNo(callableStatement.getString(24));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertUGIStudentDetails(" + ugiOnlineFormBean + ") - END");
		return responseString;
	}
	public UGIOnlineFormBean getUGIStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getUGIStudentDetails(" + applicationNo + ") - START");
		UGIOnlineFormBean ugiOnlineFormBean = new UGIOnlineFormBean();
		try {
			callableStatement = con.prepareCall("{call PROC_GETUGI_STUDENTDETAILS(?)}");

			callableStatement.setString(1, applicationNo);								          


			resultSet = callableStatement.executeQuery(); 						            
			while (resultSet.next()) {						            							            	
				//ugiOnlineFormBean.setCollege(resultSet.getString("college"));
				ugiOnlineFormBean.setStudentId(resultSet.getString("studentId"));
				ugiOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				ugiOnlineFormBean.setCourse(resultSet.getString("course"));
				ugiOnlineFormBean.setNumofYears(resultSet.getString("numofYears"));
				ugiOnlineFormBean.setYears(resultSet.getString("years"));			            				            				            			
				ugiOnlineFormBean.setChkTutionFee(resultSet.getString("chkTutionFee"));
				ugiOnlineFormBean.setTutionFee(resultSet.getString("tutionFee"));
				ugiOnlineFormBean.setChkBusFee(resultSet.getString("chkBusFee"));            									            	
				ugiOnlineFormBean.setBusFee(resultSet.getString("busFee"));
				ugiOnlineFormBean.setChkHostelFee(resultSet.getString("chkHostelFee"));
				ugiOnlineFormBean.setHostelFee(resultSet.getString("hostelFee"));			            	
				ugiOnlineFormBean.setChkCautionMoney(resultSet.getString("chkCautionMoney"));
				ugiOnlineFormBean.setCautionMoney(resultSet.getString("cautionMoney"));
				ugiOnlineFormBean.setChkOthersFees(resultSet.getString("chkOthersFees"));
				ugiOnlineFormBean.setOthersFees(resultSet.getString("othersFees"));			            	
				ugiOnlineFormBean.setPlsSpecify(resultSet.getString("plsSpecify"));
				ugiOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));
				ugiOnlineFormBean.setTotalAmountinWords(resultSet.getString("totalAmountinWords"));
				ugiOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				ugiOnlineFormBean.setStdMobileNo(resultSet.getString("mobileNo"));
				ugiOnlineFormBean.setSelectBranch(resultSet.getString("selectBranch"));
				ugiOnlineFormBean.setApplicationNo(applicationNo);						            	
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getUGIStudentDetails(" + applicationNo + ") - END");
		return ugiOnlineFormBean;
	}
	@Override
	public String insertPMHPStudentDetails(UGIOnlineFormBean ugiOnlineFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertPMHPStudentDetails(" + ugiOnlineFormBean + ") - START");
		String responseString = null;


		try {
			callableStatement = con.prepareCall("{call PROC_FJT_PMHP_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");	        	
			callableStatement.setString(1, ugiOnlineFormBean.getCollege());
			callableStatement.setString(2, ugiOnlineFormBean.getStudentId());
			callableStatement.setString(3, ugiOnlineFormBean.getStudentName());
			callableStatement.setString(4, ugiOnlineFormBean.getCourse());	           
			callableStatement.setString(5, ugiOnlineFormBean.getNumofYears());
			callableStatement.setString(6, ugiOnlineFormBean.getYears());	       	        
			callableStatement.setString(7, ugiOnlineFormBean.getChkTutionFee()== null ? "N":ugiOnlineFormBean.getChkTutionFee());
			callableStatement.setString(8, ugiOnlineFormBean.getAdmissionFee());
			callableStatement.setString(9, ugiOnlineFormBean.getChkBusFee() == null ? "N":ugiOnlineFormBean.getChkBusFee());
			callableStatement.setString(10, ugiOnlineFormBean.getExamFee());
			callableStatement.setString(11, ugiOnlineFormBean.getChkHostelFee() == null ? "N":ugiOnlineFormBean.getChkHostelFee());
			callableStatement.setString(12, ugiOnlineFormBean.getPractFee());

			callableStatement.setString(13, ugiOnlineFormBean.getTotalAmount());
			callableStatement.setString(14, ugiOnlineFormBean.getTotalAmountinWords());
			callableStatement.setString(15, ugiOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(16, instituteId);	        

			callableStatement.registerOutParameter(17, Types.VARCHAR);
			callableStatement.registerOutParameter(18, Types.VARCHAR);
			callableStatement.registerOutParameter(19, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(19); 
			ugiOnlineFormBean.setStudentRegistrationId(callableStatement.getString(18));
			ugiOnlineFormBean.setApplicationNo(callableStatement.getString(17));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertPMHPStudentDetails(" + ugiOnlineFormBean + ") - END");
		return responseString;
	}
	public UGIOnlineFormBean getPMHPStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getPMHPStudentDetails(" + applicationNo + ") - START");
		UGIOnlineFormBean ugiOnlineFormBean = new UGIOnlineFormBean();
		try {
			callableStatement = con.prepareCall("{call PROC_GETPMHP_STUDENTDETAILS(?)}");

			callableStatement.setString(1, applicationNo);								          


			resultSet = callableStatement.executeQuery(); 						            
			while (resultSet.next()) {						            							            	
				ugiOnlineFormBean.setCollege(resultSet.getString("college"));
				ugiOnlineFormBean.setStudentId(resultSet.getString("studentId"));
				ugiOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				ugiOnlineFormBean.setCourse(resultSet.getString("course"));
				ugiOnlineFormBean.setNumofYears(resultSet.getString("numofYears"));
				ugiOnlineFormBean.setYears(resultSet.getString("years"));			            				            				            			
				ugiOnlineFormBean.setChkTutionFee(resultSet.getString("chkAdmissionFee"));
				ugiOnlineFormBean.setAdmissionFee(resultSet.getString("admissionFee"));
				ugiOnlineFormBean.setChkBusFee(resultSet.getString("chkExamFee"));            									            	
				ugiOnlineFormBean.setExamFee(resultSet.getString("examFee"));
				ugiOnlineFormBean.setChkHostelFee(resultSet.getString("chkPractFee"));
				ugiOnlineFormBean.setPractFee(resultSet.getString("practFee"));			            	
				ugiOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));
				ugiOnlineFormBean.setTotalAmountinWords(resultSet.getString("totalAmountinWords"));
				ugiOnlineFormBean.setApplicationNo(applicationNo);						            	
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getPMHPStudentDetails(" + applicationNo + ") - END");
		return ugiOnlineFormBean;
	}
	@Override
	public String insertDPSSKSStudentDetails(DPSSKSOnlineFormBean dpssksOnlineFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertDPSSKSStudentDetails(" + dpssksOnlineFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_DPSSKSStudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");	        	
			callableStatement.setString(1, dpssksOnlineFormBean.getFeeAmount());
			callableStatement.setString(2, dpssksOnlineFormBean.getStdName());
			callableStatement.setString(3, dpssksOnlineFormBean.getSelectGender());
			callableStatement.setString(4, dpssksOnlineFormBean.getDob());	           
			callableStatement.setString(5, dpssksOnlineFormBean.getSelectClass());
			callableStatement.setString(6, dpssksOnlineFormBean.getStdSchoolName());
			callableStatement.setString(7, dpssksOnlineFormBean.getSelectHostel());
			callableStatement.setString(8, dpssksOnlineFormBean.getSelectBloodgroup());
			callableStatement.setString(9, dpssksOnlineFormBean.getSelectCategory());
			callableStatement.setString(10, dpssksOnlineFormBean.getSelectNationality());
			callableStatement.setString(11, dpssksOnlineFormBean.getOtherNationality());
			callableStatement.setString(12, dpssksOnlineFormBean.getMotherTounge());
			callableStatement.setString(13, dpssksOnlineFormBean.getSelectTransport());
			callableStatement.setString(14, dpssksOnlineFormBean.getAddTransportLocation());
			callableStatement.setString(15, dpssksOnlineFormBean.getSelectsiblingStudy());
			callableStatement.setString(16, dpssksOnlineFormBean.getFatherName());
			callableStatement.setString(17, dpssksOnlineFormBean.getFatherQualification());
			callableStatement.setString(18, dpssksOnlineFormBean.getFatherOccupation());
			callableStatement.setString(19, dpssksOnlineFormBean.getFatherOfficeAddress());
			callableStatement.setString(20, dpssksOnlineFormBean.getFatherMobileNo());
			callableStatement.setString(21, dpssksOnlineFormBean.getFatherEmailId());
			callableStatement.setString(22, dpssksOnlineFormBean.getFatherIncome());
			callableStatement.setString(23, dpssksOnlineFormBean.getMotherName());
			callableStatement.setString(24, dpssksOnlineFormBean.getMotherQualification());
			callableStatement.setString(25, dpssksOnlineFormBean.getMotherOccupation());
			callableStatement.setString(26, dpssksOnlineFormBean.getMotherOfficeAddress());
			callableStatement.setString(27, dpssksOnlineFormBean.getMotherMobileNo());
			callableStatement.setString(28, dpssksOnlineFormBean.getMotherEmailId());
			callableStatement.setString(29, dpssksOnlineFormBean.getPermanentAddress());
			callableStatement.setString(30, dpssksOnlineFormBean.getPermanentPincode());
			callableStatement.setString(31, dpssksOnlineFormBean.getCorrespondenceAddress());
			callableStatement.setString(32, dpssksOnlineFormBean.getCorrespondencePincode());
			callableStatement.setString(33, dpssksOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(34, dpssksOnlineFormBean.getReligion());
			callableStatement.setString(35, instituteId);   

			// callableStatement.setString(35, dpssksOnlineFormBean.getApplicationNo().equalsIgnoreCase("")?"0":dpssksOnlineFormBean.getApplicationNo());

			callableStatement.registerOutParameter(36, Types.VARCHAR);
			callableStatement.registerOutParameter(37, Types.VARCHAR);
			callableStatement.registerOutParameter(38, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(38); 
			dpssksOnlineFormBean.setStudentRegistrationId(callableStatement.getString(37));
			dpssksOnlineFormBean.setApplicationNo(callableStatement.getString(36));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertDPSSKSStudentDetails(" + dpssksOnlineFormBean + ") - END");
		return responseString;
	}
	public String insertDPSSKSClassDetails(DPSSKSDetailsFormBean dpssksDetailsFormBean,String applicationNo){
		long startTime = System.currentTimeMillis();
		logger.info("insertDPSSKSClassDetails(" + dpssksDetailsFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_DPSSKSClassDetails(?,?,?,?,?,?)}");
			callableStatement.setString(1, dpssksDetailsFormBean.getAdminNo());
			callableStatement.setString(2, dpssksDetailsFormBean.getName());
			callableStatement.setString(3, dpssksDetailsFormBean.getYear());
			callableStatement.setString(4, dpssksDetailsFormBean.getClassName());
			callableStatement.setString(5, applicationNo);	            	                                  
			callableStatement.registerOutParameter(6, Types.VARCHAR);	          

			callableStatement.execute();           
			responseString = callableStatement.getString(6); 	
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertDPSSKSClassDetails(" + dpssksDetailsFormBean + ") - END");
		return responseString;
	}
	public DPSSKSOnlineFormBean getDPSSKSStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getDPSSKSStudentDetails(" + applicationNo + ") - START");
		DPSSKSOnlineFormBean dpssksOnlineFormBean = new DPSSKSOnlineFormBean();
		try {
			callableStatement = con.prepareCall("{call PROC_GETDPSSKS_STUDENTDETAILS(?)}");

			callableStatement.setString(1, applicationNo);								          


			resultSet = callableStatement.executeQuery(); 						            
			while (resultSet.next()) {
				dpssksOnlineFormBean.setFeeAmount(resultSet.getString("feeAmount"));
				dpssksOnlineFormBean.setStdName(resultSet.getString("stdName"));
				dpssksOnlineFormBean.setSelectGender(resultSet.getString("selectGender"));
				dpssksOnlineFormBean.setDob(resultSet.getString("dob"));
				dpssksOnlineFormBean.setSelectClass(resultSet.getString("selectClass"));
				dpssksOnlineFormBean.setStdSchoolName(resultSet.getString("stdSchoolName"));
				dpssksOnlineFormBean.setSelectHostel(resultSet.getString("selectHostel"));
				dpssksOnlineFormBean.setSelectBloodgroup(resultSet.getString("selectBloodgroup"));
				dpssksOnlineFormBean.setSelectCategory(resultSet.getString("selectCategory"));
				dpssksOnlineFormBean.setSelectNationality(resultSet.getString("selectNationality"));            									            	
				dpssksOnlineFormBean.setOtherNationality(resultSet.getString("otherNationality"));
				dpssksOnlineFormBean.setReligion(resultSet.getString("religion"));
				dpssksOnlineFormBean.setMotherTounge(resultSet.getString("motherTounge"));								            	
				dpssksOnlineFormBean.setSelectTransport(resultSet.getString("selectTransport"));
				dpssksOnlineFormBean.setAddTransportLocation(resultSet.getString("addTransportLocation"));
				dpssksOnlineFormBean.setSelectsiblingStudy(resultSet.getString("selectsiblingStudy"));
				dpssksOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				dpssksOnlineFormBean.setFatherQualification(resultSet.getString("fatherQualification"));
				dpssksOnlineFormBean.setFatherOccupation(resultSet.getString("fatherOccupation"));
				dpssksOnlineFormBean.setFatherOfficeAddress(resultSet.getString("fatherOfficeAddress"));
				dpssksOnlineFormBean.setFatherMobileNo(resultSet.getString("fatherMobileNo"));
				dpssksOnlineFormBean.setFatherEmailId(resultSet.getString("fatherEmailId"));
				dpssksOnlineFormBean.setFatherIncome(resultSet.getString("fatherIncome"));
				dpssksOnlineFormBean.setMotherName(resultSet.getString("motherName"));
				dpssksOnlineFormBean.setMotherQualification(resultSet.getString("motherQualification"));
				dpssksOnlineFormBean.setMotherOccupation(resultSet.getString("motherOccupation"));
				dpssksOnlineFormBean.setMotherOfficeAddress(resultSet.getString("motherOfficeAddress"));
				dpssksOnlineFormBean.setMotherMobileNo(resultSet.getString("motherMobileNo"));
				dpssksOnlineFormBean.setMotherEmailId(resultSet.getString("motherEmailId"));
				dpssksOnlineFormBean.setPermanentAddress(resultSet.getString("permanentAddress"));
				dpssksOnlineFormBean.setPermanentPincode(resultSet.getString("permanentPincode"));
				dpssksOnlineFormBean.setCorrespondenceAddress(resultSet.getString("correspondenceAddress"));
				dpssksOnlineFormBean.setCorrespondencePincode(resultSet.getString("correspondencePincode"));
				dpssksOnlineFormBean.setApplicationNo(applicationNo);						            	
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getDPSSKSStudentDetails(" + applicationNo + ") - END");
		return dpssksOnlineFormBean;
	}
	public List getDPSSKS_ClassDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getGETDPSSKS_ClassDetails(" + applicationNo + ") - START");
		List<DPSSKSDetailsFormBean> list = null;				
		try {
			callableStatement = con.prepareCall("{call PROC_GETDPSSKS_CLASSMASTERDETAILS(?)}");

			callableStatement.setString(1, applicationNo);								            
			resultSet = callableStatement.executeQuery(); 
			list = new ArrayList<DPSSKSDetailsFormBean>();
			while (resultSet.next()) {
				DPSSKSDetailsFormBean dpssksDetailsFormBean = new DPSSKSDetailsFormBean();
				dpssksDetailsFormBean.setAdminNo(resultSet.getString("adminNo"));
				dpssksDetailsFormBean.setYear(resultSet.getString("admyear"));
				dpssksDetailsFormBean.setName(resultSet.getString("name"));
				dpssksDetailsFormBean.setClassName(resultSet.getString("className"));
				list.add(dpssksDetailsFormBean);
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getGETDPSSKS_ClassDetails(" + applicationNo + ") - END");
		return list;
	}
	@Override
	public String insertDOONStudentDetails(DOONOnlineFormBean doonOnlineFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertDOONStudentDetails(" + doonOnlineFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_DOON_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			//callableStatement.setString(1, niprOnlineFormBean.getFormId());
			callableStatement.setString(1, doonOnlineFormBean.getFullName());
			callableStatement.setString(2, doonOnlineFormBean.getAddress());
			callableStatement.setString(3, doonOnlineFormBean.getCountry());
			callableStatement.setString(4, doonOnlineFormBean.getState());	           
			callableStatement.setString(5, doonOnlineFormBean.getCity());
			callableStatement.setString(6, doonOnlineFormBean.getPostalCode());
			callableStatement.setString(7, doonOnlineFormBean.getMobileNo());
			callableStatement.setString(8, doonOnlineFormBean.getPhoneNo());
			callableStatement.setString(9, doonOnlineFormBean.getEmailId());
			callableStatement.setString(10, doonOnlineFormBean.getPanNo());
			callableStatement.setString(11, doonOnlineFormBean.getFundType());
			callableStatement.setString(12, doonOnlineFormBean.getHouse());
			callableStatement.setString(13, doonOnlineFormBean.getClass1());
			callableStatement.setString(14, doonOnlineFormBean.getSchoolno());

			callableStatement.setString(15, doonOnlineFormBean.getDonateAmount());
			callableStatement.setString(16, doonOnlineFormBean.getCollege());
			callableStatement.setString(17, doonOnlineFormBean.getCountryCode());
			callableStatement.setString(18, doonOnlineFormBean.getRemark());
			callableStatement.setString(19, doonOnlineFormBean.getClassyear());
			callableStatement.setString(20, doonOnlineFormBean.getNationality());
			callableStatement.setString(21, doonOnlineFormBean.getCurrency());
			callableStatement.setString(22, doonOnlineFormBean.getCurrencyText());

			callableStatement.setString(23, doonOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(24, instituteId);
			callableStatement.setString(25,doonOnlineFormBean.getStudentId());
			callableStatement.setString(26, doonOnlineFormBean.getStudentName());



			callableStatement.registerOutParameter(27, Types.VARCHAR);
			callableStatement.registerOutParameter(28, Types.VARCHAR);
			callableStatement.registerOutParameter(29, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(29); 
			doonOnlineFormBean.setStudentRegistrationId(callableStatement.getString(28));
			doonOnlineFormBean.setApplicationNo(callableStatement.getString(27));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertDOONStudentDetails(" + doonOnlineFormBean + ") - END");
		return responseString;
	}
	public DOONOnlineFormBean getDOONStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getDOONStudentDetails(" + applicationNo + ") - START");  
		DOONOnlineFormBean doonOnlineFormBean = new DOONOnlineFormBean();
		try {
			callableStatement = con.prepareCall("{call PROC_GETDOONSTUDENTDETAILS(?)}");

			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {					            	
				doonOnlineFormBean.setFullName(resultSet.getString("fullName"));
				doonOnlineFormBean.setAddress(resultSet.getString("address"));            	
				doonOnlineFormBean.setCountry(resultSet.getString("country"));
				doonOnlineFormBean.setState(resultSet.getString("state"));
				doonOnlineFormBean.setCity(resultSet.getString("city"));
				doonOnlineFormBean.setPostalCode(resultSet.getString("postalCode"));
				doonOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));						            	
				doonOnlineFormBean.setPhoneNo(resultSet.getString("phoneNo"));
				doonOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				doonOnlineFormBean.setPanNo(resultSet.getString("panNo"));
				doonOnlineFormBean.setFundType(resultSet.getString("fundType"));
				doonOnlineFormBean.setClass1(resultSet.getString("class"));
				doonOnlineFormBean.setSchoolno(resultSet.getString("school_no"));
				doonOnlineFormBean.setHouse(resultSet.getString("house"));
				doonOnlineFormBean.setDonateAmount(resultSet.getString("donateAmount"));
				doonOnlineFormBean.setCollege(resultSet.getString("college"));
				doonOnlineFormBean.setCountryCode(resultSet.getString("countryCode"));
				doonOnlineFormBean.setRemark(resultSet.getString("Remark"));
				doonOnlineFormBean.setClassyear(resultSet.getString("classyear"));
				doonOnlineFormBean.setNationality(resultSet.getString("nationality"));
				doonOnlineFormBean.setCurrencyText(resultSet.getString("currencyText"));	
				doonOnlineFormBean.setStudentId(resultSet.getString("studentId"));
				doonOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				doonOnlineFormBean.setApplicationNo(applicationNo);
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getDOONStudentDetails(" + doonOnlineFormBean + ") - END");
		return doonOnlineFormBean;
	}
	@Override
	public String insertJRSTStudentDetails(JRSTOnlineFormBean jrstOnlineFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertJRSTStudentDetails(" + jrstOnlineFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_JRST_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			//callableStatement.setString(1, niprOnlineFormBean.getFormId());
			callableStatement.setString(1, jrstOnlineFormBean.getStdName());
			callableStatement.setString(2, jrstOnlineFormBean.getStdId());
			callableStatement.setString(3, jrstOnlineFormBean.getStdMobileNo());
			callableStatement.setString(4, jrstOnlineFormBean.getEmailId());	           
			callableStatement.setString(5, jrstOnlineFormBean.getCourse());
			callableStatement.setString(6, jrstOnlineFormBean.getBatch());
			callableStatement.setString(7, jrstOnlineFormBean.getRemarks());
			callableStatement.setString(8, jrstOnlineFormBean.getTotalAmount());
			callableStatement.setString(9, jrstOnlineFormBean.getServiceTaxAmt());
			callableStatement.setString(10, jrstOnlineFormBean.getAmount());
			callableStatement.setString(11, jrstOnlineFormBean.getSelectFeesType());

			callableStatement.setString(12, jrstOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(13, instituteId);


			callableStatement.registerOutParameter(14, Types.VARCHAR);
			callableStatement.registerOutParameter(15, Types.VARCHAR);
			callableStatement.registerOutParameter(16, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(16); 
			jrstOnlineFormBean.setStudentRegistrationId(callableStatement.getString(15));
			jrstOnlineFormBean.setApplicationNo(callableStatement.getString(14));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertJRSTStudentDetails(" + jrstOnlineFormBean + ") - END");
		return responseString;
	}
	public JRSTOnlineFormBean getJRSTStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getJRSTStudentDetails(" + applicationNo + ") - START");  
		JRSTOnlineFormBean jrstOnlineFormBean = new JRSTOnlineFormBean();
		try {
			callableStatement = con.prepareCall("{call PROC_GETJRSTSTUDENTDETAILS(?)}");

			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {					            	
				jrstOnlineFormBean.setStdName(resultSet.getString("stdName"));
				jrstOnlineFormBean.setStdId(resultSet.getString("stdId"));            	
				jrstOnlineFormBean.setStdMobileNo(resultSet.getString("stdMobileNo"));
				jrstOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				jrstOnlineFormBean.setCourse(resultSet.getString("course"));
				jrstOnlineFormBean.setBatch(resultSet.getString("batch"));
				jrstOnlineFormBean.setRemarks(resultSet.getString("remarks"));						            	
				jrstOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));
				jrstOnlineFormBean.setServiceTaxAmt(resultSet.getString("serviceTaxAmt"));
				jrstOnlineFormBean.setAmount(resultSet.getString("amount"));
				jrstOnlineFormBean.setApplicationNo(applicationNo);
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getJRSTStudentDetails(" + jrstOnlineFormBean + ") - END");
		return jrstOnlineFormBean;
	}
	@Override
	public String insertMGCStudentDetails(MGCOnlineFormBean mgcOnlineFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertMGCStudentDetails(" + mgcOnlineFormBean + ") - START");
		String responseString = null;


		try {
			callableStatement = con.prepareCall("{call PROC_FJT_MGC_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");	        					        
			callableStatement.setString(1, mgcOnlineFormBean.getStudentId());
			callableStatement.setString(2, mgcOnlineFormBean.getStudentName());
			callableStatement.setString(3, mgcOnlineFormBean.getFatherName());	           
			callableStatement.setString(4, mgcOnlineFormBean.getCourse());
			callableStatement.setString(5, mgcOnlineFormBean.getYears());
			callableStatement.setString(6, mgcOnlineFormBean.getSemester());
			callableStatement.setString(7, mgcOnlineFormBean.getUniversityName());
			callableStatement.setString(8, mgcOnlineFormBean.getStdMobileNo());
			callableStatement.setString(9, mgcOnlineFormBean.getEmailId());				        				        
			callableStatement.setString(10, mgcOnlineFormBean.getCourseFee());				        
			callableStatement.setString(11, mgcOnlineFormBean.getExamFee());				        
			callableStatement.setString(12, mgcOnlineFormBean.getTotalAmount());				        

			callableStatement.setString(13, mgcOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(14, instituteId);	        

			callableStatement.registerOutParameter(15, Types.VARCHAR);
			callableStatement.registerOutParameter(16, Types.VARCHAR);
			callableStatement.registerOutParameter(17, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(17); 
			mgcOnlineFormBean.setStudentRegistrationId(callableStatement.getString(16));
			mgcOnlineFormBean.setApplicationNo(callableStatement.getString(15));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertMGCStudentDetails(" + mgcOnlineFormBean + ") - END");
		return responseString;
	}
	public MGCOnlineFormBean getMGCStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getMGCStudentDetails(" + applicationNo + ") - START");
		MGCOnlineFormBean mgcOnlineFormBean = new MGCOnlineFormBean();
		try {
			callableStatement = con.prepareCall("{call PROC_GETMGC_STUDENTDETAILS(?)}");

			callableStatement.setString(1, applicationNo);								          

			resultSet = callableStatement.executeQuery(); 						            
			while (resultSet.next()) {						            							            							            	
				mgcOnlineFormBean.setStudentId(resultSet.getString("studentId"));
				mgcOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				mgcOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				mgcOnlineFormBean.setCourse(resultSet.getString("course"));
				mgcOnlineFormBean.setSemester(resultSet.getString("semester"));
				mgcOnlineFormBean.setYears(resultSet.getString("years"));
				mgcOnlineFormBean.setUniversityName(resultSet.getString("universityName"));
				mgcOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				mgcOnlineFormBean.setStdMobileNo(resultSet.getString("stdMobileNo"));						            
				mgcOnlineFormBean.setCourseFee(resultSet.getString("courseFee"));						            	            									            	
				mgcOnlineFormBean.setExamFee(resultSet.getString("examFee"));						            	
				mgcOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));						            	
				mgcOnlineFormBean.setApplicationNo(applicationNo);						            	
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getMGCStudentDetails(" + applicationNo + ") - END");
		return mgcOnlineFormBean;
	}
	@Override
	public String insertDBHPStudentDetails(HPSMasterFormBean hpsMasterFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertDBHPStudentDetails(" + hpsMasterFormBean + ") - START");
		String responseString = null;


		try {
			callableStatement = con.prepareCall("{call PROC_DBHP_StudentDetails(?,?,?,?,?,?,?,?,?,?)}");	        					        
			callableStatement.setString(1, hpsMasterFormBean.getAgentID());
			callableStatement.setString(2, hpsMasterFormBean.getAgentName());
			callableStatement.setString(3, hpsMasterFormBean.getAmount());	           
			callableStatement.setString(4, hpsMasterFormBean.getRemark());
			callableStatement.setString(5, hpsMasterFormBean.getUploadFileName());	
			callableStatement.setString(6, hpsMasterFormBean.getRegisteredUserId());
			callableStatement.setString(7, instituteId);	        

			callableStatement.registerOutParameter(8, Types.VARCHAR);
			callableStatement.registerOutParameter(9, Types.VARCHAR);
			callableStatement.registerOutParameter(10, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(10); 
			hpsMasterFormBean.setStudentRegistrationId(callableStatement.getString(9));
			hpsMasterFormBean.setApplicationNo(callableStatement.getString(8));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertDBHPStudentDetails(" + hpsMasterFormBean + ") - END");
		return responseString;
	}
	public HPSMasterFormBean getDBHPStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getDBHPStudentDetails(" + applicationNo + ") - START");
		HPSMasterFormBean hpsMasterFormBean = new HPSMasterFormBean();
		try {
			callableStatement = con.prepareCall("{call PROC_GETDBHPSTUDENTDETAILS(?)}");

			callableStatement.setString(1, applicationNo);								          

			resultSet = callableStatement.executeQuery(); 						            
			while (resultSet.next()) {						            							            							            	
				hpsMasterFormBean.setAgentID(resultSet.getString("agentID"));
				hpsMasterFormBean.setAgentName(resultSet.getString("agentName"));
				hpsMasterFormBean.setAmount(resultSet.getString("amount"));
				hpsMasterFormBean.setRemark(resultSet.getString("remark"));						            	
				hpsMasterFormBean.setApplicationNo(applicationNo);						            	
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getDBHPStudentDetails(" + applicationNo + ") - END");
		return hpsMasterFormBean;
	}
	@Override
	public String insertNISMStudentDetails(NISMOnlineFormBean nismOnlineFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertNISMStudentDetails(" + nismOnlineFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_NISM_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1, nismOnlineFormBean.getPgName());
			callableStatement.setString(2, nismOnlineFormBean.getEnrollType());
			callableStatement.setString(3, nismOnlineFormBean.getParticipantsNo());
			/*		            callableStatement.setString(4, nismOnlineFormBean.getFirstName());	           
					            callableStatement.setString(5, nismOnlineFormBean.getMiddleName());
					            callableStatement.setString(6, nismOnlineFormBean.getLastName());
					            callableStatement.setString(7, nismOnlineFormBean.getGender());
					            callableStatement.setString(8, nismOnlineFormBean.getEmailId());
					            callableStatement.setString(9, nismOnlineFormBean.getMobileNo());
					            callableStatement.setString(10, nismOnlineFormBean.getPhoneNo());*/
			callableStatement.setString(4, nismOnlineFormBean.getAddress1());
			callableStatement.setString(5, nismOnlineFormBean.getAddress2());
			callableStatement.setString(6, nismOnlineFormBean.getPincode());
			callableStatement.setString(7, nismOnlineFormBean.getOrganisation());

			callableStatement.setString(8, nismOnlineFormBean.getDesignation());
			callableStatement.setString(9, nismOnlineFormBean.getRemarks());
			callableStatement.setString(10, nismOnlineFormBean.getFeeAmt());
			callableStatement.setString(11, nismOnlineFormBean.getDiscountAmt());
			callableStatement.setString(12, nismOnlineFormBean.getAfterDiscountAmt());
			callableStatement.setString(13, nismOnlineFormBean.getTaxAmt());
			callableStatement.setString(14, nismOnlineFormBean.getTotalfeeAmt());
			callableStatement.setString(15, nismOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(16, instituteId);


			callableStatement.registerOutParameter(17, Types.VARCHAR);
			callableStatement.registerOutParameter(18, Types.VARCHAR);
			callableStatement.registerOutParameter(19, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(19); 
			nismOnlineFormBean.setStudentRegistrationId(callableStatement.getString(18));
			nismOnlineFormBean.setApplicationNo(callableStatement.getString(17));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertDOONStudentDetails(" + nismOnlineFormBean + ") - END");
		return responseString;
	}
	public NISMOnlineFormBean getNismStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getNISMStudentDetails(" + applicationNo + ") - START");  
		NISMOnlineFormBean nismOnlineFormBean = new NISMOnlineFormBean();
		try {
			callableStatement = con.prepareCall("{call PROC_NISM_STUDENT_DETAILS(?)}");

			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {					            	
				nismOnlineFormBean.setPgName(resultSet.getString("pgName"));

				if(resultSet.getString("progappfee").equalsIgnoreCase("Programme Fee")){
					nismOnlineFormBean.setFeeIndicator("PROG");
				}
				else if(resultSet.getString("progappfee").equalsIgnoreCase("Application Fee")){
					nismOnlineFormBean.setFeeIndicator("APP");
				}
				nismOnlineFormBean.setEnrollType(resultSet.getString("enrollType"));            	
				nismOnlineFormBean.setParticipantsNo(resultSet.getString("participantsNo"));
				/*				            	nismOnlineFormBean.setFirstName(resultSet.getString("firstName"));
				            	nismOnlineFormBean.setMiddleName(resultSet.getString("middleName"));
				            	nismOnlineFormBean.setLastName(resultSet.getString("lastName"));
				            	nismOnlineFormBean.setGender(resultSet.getString("gender"));						            	
				            	nismOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				            	nismOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));
				            	nismOnlineFormBean.setPhoneNo(resultSet.getString("phoneNo"));*/

				nismOnlineFormBean.setAddress1(resultSet.getString("address1"));
				nismOnlineFormBean.setAddress2(resultSet.getString("address2"));
				nismOnlineFormBean.setPincode(resultSet.getString("pincode"));
				nismOnlineFormBean.setOrganisation(resultSet.getString("organisation"));
				nismOnlineFormBean.setDesignation(resultSet.getString("designation"));
				nismOnlineFormBean.setRemarks(resultSet.getString("remarks"));

				nismOnlineFormBean.setFeeAmt(resultSet.getString("feeAmt"));
				nismOnlineFormBean.setDiscountAmt(resultSet.getString("discountAmt"));
				nismOnlineFormBean.setAfterDiscountAmt(resultSet.getString("afterDiscountAmt"));
				nismOnlineFormBean.setTaxAmt(resultSet.getString("taxAmt"));
				nismOnlineFormBean.setTotalfeeAmt(resultSet.getString("totalfeeAmt"));
				nismOnlineFormBean.setApplicationNo(applicationNo);
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getJRSTStudentDetails(" + nismOnlineFormBean + ") - END");
		return nismOnlineFormBean;
	}
	@Override
	public String insertNISMParticipantDetails(NISMParticipantFormBean nismParticipantFormBean,String ApplicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("insertHaryanaEducationDetails(" + nismParticipantFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_FJT_NISM_Participant_Details(?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1, nismParticipantFormBean.getFirstName());
			callableStatement.setString(2, nismParticipantFormBean.getMiddleName());
			callableStatement.setString(3, nismParticipantFormBean.getLastName());
			callableStatement.setString(4, nismParticipantFormBean.getGender());
			callableStatement.setString(5, nismParticipantFormBean.getEmailId());     
			callableStatement.setString(6, nismParticipantFormBean.getMobileNo());  
			callableStatement.setString(7, nismParticipantFormBean.getPhoneNo());  

			callableStatement.setString(8, ApplicationNo);
			callableStatement.registerOutParameter(9, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(9); 
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		} 
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertYMCAEducationDetails(" + nismParticipantFormBean + ") - END");
		return responseString;
	}
	public List getNISMParticiptDetails(String applicationNo) {

		List<NISMParticipantFormBean> list = null;
		try {
			logger.info("getHaryanaEducationDetails() - ~START~");
			callableStatement = con.prepareCall("{call PROC_NISM_Participant_Details(?)}");
			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery();

			list = new ArrayList<NISMParticipantFormBean>();
			while (resultSet.next()) {
				NISMParticipantFormBean nismParticipantFormBean = new NISMParticipantFormBean();			
				nismParticipantFormBean.setFirstName(resultSet.getString("firstName"));
				nismParticipantFormBean.setMiddleName(resultSet.getString("middleName"));
				nismParticipantFormBean.setLastName(resultSet.getString("lastName"));

				nismParticipantFormBean.setGender(resultSet.getString("gender"));
				nismParticipantFormBean.setEmailId(resultSet.getString("emailId"));
				nismParticipantFormBean.setMobileNo(resultSet.getString("mobileNo"));
				nismParticipantFormBean.setPhoneNo(resultSet.getString("phoneNo"));

				list.add(nismParticipantFormBean);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) { resultSet.close(); }
				if (callableStatement != null) { callableStatement.close(); }
				if (con != null) { con.close(); }
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		logger.info("getYMCAEducationDetails() - ~END~");
		return list;
	}				 
	@Override
	public String insertDOTUStudentDetails(DOTUOnlineFormBean dotuOnlineFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertDOTUStudentDetails(" + dotuOnlineFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_DOTU_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1, dotuOnlineFormBean.getFeeType());
			callableStatement.setString(2, dotuOnlineFormBean.getSpecify());
			callableStatement.setString(3, dotuOnlineFormBean.getStdName());
			callableStatement.setString(4, dotuOnlineFormBean.getSchoolNumber());	           
			callableStatement.setString(5, dotuOnlineFormBean.getSelectForm().equalsIgnoreCase("0") ? "" : dotuOnlineFormBean.getSelectForm());
			callableStatement.setString(6, dotuOnlineFormBean.getSelectHouse().equalsIgnoreCase("0") ? "" : dotuOnlineFormBean.getSelectHouse());
			callableStatement.setString(7, dotuOnlineFormBean.getFatherName());
			callableStatement.setString(8, dotuOnlineFormBean.getEmailId());
			callableStatement.setString(9, dotuOnlineFormBean.getMobileNo());
			callableStatement.setString(10, dotuOnlineFormBean.getAmount());
			callableStatement.setString(11, dotuOnlineFormBean.getChk());	
			callableStatement.setString(12,dotuOnlineFormBean.getSchoolName());
			callableStatement.setString(13,dotuOnlineFormBean.getCountryName());
			callableStatement.setString(14,dotuOnlineFormBean.getCityName());
			callableStatement.setString(15,dotuOnlineFormBean.getPurpose());

			callableStatement.setString(16,dotuOnlineFormBean.getStudentId());
			callableStatement.setString(17,dotuOnlineFormBean.getStudentName());
			callableStatement.setString(18, dotuOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(19, instituteId);


			callableStatement.registerOutParameter(20, Types.VARCHAR);
			callableStatement.registerOutParameter(21, Types.VARCHAR);
			callableStatement.registerOutParameter(22, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(22); 
			dotuOnlineFormBean.setStudentRegistrationId(callableStatement.getString(21));
			dotuOnlineFormBean.setApplicationNo(callableStatement.getString(20));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertDOTUStudentDetails(" + dotuOnlineFormBean + ") - END");
		return responseString;
	}
	public DOTUOnlineFormBean getDOTUStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getDOTUStudentDetails(" + applicationNo + ") - START");  
		DOTUOnlineFormBean dotuOnlineFormBean = new DOTUOnlineFormBean();
		try {
			callableStatement = con.prepareCall("{call PROC_GETDOTUSTUDENTDETAILS(?)}");

			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {					            	
				dotuOnlineFormBean.setFeeType(resultSet.getString("feeType"));
				dotuOnlineFormBean.setSpecify(resultSet.getString("specify"));            	
				dotuOnlineFormBean.setSchoolName(resultSet.getString("schooName"));
				dotuOnlineFormBean.setCountryName(resultSet.getString("countryName"));
				dotuOnlineFormBean.setCityName(resultSet.getString("city"));
				dotuOnlineFormBean.setPurpose(resultSet.getString("purpose"));
				dotuOnlineFormBean.setSchoolNumber(resultSet.getString("schoolNumber"));
				dotuOnlineFormBean.setSelectForm(resultSet.getString("selectForm"));
				dotuOnlineFormBean.setSelectHouse(resultSet.getString("selectHouse"));
				dotuOnlineFormBean.setFatherName(resultSet.getString("fatherName"));						            	
				dotuOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				dotuOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));
				dotuOnlineFormBean.setAmount(resultSet.getString("amount"));
				dotuOnlineFormBean.setChk(resultSet.getString("chk"));
				dotuOnlineFormBean.setStudentId(resultSet.getString("studentId"));
				dotuOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				dotuOnlineFormBean.setApplicationNo(applicationNo);
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getDOTUStudentDetails(" + dotuOnlineFormBean + ") - END");
		return dotuOnlineFormBean;
	}
	@Override
	public String insertKaushalyaStudentDetails(KaushalyaFormBean kaushalyaFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertDOONStudentDetails(" + kaushalyaFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_Kaushalya_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1, kaushalyaFormBean.getAdmissionNo());
			callableStatement.setString(2, kaushalyaFormBean.getNameOfStudent());
			callableStatement.setString(3, kaushalyaFormBean.getFathersName());
			callableStatement.setString(4, kaushalyaFormBean.getCollegeName());	           
			callableStatement.setString(5, kaushalyaFormBean.getCourse());
			callableStatement.setString(6, kaushalyaFormBean.getClass1());
			callableStatement.setString(7, kaushalyaFormBean.getSection());
			callableStatement.setString(8, kaushalyaFormBean.getMobile());
			callableStatement.setString(9, kaushalyaFormBean.getRoomno());
			callableStatement.setString(10, kaushalyaFormBean.getFloorno());
			callableStatement.setString(11, kaushalyaFormBean.getPaymenttype());
			callableStatement.setString(12, kaushalyaFormBean.getPeriod());
			callableStatement.setString(13, kaushalyaFormBean.getAmount());
			callableStatement.setString(14, kaushalyaFormBean.getEmailID());				            
			callableStatement.setString(15, kaushalyaFormBean.getRemark());
			callableStatement.setString(16, kaushalyaFormBean.getMothername());
			callableStatement.setString(17, kaushalyaFormBean.getYear());
			callableStatement.setString(18, kaushalyaFormBean.getSession());

			callableStatement.setString(19, kaushalyaFormBean.getRegisteredUserId());
			callableStatement.setString(20, instituteId);


			callableStatement.registerOutParameter(21, Types.VARCHAR);
			callableStatement.registerOutParameter(22, Types.VARCHAR);
			callableStatement.registerOutParameter(23, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(23); 
			kaushalyaFormBean.setStudentRegistrationId(callableStatement.getString(22));
			kaushalyaFormBean.setApplicationNo(callableStatement.getString(21));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertDOONStudentDetails(" + kaushalyaFormBean + ") - END");
		return responseString;
	}
	public KaushalyaFormBean getKAUSHStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getKAUSHStudentDetails(" + applicationNo + ") - START");  
		KaushalyaFormBean kaushalyaFormBean = new KaushalyaFormBean();
		try {
			callableStatement = con.prepareCall("{call PROC_GETKAUSHSTUDENTDETAILS(?)}");

			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {					            	
				kaushalyaFormBean.setAdmissionNo(resultSet.getString("admissionNo"));
				kaushalyaFormBean.setNameOfStudent(resultSet.getString("nameOfStudent"));            	
				kaushalyaFormBean.setFathersName(resultSet.getString("fathersName"));
				kaushalyaFormBean.setCollegeName(resultSet.getString("collegeName"));
				kaushalyaFormBean.setCourse(resultSet.getString("course"));
				kaushalyaFormBean.setClass1(resultSet.getString("class1"));
				kaushalyaFormBean.setSection(resultSet.getString("section"));						            	
				kaushalyaFormBean.setMobile(resultSet.getString("Mobile"));
				kaushalyaFormBean.setRoomno(resultSet.getString("roomno"));
				kaushalyaFormBean.setFloorno(resultSet.getString("floorno"));
				kaushalyaFormBean.setPaymenttype(resultSet.getString("paymenttype"));
				kaushalyaFormBean.setPeriod(resultSet.getString("period"));
				kaushalyaFormBean.setAmount(resultSet.getString("amount"));
				kaushalyaFormBean.setEmailID(resultSet.getString("emailID"));
				kaushalyaFormBean.setRemark(resultSet.getString("remark"));	
				kaushalyaFormBean.setMothername(resultSet.getString("mothername"));	
				kaushalyaFormBean.setYear(resultSet.getString("year"));	
				kaushalyaFormBean.setSession(resultSet.getString("Session"));	
				kaushalyaFormBean.setApplicationNo(applicationNo);
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getKAUSHStudentDetails(" + kaushalyaFormBean + ") - END");
		return kaushalyaFormBean;
	}
	/*
	 * @Override public String insertRPTMStudentDetails(RPTMOnlineFormBean
	 * rptmOnlineFormBean,String instituteId) { long startTime =
	 * System.currentTimeMillis(); logger.info("insertRPTMStudentDetails(" +
	 * rptmOnlineFormBean + ") - START"); String responseString = null; try {
	 * callableStatement = con.
	 * prepareCall("{call PROC_RPTM_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}"
	 * ); callableStatement.setString(1, rptmOnlineFormBean.getStdId());
	 * callableStatement.setString(2, rptmOnlineFormBean.getStdMobNo());
	 * callableStatement.setString(3, rptmOnlineFormBean.getStdEmailId());
	 * callableStatement.setString(4, rptmOnlineFormBean.getStdDob());
	 * callableStatement.setString(5, rptmOnlineFormBean.getStdAddress());
	 * callableStatement.setString(6, rptmOnlineFormBean.getStdCollName());
	 * callableStatement.setString(7, rptmOnlineFormBean.getStdName());
	 * callableStatement.setString(8, rptmOnlineFormBean.getStdCourse());
	 * callableStatement.setString(9, rptmOnlineFormBean.getStdOtherCourse());
	 * callableStatement.setString(10, rptmOnlineFormBean.getStdSemester());
	 * callableStatement.setString(11, rptmOnlineFormBean.getStdUniversity());
	 * callableStatement.setString(12, rptmOnlineFormBean.getStdOtherUniversity());
	 * callableStatement.setString(13, rptmOnlineFormBean.getStdYear());
	 * callableStatement.setString(14, rptmOnlineFormBean.getStdTotalFee());
	 * 
	 * callableStatement.setString(15, rptmOnlineFormBean.getRegisteredUserId());
	 * callableStatement.setString(16, instituteId);
	 * 
	 * 
	 * callableStatement.registerOutParameter(17, Types.VARCHAR);
	 * callableStatement.registerOutParameter(18, Types.VARCHAR);
	 * callableStatement.registerOutParameter(19, Types.VARCHAR);
	 * 
	 * callableStatement.execute(); responseString =
	 * callableStatement.getString(19);
	 * rptmOnlineFormBean.setStudentRegistrationId(callableStatement.getString(18));
	 * rptmOnlineFormBean.setApplicationNo(callableStatement.getString(17));
	 * logger.info("responseString : - " + responseString); } catch (Exception e) {
	 * logger.error("Exception inside catch insertSWARAStudentDetails"+e); } finally
	 * { try { if (resultSet != null) { resultSet.close(); } if (callableStatement
	 * != null) { callableStatement.close(); } if (con != null) { con.close(); } }
	 * catch (Exception e) {
	 * logger.error("Exception inside catch insertSWARAStudentDetails"+e); } } long
	 * endTime = System.currentTimeMillis(); logger.info("** EXECUTION TIME **" +
	 * (endTime - startTime)); logger.info("insertRPTMStudentDetails(" +
	 * rptmOnlineFormBean + ") - END"); return responseString; }
	 */
	
	
	@Override
	public String insertRPTMStudentDetails(RPTMOnlineFormBean rptmOnlineFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertRPTMStudentDetails(" + rptmOnlineFormBean + ") - START");
		String responseString = null;


		try {
			callableStatement = con.prepareCall("{call PROC_RPTM_StudentDetails(?,?,?,?,?,?,?)}");	        	
			callableStatement.setString(1,rptmOnlineFormBean.getStdTotalFee());
			callableStatement.setString(2,rptmOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,rptmOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,instituteId);
   

			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(7); 
			rptmOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			rptmOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertRPTMStudentDetails(" + rptmOnlineFormBean + ") - END");
		return responseString;
	}
	public RPTMOnlineFormBean getRPTMStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getRPTMStudentDetails(" + applicationNo + ") - START");  
		RPTMOnlineFormBean rptmOnlineFormBean = new RPTMOnlineFormBean();
		try {
			callableStatement = con.prepareCall("{call PROC_GETRPTMSTUDENTDETAILS(?)}");

			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {					            	
				rptmOnlineFormBean.setStdId(resultSet.getString("stdId"));
				rptmOnlineFormBean.setStdMobNo(resultSet.getString("stdMobNo"));            	
				rptmOnlineFormBean.setStdEmailId(resultSet.getString("stdEmailId"));
				rptmOnlineFormBean.setStdDob(resultSet.getString("stdDob"));
				rptmOnlineFormBean.setStdAddress(resultSet.getString("stdAddress"));
				rptmOnlineFormBean.setStdCollName(resultSet.getString("stdCollName"));
				rptmOnlineFormBean.setStdName(resultSet.getString("stdName"));						            	
				rptmOnlineFormBean.setStdCourse(resultSet.getString("stdCourse"));
				rptmOnlineFormBean.setStdOtherCourse(resultSet.getString("stdOtherCourse"));
				rptmOnlineFormBean.setStdSemester(resultSet.getString("stdSemester"));
				rptmOnlineFormBean.setStdUniversity(resultSet.getString("stdUniversity"));
				rptmOnlineFormBean.setStdOtherUniversity(resultSet.getString("stdOtherUniversity"));
				rptmOnlineFormBean.setStdYear(resultSet.getString("stdYear"));
				rptmOnlineFormBean.setStdTotalFee(resultSet.getString("stdTotalFee"));
				rptmOnlineFormBean.setApplicationNo(applicationNo);
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getRPTMStudentDetails(" + rptmOnlineFormBean + ") - END");
		return rptmOnlineFormBean;
	}	
	public List getNoteListData(String id) {
		List<NISMOnlineFormBean> list = null;
		try {
			logger.info("getHaryanaEducationDetails() - ~START~");
			callableStatement = con.prepareCall("{call PROC_Note_List_details(?)}");
			callableStatement.setString(1, id);

			resultSet = callableStatement.executeQuery();

			list = new ArrayList<NISMOnlineFormBean>();
			while (resultSet.next()) {
				NISMOnlineFormBean nismOnlineFormBean = new NISMOnlineFormBean();			
				nismOnlineFormBean.setNote(resultSet.getString("note"));
				list.add(nismOnlineFormBean);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) { resultSet.close(); }
				if (callableStatement != null) { callableStatement.close(); }
				if (con != null) { con.close(); }






			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		logger.info("getYMCAEducationDetails() - ~END~");
		return list;


	}	
	/*
	 * @Override public String insertRUNGTAStudentDetails(RungtanlineFormBean
	 * rungtanlineFormBean,String instituteId) { long startTime =
	 * System.currentTimeMillis(); logger.info("insertRUNGTAStudentDetails(" +
	 * rungtanlineFormBean + ") - START"); String responseString = null;
	 * 
	 * 
	 * try { callableStatement = con.
	 * prepareCall("{call PROC_FJI_RUNGTA_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}"
	 * ); callableStatement.setString(1, rungtanlineFormBean.getCollegeRollno());
	 * callableStatement.setString(2, rungtanlineFormBean.getStudentName());
	 * callableStatement.setString(3, rungtanlineFormBean.getFatherName());
	 * callableStatement.setString(4, rungtanlineFormBean.getMobileNo());
	 * callableStatement.setString(5, rungtanlineFormBean.getEmail());
	 * callableStatement.setString(6, rungtanlineFormBean.getCourse());
	 * callableStatement.setString(7, rungtanlineFormBean.getYear());
	 * callableStatement.setString(8, rungtanlineFormBean.getChktuitionFees()== null
	 * ? "N":rungtanlineFormBean.getChktuitionFees());
	 * callableStatement.setString(9, rungtanlineFormBean.getTuitionFees());
	 * callableStatement.setString(10, rungtanlineFormBean.getChkdevelopmentfees()
	 * == null ? "N":rungtanlineFormBean.getChkdevelopmentfees());
	 * callableStatement.setString(11, rungtanlineFormBean.getDevelopmentfees());
	 * callableStatement.setString(12, rungtanlineFormBean.getChkaccreditationFees()
	 * == null ? "N":rungtanlineFormBean.getChkaccreditationFees());
	 * callableStatement.setString(13, rungtanlineFormBean.getAccreditationFees());
	 * callableStatement.setString(14, rungtanlineFormBean.getChkcautionMoney() ==
	 * null ? "N":rungtanlineFormBean.getChkcautionMoney());
	 * callableStatement.setString(15, rungtanlineFormBean.getCautionMoney());
	 * callableStatement.setString(16, rungtanlineFormBean.getChkhostelFees() ==
	 * null ? "N":rungtanlineFormBean.getChkhostelFees());
	 * callableStatement.setString(17, rungtanlineFormBean.getHostelFees());
	 * callableStatement.setString(18,
	 * rungtanlineFormBean.getChkhostelCautionmoney() == null ?
	 * "N":rungtanlineFormBean.getChkhostelCautionmoney());
	 * callableStatement.setString(19, rungtanlineFormBean.getHostelCautionmoney());
	 * callableStatement.setString(20, rungtanlineFormBean.getChkbusFees() == null ?
	 * "N":rungtanlineFormBean.getChkbusFees()); callableStatement.setString(21,
	 * rungtanlineFormBean.getBusFees()); callableStatement.setString(22,
	 * rungtanlineFormBean.getChkexamFees() == null ?
	 * "N":rungtanlineFormBean.getChkexamFees()); callableStatement.setString(23,
	 * rungtanlineFormBean.getExamFees()); callableStatement.setString(24,
	 * rungtanlineFormBean.getChkothers() == null ?
	 * "N":rungtanlineFormBean.getChkothers()); callableStatement.setString(25,
	 * rungtanlineFormBean.getOthers()); callableStatement.setString(26,
	 * rungtanlineFormBean.getTotal()); callableStatement.setString(27,
	 * rungtanlineFormBean.getRemarks()); callableStatement.setString(28,
	 * rungtanlineFormBean.getRegisteredUserId()); callableStatement.setString(29,
	 * instituteId);
	 * 
	 * callableStatement.registerOutParameter(30, Types.VARCHAR);
	 * callableStatement.registerOutParameter(31, Types.VARCHAR);
	 * callableStatement.registerOutParameter(32, Types.VARCHAR);
	 * 
	 * callableStatement.execute(); responseString =
	 * callableStatement.getString(32);
	 * rungtanlineFormBean.setStudentRegistrationId(callableStatement.getString(31))
	 * ; rungtanlineFormBean.setApplicationNo(callableStatement.getString(30));
	 * logger.info("responseString : - " + responseString); } catch (Exception e) {
	 * logger.error("Exception inside catch insertSWARAStudentDetails"+e); } finally
	 * { try { if (resultSet != null) { resultSet.close(); } if (callableStatement
	 * != null) { callableStatement.close(); } if (con != null) { con.close(); } }
	 * catch (Exception e) {
	 * logger.error("Exception inside catch insertSWARAStudentDetails"+e); } } long
	 * endTime = System.currentTimeMillis(); logger.info("** EXECUTION TIME **" +
	 * (endTime - startTime)); logger.info("insertRUNGTAStudentDetails(" +
	 * rungtanlineFormBean + ") - END"); return responseString; }
	 */
	
	@Override
	public String insertRUNGTAStudentDetails(RungtanlineFormBean rungtanlineFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertRUNGTAStudentDetails(" + rungtanlineFormBean + ") - START");
		String responseString = null;


		try {
			callableStatement = con.prepareCall("{call PROC_FJI_RUNGTA_StudentDetails(?,?,?,?,?,?,?)}");	        	
			callableStatement.setString(1,rungtanlineFormBean.getTotal());
			callableStatement.setString(2,rungtanlineFormBean.getApplicationNo());
			callableStatement.setString(3,rungtanlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,instituteId);
   

			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(7); 
			rungtanlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			rungtanlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertRUNGTAStudentDetails(" + rungtanlineFormBean + ") - END");
		return responseString;
	}
	public RungtanlineFormBean getRUNGTAStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getRUNGTAStudentDetails(" + applicationNo + ") - START");
		RungtanlineFormBean  rungtanlineFormBean = new RungtanlineFormBean(); 
		try {
			callableStatement = con.prepareCall("{call PROC_GETRUNGTA_STUDENTDETAILS(?)}");

			callableStatement.setString(1, applicationNo);								          


			resultSet = callableStatement.executeQuery(); 						            
			while (resultSet.next()) {						            							            	
				rungtanlineFormBean.setCollegeRollno(resultSet.getString("College_Roll_No"));
				rungtanlineFormBean.setStudentName(resultSet.getString("studentName"));
				rungtanlineFormBean.setFatherName(resultSet.getString("fatherName"));
				rungtanlineFormBean.setMobileNo(resultSet.getString("mobileNo"));
				rungtanlineFormBean.setEmail(resultSet.getString("emailId"));			            				            				            			
				rungtanlineFormBean.setCourse(resultSet.getString("course"));
				rungtanlineFormBean.setYear(resultSet.getString("Year"));
				rungtanlineFormBean.setChktuitionFees(resultSet.getString("chktuitionFees"));            									            	
				rungtanlineFormBean.setTuitionFees(resultSet.getString("tuitionFees"));

				rungtanlineFormBean.setChkdevelopmentfees(resultSet.getString("chkdevelopmentfees"));            									            	
				rungtanlineFormBean.setDevelopmentfees(resultSet.getString("developmentfees"));
				rungtanlineFormBean.setChkaccreditationFees(resultSet.getString("chkaccreditationFees"));            									            	
				rungtanlineFormBean.setAccreditationFees(resultSet.getString("accreditationFees"));


				rungtanlineFormBean.setChkcautionMoney(resultSet.getString("chkcautionMoney"));            									            	
				rungtanlineFormBean.setCautionMoney(resultSet.getString("cautionMoney"));
				rungtanlineFormBean.setChkhostelFees(resultSet.getString("chkhostelFees"));            									            	
				rungtanlineFormBean.setHostelFees(resultSet.getString("hostelFees"));


				rungtanlineFormBean.setChkhostelCautionmoney(resultSet.getString("chkhostelCautionmoney"));            									            	
				rungtanlineFormBean.setHostelCautionmoney(resultSet.getString("hostelCautionmoney"));
				rungtanlineFormBean.setChkbusFees(resultSet.getString("chkbusFees"));            									            	
				rungtanlineFormBean.setBusFees(resultSet.getString("busFees"));

				rungtanlineFormBean.setChkexamFees(resultSet.getString("chkexamFees"));            									            	
				rungtanlineFormBean.setExamFees(resultSet.getString("examFees"));

				rungtanlineFormBean.setChkothers(resultSet.getString("chkothers"));
				rungtanlineFormBean.setOthers(resultSet.getString("others"));			            	
				rungtanlineFormBean.setTotal(resultSet.getString("total"));
				rungtanlineFormBean.setRemarks(resultSet.getString("remarks"));
				rungtanlineFormBean.setApplicationNo(applicationNo);						            	
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getUGIStudentDetails(" + applicationNo + ") - END");
		return rungtanlineFormBean;
	}
	@Override
	public List<SCICourseNameFormBean> fetchSCICourseDetails() {
		long startTime = System.currentTimeMillis();
		logger.info("fetchSCICourseDetails start");
		List<SCICourseNameFormBean> list = null;

		try {
			callableStatement = con.prepareCall("{call PROC_FETCH_SCI_COURSEDETAILS()}");

			resultSet = callableStatement.executeQuery(); 
			list = new ArrayList<SCICourseNameFormBean>();
			while (resultSet.next()) {
				SCICourseNameFormBean sciCourseNameFormBean = new SCICourseNameFormBean();
				sciCourseNameFormBean.setCourseName(resultSet.getString("courseName"));
				sciCourseNameFormBean.setFromDate(resultSet.getString("fromDate"));
				sciCourseNameFormBean.setToDate(resultSet.getString("toDate"));
				sciCourseNameFormBean.setCorseFees(resultSet.getString("corseFees"));
				list.add(sciCourseNameFormBean);
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("fetchSCICourseDetails(" + list + ") - END");
		return list;
	}
	public UnisonFormBean getUnisonStudentDetails(String applicationNo,String instCode) {
		long startTime = System.currentTimeMillis();
		logger.info("getDOONStudentDetails(" + applicationNo + ") - START");  
		String curriculum="";
		UnisonFormBean unisonFormBean = new UnisonFormBean();
//		try {
//			callableStatement = con.prepareCall("{call PROC_GETUNISONSTUDENTDETAILS(?,?)}");
//
//			callableStatement.setString(1, applicationNo);
//			callableStatement.setString(2, instCode);
//			resultSet = callableStatement.executeQuery(); 
//			while (resultSet.next()) {					            	
//				curriculum=resultSet.getString("curriculum");
//				if (curriculum.contains("Foreign")){
//					unisonFormBean.setTotalAmount(resultSet.getString("convertedAmount"));
//				}else{
//					unisonFormBean.setTotalAmount(resultSet.getString("totalAmount"));	
//				}
//				unisonFormBean.setApplicationNo(resultSet.getString("paymentId"));
//				unisonFormBean.setPhoneNo(resultSet.getString("phone"));
//				unisonFormBean.setStudentName(resultSet.getString("STUDENT_NAME"));
//
//			
		
		StudentRegistrationService studentRegistrationService=new StudentRegistrationService();
		String merchantID=studentRegistrationService.getMerchantId(instCode);
				//InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

				try{
					ObjectMapper obMapper = new ObjectMapper();
					ObjectNode objNode = obMapper.createObjectNode();
					/*** *** *** Initialization start *** *** ***/
					SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

					secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
					secureAPIBuilder.setUpstreamServerPort(443);

					secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
					secureAPIBuilder.setVerifyServerSSL(false);

					//String clientId = "actual-smarthub-node-ip";
					//String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

					//secureAPIBuilder.setAuthenticationAlias(clientId);

					//byte[] clientKey = hexStringToByteArray(clientKeyStr);
					//secureAPIBuilder.setAuthenticationKey(clientKey);

					SecureAPIConnection secureAPI = secureAPIBuilder.build();
					
				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instCode);
				smartHubFetchOnlineFormBean.setContext_id(merchantID);
				smartHubFetchOnlineFormBean.setForm_id(applicationNo);
				logger.info("AppNo From dao "+applicationNo);
				String  jsonString2=obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2"+jsonString2);

//				WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/get-form-data");
//				Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//				
//				Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				APIResponse apiResponse1 = null;
				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: " + apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();
				
				
				logger.info("output1"+output1);
				
				JSONObject jsonObject = new JSONObject(output1);
				
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray"+jsonArray);
				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String newstudent = dataobj.getString("newstudent");
				String existingstudent = dataobj.getString("existingstudent");
				String studentname = dataobj.getString("studentname");
				String fathername = dataobj.getString("fathername");
				String academicsession = dataobj.getString("academicsession");
				String year = dataobj.getString("year");
				curriculum = dataobj.getString("curriculum");
				String sibling = dataobj.getString("sibling");
				String admissionfee = dataobj.getString("admissionfee");
				String joiningkitfees = dataobj.getString("joiningkitfees");
				String registerationfees = dataobj.getString("registerationfees");
				String imprestdeposit = dataobj.getString("imprestdeposit");
				String securitydeposit = dataobj.getString("securitydeposit");
				String schoolfee = dataobj.getString("schoolfee");
				String others = dataobj.getString("others");
				String amntddepositinr = dataobj.getString("amntddepositinr");
				String amntddepositusd = dataobj.getString("amntddepositusd");
				int conversionrate = dataobj.getInt("conversionrate");
				int totalamount = dataobj.getInt("totalamount");
				int convertedamount = dataobj.getInt("convertedamount");
				String amountwords = dataobj.getString("amountwords");
				String panno = dataobj.getString("panno");
				int phoneno = dataobj.getInt("phoneno");
				String email = dataobj.getString("email");
				String registereduserid = dataobj.getString("registered_userId");
				String studentregistrationid = dataobj.getString("student_registrationid");
				String applicationno = dataobj.getString("application_no");
				int payment = dataobj.getInt("payment");
				String paymentconverted = dataobj.getString("paymentconverted");
				String nationality = dataobj.getString("nationality");

				// Calling all Setter methods
				unisonFormBean.setNewStudent(newstudent);
				unisonFormBean.setExistingStudent(existingstudent);
				unisonFormBean.setStudentName(studentname);
				unisonFormBean.setFatherName(fathername);
				unisonFormBean.setAcademicSession(academicsession);
				unisonFormBean.setYear(year);
				unisonFormBean.setCurriculum(curriculum);
				unisonFormBean.setSibling(sibling);
				unisonFormBean.setAdmissionFee(admissionfee);
				unisonFormBean.setJoiningKitFees(joiningkitfees);
				unisonFormBean.setRegisterationFees(registerationfees);
				unisonFormBean.setImprestDeposit(imprestdeposit);
				unisonFormBean.setSecurityDeposit(securitydeposit);
				unisonFormBean.setSchoolFee(String.valueOf(schoolfee));
				unisonFormBean.setOthers(others);
				unisonFormBean.setAmntdDepositINR(amntddepositinr);
				unisonFormBean.setAmntdDepositUSD(amntddepositusd);
				unisonFormBean.setConversionRate(String.valueOf(conversionrate));
				unisonFormBean.setTotalAmount(String.valueOf(totalamount));
				unisonFormBean.setConvertedAmount(String.valueOf(convertedamount));
				unisonFormBean.setAmountWords(amountwords);
				unisonFormBean.setPanNo(panno);
				unisonFormBean.setPhoneNo(String.valueOf(phoneno));
				unisonFormBean.setEmail(email);
				unisonFormBean.setRegisteredUserId(registereduserid);
				unisonFormBean.setStudentRegistrationId(studentregistrationid);
				unisonFormBean.setApplicationNo(applicationno);
				unisonFormBean.setPayment(String.valueOf(payment));
				unisonFormBean.setPaymentConverted(paymentconverted);
				unisonFormBean.setNationality(nationality);

				unisonFormBean.setApplicationNo(applicationNo);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getDOONStudentDetails(" + unisonFormBean + ") - END");
		return unisonFormBean;
	}
	@Override
	public String insertChristineStudentDetails(ChristineOnlineFormBean christineOnlineFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertChristineStudentDetails(" + christineOnlineFormBean + ") - START");
		String responseString = null;


		try {
			callableStatement = con.prepareCall("{call PROC_FJT_Christinevalmy_Registration_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");	        	
			callableStatement.setString(1, christineOnlineFormBean.getName());
			callableStatement.setString(2, christineOnlineFormBean.getDob());
			callableStatement.setString(3, christineOnlineFormBean.getBlockNo());	           
			callableStatement.setString(4, christineOnlineFormBean.getLocality());
			callableStatement.setString(5, christineOnlineFormBean.getStreet());	  
			callableStatement.setString(6, christineOnlineFormBean.getCity());	
			callableStatement.setString(7, christineOnlineFormBean.getPincode());	 

			callableStatement.setString(8, christineOnlineFormBean.getSelectCountry());
			callableStatement.setString(9, christineOnlineFormBean.getSelectState());
			callableStatement.setString(10, christineOnlineFormBean.getStdCode1());
			callableStatement.setString(11, christineOnlineFormBean.getTpNo1());
			callableStatement.setString(12, christineOnlineFormBean.getCellNo1());
			callableStatement.setString(13, christineOnlineFormBean.getStdCode2());
			callableStatement.setString(14, christineOnlineFormBean.getTpNo2());
			callableStatement.setString(15, christineOnlineFormBean.getEmailId());
			callableStatement.setString(16, christineOnlineFormBean.getSelectContact());
			callableStatement.setString(17, christineOnlineFormBean.getContName());
			callableStatement.setString(18, christineOnlineFormBean.getStdCode3());
			callableStatement.setString(19, christineOnlineFormBean.getTpNo3());
			callableStatement.setString(20, christineOnlineFormBean.getTotalAmount());
			callableStatement.setString(21, christineOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(22, instituteId);	        

			callableStatement.registerOutParameter(23, Types.VARCHAR);
			callableStatement.registerOutParameter(24, Types.VARCHAR);
			callableStatement.registerOutParameter(25, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(25); 
			christineOnlineFormBean.setStudentRegistrationId(callableStatement.getString(24));
			christineOnlineFormBean.setApplicationNo(callableStatement.getString(23));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertRUNGTAStudentDetails(" + christineOnlineFormBean + ") - END");
		return responseString;
	}
	@Override
	public String insertChristinefeeDetails(form form1,String ApplicationNo) {				
		long startTime = System.currentTimeMillis();
		logger.info("insertChristinefeeDetails(" + form1 + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_FJT_christine_Fee_Details(?,?,?,?,?)}");

			callableStatement.setString(1, form1.getChk_1());
			callableStatement.setString(2, form1.getSelectFeeType_1());
			callableStatement.setString(3, form1.getSelectFeeName_1());
			// callableStatement.setString(4, form1.getFeeAmount_1());
			callableStatement.setString(4, ApplicationNo);
			callableStatement.registerOutParameter(5, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(5); 


			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		} 
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertYMCAEducationDetails(" + form1 + ") - END");
		return responseString;
	}
	public ChristineOnlineFormBean getChristineStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getRPTMStudentDetails(" + applicationNo + ") - START");  
		ChristineOnlineFormBean christineOnlineFormBean = new ChristineOnlineFormBean();
		try {
			callableStatement = con.prepareCall("{call PROC_Christinevalmy_details(?)}");

			callableStatement.setString(1, applicationNo);


			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {					            	
				christineOnlineFormBean.setName(resultSet.getString("name"));
				christineOnlineFormBean.setDob(resultSet.getString("dateofBirth"));            	
				christineOnlineFormBean.setBlockNo(resultSet.getString("address1"));
				christineOnlineFormBean.setLocality(resultSet.getString("locality"));
				christineOnlineFormBean.setStreet(resultSet.getString("address2"));
				christineOnlineFormBean.setCity(resultSet.getString("city"));
				christineOnlineFormBean.setPincode(resultSet.getString("pinCode"));						            	
				christineOnlineFormBean.setSelectState(resultSet.getString("state"));
				christineOnlineFormBean.setSelectCountry(resultSet.getString("country"));
				christineOnlineFormBean.setStdCode1(resultSet.getString("stdCode1"));
				christineOnlineFormBean.setTpNo1(resultSet.getString("tpNo1"));
				christineOnlineFormBean.setCellNo1(resultSet.getString("cellNumber"));
				christineOnlineFormBean.setStdCode2(resultSet.getString("stdCode2"));
				christineOnlineFormBean.setTpNo2(resultSet.getString("tpNo2"));
				christineOnlineFormBean.setEmailId(resultSet.getString("emailID"));
				christineOnlineFormBean.setSelectContact(resultSet.getString("selectContact"));
				christineOnlineFormBean.setContName(resultSet.getString("contName"));
				christineOnlineFormBean.setStdCode3(resultSet.getString("stdCode3"));
				christineOnlineFormBean.setTpNo3(resultSet.getString("tpNo3"));
				christineOnlineFormBean.setTotalAmount(resultSet.getString("amount"));
				christineOnlineFormBean.setApplicationNo(applicationNo);
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getRPTMStudentDetails(" + christineOnlineFormBean + ") - END");
		return christineOnlineFormBean;
	}								
	@Override
	public String insertBKLIStudentDetails(BKLIOnlineFormBean bkliOnlineFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertBKLIStudentDetails(" + bkliOnlineFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_BKLI_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1, bkliOnlineFormBean.getFirstName());
			callableStatement.setString(2, bkliOnlineFormBean.getLastName());
			callableStatement.setString(3, bkliOnlineFormBean.getFathersName());
			callableStatement.setString(4, bkliOnlineFormBean.getMothersName());	           
			callableStatement.setString(5, bkliOnlineFormBean.getSelectStandard());
			callableStatement.setString(6, bkliOnlineFormBean.getSelectCourseType());
			callableStatement.setString(7, bkliOnlineFormBean.getSelectBoard());
			callableStatement.setString(8, bkliOnlineFormBean.getCollegeName());
			callableStatement.setString(9, bkliOnlineFormBean.getSelectEntranceDate());
			callableStatement.setString(10, bkliOnlineFormBean.getSeatsNo());
			callableStatement.setString(11, bkliOnlineFormBean.getPlaceName());
			callableStatement.setString(12, bkliOnlineFormBean.getEmailId());	
			callableStatement.setString(13, bkliOnlineFormBean.getMobNo1());
			callableStatement.setString(14, bkliOnlineFormBean.getMobNo2());
			callableStatement.setString(15, bkliOnlineFormBean.getAmount());

			callableStatement.setString(16, bkliOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(17, instituteId);


			callableStatement.registerOutParameter(18, Types.VARCHAR);
			callableStatement.registerOutParameter(19, Types.VARCHAR);
			callableStatement.registerOutParameter(20, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(20); 
			bkliOnlineFormBean.setStudentRegistrationId(callableStatement.getString(19));
			bkliOnlineFormBean.setApplicationNo(callableStatement.getString(18));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertBKLIStudentDetails(" + bkliOnlineFormBean + ") - END");
		return responseString;
	}
	public BKLIOnlineFormBean getBKLIStudentDetails(String applicationNo,String tranStatus) {
		long startTime = System.currentTimeMillis();
		logger.info("getBKLIStudentDetails(" + applicationNo + ") - START");  
		BKLIOnlineFormBean bkliOnlineFormBean = new BKLIOnlineFormBean();
		try {
			callableStatement = con.prepareCall("{call PROC_GETBKLISTUDENTDETAILS(?,?)}");

			callableStatement.setString(1, applicationNo);
			callableStatement.setString(2, tranStatus);

			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {					            	
				bkliOnlineFormBean.setFirstName(resultSet.getString("firstName"));
				bkliOnlineFormBean.setLastName(resultSet.getString("lastName"));            	
				bkliOnlineFormBean.setFathersName(resultSet.getString("fathersName"));
				bkliOnlineFormBean.setMothersName(resultSet.getString("mothersName"));
				bkliOnlineFormBean.setSelectStandard(resultSet.getString("selectStandard"));
				bkliOnlineFormBean.setSelectCourseType(resultSet.getString("selectCourseType"));
				bkliOnlineFormBean.setSelectBoard(resultSet.getString("selectBoard"));						            	
				bkliOnlineFormBean.setCollegeName(resultSet.getString("collegeName"));
				bkliOnlineFormBean.setSelectEntranceDate(resultSet.getString("selectEntranceDate"));
				bkliOnlineFormBean.setSeatsNo(resultSet.getString("seatsNo"));
				bkliOnlineFormBean.setPlaceName(resultSet.getString("placeName"));
				bkliOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				bkliOnlineFormBean.setMobNo1(resultSet.getString("mobNo1"));
				bkliOnlineFormBean.setMobNo2(resultSet.getString("mobNo2"));
				bkliOnlineFormBean.setAmount(resultSet.getString("amount"));
				bkliOnlineFormBean.setApplicationNo(applicationNo);
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getBKLIStudentDetails(" + bkliOnlineFormBean + ") - END");
		return bkliOnlineFormBean;
	}
	@Override
	public String insertMATSStudentDetails(MATSFeesForm matsFeesForm,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertMATSStudentDetails(" + matsFeesForm + ") - START");
		String responseString = null;


		try {
			callableStatement = con.prepareCall("{call PROC_FJI_MATS_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");	        	
			callableStatement.setString(1, matsFeesForm.getSelectPaymentType());
			callableStatement.setString(2, matsFeesForm.getEnrollmentNo());
			callableStatement.setString(3, matsFeesForm.getStudentName());	           
			callableStatement.setString(4, matsFeesForm.getFatherName());
			callableStatement.setString(5, matsFeesForm.getMotherName());	  
			callableStatement.setString(6, matsFeesForm.getContactNo());	
			callableStatement.setString(7, matsFeesForm.getDob());										
			callableStatement.setString(8, matsFeesForm.getSelectDepartment());	
			callableStatement.setString(9, matsFeesForm.getCourse());	
			callableStatement.setString(10, matsFeesForm.getSelectYear());	
			callableStatement.setString(11, matsFeesForm.getFees());
			callableStatement.setString(12, matsFeesForm.getFee1()== null ? "N":matsFeesForm.getFee1());
			callableStatement.setString(13, matsFeesForm.getRevalCharges());



			callableStatement.setString(14, matsFeesForm.getFee2()== null ? "N":matsFeesForm.getFee2());
			callableStatement.setString(15, matsFeesForm.getConvCharges());

			callableStatement.setString(16, matsFeesForm.getFee3()== null ? "N":matsFeesForm.getFee3());
			callableStatement.setString(17, matsFeesForm.getExamFee());
			callableStatement.setString(18, matsFeesForm.getFee4()== null ? "N":matsFeesForm.getFee4());
			callableStatement.setString(19, matsFeesForm.getLateFees());
			callableStatement.setString(20, matsFeesForm.getFee5()== null ? "N":matsFeesForm.getFee5());
			callableStatement.setString(21, matsFeesForm.getHostelFees());
			callableStatement.setString(22, matsFeesForm.getFee6()== null ? "N":matsFeesForm.getFee6());
			callableStatement.setString(23, matsFeesForm.getTransCharges());
			callableStatement.setString(24, matsFeesForm.getFee7()== null ? "N":matsFeesForm.getFee7());
			callableStatement.setString(25, matsFeesForm.getOtherCharges());
			callableStatement.setString(26, matsFeesForm.getFee8()== null ? "N":matsFeesForm.getFee8());
			callableStatement.setString(27, matsFeesForm.getCorresFees());

			callableStatement.setString(28, matsFeesForm.getTotalAmount());
			callableStatement.setString(29, matsFeesForm.getRemarks());	


			callableStatement.setString(30, matsFeesForm.getRegisteredUserId());
			callableStatement.setString(31, instituteId);	        

			callableStatement.registerOutParameter(32, Types.VARCHAR);
			callableStatement.registerOutParameter(33, Types.VARCHAR);
			callableStatement.registerOutParameter(34, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(34); 
			matsFeesForm.setStudentRegistrationId(callableStatement.getString(33));
			matsFeesForm.setApplicationNo(callableStatement.getString(32));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertMATSStudentDetails(" + matsFeesForm + ") - END");
		return responseString;
	}
	public MATSFeesForm getMATSStudentDetails(String applicationNo,String instituteCode) {
		long startTime = System.currentTimeMillis();
		logger.info("getMATSStudentDetails(" + applicationNo + ") - START");
		MATSFeesForm matsFeesForm = new MATSFeesForm();
		try {
//			callableStatement = con.prepareCall("{call PROC_GETMATS_STUDENTDETAILS(?)}");
//
//			callableStatement.setString(1, applicationNo);								          
//
//
//			resultSet = callableStatement.executeQuery(); 						            
//			while (resultSet.next()) {						            							            	
//				matsFeesForm.setSelectPaymentType(resultSet.getString("selectPaymentType"));
//				matsFeesForm.setEnrollmentNo(resultSet.getString("enrollmentNo"));
//				matsFeesForm.setStudentName(resultSet.getString("studentName"));
//				matsFeesForm.setFatherName(resultSet.getString("fatherName"));
//				matsFeesForm.setMotherName(resultSet.getString("motherName"));			            				            				            			
//				matsFeesForm.setContactNo(resultSet.getString("contactNo"));
//				matsFeesForm.setDob(resultSet.getString("dob"));
//				matsFeesForm.setSelectDepartment(resultSet.getString("selectDepartment"));            									            	
//				matsFeesForm.setCourse(resultSet.getString("course"));												               	
//				matsFeesForm.setSelectYear(resultSet.getString("selectYear"));            									            	
//				matsFeesForm.setFees(resultSet.getString("fees"));
//				matsFeesForm.setFee1(resultSet.getString("fee1"));            									            	
//				matsFeesForm.setRevalCharges(resultSet.getString("revalCharges"));		
//				matsFeesForm.setFee2(resultSet.getString("fee2"));            									            	
//				matsFeesForm.setConvCharges(resultSet.getString("convCharges"));
//				matsFeesForm.setFee3(resultSet.getString("fee3"));            									            	
//				matsFeesForm.setExamFee(resultSet.getString("examFee"));												            	
//				matsFeesForm.setFee4(resultSet.getString("fee4"));            									            	
//				matsFeesForm.setLateFees(resultSet.getString("lateFees"));
//				matsFeesForm.setFee5(resultSet.getString("fee5"));            									            	
//				matsFeesForm.setHostelFees(resultSet.getString("hostelFees"));
//				matsFeesForm.setFee6(resultSet.getString("fee6"));            									            	
//				matsFeesForm.setTransCharges(resultSet.getString("transCharges"));
//				matsFeesForm.setFee7(resultSet.getString("fee7"));
//				matsFeesForm.setOtherCharges(resultSet.getString("otherCharges"));			            	
//				matsFeesForm.setFee8(resultSet.getString("fee8"));
//				matsFeesForm.setCorresFees(resultSet.getString("corresFees"));
//				matsFeesForm.setTotalAmount(resultSet.getString("totalAmount"));
//				matsFeesForm.setRemarks(resultSet.getString("remarks"));
//				matsFeesForm.setApplicationNo(applicationNo);	
			StudentRegistrationService studentRegistrationService=new StudentRegistrationService();
			String merchantID=studentRegistrationService.getMerchantId(instituteCode);
			//InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

			
				ObjectMapper obMapper = new ObjectMapper();
				ObjectNode objNode = obMapper.createObjectNode();
				/*** *** *** Initialization start *** *** ***/
				SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

				secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
				secureAPIBuilder.setUpstreamServerPort(443);

				secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
				secureAPIBuilder.setVerifyServerSSL(false);

				//String clientId = "actual-smarthub-node-ip";
				//String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

				//secureAPIBuilder.setAuthenticationAlias(clientId);

				//byte[] clientKey = hexStringToByteArray(clientKeyStr);
				//secureAPIBuilder.setAuthenticationKey(clientKey);

				SecureAPIConnection secureAPI = secureAPIBuilder.build();
				
			SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
			smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
			smartHubFetchOnlineFormBean.setForm_name(instituteCode);
			smartHubFetchOnlineFormBean.setContext_id(merchantID);
			smartHubFetchOnlineFormBean.setForm_id(applicationNo);
			logger.info("AppNo From dao "+applicationNo);
			String  jsonString2=obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
			logger.info("jsonString2"+jsonString2);

//			WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/get-form-data");
//			Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//			
//			Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
			APIResponse apiResponse1 = null;
			apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

			System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: " + apiResponse1.getResponseCode());

			logger.info("responseString", apiResponse1.toString());

			if (apiResponse1.getResponseCode() != 200) {
				throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
			}
			logger.info("Output from Server .... \n");
			String output1 = apiResponse1.getData().toString();
			
			
			logger.info("output1"+output1);
			
			JSONObject jsonObject = new JSONObject(output1);
			
			JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
			logger.info("jsonArray"+jsonArray);
			JSONObject data = jsonArray.getJSONObject(0);
			JSONObject dataobj = data.getJSONObject("form_data");

			String selectpaymenttype = dataobj.getString("selectpaymenttype");
			String enrollmentno = dataobj.getString("enrollmentno");
			String studentname = dataobj.getString("studentname");
			String fathername = dataobj.getString("fathername");
			String mothername = dataobj.getString("mothername");
			Long contactno = dataobj.getLong("contactno");
			String dob = dataobj.getString("dob");
			String selectdepartment = dataobj.getString("selectdepartment");
			String course = dataobj.getString("course");
			String selectyear = dataobj.getString("selectyear");
			int fees = dataobj.getInt("fees");
			String fee1 = dataobj.getString("fee1");
			int revalcharges = dataobj.getInt("revalcharges");
			String fee2 = dataobj.getString("fee2");
			int convcharges = dataobj.getInt("convcharges");
			String fee3 = dataobj.getString("fee3");
			int examfee = dataobj.getInt("examfee");
			String fee4 = dataobj.getString("fee4");
			int latefees = dataobj.getInt("latefees");
			String fee5 = dataobj.getString("fee5");
			int hostelfees = dataobj.getInt("hostelfees");
			String fee6 = dataobj.getString("fee6");
			int transcharges = dataobj.getInt("transcharges");
			String fee7 = dataobj.getString("fee7");
			int othercharges = dataobj.getInt("othercharges");
			String fee8 = dataobj.getString("fee8");
			int corresfees = dataobj.getInt("corresfees");
			String remarks = dataobj.getString("remarks");
			int totalamount = dataobj.getInt("totalamount");

			// Calling all Setter methods
			matsFeesForm.setSelectPaymentType(selectpaymenttype);
			matsFeesForm.setEnrollmentNo(enrollmentno);
			matsFeesForm.setStudentName(studentname);
			matsFeesForm.setFatherName(fathername);
			matsFeesForm.setMotherName(mothername);
			matsFeesForm.setContactNo(String.valueOf(contactno));
			matsFeesForm.setDob(dob);
			matsFeesForm.setSelectDepartment(selectdepartment);
			matsFeesForm.setCourse(course);
			matsFeesForm.setSelectYear(selectyear);
			matsFeesForm.setFees(String.valueOf(fees));
			matsFeesForm.setFee1(fee1);
			matsFeesForm.setRevalCharges(String.valueOf(revalcharges));
			matsFeesForm.setFee2(fee2);
			matsFeesForm.setConvCharges(String.valueOf(convcharges));
			matsFeesForm.setFee3(fee3);
			matsFeesForm.setExamFee(String.valueOf(examfee));
			matsFeesForm.setFee4(fee4);
			matsFeesForm.setLateFees(String.valueOf(latefees));
			matsFeesForm.setFee5(fee5);
			matsFeesForm.setHostelFees(String.valueOf(hostelfees));
			matsFeesForm.setFee6(fee6);
			matsFeesForm.setTransCharges(String.valueOf(transcharges));
			matsFeesForm.setFee7(fee7);
			matsFeesForm.setOtherCharges(String.valueOf(othercharges));
			matsFeesForm.setFee8(fee8);
			matsFeesForm.setCorresFees(String.valueOf(corresfees));
			matsFeesForm.setRemarks(remarks);
			matsFeesForm.setTotalAmount(String.valueOf(totalamount));

			matsFeesForm.setApplicationNo(applicationNo);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getMATSStudentDetails(" + applicationNo + ") - END");
		return matsFeesForm;
	}								   
	@Override
	public String insertBSPRStudentDetails(BSPROnlineFormBean bsprOnlineFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertBSPRStudentDetails(" + bsprOnlineFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_BSPR_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1, bsprOnlineFormBean.getSelectPaymentCategory());
			callableStatement.setString(2, bsprOnlineFormBean.getTxtName());
			callableStatement.setString(3, bsprOnlineFormBean.getTxtFatherName());
			callableStatement.setString(4, bsprOnlineFormBean.getSelectYear());	           
			callableStatement.setString(5, bsprOnlineFormBean.getSelectTerm());
			callableStatement.setString(6, bsprOnlineFormBean.getTxtCity());
			callableStatement.setString(7, bsprOnlineFormBean.getTxtEmailID());
			callableStatement.setString(8, bsprOnlineFormBean.getTxtDOB());
			callableStatement.setString(9, bsprOnlineFormBean.getTxtMobileNo());
			callableStatement.setString(10, bsprOnlineFormBean.getTxtRollNo());
			callableStatement.setString(11, bsprOnlineFormBean.getTxtFees());
			callableStatement.setString(12, bsprOnlineFormBean.getTxtLateFees());	
			callableStatement.setString(13, bsprOnlineFormBean.getTotalFees());
			callableStatement.setString(14, bsprOnlineFormBean.getTxtPaymentDate());
			callableStatement.setString(15, bsprOnlineFormBean.getTxtRemarks());

			callableStatement.setString(16, bsprOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(17, instituteId);


			callableStatement.registerOutParameter(18, Types.VARCHAR);
			callableStatement.registerOutParameter(19, Types.VARCHAR);
			callableStatement.registerOutParameter(20, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(20); 
			bsprOnlineFormBean.setStudentRegistrationId(callableStatement.getString(19));
			bsprOnlineFormBean.setApplicationNo(callableStatement.getString(18));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertBSPRStudentDetails(" + bsprOnlineFormBean + ") - END");
		return responseString;
	}
	public BSPROnlineFormBean getBSPRStudentDetails(String applicationNo,String tranStatus) {
		long startTime = System.currentTimeMillis();
		logger.info("getBSPRStudentDetails(" + applicationNo + ") - START");  
		BSPROnlineFormBean bsprOnlineFormBean = new BSPROnlineFormBean();
		try {
			callableStatement = con.prepareCall("{call PROC_GETBSPRSTUDENTDETAILS(?,?)}");

			callableStatement.setString(1, applicationNo);
			callableStatement.setString(2, tranStatus);

			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {					            	
				bsprOnlineFormBean.setSelectPaymentCategory(resultSet.getString("selectPaymentCategory"));
				bsprOnlineFormBean.setTxtName(resultSet.getString("txtName"));            	
				bsprOnlineFormBean.setTxtFatherName(resultSet.getString("txtFatherName"));
				bsprOnlineFormBean.setSelectYear(resultSet.getString("selectYear"));
				bsprOnlineFormBean.setSelectTerm(resultSet.getString("selectTerm"));
				bsprOnlineFormBean.setTxtCity(resultSet.getString("txtCity"));
				bsprOnlineFormBean.setTxtEmailID(resultSet.getString("txtEmailID"));						            	
				bsprOnlineFormBean.setTxtDOB(resultSet.getString("txtDOB"));
				bsprOnlineFormBean.setTxtMobileNo(resultSet.getString("txtMobileNo"));
				bsprOnlineFormBean.setTxtRollNo(resultSet.getString("txtRollNo"));
				bsprOnlineFormBean.setTxtFees(resultSet.getString("txtFees"));
				bsprOnlineFormBean.setTxtLateFees(resultSet.getString("txtLateFees"));
				bsprOnlineFormBean.setTotalFees(resultSet.getString("totalFees"));
				bsprOnlineFormBean.setTxtPaymentDate(resultSet.getString("txtPaymentDate"));
				bsprOnlineFormBean.setTxtRemarks(resultSet.getString("txtRemarks"));
				bsprOnlineFormBean.setApplicationNo(applicationNo);
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getBSPRStudentDetails(" + bsprOnlineFormBean + ") - END");
		return bsprOnlineFormBean;
	}	
	@Override
	public String insertSHARPStudentDetails(SharpmindsOnlineFormBean sharpmindsOnlineFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertSHARPStudentDetails(" + sharpmindsOnlineFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_SHARP_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1, sharpmindsOnlineFormBean.getStdName());
			callableStatement.setString(2, sharpmindsOnlineFormBean.getStdId());
			callableStatement.setString(3, sharpmindsOnlineFormBean.getStdMobileNo());
			callableStatement.setString(4, sharpmindsOnlineFormBean.getStdEmailId());	           
			callableStatement.setString(5, sharpmindsOnlineFormBean.getSelectStdClass());
			callableStatement.setString(6, sharpmindsOnlineFormBean.getStdBatch());
			callableStatement.setString(7, sharpmindsOnlineFormBean.getStdRemark());
			callableStatement.setString(8, sharpmindsOnlineFormBean.getFeeAmount());
			callableStatement.setString(9, sharpmindsOnlineFormBean.getTaxAmount());
			callableStatement.setString(10, sharpmindsOnlineFormBean.getTotalAmount());		
			callableStatement.setString(11, sharpmindsOnlineFormBean.getFatherName());	
			callableStatement.setString(12, sharpmindsOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(13, instituteId);


			callableStatement.registerOutParameter(14, Types.VARCHAR);
			callableStatement.registerOutParameter(15, Types.VARCHAR);
			callableStatement.registerOutParameter(16, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(16); 
			sharpmindsOnlineFormBean.setStudentRegistrationId(callableStatement.getString(15));
			sharpmindsOnlineFormBean.setApplicationNo(callableStatement.getString(14));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("sharpmindsOnlineFormBean(" + sharpmindsOnlineFormBean + ") - END");
		return responseString;
	}
	public SharpmindsOnlineFormBean getSHARPStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getSHARPStudentDetails(" + applicationNo + ") - START");
		SharpmindsOnlineFormBean sharpmindsOnlineFormBean = new SharpmindsOnlineFormBean();
		try {
			callableStatement = con.prepareCall("{call PROC_GETSHARP_STUDENTDETAILS(?)}");

			callableStatement.setString(1, applicationNo);								          


			resultSet = callableStatement.executeQuery(); 						            
			while (resultSet.next()) {						            							            	
				sharpmindsOnlineFormBean.setStdName(resultSet.getString("stdName"));
				sharpmindsOnlineFormBean.setStdId(resultSet.getString("stdId"));
				sharpmindsOnlineFormBean.setStdMobileNo(resultSet.getString("stdMobileNo"));
				sharpmindsOnlineFormBean.setStdEmailId(resultSet.getString("stdEmailId"));
				sharpmindsOnlineFormBean.setSelectStdClass(resultSet.getString("StdClass"));			            				            				            			
				sharpmindsOnlineFormBean.setStdBatch(resultSet.getString("stdBatch"));
				sharpmindsOnlineFormBean.setStdRemark(resultSet.getString("stdRemark"));
				sharpmindsOnlineFormBean.setFeeAmount(resultSet.getString("amount"));            									            	
				sharpmindsOnlineFormBean.setTaxAmount(resultSet.getString("taxAmount"));												               	
				sharpmindsOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));            									            	
				sharpmindsOnlineFormBean.setFatherName(resultSet.getString("fatherName"));

				sharpmindsOnlineFormBean.setApplicationNo(applicationNo);						            	
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getMATSStudentDetails(" + applicationNo + ") - END");
		return sharpmindsOnlineFormBean;
	}
	@Override
	public String insertBKLIAdminData(BKLIOnlineFormBean bkliOnlineFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertBKLIAdminData(" + bkliOnlineFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_BKLI_AdminData(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1, bkliOnlineFormBean.getFirstName());
			callableStatement.setString(2, bkliOnlineFormBean.getLastName());
			callableStatement.setString(3, bkliOnlineFormBean.getFathersName());
			callableStatement.setString(4, bkliOnlineFormBean.getMothersName());	           
			callableStatement.setString(5, bkliOnlineFormBean.getSelectStandard());
			callableStatement.setString(6, bkliOnlineFormBean.getSelectCourseType());
			callableStatement.setString(7, bkliOnlineFormBean.getSelectBoard());
			callableStatement.setString(8, bkliOnlineFormBean.getCollegeName());
			callableStatement.setString(9, bkliOnlineFormBean.getSelectEntranceDate());
			callableStatement.setString(10, bkliOnlineFormBean.getSeatsNo());
			callableStatement.setString(11, bkliOnlineFormBean.getPlaceName());
			callableStatement.setString(12, bkliOnlineFormBean.getEmailId());	
			callableStatement.setString(13, bkliOnlineFormBean.getMobNo1());
			callableStatement.setString(14, bkliOnlineFormBean.getMobNo2());
			callableStatement.setString(15, bkliOnlineFormBean.getAmount());
			callableStatement.setString(16, bkliOnlineFormBean.getSelectPayMode());

			callableStatement.setString(17, bkliOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(18, instituteId);

			callableStatement.registerOutParameter(19, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(19); 
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertBKLIAdminData(" + bkliOnlineFormBean + ") - END");
		return responseString;
	}	

	public String insertSaarcStudentDetails(SaarcOnlineFormBean saarcOnlineFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertSaarcStudentDetails(" + saarcOnlineFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_FJT_SAARC_Registration_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1, saarcOnlineFormBean.getTypeOfMember());
			callableStatement.setString(2, saarcOnlineFormBean.getSelectTitle());
			callableStatement.setString(3, saarcOnlineFormBean.getLastName());
			callableStatement.setString(4, saarcOnlineFormBean.getFirstName());
			callableStatement.setString(5, saarcOnlineFormBean.getMiddleName());
			callableStatement.setString(6, saarcOnlineFormBean.getPreferredName());
			callableStatement.setString(7, saarcOnlineFormBean.getDob());
			callableStatement.setString(8, saarcOnlineFormBean.getSelectGender());
			callableStatement.setString(9, saarcOnlineFormBean.getSelectBg());
			callableStatement.setString(10, saarcOnlineFormBean.getSelectMstatus());			            
			callableStatement.setString(11, saarcOnlineFormBean.getSpouseName());
			callableStatement.setString(12, saarcOnlineFormBean.getSelectNoc());
			callableStatement.setString(13, saarcOnlineFormBean.getSelectQue1());
			callableStatement.setString(14, saarcOnlineFormBean.getSelectQue2());
			callableStatement.setString(15, saarcOnlineFormBean.getOfficeName());
			callableStatement.setString(16, saarcOnlineFormBean.getOfficeFlatNo());
			callableStatement.setString(17, saarcOnlineFormBean.getOfficePremises());
			callableStatement.setString(18, saarcOnlineFormBean.getOfficeRoad());
			callableStatement.setString(19, saarcOnlineFormBean.getOfficeArea());

			callableStatement.setString(20, saarcOnlineFormBean.getOfficeTown());
			callableStatement.setString(21, saarcOnlineFormBean.getOfficeState());
			callableStatement.setString(22, saarcOnlineFormBean.getOfficePincode());
			callableStatement.setString(23, saarcOnlineFormBean.getOfficeCountry());
			callableStatement.setString(24, saarcOnlineFormBean.getOfficeMobile());			            
			callableStatement.setString(25, saarcOnlineFormBean.getOfficeLandline());
			callableStatement.setString(26, saarcOnlineFormBean.getOfficeFax());
			callableStatement.setString(27, saarcOnlineFormBean.getOfficeEmail());
			callableStatement.setString(28, saarcOnlineFormBean.getOfficeTiming());
			callableStatement.setString(29, saarcOnlineFormBean.getHomeFlatNo());
			callableStatement.setString(30, saarcOnlineFormBean.getHomePremises());
			callableStatement.setString(31, saarcOnlineFormBean.getHomeRoad());
			callableStatement.setString(32, saarcOnlineFormBean.getHomeArea());
			callableStatement.setString(33, saarcOnlineFormBean.getHomeTown());
			callableStatement.setString(34, saarcOnlineFormBean.getHomeState());
			callableStatement.setString(35, saarcOnlineFormBean.getHomePincode());
			callableStatement.setString(36, saarcOnlineFormBean.getHomeCountry());
			callableStatement.setString(37, saarcOnlineFormBean.getHomeMobile());
			callableStatement.setString(38, saarcOnlineFormBean.getHomeLandline());
			callableStatement.setString(39, saarcOnlineFormBean.getHomeFax());
			callableStatement.setString(40, saarcOnlineFormBean.getHomeEmail());

			callableStatement.setString(41, saarcOnlineFormBean.getGradCourse());
			callableStatement.setString(42, saarcOnlineFormBean.getSelectGradYear());
			callableStatement.setString(43, saarcOnlineFormBean.getGradInst());
			callableStatement.setString(44, saarcOnlineFormBean.getPostCourse());
			callableStatement.setString(45, saarcOnlineFormBean.getSelectPostYear());
			callableStatement.setString(46, saarcOnlineFormBean.getPostInst());
			callableStatement.setString(47, saarcOnlineFormBean.getSpecialization());
			callableStatement.setString(48, saarcOnlineFormBean.getRegdNo());
			callableStatement.setString(49, saarcOnlineFormBean.getSpzState());
			callableStatement.setString(50, saarcOnlineFormBean.getInterest());
			callableStatement.setString(51, saarcOnlineFormBean.getPublications());												        
			callableStatement.setString(52, saarcOnlineFormBean.getAffiliation());
			callableStatement.setString(53, saarcOnlineFormBean.getSelectDesignation());
			callableStatement.setString(54, saarcOnlineFormBean.getOtherDesig());
			callableStatement.setString(55, saarcOnlineFormBean.getMedicalNo());																		        
			callableStatement.setString(56, saarcOnlineFormBean.getPhoto_upload());
			callableStatement.setString(57, saarcOnlineFormBean.getMarksheet_upload());
			callableStatement.setString(58, saarcOnlineFormBean.getDate());
			callableStatement.setString(59, saarcOnlineFormBean.getAmount());
			callableStatement.setString(60, saarcOnlineFormBean.getAmountWord());
			callableStatement.setString(61, saarcOnlineFormBean.getNoteChk1());
			callableStatement.setString(62, saarcOnlineFormBean.getNoteChk2());  

			callableStatement.setString(63, saarcOnlineFormBean.getFacebookid());
			callableStatement.setString(64, saarcOnlineFormBean.getPassportNo());
			callableStatement.setString(65, saarcOnlineFormBean.getPassportExpiryDate());
			callableStatement.setString(66, saarcOnlineFormBean.getPassportIssuePlace()); 

			callableStatement.setString(67, saarcOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(68, instituteId);

			callableStatement.registerOutParameter(69, Types.VARCHAR);
			callableStatement.registerOutParameter(70, Types.VARCHAR);
			callableStatement.registerOutParameter(71, Types.VARCHAR);
			callableStatement.execute();           
			responseString = callableStatement.getString(71); 
			saarcOnlineFormBean.setStudentRegistrationId(callableStatement.getString(70));
			saarcOnlineFormBean.setApplicationNo(callableStatement.getString(69));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertRamaStudentDetails(" + saarcOnlineFormBean + ") - END");
		return responseString;
	}	
	public SaarcOnlineFormBean getSaarcStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getSHARPStudentDetails(" + applicationNo + ") - START");
		SaarcOnlineFormBean saarcOnlineFormBean = new SaarcOnlineFormBean(); 
		try {
			callableStatement = con.prepareCall("{call PROC_GETSAARC_STUDENTDETAILS(?)}");

			callableStatement.setString(1, applicationNo);								          


			resultSet = callableStatement.executeQuery(); 						            
			while (resultSet.next()) {						            							            	
				saarcOnlineFormBean.setTypeOfMember(resultSet.getString("selectMembership"));

				saarcOnlineFormBean.setSelectTitle(resultSet.getString("selectTitle"));
				saarcOnlineFormBean.setLastName(resultSet.getString("lastName"));
				saarcOnlineFormBean.setFirstName(resultSet.getString("firstName"));
				saarcOnlineFormBean.setMiddleName(resultSet.getString("middleName"));			            				            				            			
				saarcOnlineFormBean.setPreferredName(resultSet.getString("preferredName"));

				saarcOnlineFormBean.setDob(resultSet.getString("dob"));
				saarcOnlineFormBean.setSelectGender(resultSet.getString("selectGender"));            									            	
				saarcOnlineFormBean.setSelectBg(resultSet.getString("selectBg"));												               	
				saarcOnlineFormBean.setSelectMstatus(resultSet.getString("selectMstatus"));            									            	
				saarcOnlineFormBean.setSpouseName(resultSet.getString("spouseName"));
				saarcOnlineFormBean.setSelectNoc(resultSet.getString("selectNoc"));
				saarcOnlineFormBean.setSelectQue1(resultSet.getString("selectQue1"));            									            	
				saarcOnlineFormBean.setSelectQue2(resultSet.getString("selectQue2"));	

				saarcOnlineFormBean.setOfficeName(resultSet.getString("officeName"));
				saarcOnlineFormBean.setOfficeFlatNo(resultSet.getString("officeFlatNo"));            									            	
				saarcOnlineFormBean.setOfficePremises(resultSet.getString("officePremises"));												               	
				saarcOnlineFormBean.setOfficeRoad(resultSet.getString("officeRoad"));            									            	
				saarcOnlineFormBean.setOfficeArea(resultSet.getString("officeArea"));
				saarcOnlineFormBean.setOfficeTown(resultSet.getString("officeTown"));
				saarcOnlineFormBean.setOfficeState(resultSet.getString("officeState"));            									            	
				saarcOnlineFormBean.setOfficePincode(resultSet.getString("officePincode"));
				saarcOnlineFormBean.setOfficeCountry(resultSet.getString("officeCountry"));
				saarcOnlineFormBean.setOfficeMobile(resultSet.getString("officeMobile"));            									            	
				saarcOnlineFormBean.setOfficeLandline(resultSet.getString("officeLandline"));																            	
				saarcOnlineFormBean.setOfficeFax(resultSet.getString("officeFax"));
				saarcOnlineFormBean.setOfficeEmail(resultSet.getString("officeEmail"));
				saarcOnlineFormBean.setOfficeTiming(resultSet.getString("officeTiming"));    

				saarcOnlineFormBean.setHomeFlatNo(resultSet.getString("homeFlatNo"));  
				saarcOnlineFormBean.setHomePremises(resultSet.getString("homePremises"));  
				saarcOnlineFormBean.setHomeRoad(resultSet.getString("homeRoad"));  
				saarcOnlineFormBean.setHomeArea(resultSet.getString("homeArea"));  
				saarcOnlineFormBean.setHomeTown(resultSet.getString("homeTown"));  
				saarcOnlineFormBean.setHomeState(resultSet.getString("homeState"));  
				saarcOnlineFormBean.setHomePincode(resultSet.getString("homePincode"));  
				saarcOnlineFormBean.setHomeCountry(resultSet.getString("homeCountry"));  
				saarcOnlineFormBean.setHomeMobile(resultSet.getString("homeMobile"));  
				saarcOnlineFormBean.setHomeLandline(resultSet.getString("homeLandline")); 																     
				saarcOnlineFormBean.setHomeFax(resultSet.getString("homeFax"));  
				saarcOnlineFormBean.setHomeEmail(resultSet.getString("homeEmail"));  

				saarcOnlineFormBean.setGradCourse(resultSet.getString("gradCourse"));
				saarcOnlineFormBean.setSelectGradYear(resultSet.getString("selectGradYear"));
				saarcOnlineFormBean.setGradInst(resultSet.getString("gradInst"));  
				saarcOnlineFormBean.setPostCourse(resultSet.getString("postCourse"));  
				saarcOnlineFormBean.setSelectPostYear(resultSet.getString("selectPostYear")); 																     
				saarcOnlineFormBean.setPostInst(resultSet.getString("postInst"));  
				saarcOnlineFormBean.setSpecialization(resultSet.getString("Specialization"));
				saarcOnlineFormBean.setRegdNo(resultSet.getString("regdNo"));  
				saarcOnlineFormBean.setSpzState(resultSet.getString("spzState")); 																     
				saarcOnlineFormBean.setInterest(resultSet.getString("interest"));  
				saarcOnlineFormBean.setPublications(resultSet.getString("publications"));

				saarcOnlineFormBean.setAffiliation(resultSet.getString("affiliation")); 																     
				saarcOnlineFormBean.setSelectDesignation(resultSet.getString("selectDesignation"));  
				saarcOnlineFormBean.setOtherDesig(resultSet.getString("otherDesig"));
				saarcOnlineFormBean.setMedicalNo(resultSet.getString("medicalNo"));  
				saarcOnlineFormBean.setPhoto_upload(resultSet.getString("photo_upload")); 																     
				saarcOnlineFormBean.setMarksheet_upload(resultSet.getString("marksheet_upload"));  
				saarcOnlineFormBean.setDate(resultSet.getString("date"));

				saarcOnlineFormBean.setAmount(resultSet.getString("amount"));  
				saarcOnlineFormBean.setAmountWord(resultSet.getString("amountWord")); 																     
				saarcOnlineFormBean.setNoteChk1(resultSet.getString("noteChk1"));  
				saarcOnlineFormBean.setNoteChk2(resultSet.getString("noteChk2"));
				saarcOnlineFormBean.setFacebookid(resultSet.getString("facebookid"));  
				saarcOnlineFormBean.setPassportNo(resultSet.getString("PassportNo")); 																     
				saarcOnlineFormBean.setPassportExpiryDate(resultSet.getString("PassportExpiryDate"));  
				saarcOnlineFormBean.setPassportIssuePlace(resultSet.getString("PassportIssuePlace"));

				saarcOnlineFormBean.setApplicationNo(applicationNo);						            	
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getMATSStudentDetails(" + applicationNo + ") - END");
		return saarcOnlineFormBean;
	}
	public String insertExistSaarcStudentDetails(SAARCExistOnlineFormBean saarcExistOnlineFormBean,String instituteId){
		long startTime = System.currentTimeMillis();
		logger.info("insertExistSaarcStudentDetails(" + saarcExistOnlineFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_SAARCExist_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1, saarcExistOnlineFormBean.getSelectTitle());
			callableStatement.setString(2, saarcExistOnlineFormBean.getLastName());
			callableStatement.setString(3, saarcExistOnlineFormBean.getFirstName());
			callableStatement.setString(4, saarcExistOnlineFormBean.getMiddleName());	           
			callableStatement.setString(5, saarcExistOnlineFormBean.getAcaDegree());
			callableStatement.setString(6, saarcExistOnlineFormBean.getNationality());
			callableStatement.setString(7, saarcExistOnlineFormBean.getProfCategory());
			callableStatement.setString(8, saarcExistOnlineFormBean.getPractice());
			callableStatement.setString(9, saarcExistOnlineFormBean.getAddress());
			callableStatement.setString(10, saarcExistOnlineFormBean.getPincode());
			callableStatement.setString(11, saarcExistOnlineFormBean.getCity());
			callableStatement.setString(12, saarcExistOnlineFormBean.getSelectCountry());	
			callableStatement.setString(13, saarcExistOnlineFormBean.getSelectState());
			callableStatement.setString(14, saarcExistOnlineFormBean.getMobile());
			callableStatement.setString(15, saarcExistOnlineFormBean.getLandline());
			callableStatement.setString(16, saarcExistOnlineFormBean.getEmail());	
			callableStatement.setString(17, saarcExistOnlineFormBean.getSelectQue1());
			callableStatement.setString(18, saarcExistOnlineFormBean.getSelectMembershipType());
			callableStatement.setString(19, saarcExistOnlineFormBean.getReferId());
			callableStatement.setString(20, saarcExistOnlineFormBean.getTypeOfMember());
			callableStatement.setString(21, saarcExistOnlineFormBean.getSelectDelegates());
			callableStatement.setString(22, saarcExistOnlineFormBean.getAmount());

			callableStatement.setString(23, saarcExistOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(24, instituteId);
			callableStatement.setString(25, saarcExistOnlineFormBean.getFacebookId());
			callableStatement.setString(26, saarcExistOnlineFormBean.getPassportNo());
			callableStatement.setString(27, saarcExistOnlineFormBean.getPassExpDate());
			callableStatement.setString(28, saarcExistOnlineFormBean.getPassportPlace());
			callableStatement.setString(29, saarcExistOnlineFormBean.getOtherType());
			callableStatement.setString(30, saarcExistOnlineFormBean.getOtherFees());
			callableStatement.setString(31, saarcExistOnlineFormBean.getSelectYesNo());
			callableStatement.setString(32, saarcExistOnlineFormBean.getTypeOfValue());
			callableStatement.setString(33, saarcExistOnlineFormBean.getDelegateNum());


			callableStatement.registerOutParameter(34, Types.VARCHAR);
			callableStatement.registerOutParameter(35, Types.VARCHAR);
			callableStatement.registerOutParameter(36, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(36); 
			saarcExistOnlineFormBean.setStudentRegistrationId(callableStatement.getString(35));
			saarcExistOnlineFormBean.setApplicationNo(callableStatement.getString(34));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertExistSaarcStudentDetails(" + saarcExistOnlineFormBean + ") - END");
		return responseString;
	}
	public String insertExistSaarcGridDetails(SAARCExistGridFormBean saarcExistGridFormBean,String applicationNo){
		long startTime = System.currentTimeMillis();
		logger.info("insertExistSaarcGridDetails(" + saarcExistGridFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_SAARCExist_GridDetails(?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1, saarcExistGridFormBean.getName());
			callableStatement.setString(2, saarcExistGridFormBean.getSelectGender());
			callableStatement.setString(3, saarcExistGridFormBean.getAge());
			callableStatement.setString(4, saarcExistGridFormBean.getMemberRelation());
			callableStatement.setString(5, applicationNo);
			callableStatement.setString(6, saarcExistGridFormBean.getPassportNo());
			callableStatement.setString(7, saarcExistGridFormBean.getPassExpDate());
			callableStatement.setString(8, saarcExistGridFormBean.getPassportPlace());
			callableStatement.registerOutParameter(9, Types.VARCHAR);	          

			callableStatement.execute();           
			responseString = callableStatement.getString(9); 	
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertExistSaarcGridDetails(" + saarcExistGridFormBean + ") - END");
		return responseString;
	}
	public SAARCExistOnlineFormBean getSAARCExistStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getSAARCExistStudentDetails(" + applicationNo + ") - START");  
		SAARCExistOnlineFormBean saarcExistOnlineFormBean = new SAARCExistOnlineFormBean();
		try {
			callableStatement = con.prepareCall("{call PROC_GETSAARExistStudentDetails(?)}");

			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {					            	
				saarcExistOnlineFormBean.setSelectTitle(resultSet.getString("selectTitle"));
				saarcExistOnlineFormBean.setLastName(resultSet.getString("lastName"));            	
				saarcExistOnlineFormBean.setFirstName(resultSet.getString("firstName"));
				saarcExistOnlineFormBean.setMiddleName(resultSet.getString("middleName"));
				saarcExistOnlineFormBean.setAcaDegree(resultSet.getString("acaDegree"));
				saarcExistOnlineFormBean.setNationality(resultSet.getString("nationality"));
				saarcExistOnlineFormBean.setProfCategory(resultSet.getString("profCategory"));						            	
				saarcExistOnlineFormBean.setPractice(resultSet.getString("practice"));
				saarcExistOnlineFormBean.setAddress(resultSet.getString("address"));
				saarcExistOnlineFormBean.setPincode(resultSet.getString("pincode"));
				saarcExistOnlineFormBean.setCity(resultSet.getString("city"));
				saarcExistOnlineFormBean.setSelectCountry(resultSet.getString("selectCountry"));
				saarcExistOnlineFormBean.setSelectState(resultSet.getString("selectState"));
				saarcExistOnlineFormBean.setMobile(resultSet.getString("mobile"));
				saarcExistOnlineFormBean.setLandline(resultSet.getString("landline"));
				saarcExistOnlineFormBean.setEmail(resultSet.getString("email"));
				saarcExistOnlineFormBean.setSelectQue1(resultSet.getString("selectQue1"));
				saarcExistOnlineFormBean.setSelectMembershipType(resultSet.getString("selectMembershipType"));
				saarcExistOnlineFormBean.setReferId(resultSet.getString("referId"));
				saarcExistOnlineFormBean.setTypeOfMember(resultSet.getString("typeOfMember"));
				saarcExistOnlineFormBean.setSelectDelegates(resultSet.getString("selectDelegates"));
				saarcExistOnlineFormBean.setAmount(resultSet.getString("amount"));
				saarcExistOnlineFormBean.setFacebookId(resultSet.getString("facebookId"));
				saarcExistOnlineFormBean.setPassportNo(resultSet.getString("passportNo"));
				saarcExistOnlineFormBean.setPassExpDate(resultSet.getString("passExpDate"));
				saarcExistOnlineFormBean.setPassportPlace(resultSet.getString("passportPlace"));
				saarcExistOnlineFormBean.setOtherType(resultSet.getString("otherType"));
				saarcExistOnlineFormBean.setOtherFees(resultSet.getString("otherFees"));																            	
				saarcExistOnlineFormBean.setSelectYesNo(resultSet.getString("selectYesNo"));
				saarcExistOnlineFormBean.setTypeOfValue(resultSet.getString("typeOfValue"));
				saarcExistOnlineFormBean.setDelegateNum(resultSet.getString("delegateNum"));
				saarcExistOnlineFormBean.setApplicationNo(applicationNo);
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getSAARCExistStudentDetails(" + saarcExistOnlineFormBean + ") - END");
		return saarcExistOnlineFormBean;
	}
	public List getSAARC_GridDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getSAARC_GridDetails(" + applicationNo + ") - START");
		List<SAARCExistGridFormBean> list = null;				
		try {
			callableStatement = con.prepareCall("{call PROC_GETSAARExistGridDetails(?)}");

			callableStatement.setString(1, applicationNo);								            
			resultSet = callableStatement.executeQuery(); 
			list = new ArrayList<SAARCExistGridFormBean>();
			while (resultSet.next()) {
				SAARCExistGridFormBean saarcExistGridFormBean = new SAARCExistGridFormBean();
				saarcExistGridFormBean.setName(resultSet.getString("name"));
				saarcExistGridFormBean.setSelectGender(resultSet.getString("selectGender"));
				saarcExistGridFormBean.setAge(resultSet.getString("age"));
				saarcExistGridFormBean.setMemberRelation(resultSet.getString("memberRelation"));
				saarcExistGridFormBean.setPassportNo(resultSet.getString("passportNo"));
				saarcExistGridFormBean.setPassExpDate(resultSet.getString("passExpDate"));
				saarcExistGridFormBean.setPassportPlace(resultSet.getString("passportPlace"));
				list.add(saarcExistGridFormBean);
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getSAARC_GridDetails(" + applicationNo + ") - END");
		return list;
	}	
	public String insertSaarcSusStudentDetails(SAARCExistOnlineFormBean saarcExistOnlineFormBean,String instituteId){
		long startTime = System.currentTimeMillis();
		logger.info("insertExistSaarcStudentDetails(" + saarcExistOnlineFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_SAARCSustainer_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1, saarcExistOnlineFormBean.getSelectTitle());
			callableStatement.setString(2, saarcExistOnlineFormBean.getLastName());
			callableStatement.setString(3, saarcExistOnlineFormBean.getFirstName());
			callableStatement.setString(4, saarcExistOnlineFormBean.getMiddleName());	           
			callableStatement.setString(5, saarcExistOnlineFormBean.getAcaDegree());
			callableStatement.setString(6, saarcExistOnlineFormBean.getNationality());												            
			callableStatement.setString(7, saarcExistOnlineFormBean.getFacebookId());
			callableStatement.setString(8, saarcExistOnlineFormBean.getPassportNo());	           
			callableStatement.setString(9, saarcExistOnlineFormBean.getPassExpDate());
			callableStatement.setString(10, saarcExistOnlineFormBean.getPassportPlace());											            

			callableStatement.setString(11, saarcExistOnlineFormBean.getProfCategory());
			callableStatement.setString(12, saarcExistOnlineFormBean.getPractice());
			callableStatement.setString(13, saarcExistOnlineFormBean.getAddress());
			callableStatement.setString(14, saarcExistOnlineFormBean.getPincode());
			callableStatement.setString(15, saarcExistOnlineFormBean.getCity());
			callableStatement.setString(16, saarcExistOnlineFormBean.getSelectCountry());	
			callableStatement.setString(17, saarcExistOnlineFormBean.getSelectState());
			callableStatement.setString(18, saarcExistOnlineFormBean.getMobile1());
			callableStatement.setString(19, saarcExistOnlineFormBean.getLandline());
			callableStatement.setString(20, saarcExistOnlineFormBean.getEmail());

			callableStatement.setString(21, saarcExistOnlineFormBean.getSelectQue1());
			callableStatement.setString(22, saarcExistOnlineFormBean.getSelectMembershipType());
			callableStatement.setString(23, saarcExistOnlineFormBean.getReferId());
			callableStatement.setString(24, saarcExistOnlineFormBean.getTypeOfMember());
			callableStatement.setString(25, saarcExistOnlineFormBean.getSelectDelegates());
			callableStatement.setString(26, saarcExistOnlineFormBean.getOtherType());
			callableStatement.setString(27, saarcExistOnlineFormBean.getOtherFees());												            
			callableStatement.setString(28, saarcExistOnlineFormBean.getSelectYesNo());

			callableStatement.setString(29, saarcExistOnlineFormBean.getTypeOfValue());
			callableStatement.setString(30, saarcExistOnlineFormBean.getDelegateNum());

			callableStatement.setString(31, saarcExistOnlineFormBean.getAmount());												            						            						            
			callableStatement.setString(32, saarcExistOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(33, instituteId);


			callableStatement.registerOutParameter(34, Types.VARCHAR);
			callableStatement.registerOutParameter(35, Types.VARCHAR);
			callableStatement.registerOutParameter(36, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(36); 
			saarcExistOnlineFormBean.setStudentRegistrationId(callableStatement.getString(35));
			saarcExistOnlineFormBean.setApplicationNo(callableStatement.getString(34));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertExistSaarcStudentDetails(" + saarcExistOnlineFormBean + ") - END");
		return responseString;
	}
	public String insertSaarcSustainerGridDetails(SAARCExistGridFormBean saarcExistGridFormBean,String applicationNo){
		long startTime = System.currentTimeMillis();
		logger.info("insertExistSaarcGridDetails(" + saarcExistGridFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_SAARCSustainer_GridDetails(?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1, saarcExistGridFormBean.getName());
			callableStatement.setString(2, saarcExistGridFormBean.getSelectGender());
			callableStatement.setString(3, saarcExistGridFormBean.getAge());
			callableStatement.setString(4, saarcExistGridFormBean.getMemberRelation());

			callableStatement.setString(5, saarcExistGridFormBean.getPassportNo());
			callableStatement.setString(6, saarcExistGridFormBean.getPassExpDate());
			callableStatement.setString(7, saarcExistGridFormBean.getPassportPlace());
			callableStatement.setString(8, applicationNo);	            	                                  
			callableStatement.registerOutParameter(9, Types.VARCHAR);	          

			callableStatement.execute();           
			responseString = callableStatement.getString(9); 	
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertExistSaarcGridDetails(" + saarcExistGridFormBean + ") - END");
		return responseString;
	}
	public SAARCExistOnlineFormBean getSAARCSustainerStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getSAARCExistStudentDetails(" + applicationNo + ") - START");  
		SAARCExistOnlineFormBean saarcExistOnlineFormBean = new SAARCExistOnlineFormBean();
		try {
			callableStatement = con.prepareCall("{call PROC_GETSAARCSUSTAINER_StudentDetails(?)}");

			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {					            	
				saarcExistOnlineFormBean.setSelectTitle(resultSet.getString("selectTitle"));
				saarcExistOnlineFormBean.setLastName(resultSet.getString("lastName"));            	
				saarcExistOnlineFormBean.setFirstName(resultSet.getString("firstName"));
				saarcExistOnlineFormBean.setMiddleName(resultSet.getString("middleName"));
				saarcExistOnlineFormBean.setAcaDegree(resultSet.getString("acaDegree"));
				saarcExistOnlineFormBean.setNationality(resultSet.getString("nationality"));

				saarcExistOnlineFormBean.setFacebookId(resultSet.getString("facebookId"));
				saarcExistOnlineFormBean.setPassportNo(resultSet.getString("passportNo"));
				saarcExistOnlineFormBean.setPassExpDate(resultSet.getString("passExpDate"));
				saarcExistOnlineFormBean.setPassportPlace(resultSet.getString("passportPlace"));


				saarcExistOnlineFormBean.setProfCategory(resultSet.getString("profCategory"));						            	
				saarcExistOnlineFormBean.setPractice(resultSet.getString("practice"));
				saarcExistOnlineFormBean.setAddress(resultSet.getString("address"));
				saarcExistOnlineFormBean.setPincode(resultSet.getString("pincode"));
				saarcExistOnlineFormBean.setCity(resultSet.getString("city"));
				saarcExistOnlineFormBean.setSelectCountry(resultSet.getString("selectCountry"));
				saarcExistOnlineFormBean.setSelectState(resultSet.getString("selectState"));
				saarcExistOnlineFormBean.setMobile1(resultSet.getString("mobile"));
				saarcExistOnlineFormBean.setLandline(resultSet.getString("landline"));
				saarcExistOnlineFormBean.setEmail(resultSet.getString("email"));
				saarcExistOnlineFormBean.setSelectQue1(resultSet.getString("selectQue1"));
				saarcExistOnlineFormBean.setSelectMembershipType(resultSet.getString("selectMembershipType"));
				saarcExistOnlineFormBean.setTypeOfMember(resultSet.getString("typeOfMember"));
				saarcExistOnlineFormBean.setSelectDelegates(resultSet.getString("selectDelegates"));	

				saarcExistOnlineFormBean.setOtherType(resultSet.getString("otherType"));	
				saarcExistOnlineFormBean.setOtherFees(resultSet.getString("otherFees"));	
				saarcExistOnlineFormBean.setSelectYesNo(resultSet.getString("selectYesNo"));	
				saarcExistOnlineFormBean.setTypeOfValue(resultSet.getString("typeOfValue"));	
				saarcExistOnlineFormBean.setDelegateNum(resultSet.getString("delegateNum"));	

				saarcExistOnlineFormBean.setAmount(resultSet.getString("amount"));
				saarcExistOnlineFormBean.setApplicationNo(applicationNo);
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getSAARCExistStudentDetails(" + saarcExistOnlineFormBean + ") - END");
		return saarcExistOnlineFormBean;
	}
	public List getSAARCSustainerGridDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getSAARC_GridDetails(" + applicationNo + ") - START");
		List<SAARCExistGridFormBean> list = null;				
		try {
			callableStatement = con.prepareCall("{call PROC_GETSAARCSUSTAINERGridDetails(?)}");

			callableStatement.setString(1, applicationNo);								            
			resultSet = callableStatement.executeQuery(); 
			list = new ArrayList<SAARCExistGridFormBean>();
			while (resultSet.next()) {
				SAARCExistGridFormBean saarcExistGridFormBean = new SAARCExistGridFormBean();
				saarcExistGridFormBean.setName(resultSet.getString("name"));
				saarcExistGridFormBean.setSelectGender(resultSet.getString("selectGender"));
				saarcExistGridFormBean.setAge(resultSet.getString("age"));
				saarcExistGridFormBean.setMemberRelation(resultSet.getString("memberRelation"));
				saarcExistGridFormBean.setPassportNo(resultSet.getString("passportNo"));
				saarcExistGridFormBean.setPassExpDate(resultSet.getString("passExpDate"));
				saarcExistGridFormBean.setPassportPlace(resultSet.getString("passportPlace"));
				list.add(saarcExistGridFormBean);
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getSAARC_GridDetails(" + applicationNo + ") - END");
		return list;
	}

	@Override
	public String insertEtoosStudentDetails(EtoosOnlineFormBean etoosOnlineFormBean,String billerId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertDOONStudentDetails(" + etoosOnlineFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_ETOOS_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			//callableStatement.setString(1, niprOnlineFormBean.getFormId());
			callableStatement.setString(1, etoosOnlineFormBean.getSalesAmount());
			callableStatement.setString(2, etoosOnlineFormBean.getOrderNo());
			callableStatement.setString(3, etoosOnlineFormBean.getDescription());
			callableStatement.setString(4, etoosOnlineFormBean.getName());	           
			callableStatement.setString(5, etoosOnlineFormBean.getEmailId());
			callableStatement.setString(6, etoosOnlineFormBean.getAddress());
			callableStatement.setString(7, etoosOnlineFormBean.getState());
			callableStatement.setString(8, etoosOnlineFormBean.getCity());
			callableStatement.setString(9, etoosOnlineFormBean.getPostalCode());
			callableStatement.setString(10, etoosOnlineFormBean.getCountry());
			callableStatement.setString(11, etoosOnlineFormBean.getTelNo());


			callableStatement.setString(12, etoosOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(13, billerId);


			callableStatement.registerOutParameter(14, Types.VARCHAR);
			callableStatement.registerOutParameter(15, Types.VARCHAR);
			callableStatement.registerOutParameter(16, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(16); 
			etoosOnlineFormBean.setStudentRegistrationId(callableStatement.getString(15));
			etoosOnlineFormBean.setApplicationNo(callableStatement.getString(14));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertDOONStudentDetails(" + etoosOnlineFormBean + ") - END");
		return responseString;
	}	

	public EtoosOnlineFormBean getEtoosStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getEtoosStudentDetails(" + applicationNo + ") - START");  
		EtoosOnlineFormBean etoosOnlineFormBean = new EtoosOnlineFormBean();
		try {
			callableStatement = con.prepareCall("{call PROC_GETETOOSSTUDENTDETAILS(?)}");

			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {					            	
				etoosOnlineFormBean.setSalesAmount(resultSet.getString("SALES_AMOUNT"));
				etoosOnlineFormBean.setOrderNo(resultSet.getString("ORDER_NO"));
				etoosOnlineFormBean.setDescription(resultSet.getString("DESCRIPTION"));
				etoosOnlineFormBean.setName(resultSet.getString("NAME"));
				etoosOnlineFormBean.setEmailId(resultSet.getString("EMAILID"));
				etoosOnlineFormBean.setAddress(resultSet.getString("ADDRESS"));
				etoosOnlineFormBean.setState(resultSet.getString("STATE"));
				etoosOnlineFormBean.setCity(resultSet.getString("CITY"));
				etoosOnlineFormBean.setPostalCode(resultSet.getString("POSTAL_CODE"));
				etoosOnlineFormBean.setCountry(resultSet.getString("COUNTRY"));
				etoosOnlineFormBean.setTelNo(resultSet.getString("TELEPHONE_NUMBER"));

				etoosOnlineFormBean.setApplicationNo(applicationNo);
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getDOONStudentDetails(" + etoosOnlineFormBean + ") - END");
		return etoosOnlineFormBean;
	}
	public String insertIibmsStudentDetails(IIBMSFormBean iibmsOnlineFormBean,String billerId) {

		long startTime = System.currentTimeMillis();
		logger.info("insertIibmsStudentDetails(" + iibmsOnlineFormBean + ") - START");
		logger.info("insertIibmsStudentDetails---billerId : "+billerId);

		String responseString = null;
		try{
			callableStatement = con.prepareCall("{call PROC_IIBMS_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,iibmsOnlineFormBean.getName());
			callableStatement.setString(2,iibmsOnlineFormBean.getBranchName());
			callableStatement.setString(3,iibmsOnlineFormBean.getCounsellorName());
			callableStatement.setString(4,iibmsOnlineFormBean.getPhoneNo());
			callableStatement.setString(5,iibmsOnlineFormBean.getCoursesDetails());
			callableStatement.setString(6,iibmsOnlineFormBean.getPayAmount());

			callableStatement.setString(7,iibmsOnlineFormBean.getCurrencyType());

			callableStatement.setString(8,iibmsOnlineFormBean.getSelectTransType());
			callableStatement.setString(9,iibmsOnlineFormBean.getComment());
			callableStatement.setString(10,iibmsOnlineFormBean.getAddress());
			callableStatement.setString(11,iibmsOnlineFormBean.getCity());
			callableStatement.setString(12,iibmsOnlineFormBean.getState());
			callableStatement.setString(13,iibmsOnlineFormBean.getZipCode());
			callableStatement.setString(14,iibmsOnlineFormBean.getSelectCountry());
			callableStatement.setString(15,iibmsOnlineFormBean.getEmail());

			callableStatement.setString(16,iibmsOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(17,billerId);

			callableStatement.registerOutParameter(18, Types.VARCHAR);
			callableStatement.registerOutParameter(19, Types.VARCHAR);
			callableStatement.registerOutParameter(20, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(20); 
			iibmsOnlineFormBean.setStudentRegistrationId(callableStatement.getString(19));
			iibmsOnlineFormBean.setApplicationNo(callableStatement.getString(18));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertiibmsStudentDetails(" + iibmsOnlineFormBean + ") - END");
		return responseString;

	}

	@Override
	public IIBMSFormBean getIibmdStudentDetails(String applicationNo) {

		long startTime = System.currentTimeMillis();
		logger.info("getiibmsStudentDetails(" + applicationNo + ") - START");  
		IIBMSFormBean iibmsOnlineFormBean = new IIBMSFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GETE_TO_IIBMS_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {
				logger.info("name1111111 :: "+resultSet.getString("NAME"));
				iibmsOnlineFormBean.setName(resultSet.getString("NAME"));
				iibmsOnlineFormBean.setBranchName(resultSet.getString("BRANCH_NAME"));
				iibmsOnlineFormBean.setCounsellorName(resultSet.getString("COUNSELLOR_NAME"));
				iibmsOnlineFormBean.setPhoneNo(resultSet.getString("PHONE_NUMBER"));
				iibmsOnlineFormBean.setCoursesDetails(resultSet.getString("COURSES_DETAILS"));
				iibmsOnlineFormBean.setPayAmount(resultSet.getString("PAY_AMOUNT"));
				iibmsOnlineFormBean.setCurrencyType(resultSet.getString("currency_type"));
				iibmsOnlineFormBean.setSelectTransType(resultSet.getString("TRANSACTION_TYPE"));
				iibmsOnlineFormBean.setComment(resultSet.getString("COMMENT"));
				iibmsOnlineFormBean.setAddress(resultSet.getString("ADDRESS"));
				iibmsOnlineFormBean.setCity(resultSet.getString("CITY"));
				iibmsOnlineFormBean.setState(resultSet.getString("STATE"));
				iibmsOnlineFormBean.setZipCode(resultSet.getString("POSTAL_CODE"));
				iibmsOnlineFormBean.setSelectCountry(resultSet.getString("COUNTRY"));
				iibmsOnlineFormBean.setEmail(resultSet.getString("EMAIL"));
				iibmsOnlineFormBean.setApplicationNo(applicationNo);



			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getIibmdStudentDetails(" + iibmsOnlineFormBean + ") - END");
		return iibmsOnlineFormBean;


	}

	public String insertPPAStudentDetails(PPAFormBean ppaOnlineFormBean, String billerId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("insertIibmsStudentDetails(" + ppaOnlineFormBean + ") - START");
		logger.info("insertIibmsStudentDetails---billerId : "+billerId);

		String responseString = null;
		try{
			callableStatement = con.prepareCall("{call PROC_PPA_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,ppaOnlineFormBean.getName());
			callableStatement.setString(2,ppaOnlineFormBean.getCourse());
			callableStatement.setString(3,ppaOnlineFormBean.getOtherCourse());
			callableStatement.setString(4,ppaOnlineFormBean.getLevel());
			callableStatement.setString(5,ppaOnlineFormBean.getPerAddress());
			callableStatement.setString(6,ppaOnlineFormBean.getLocAddress());
			callableStatement.setString(7,ppaOnlineFormBean.getMobileNo());
			callableStatement.setString(8,ppaOnlineFormBean.getEmailId());
			callableStatement.setString(9,ppaOnlineFormBean.getPayAmount());

			callableStatement.setString(10,ppaOnlineFormBean.getRegisteredUserId());

			callableStatement.setString(11,billerId);

			callableStatement.registerOutParameter(12, Types.VARCHAR);
			callableStatement.registerOutParameter(13, Types.VARCHAR);
			callableStatement.registerOutParameter(14, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(14); 
			ppaOnlineFormBean.setStudentRegistrationId(callableStatement.getString(13));
			ppaOnlineFormBean.setApplicationNo(callableStatement.getString(12));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertiibmsStudentDetails(" + ppaOnlineFormBean + ") - END");
		return responseString;





	}

	public PPAFormBean getPPAStudentDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getppaStudentDetails(" + applicationNo + ") - START");  
		PPAFormBean ppaOnlineFormBean = new PPAFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GETE_TO_PPA_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {
				logger.info("name1111111 :: "+resultSet.getString("NAME"));
				ppaOnlineFormBean.setName(resultSet.getString("NAME"));
				ppaOnlineFormBean.setCourse(resultSet.getString("COURSE"));
				ppaOnlineFormBean.setOtherCourse(resultSet.getString("SPECIFY_COURSE"));
				ppaOnlineFormBean.setLevel(resultSet.getString("LEVEL"));
				ppaOnlineFormBean.setPerAddress(resultSet.getString("PERMANENT_ADDRESS"));
				ppaOnlineFormBean.setLocAddress(resultSet.getString("LOCAL_ADRESS"));
				ppaOnlineFormBean.setMobileNo(resultSet.getString("MOBILE_NO"));
				ppaOnlineFormBean.setEmailId(resultSet.getString("EMAIL_ID"));
				ppaOnlineFormBean.setPayAmount(resultSet.getString("PAY_AMOUNT"));
				ppaOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getPPAStudentDetails(" + ppaOnlineFormBean + ") - END");
		return ppaOnlineFormBean;
	}
	public String insertOrigenceStudentDetails(OrigenceOnlineFormBean origenceOnlineFormBean, String billerId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("insertOrigenceStudentDetails(" + origenceOnlineFormBean + ") - START");
		logger.info("insertOrigenceStudentDetails---billerId : "+billerId);

		String responseString = null;
		try{
			callableStatement = con.prepareCall("{call PROC_Origence_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,origenceOnlineFormBean.getStdName());
			callableStatement.setString(2,origenceOnlineFormBean.getFatherName());
			callableStatement.setString(3,origenceOnlineFormBean.getStudentId());
			callableStatement.setString(4,origenceOnlineFormBean.getMobile());
			callableStatement.setString(5,origenceOnlineFormBean.getEmail());
			callableStatement.setString(6,origenceOnlineFormBean.getStdCourse());
			callableStatement.setString(7,origenceOnlineFormBean.getStdBatch());
			callableStatement.setString(8,origenceOnlineFormBean.getPayAmount());
			callableStatement.setString(9,origenceOnlineFormBean.getServiceTax());
			callableStatement.setString(10,origenceOnlineFormBean.getTotAmount());				
			callableStatement.setString(11,origenceOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(12,billerId);
			callableStatement.registerOutParameter(13, Types.VARCHAR);
			callableStatement.registerOutParameter(14, Types.VARCHAR);
			callableStatement.registerOutParameter(15, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(15); 
			origenceOnlineFormBean.setStudentRegistrationId(callableStatement.getString(14));
			origenceOnlineFormBean.setApplicationNo(callableStatement.getString(13));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertOrigenceStudentDetails(" + origenceOnlineFormBean + ") - END");
		return responseString;





	}

	public OrigenceOnlineFormBean getOrigenceStudentDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getOrigenceStudentDetails(" + applicationNo + ") - START");  
		OrigenceOnlineFormBean origenceOnlineFormBean = new OrigenceOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_ORIGENCE_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            	
				origenceOnlineFormBean.setStdName(resultSet.getString("stdName"));
				origenceOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				origenceOnlineFormBean.setStudentId(resultSet.getString("studentId"));
				origenceOnlineFormBean.setMobile(resultSet.getString("mobile"));
				origenceOnlineFormBean.setEmail(resultSet.getString("email"));
				origenceOnlineFormBean.setStdCourse(resultSet.getString("stdCourse"));
				origenceOnlineFormBean.setStdBatch(resultSet.getString("stdBatch"));
				origenceOnlineFormBean.setPayAmount(resultSet.getString("payAmount"));
				origenceOnlineFormBean.setServiceTax(resultSet.getString("serviceTax"));
				origenceOnlineFormBean.setTotAmount(resultSet.getString("totAmount"));
				origenceOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getOrigenceStudentDetails(" + origenceOnlineFormBean + ") - END");
		return origenceOnlineFormBean;
	}			
	@Override
	public String insertPrincipalStudentDetails(PrincipalAIAFormBean principalOnlineFormBean,String billerId) {
		// TODO Auto-generated method stub

		long startTime = System.currentTimeMillis();
		logger.info("insertPrincipalStudentDetails(" + principalOnlineFormBean + ") - START");
		logger.info("insertPrincipalStudentDetails---billerId : "+billerId);

		String responseString = null;
		try{
			callableStatement = con.prepareCall("{call PROC_Principal_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,principalOnlineFormBean.getAddress());
			callableStatement.setString(2,principalOnlineFormBean.getFatherName());
			callableStatement.setString(3,principalOnlineFormBean.getContactNo());
			callableStatement.setString(4,principalOnlineFormBean.getEmailId());
			callableStatement.setString(5,principalOnlineFormBean.getPaymentFor());
			callableStatement.setString(6,principalOnlineFormBean.getAmount());
			callableStatement.setString(7,principalOnlineFormBean.getRemarks());
			callableStatement.setString(8,principalOnlineFormBean.getName());
			callableStatement.setString(9,principalOnlineFormBean.getEnrollmentNo());
			callableStatement.setString(10,principalOnlineFormBean.getTotalamount());
			callableStatement.setString(11,principalOnlineFormBean.getRegisteredUserId());

			callableStatement.setString(12,billerId);

			callableStatement.registerOutParameter(13, Types.VARCHAR);
			callableStatement.registerOutParameter(14, Types.VARCHAR);
			callableStatement.registerOutParameter(15, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(15); 
			principalOnlineFormBean.setStudentRegistrationId(callableStatement.getString(14));
			principalOnlineFormBean.setApplicationNo(callableStatement.getString(13));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertPrincipalStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertprincipalStudentDetails(" + principalOnlineFormBean + ") - END");
		return responseString;




	}

	@Override
	public PrincipalAIAFormBean getPrincipalStudentDetails(String applicationNo) {



		long startTime = System.currentTimeMillis();
		logger.info("getPrincipalStudentDetails(" + applicationNo + ") - START");  
		PrincipalAIAFormBean principalOnlineFormBean = new PrincipalAIAFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GETE_TO_PRINCIPAL_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {



				principalOnlineFormBean.setName(resultSet.getString("NAME"));
				principalOnlineFormBean.setAddress(resultSet.getString("Address"));
				principalOnlineFormBean.setFatherName(resultSet.getString("FatherName"));
				principalOnlineFormBean.setContactNo(resultSet.getString("ContactNo"));;
				principalOnlineFormBean.setEmailId(resultSet.getString("EmailId"));
				principalOnlineFormBean.setPaymentFor(resultSet.getString("PaymentFor"));
				principalOnlineFormBean.setAmount(resultSet.getString("Amount"));
				principalOnlineFormBean.setRemarks(resultSet.getString("Remarks"));
				principalOnlineFormBean.setEnrollmentNo(resultSet.getString("enrollmentNo"));
				principalOnlineFormBean.setTotalamount(resultSet.getString("totalamount"));

				principalOnlineFormBean.setApplicationNo(applicationNo);



			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getPrincipalStudentDetails(" + principalOnlineFormBean + ") - END");
		return principalOnlineFormBean;
	}
	@Override
	public List<INTLCourseFormBean> fetchINTLCourseDetails() {
		long startTime = System.currentTimeMillis();
		logger.info("fetchINTLCourseDetails start");
		List<INTLCourseFormBean> list = null;

		try {
			PreparedStatement pst = con.prepareStatement("select courseName from FJN_INTL_COURSE_MASTER");

			resultSet = pst.executeQuery(); 
			list = new ArrayList<INTLCourseFormBean>();
			while (resultSet.next()) {
				INTLCourseFormBean intlCourseFormBean = new INTLCourseFormBean();
				intlCourseFormBean.setCourseName(resultSet.getString("courseName"));							 	
				list.add(intlCourseFormBean);
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("fetchINTLCourseDetails(" + list + ") - END");
		return list;
	}
	@Override
	public String insertINTLStudentDetails(INTLOnlineFormBean intlOnlineFormBean,String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertINTLStudentDetails(" + intlOnlineFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_INIT_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");	        	
			callableStatement.setString(1, intlOnlineFormBean.getStdIrn());
			callableStatement.setString(2, intlOnlineFormBean.getSelectAdmissionTo());
			callableStatement.setString(3, intlOnlineFormBean.getSelectFacility());
			callableStatement.setString(4, intlOnlineFormBean.getSelectOccupancyType());	           
			callableStatement.setString(5, intlOnlineFormBean.getAcademicYear());
			callableStatement.setString(6, intlOnlineFormBean.getSelectGender());
			callableStatement.setString(7, intlOnlineFormBean.getSelectAdmissionType());
			callableStatement.setString(8, intlOnlineFormBean.getStudentName());
			callableStatement.setString(9, intlOnlineFormBean.getFatherName());
			callableStatement.setString(10, intlOnlineFormBean.getCity());
			callableStatement.setString(11, intlOnlineFormBean.getState());
			callableStatement.setString(12, intlOnlineFormBean.getStdMobileNo());
			callableStatement.setString(13, intlOnlineFormBean.getParentMobileNo());
			callableStatement.setString(14, intlOnlineFormBean.getEmailId());
			callableStatement.setString(15, intlOnlineFormBean.getSelectBranch());
			callableStatement.setString(16, intlOnlineFormBean.getSelectAdmCategory());
			callableStatement.setString(17, intlOnlineFormBean.getTotalAmount());
			callableStatement.setString(18, intlOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(19, instituteId);


			callableStatement.registerOutParameter(20, Types.VARCHAR);
			callableStatement.registerOutParameter(21, Types.VARCHAR);
			callableStatement.registerOutParameter(22, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(22); 
			intlOnlineFormBean.setStudentRegistrationId(callableStatement.getString(21));
			intlOnlineFormBean.setApplicationNo(callableStatement.getString(20));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertINTLStudentDetails(" + intlOnlineFormBean + ") - END");
		return responseString;
	}
	public String insertINTLCourseDetails(INTLCourseFormBean intlCourseFormBean,String applicationNo){
		long startTime = System.currentTimeMillis();
		logger.info("insertINTLCourseDetails(" + intlCourseFormBean + ") - START");
		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_INIT_COURSEDETAILS(?,?,?,?)}");
			callableStatement.setString(1, intlCourseFormBean.getCourseName());
			callableStatement.setString(2, intlCourseFormBean.getCourseAmount());
			callableStatement.setString(3, applicationNo);	            	                                  
			callableStatement.registerOutParameter(4, Types.VARCHAR);	          

			callableStatement.execute();           
			responseString = callableStatement.getString(4); 	
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertINTLCourseDetails(" + intlCourseFormBean + ") - END");
		return responseString;
	}
	public INTLOnlineFormBean getINTLStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getINTLStudentDetails(" + applicationNo + ") - START");
		INTLOnlineFormBean intlOnlineFormBean = new INTLOnlineFormBean();
		try {
			callableStatement = con.prepareCall("{call PROC_GET_INIT_STUDENTDETAILS(?)}");

			callableStatement.setString(1, applicationNo);

			resultSet = callableStatement.executeQuery(); 						            
			while (resultSet.next()) {						            							            	
				intlOnlineFormBean.setStdIrn(resultSet.getString("stdIrn"));
				intlOnlineFormBean.setSelectAdmissionTo(resultSet.getString("selectAdmissionTo"));            	
				intlOnlineFormBean.setSelectBranch(resultSet.getString("selectBranch"));
				intlOnlineFormBean.setSelectFacility(resultSet.getString("selectFacility"));
				intlOnlineFormBean.setSelectOccupancyType(resultSet.getString("selectOccupancyType"));
				intlOnlineFormBean.setAcademicYear(resultSet.getString("academicYear"));							            	
				intlOnlineFormBean.setSelectGender(resultSet.getString("selectGender"));
				intlOnlineFormBean.setSelectAdmissionType(resultSet.getString("selectAdmissionType"));
				intlOnlineFormBean.setSelectAdmCategory(resultSet.getString("selectAdmCategory"));
				intlOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				intlOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				intlOnlineFormBean.setCity(resultSet.getString("city"));
				intlOnlineFormBean.setState(resultSet.getString("state"));
				intlOnlineFormBean.setStdMobileNo(resultSet.getString("stdMobileNo"));
				intlOnlineFormBean.setParentMobileNo(resultSet.getString("parentMobileNo"));
				intlOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				intlOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));					      
				intlOnlineFormBean.setApplicationNo(applicationNo);						            	
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getINTLStudentDetails(" + applicationNo + ") - END");
		return intlOnlineFormBean;
	}
	public List<INTLCourseFormBean> getINTLCourseDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("<START> getINTLCourseDetails(" + applicationNo + ") - START");
		List<INTLCourseFormBean> list = null;				
		try {
			callableStatement = con.prepareCall("{call PROC_GET_INIT_COURSEDETAILS(?)}");

			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			list = new ArrayList<INTLCourseFormBean>();
			while (resultSet.next()) {
				INTLCourseFormBean intlCourseFormBean = new INTLCourseFormBean();
				intlCourseFormBean.setCourseName(resultSet.getString("courseName"));
				intlCourseFormBean.setCourseAmount(resultSet.getString("courseFees"));
				list.add(intlCourseFormBean);
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertSWARAStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END>  getINTLCourseDetails(" + applicationNo + ") - END");
		return list;
	}
	public String insertJayotiStudentDetails(JayotiFormBean jayotiFormBean,String billerId) {
		// TODO Auto-generated method stub

		long startTime = System.currentTimeMillis();
		logger.info("<START> insertJayotiStudentDetails(" + jayotiFormBean + ") - START");
		logger.info("insertJayotiStudentDetails---billerId : "+billerId);

		String responseString = null;
		try{
			callableStatement = con.prepareCall("{call PROC_JAYOTI_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,jayotiFormBean.getName());
			callableStatement.setString(2,jayotiFormBean.getFathersName());
			callableStatement.setString(3,jayotiFormBean.getMobileNo());
			callableStatement.setString(4,jayotiFormBean.getCourseName());
			callableStatement.setString(5,jayotiFormBean.getAmount());
			callableStatement.setString(6,jayotiFormBean.getEmailId());
			callableStatement.setString(7,jayotiFormBean.getRegisteredUserId());

			callableStatement.setString(8,billerId);
			callableStatement.setString(9,jayotiFormBean.getFormno());
			callableStatement.registerOutParameter(10, Types.VARCHAR);
			callableStatement.registerOutParameter(11, Types.VARCHAR);
			callableStatement.registerOutParameter(12, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(12); 
			jayotiFormBean.setStudentRegistrationId(callableStatement.getString(11));
			jayotiFormBean.setApplicationNo(callableStatement.getString(10));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END>  insertJayotiStudentDetails(" + jayotiFormBean + ") - END");
		return responseString;

	}
	@Override
	public JayotiFormBean getJayotiStudentDetails(String applicationNo) {		
		long startTime = System.currentTimeMillis();
		logger.info("<START> getJayotiStudentDetails(" + applicationNo + ") - START");  
		JayotiFormBean jayotiFormBean = new JayotiFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GETE_TO_JAYOTI_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {

				jayotiFormBean.setName(resultSet.getString("name"));
				jayotiFormBean.setFathersName(resultSet.getString("fathersName"));
				jayotiFormBean.setMobileNo(resultSet.getString("mobileNo"));
				jayotiFormBean.setCourseName(resultSet.getString("courseName"));;
				jayotiFormBean.setAmount(resultSet.getString("amount"));
				jayotiFormBean.setEmailId(resultSet.getString("emailId"));
				jayotiFormBean.setFormno(resultSet.getString("Formno"));

				jayotiFormBean.setApplicationNo(applicationNo);

			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END>  getJayotiStudentDetails(" + jayotiFormBean + ") - END");
		return jayotiFormBean;
	}
	public String insertLanStudentDetails(LanOnlineFormBean lanOnlineFormBean,String billerId) {
		// TODO Auto-generated method stub

		long startTime = System.currentTimeMillis();
		logger.info("<START> insertLanStudentDetails(" + lanOnlineFormBean + ") - START");
		logger.info("insertLanStudentDetails---billerId : "+billerId);

		String responseString = null;
		try{
			callableStatement = con.prepareCall("{call PROC_Lan_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,lanOnlineFormBean.getSelectBranch());
			callableStatement.setString(2,lanOnlineFormBean.getStdName());
			callableStatement.setString(3,lanOnlineFormBean.getFormNumber());
			callableStatement.setString(4,lanOnlineFormBean.getSelectClass());
			callableStatement.setString(5,lanOnlineFormBean.getParentName());
			callableStatement.setString(6,lanOnlineFormBean.getContactNo());
			callableStatement.setString(7,lanOnlineFormBean.getSelectInstallment());
			callableStatement.setString(8,lanOnlineFormBean.getPaymentDate());
			callableStatement.setString(9,lanOnlineFormBean.getTotAmount());
			callableStatement.setString(10,lanOnlineFormBean.getRegisteredUserId());

			callableStatement.setString(11,billerId);
			callableStatement.registerOutParameter(12, Types.VARCHAR);
			callableStatement.registerOutParameter(13, Types.VARCHAR);
			callableStatement.registerOutParameter(14, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(14); 
			lanOnlineFormBean.setStudentRegistrationId(callableStatement.getString(13));
			lanOnlineFormBean.setApplicationNo(callableStatement.getString(12));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END> insertLanStudentDetails(" + lanOnlineFormBean + ") - END");
		return responseString;

	}
	@Override
	public LanOnlineFormBean getLanStudentDetails(String applicationNo) {		
		long startTime = System.currentTimeMillis();
		logger.info("<START> getLanStudentDetails(" + applicationNo + ") - START");  
		LanOnlineFormBean lanOnlineFormBean = new LanOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_LAN_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {

				lanOnlineFormBean.setSelectBranch(resultSet.getString("selectBranch"));
				lanOnlineFormBean.setStdName(resultSet.getString("stdName"));
				lanOnlineFormBean.setFormNumber(resultSet.getString("formNumber"));
				lanOnlineFormBean.setSelectClass(resultSet.getString("selectClass"));
				lanOnlineFormBean.setParentName(resultSet.getString("parentName"));
				lanOnlineFormBean.setContactNo(resultSet.getString("contactNo"));
				lanOnlineFormBean.setSelectInstallment(resultSet.getString("selectInstallment"));
				lanOnlineFormBean.setPaymentDate(resultSet.getString("paymentDate"));
				lanOnlineFormBean.setTotAmount(resultSet.getString("totAmount"));	            		            	
				lanOnlineFormBean.setApplicationNo(applicationNo);

			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END>  getLanStudentDetails(" + lanOnlineFormBean + ") - END");
		return lanOnlineFormBean;
	}

	@Override
	public String insertNatlStudentDetails(NATLOnlineFormBean natlOnlineFormBean, String billerId) {

		// TODO Auto-generated method stub

		long startTime = System.currentTimeMillis();
		logger.info("<START> insertNatlStudentDetails(" + natlOnlineFormBean + ") - START");
		logger.info("insertNatlStudentDetails---billerId : "+billerId);
		String remarks = natlOnlineFormBean.getRemarks();
		if(StringUtils.isBlank(remarks))
		{
			remarks = "NA";
		}
		String responseString = null;
		try{
			callableStatement = con.prepareCall("{call PROC_NATL_StudentDetails(?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,natlOnlineFormBean.getStdName());
			callableStatement.setString(2,natlOnlineFormBean.getRollNumber());
			callableStatement.setString(3,natlOnlineFormBean.getMobileNo());
			callableStatement.setString(4,natlOnlineFormBean.getFeeAmount());
			callableStatement.setString(5,natlOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(6,billerId);
			callableStatement.setString(7,natlOnlineFormBean.getSelectCourse());
			callableStatement.setString(8,remarks);
			callableStatement.registerOutParameter(9, Types.VARCHAR);
			callableStatement.registerOutParameter(10, Types.VARCHAR);
			callableStatement.registerOutParameter(11, Types.VARCHAR);

			callableStatement.execute(); 
			responseString = callableStatement.getString(11); 
			natlOnlineFormBean.setStudentRegistrationId(callableStatement.getString(10));
			natlOnlineFormBean.setApplicationNo(callableStatement.getString(9));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END>  insertNatlStudentDetails(" + natlOnlineFormBean + ") - END");
		return responseString;


	}

	@Override
	public NATLOnlineFormBean getNatlStudentDetails(String applicationNo) {

		long startTime = System.currentTimeMillis();
		logger.info("<START> getNatlStudentDetails(" + applicationNo + ") - START");  
		NATLOnlineFormBean natlOnlineFormBean = new NATLOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_NATL_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {

				natlOnlineFormBean.setStdName(resultSet.getString("stdName"));
				natlOnlineFormBean.setRollNumber(resultSet.getString("rollNumber"));
				natlOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));
				natlOnlineFormBean.setFeeAmount(resultSet.getString("feeAmount"));	            		            	
				natlOnlineFormBean.setApplicationNo(applicationNo);
				natlOnlineFormBean.setSelectCourse(resultSet.getString("Course"));
				natlOnlineFormBean.setRemarks(resultSet.getString("Remarks"));	   
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END> getNatlStudentDetails(" + natlOnlineFormBean + ") - END");
		return natlOnlineFormBean;

	}		

	@Override
	public String insertRpsStudentDetails(RpsFormBean rpsFormBean, String billerId) {

		// TODO Auto-generated method stub

		long startTime = System.currentTimeMillis();
		logger.info("<START> insertRpsStudentDetails(" + rpsFormBean + ") - START");
		logger.info("insertRpsStudentDetails---billerId : "+billerId);
		String remarks = rpsFormBean.getRemarks();
		String amount = rpsFormBean.getAmount();
		String admissionFees = rpsFormBean.getAdmissionFees();
		String tuitionFees = rpsFormBean.getTuitionFees();
		String transportFees = rpsFormBean.getTransportFees();
		String hostelFees = rpsFormBean.getHostelFees();
		String responseString = null;

		if(StringUtils.isBlank(remarks))
		{
			remarks = "NA";
		}

		if(StringUtils.isBlank(amount))
		{
			amount = "0";
		}

		if(StringUtils.isBlank(admissionFees))
		{
			admissionFees = "0";
		}

		if(StringUtils.isBlank(tuitionFees))
		{
			tuitionFees = "0";
		}

		if(StringUtils.isBlank(transportFees))
		{
			transportFees = "0";
		}

		if(StringUtils.isBlank(hostelFees))
		{
			hostelFees = "0";
		}

		try{
			callableStatement = con.prepareCall("{call PROC_RPS_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,rpsFormBean.getStdName());
			callableStatement.setString(2,rpsFormBean.getFathersName());
			callableStatement.setString(3,rpsFormBean.getRollNumber());
			callableStatement.setString(4,rpsFormBean.getStdClass());
			callableStatement.setString(5,rpsFormBean.getSection());
			callableStatement.setString(6,rpsFormBean.getMobileNo());
			callableStatement.setString(7,admissionFees);
			callableStatement.setString(8,tuitionFees);
			callableStatement.setString(9,transportFees);
			callableStatement.setString(10,hostelFees);
			callableStatement.setString(11,rpsFormBean.getOthers());
			callableStatement.setString(12,remarks);
			callableStatement.setString(13,amount);
			callableStatement.setString(14,rpsFormBean.getTotalAmount());

			callableStatement.setString(15,rpsFormBean.getRegisteredUserId());
			callableStatement.setString(16,billerId);

			callableStatement.registerOutParameter(17, Types.VARCHAR);
			callableStatement.registerOutParameter(18, Types.VARCHAR);
			callableStatement.registerOutParameter(19, Types.VARCHAR);

			callableStatement.execute(); 
			responseString = callableStatement.getString(19); 
			rpsFormBean.setStudentRegistrationId(callableStatement.getString(18));
			rpsFormBean.setApplicationNo(callableStatement.getString(17));
			logger.info("responseString : - " + responseString);


		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END>  insertRpsStudentDetails(" + rpsFormBean + ") - END");
		return responseString;


	}

	@Override
	public RpsFormBean getRpsStudentDetails(String applicationNo) {

		long startTime = System.currentTimeMillis();
		logger.info("<START> getRpsStudentDetails(" + applicationNo + ") - START");  
		RpsFormBean rpsFormBean = new RpsFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_RPS_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {

				rpsFormBean.setStdName(resultSet.getString("stdName"));
				rpsFormBean.setFathersName(resultSet.getString("fathersName"));
				rpsFormBean.setRollNumber(resultSet.getString("rollNumber"));
				rpsFormBean.setStdClass(resultSet.getString("stdClass"));
				rpsFormBean.setSection(resultSet.getString("section"));
				rpsFormBean.setMobileNo(resultSet.getString("mobileNo"));
				rpsFormBean.setAdmissionFees(resultSet.getString("admissionFees"));
				rpsFormBean.setTuitionFees(resultSet.getString("tuitionFees"));
				rpsFormBean.setTransportFees(resultSet.getString("transportFees"));
				rpsFormBean.setHostelFees(resultSet.getString("hostelFees"));
				rpsFormBean.setOthers(resultSet.getString("others"));
				rpsFormBean.setRemarks(resultSet.getString("remarks"));	
				rpsFormBean.setAmount(resultSet.getString("amount"));
				rpsFormBean.setTotalAmount(resultSet.getString("totalAmount"));
				rpsFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END> getRpsStudentDetails(" + rpsFormBean + ") - END");
		return rpsFormBean;

	}		

	@Override
	public String insertRungtaColStudentDetails(RungtaCollegeFormBean rungtaCollegeFormBean,String instituteID){

		// TODO Auto-generated method stub

		long startTime = System.currentTimeMillis();
		logger.info("<START> insertRungtaColStudentDetails(" + rungtaCollegeFormBean + ") - START");
		logger.info("insertRungtaColStudentDetails---billerId : "+instituteID);
		String remarks = rungtaCollegeFormBean.getRemarks();
		String amount = rungtaCollegeFormBean.getAmount();
		String cautionMoney = rungtaCollegeFormBean.getCautionMoney();
		String tuitionFees = rungtaCollegeFormBean.getTuitionFees();
		String hostelCautionMoney = rungtaCollegeFormBean.getHostelCautionMoney();
		String hostelFees = rungtaCollegeFormBean.getHostelFees();
		String busFees = rungtaCollegeFormBean.getBusFees();
		String lateFees = rungtaCollegeFormBean.getLateFees();
		String responseString = null;
		String branch = rungtaCollegeFormBean.getBranch1();

		if(StringUtils.isBlank(remarks))
		{
			remarks = "NA";
		}

		if(StringUtils.isBlank(amount))
		{
			amount = "0";
		}

		if(StringUtils.isBlank(cautionMoney))
		{
			cautionMoney = "0";
		}

		if(StringUtils.isBlank(tuitionFees))
		{
			tuitionFees = "0";
		}

		if(StringUtils.isBlank(hostelCautionMoney))
		{
			hostelCautionMoney = "0";
		}

		if(StringUtils.isBlank(hostelFees))
		{
			hostelFees = "0";
		}
		if(StringUtils.isBlank(busFees))
		{
			busFees = "0";
		}
		if(StringUtils.isBlank(lateFees))
		{
			lateFees = "0";
		}
		if(StringUtils.isBlank(branch)||StringUtils.equals(branch,null)|| StringUtils.equals(branch,"0"))
		{
			branch = rungtaCollegeFormBean.getBranch2();
			rungtaCollegeFormBean.setBranch(branch);
			if(StringUtils.isBlank(branch)||StringUtils.equals(branch,null) || StringUtils.equals(branch,"0"))
			{
				branch = rungtaCollegeFormBean.getBranch3();
				rungtaCollegeFormBean.setBranch(branch);
				if(StringUtils.isBlank(branch)||StringUtils.equals(branch,null) || StringUtils.equals(branch,"0"))
				{
					branch = rungtaCollegeFormBean.getBranch4();
					rungtaCollegeFormBean.setBranch(branch);

				}
			}
		}
		else
		{
			rungtaCollegeFormBean.setBranch(branch);
		}

		try{
			callableStatement = con.prepareCall("{call PROC_RUNGTA_COL_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,instituteID);
			callableStatement.setString(2,rungtaCollegeFormBean.getStdName());
			callableStatement.setString(3,rungtaCollegeFormBean.getAdmissionNumber());
			callableStatement.setString(4,rungtaCollegeFormBean.getCourse());
			callableStatement.setString(5,rungtaCollegeFormBean.getSemester());
			callableStatement.setString(6,branch);
			callableStatement.setString(7,rungtaCollegeFormBean.getMobileNo());
			callableStatement.setString(8, rungtaCollegeFormBean.getChkTutionFee()== null ? "N":rungtaCollegeFormBean.getChkTutionFee());
			callableStatement.setString(9,tuitionFees);
			callableStatement.setString(10, rungtaCollegeFormBean.getChkCautionMoney()== null ? "N":rungtaCollegeFormBean.getChkCautionMoney());
			callableStatement.setString(11,cautionMoney);
			callableStatement.setString(12, rungtaCollegeFormBean.getChkHostelFee()== null ? "N":rungtaCollegeFormBean.getChkHostelFee());
			callableStatement.setString(13,hostelFees);
			callableStatement.setString(14, rungtaCollegeFormBean.getChkHostelCautionMoney()== null ? "N":rungtaCollegeFormBean.getChkHostelCautionMoney());
			callableStatement.setString(15,hostelCautionMoney);
			callableStatement.setString(16, rungtaCollegeFormBean.getChkBusFee()== null ? "N":rungtaCollegeFormBean.getChkBusFee());
			callableStatement.setString(17,busFees);
			callableStatement.setString(18, rungtaCollegeFormBean.getChkLateFee()== null ? "N":rungtaCollegeFormBean.getChkLateFee());
			callableStatement.setString(19,lateFees);
			callableStatement.setString(20,rungtaCollegeFormBean.getOthers());
			callableStatement.setString(21,remarks);
			callableStatement.setString(22,amount);
			callableStatement.setString(23,rungtaCollegeFormBean.getTotalAmount());

			callableStatement.setString(24,rungtaCollegeFormBean.getRegisteredUserId());

			callableStatement.registerOutParameter(25, Types.VARCHAR);
			callableStatement.registerOutParameter(26, Types.VARCHAR);
			callableStatement.registerOutParameter(27, Types.VARCHAR);

			callableStatement.execute(); 
			responseString = callableStatement.getString(27); 
			rungtaCollegeFormBean.setStudentRegistrationId(callableStatement.getString(26));
			rungtaCollegeFormBean.setApplicationNo(callableStatement.getString(25));
			logger.info("responseString : - " + responseString);


		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END>  insertRungtaColStudentDetails(" + rungtaCollegeFormBean + ") - END");
		return responseString;


	}

	@Override
	public RungtaCollegeFormBean getRungtaColStudentDetails(String applicationNo,String instituteCode) {

		long startTime = System.currentTimeMillis();
		logger.info("<START> getRungtaColStudentDetails(" + applicationNo + ") - START");  
		RungtaCollegeFormBean rungtaCollegeFormBean = new RungtaCollegeFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_RUNGTA_COL_STUDENTDETAILS(?,?)}");
			callableStatement.setString(1, applicationNo);
			callableStatement.setString(2, instituteCode);
			resultSet = callableStatement.executeQuery(); 

			while (resultSet.next()) {

				rungtaCollegeFormBean.setStdName(resultSet.getString("stdName"));
				rungtaCollegeFormBean.setAdmissionNumber(resultSet.getString("admissionNumber"));
				rungtaCollegeFormBean.setCourse(resultSet.getString("course"));
				rungtaCollegeFormBean.setSemester(resultSet.getString("semester"));
				rungtaCollegeFormBean.setBranch(resultSet.getString("branch"));
				rungtaCollegeFormBean.setMobileNo(resultSet.getString("mobileNo"));
				rungtaCollegeFormBean.setTuitionFees(resultSet.getString("tuitionFees"));
				rungtaCollegeFormBean.setCautionMoney(resultSet.getString("cautionMoney"));
				rungtaCollegeFormBean.setHostelFees(resultSet.getString("hostelFees"));
				rungtaCollegeFormBean.setHostelCautionMoney(resultSet.getString("hostelCautionMoney"));
				rungtaCollegeFormBean.setBusFees(resultSet.getString("busFees"));
				rungtaCollegeFormBean.setLateFees(resultSet.getString("lateFees"));
				rungtaCollegeFormBean.setOthers(resultSet.getString("others"));
				rungtaCollegeFormBean.setRemarks(resultSet.getString("remarks"));	
				rungtaCollegeFormBean.setAmount(resultSet.getString("amount"));
				rungtaCollegeFormBean.setTotalAmount(resultSet.getString("totalAmount"));
				rungtaCollegeFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END> getRungtaColStudentDetails(" + rungtaCollegeFormBean + ") - END");
		return rungtaCollegeFormBean;

	}

	@Override
	public String insertDTEStudentDetails(DTEFormBean dteFormBean,	String instituteID) {
		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("<START> insertDTEStudentDetails(" + dteFormBean + ") - START");
		logger.info("insertDTEStudentDetails---billerId : "+instituteID);
		String responseString = null;
		String amount = dteFormBean.getAmount();

		if(StringUtils.isBlank(amount))
		{
			amount = "0";
		}

		try{
			callableStatement = con.prepareCall("{call PROC_DTE_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,instituteID);
			callableStatement.setString(2,dteFormBean.getStdName());
			callableStatement.setString(3,dteFormBean.getSeekingAdmission());
			callableStatement.setString(4,dteFormBean.getRegistrationNo());
			callableStatement.setString(5,dteFormBean.getFreshAdmissionType());
			callableStatement.setString(6,dteFormBean.getFreshCourse());
			callableStatement.setString(7,dteFormBean.getFreshCollege());
			callableStatement.setString(8, dteFormBean.getFreshBranch());
			callableStatement.setString(9, dteFormBean.getFreshCategory());
			callableStatement.setString(10, dteFormBean.getPrevPaidAmount()== null ?"0" :dteFormBean.getPrevPaidAmount());
			callableStatement.setString(11, dteFormBean.getRepeatAdmissionType()== null ?"NA" :dteFormBean.getRepeatAdmissionType());
			callableStatement.setString(12, dteFormBean.getRepeatCourse()== null ? "NA":dteFormBean.getRepeatCourse());
			callableStatement.setString(13, dteFormBean.getRepeatCollege()== null ? "NA":dteFormBean.getRepeatCollege());
			callableStatement.setString(14, dteFormBean.getRepeatBranch()== null ? "NA":dteFormBean.getRepeatBranch());
			callableStatement.setString(15, dteFormBean.getRepeatCategory()== null ? "NA":dteFormBean.getRepeatCategory());
			callableStatement.setString(16, amount);
			callableStatement.setString(17, dteFormBean.getDTEAdmissionFee()== null ? "0":dteFormBean.getDTEAdmissionFee());
			callableStatement.setString(18, dteFormBean.getTotalAmount()== null ? "0":dteFormBean.getTotalAmount());
			callableStatement.setString(19, dteFormBean.getCurrentAmount()== null ? "0":dteFormBean.getCurrentAmount());
			callableStatement.setString(20, dteFormBean.getAdjustedAmount()== null ? "0":dteFormBean.getAdjustedAmount());
			callableStatement.setString(21, dteFormBean.getDtePaymentMode());
			callableStatement.setString(22, dteFormBean.getUserName()== null ? "NA":dteFormBean.getUserName());
			callableStatement.setString(23,	dteFormBean.getPassword()== null ? "NA":dteFormBean.getPassword());

			callableStatement.setString(24,dteFormBean.getRegisteredUserId());

			callableStatement.registerOutParameter(25, Types.VARCHAR);
			callableStatement.registerOutParameter(26, Types.VARCHAR);
			callableStatement.registerOutParameter(27, Types.VARCHAR);

			callableStatement.execute(); 
			responseString = callableStatement.getString(27); 
			dteFormBean.setStudentRegistrationId(callableStatement.getString(26));
			dteFormBean.setApplicationNo(callableStatement.getString(25));
			logger.info("responseString : - " + responseString);


		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END>  insertDTEStudentDetails(" + dteFormBean + ") - END");
		return responseString;
	}

	@Override
	public DTEFormBean getDTEStudentDetails(String applicationNo,String instituteCode) {
		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("<START> getDTEStudentDetails(" + applicationNo + ") - START");  
		DTEFormBean dteFormBean = new DTEFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_DTE_STUDENTDETAILS(?,?)}");
			callableStatement.setString(1, applicationNo);
			callableStatement.setString(2, instituteCode);
			resultSet = callableStatement.executeQuery(); 

			while (resultSet.next()) {

				dteFormBean.setStdName(resultSet.getString("stdName"));
				dteFormBean.setSeekingAdmission(resultSet.getString("seekingAdmission"));
				dteFormBean.setRegistrationNo(resultSet.getString("registrationNo"));
				dteFormBean.setFreshAdmissionType(resultSet.getString("freshAdmissionType"));
				dteFormBean.setFreshCourse(resultSet.getString("freshCourse"));
				dteFormBean.setFreshCollege(resultSet.getString("freshCollege"));
				dteFormBean.setFreshBranch(resultSet.getString("freshBranch"));
				dteFormBean.setFreshCategory(resultSet.getString("freshCategory"));
				dteFormBean.setPrevPaidAmount(resultSet.getString("prevPaidAmount"));
				dteFormBean.setRepeatAdmissionType(resultSet.getString("repeatAdmissionType"));
				dteFormBean.setRepeatCourse(resultSet.getString("repeatCourse"));
				dteFormBean.setRepeatCollege(resultSet.getString("repeatCollege"));
				dteFormBean.setRepeatBranch(resultSet.getString("repeatBranch"));
				dteFormBean.setRepeatCategory(resultSet.getString("repeatCategory"));
				dteFormBean.setAmount(resultSet.getString("amount"));
				dteFormBean.setDTEAdmissionFee(resultSet.getString("DTEAdmissionFee"));
				dteFormBean.setTotalAmount(resultSet.getString("totalAmount"));
				dteFormBean.setCurrentAmount(resultSet.getString("currentAmount"));
				dteFormBean.setAdjustedAmount(resultSet.getString("adjustedAmount"));
				dteFormBean.setDtePaymentMode(resultSet.getString("dtePaymentMode"));
				dteFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END> getDTEStudentDetails(" + dteFormBean + ") - END");
		String collegeCode=dteFormBean.getFreshCollege();
		if(StringUtils.equalsIgnoreCase(collegeCode,"NA"))
		{
			collegeCode = dteFormBean.getRepeatCollege();
		}
		String collegeName = getDTECollegeName(collegeCode);
		dteFormBean.setCollegeName(collegeName);
		return dteFormBean;

	}

	private String getDTECollegeName(String colCode) {
		String collegeName = null;
		// TODO Auto-generated method stub
		logger.info("<START> getDTECollegeName(" + colCode + ") - START");
		try {
			callableStatement = con.prepareCall("{call PROC_GET_DTE_COLLEGEDETAILS(?)}");
			callableStatement.setString(1, colCode);
			resultSet = callableStatement.executeQuery(); 

			while(resultSet.next())
			{
				collegeName=resultSet.getString("collegeName");
			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		logger.info("<END> getDTECollegeName(" + colCode + ") - END");

		return collegeName;
	}

	@Override
	public String validateDTEAdmin(String userName, String password) {
		String response = null;
		// TODO Auto-generated method stub
		logger.info("<START> validateDTEAdmin(" + userName + ") - START");
		try {
			callableStatement = con.prepareCall("{call PROC_DTE_Login_Validate(?,?,?)}");
			callableStatement.setString(1, userName);
			callableStatement.setString(2, password);

			callableStatement.registerOutParameter(3, Types.VARCHAR);
			callableStatement.execute(); 
			response = callableStatement.getString(3); 
			logger.info("response from  procedure PROC_DTE_Login_Validate : - " + response);

		} catch (SQLException e) {
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		logger.info("<END> validateDTEAdmin(" + userName + ") - END");

		return response;
	}

	@Override
	public Map<String, String> getAdmissionTypeList() {
		logger.info("<START>inside getAdmissionTypeList");
		Map<String, String> admissionTypeMap = new HashMap<String, String>();
		try {
			callableStatement = con.prepareCall("{call PROC_GET_ADMISSION_TYPE_LIST()}");
			resultSet=callableStatement.executeQuery(); 
			while (resultSet.next()) {

				admissionTypeMap.put(resultSet.getString("admissionType_id"), resultSet.getString("admissionType"));						
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		logger.info("<END> inside getAdmissionTypeList admissionTypeMap is :"+admissionTypeMap);

		return admissionTypeMap;
	}

	@Override
	public Map<String, String> getFreshCourseList(String freshAdmissionTypeId) {
		logger.info("<START>inside getFreshCourseList");
		Map<String, String> courseMap = new HashMap<String, String>();
		try {
			callableStatement = con.prepareCall("{call PROC_GET_COURSE_FROM_ADMISSION_TYPE(?)}");
			callableStatement.setString(1, freshAdmissionTypeId);
			resultSet=callableStatement.executeQuery(); 
			while (resultSet.next()) {

				courseMap.put(resultSet.getString("course_id"), resultSet.getString("course"));						
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		logger.info("<END> inside getFreshCourseList courseMap is :"+courseMap);

		return courseMap;
	}

	@Override
	public Map<String, String> getCollegeList(String courseId) {
		logger.info("<START>inside getCollegeList");
		Map<String, String> collegeMap = new HashMap<String, String>();
		try {
			callableStatement = con.prepareCall("{call PROC_GET_COLLEGE_LIST_FROM_COURSE(?)}");
			callableStatement.setString(1, courseId);
			resultSet=callableStatement.executeQuery(); 
			while (resultSet.next()) {

				collegeMap.put(resultSet.getString("college_id"), resultSet.getString("college"));						
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		logger.info("<END> inside getCollegeList collegeMap is :"+collegeMap);

		return collegeMap;
	}

	@Override
	public Map<String, String> getBranchList(String collegeId) {

		logger.info("<START>inside getBranchList");
		Map<String, String> branchMap = new HashMap<String, String>();
		try {
			callableStatement = con.prepareCall("{call PROC_GET_BRANCH_LIST_FROM_COLLEGE(?)}");
			callableStatement.setString(1, collegeId);
			resultSet=callableStatement.executeQuery(); 
			while (resultSet.next()) {

				branchMap.put(resultSet.getString("Branch_id"), resultSet.getString("Branch"));						
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		logger.info("<END> inside getBranchList branchMap is :"+branchMap);

		return branchMap;

	}

	@Override
	public Map<String, String> getCategoryList(String collegeId) {

		logger.info("<START>inside getCategoryList");
		Map<String, String> categoryMap = new HashMap<String, String>();
		try {
			callableStatement = con.prepareCall("{call PROC_GET_CATEGORY_LIST_FROM_COLLEGE_ID(?)}");
			callableStatement.setString(1, collegeId);
			resultSet=callableStatement.executeQuery(); 
			while (resultSet.next()) {

				categoryMap.put(resultSet.getString("category_id"), resultSet.getString("category"));						
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		logger.info("<END> inside getCategoryList categoryMap is :"+categoryMap);

		return categoryMap;

	}

	@Override
	public String getAmountByCategory(String collegeId, String categoryId) {
		logger.info("<START>inside getAmountByCategory");
		String strAmount = null ;
		try {
			callableStatement = con.prepareCall("{call PROC_GET_AMOUNT_FROM_CATEGORY_ID(?,?)}");
			callableStatement.setString(1, collegeId);
			callableStatement.setString(2, categoryId);
			resultSet=callableStatement.executeQuery(); 
			while (resultSet.next()) {

				strAmount = resultSet.getString("amount");						
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		logger.info("<END> inside getAmountByCategory Amount is :"+strAmount);

		return strAmount;
	}
	@Override
	public String insertSWARAStudentDetails(SWARAFormBean swaraFormBean, String instituteID) {

		// TODO Auto-generated method stub

		long startTime = System.currentTimeMillis();
		logger.info("<START> insertSWARAStudentDetails(" + swaraFormBean + ") - START");
		logger.info("insertSWARAStudentDetails---instituteID : "+instituteID);

		String responseString = null;

		try{
			callableStatement = con.prepareCall("{call PROC_SWARA_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,swaraFormBean.getStdName());
			callableStatement.setString(2,swaraFormBean.getStdDOB());
			callableStatement.setString(3,swaraFormBean.getPostalAddress());
			callableStatement.setString(4,swaraFormBean.getState());
			callableStatement.setString(5,swaraFormBean.getCity());
			callableStatement.setString(6,swaraFormBean.getPincode());
			callableStatement.setString(7,swaraFormBean.getEmailId());
			callableStatement.setString(8,swaraFormBean.getMobileNo());
			callableStatement.setString(9,swaraFormBean.getFoundationOfMusic());
			callableStatement.setString(10,swaraFormBean.getAmount());

			callableStatement.setString(11,swaraFormBean.getRegisteredUserId());
			callableStatement.setString(12,instituteID);

			callableStatement.registerOutParameter(13, Types.VARCHAR);
			callableStatement.registerOutParameter(14, Types.VARCHAR);
			callableStatement.registerOutParameter(15, Types.VARCHAR);

			callableStatement.execute(); 
			responseString = callableStatement.getString(15); 
			swaraFormBean.setStudentRegistrationId(callableStatement.getString(14));
			swaraFormBean.setApplicationNo(callableStatement.getString(13));
			logger.info("responseString : - " + responseString);


		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END>  insertSWARAStudentDetails(" + swaraFormBean + ") - END");
		return responseString;


	}

	@Override
	public SWARAFormBean getSWARAStudentDetails(String applicationNo) {

		long startTime = System.currentTimeMillis();
		logger.info("<START> getSWARAStudentDetails(" + applicationNo + ") - START");  
		SWARAFormBean swaraFormBean = new SWARAFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_SWARA_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {

				swaraFormBean.setStdName(resultSet.getString("stdName"));
				swaraFormBean.setStdDOB(resultSet.getString("stdDOB"));
				swaraFormBean.setPostalAddress(resultSet.getString("postalAddress"));
				swaraFormBean.setState(resultSet.getString("state"));
				swaraFormBean.setCity(resultSet.getString("city"));
				swaraFormBean.setPincode(resultSet.getString("pincode"));
				swaraFormBean.setEmailId(resultSet.getString("emailId"));
				swaraFormBean.setMobileNo(resultSet.getString("mobileNo"));
				swaraFormBean.setFoundationOfMusic(resultSet.getString("foundationOfMusic"));
				swaraFormBean.setAmount(resultSet.getString("amount"));
				swaraFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getSWARAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END> getSWARAStudentDetails(" + swaraFormBean + ") - END");
		return swaraFormBean;

	}

	@Override
	public String insertTOLANIStudentDetails(TOLANIFormBean tolaniFormBean, String instituteID) {

		// TODO Auto-generated method stub

		long startTime = System.currentTimeMillis();
		logger.info("<START> insertTOLANIStudentDetails(" + tolaniFormBean + ") - START");
		logger.info("insertTOLANIStudentDetails---instituteID : "+instituteID);

		String responseString = null;

		try{
			callableStatement = con.prepareCall("{call PROC_TOLANI_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,tolaniFormBean.getStdName());
			callableStatement.setString(2,tolaniFormBean.getApplicationFormNo());
			callableStatement.setString(3,tolaniFormBean.getStdId());
			callableStatement.setString(4,tolaniFormBean.getIMUNo());
			callableStatement.setString(5,tolaniFormBean.getAcademicYear());
			callableStatement.setString(6,tolaniFormBean.getSemseter());
			callableStatement.setString(7,tolaniFormBean.getGender());
			callableStatement.setString(8,tolaniFormBean.getRegStatus());
			callableStatement.setString(9,tolaniFormBean.getDueDate());
			callableStatement.setString(10,tolaniFormBean.getAdmissionFee());
			callableStatement.setString(11,tolaniFormBean.getOrientationFee());
			callableStatement.setString(12,tolaniFormBean.getProgramFee());
			callableStatement.setString(13,tolaniFormBean.getTutionFee());
			callableStatement.setString(14,tolaniFormBean.getHostelFee());
			callableStatement.setString(15,tolaniFormBean.getExamFee());
			callableStatement.setString(16,tolaniFormBean.getWeldingFee());
			callableStatement.setString(17,tolaniFormBean.getPracticalFee());
			callableStatement.setString(18,tolaniFormBean.getWelfareFee());
			callableStatement.setString(19,tolaniFormBean.getDSGFee());
			callableStatement.setString(20,tolaniFormBean.getCautionDeposit());
			callableStatement.setString(21,tolaniFormBean.getMessingCharges());
			callableStatement.setString(22,tolaniFormBean.getLaundaryCharges());
			callableStatement.setString(23,tolaniFormBean.getUniforms());
			callableStatement.setString(24,tolaniFormBean.getBooks());
			callableStatement.setString(25,tolaniFormBean.getStationary());
			callableStatement.setString(26,tolaniFormBean.getInsurancePremium());
			callableStatement.setString(27,tolaniFormBean.getScholarships());
			callableStatement.setString(28,tolaniFormBean.getBalPrevSemster()==null?"0":tolaniFormBean.getBalPrevSemster());
			callableStatement.setString(29,tolaniFormBean.getTotalFee());
			callableStatement.setString(30,tolaniFormBean.getRegisteredUserId());
			callableStatement.setString(31,instituteID);

			callableStatement.registerOutParameter(32, Types.VARCHAR);
			callableStatement.registerOutParameter(33, Types.VARCHAR);
			callableStatement.registerOutParameter(34, Types.VARCHAR);

			callableStatement.execute(); 
			responseString = callableStatement.getString(34); 
			tolaniFormBean.setStudentRegistrationId(callableStatement.getString(33));
			tolaniFormBean.setApplicationNo(callableStatement.getString(32));
			logger.info("responseString : - " + responseString);


		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertTOLANIStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END>  insertTOLANIStudentDetails(" + tolaniFormBean + ") - END");
		return responseString;


	}
	@Override
	public TOLANIFormBean getTOLANIStudentDetails(String applicationNo) {


		long startTime = System.currentTimeMillis();
		logger.info("<START> getTOLANIStudentDetails(" + applicationNo + ") - START");  
		TOLANIFormBean tolaniFormBean = new TOLANIFormBean();		
		try{
			callableStatement = con.prepareCall("{call PROC_GET_TOLANI_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {

				tolaniFormBean.setStdName(resultSet.getString("stdName"));
				tolaniFormBean.setApplicationFormNo(resultSet.getString("ApplicationFormNo"));
				tolaniFormBean.setStdId(resultSet.getString("stdId"));
				tolaniFormBean.setIMUNo(resultSet.getString("IMUNo"));
				tolaniFormBean.setAcademicYear(resultSet.getString("academicYear"));
				tolaniFormBean.setSemseter(resultSet.getString("semseter"));
				tolaniFormBean.setGender(resultSet.getString("gender"));
				tolaniFormBean.setRegStatus(resultSet.getString("regStatus"));
				tolaniFormBean.setDueDate(resultSet.getString("dueDate"));
				tolaniFormBean.setAdmissionFee(resultSet.getString("admissionFee"));
				tolaniFormBean.setOrientationFee(resultSet.getString("orientationFee"));
				tolaniFormBean.setProgramFee(resultSet.getString("programFee"));
				tolaniFormBean.setTutionFee(resultSet.getString("tutionFee"));
				tolaniFormBean.setHostelFee(resultSet.getString("hostelFee"));
				tolaniFormBean.setExamFee(resultSet.getString("examFee"));
				tolaniFormBean.setWeldingFee(resultSet.getString("weldingFee"));
				tolaniFormBean.setPracticalFee(resultSet.getString("practicalFee"));
				tolaniFormBean.setWelfareFee(resultSet.getString("welfareFee"));
				tolaniFormBean.setDSGFee(resultSet.getString("DSGFee"));
				tolaniFormBean.setCautionDeposit(resultSet.getString("cautionDeposit"));
				tolaniFormBean.setMessingCharges(resultSet.getString("messingCharges"));
				tolaniFormBean.setLaundaryCharges(resultSet.getString("laundaryCharges"));
				tolaniFormBean.setUniforms(resultSet.getString("uniforms"));
				tolaniFormBean.setBooks(resultSet.getString("books"));
				tolaniFormBean.setStationary(resultSet.getString("stationary"));
				tolaniFormBean.setInsurancePremium(resultSet.getString("insurancePremium"));
				tolaniFormBean.setScholarships(resultSet.getString("scholarships"));
				tolaniFormBean.setBalPrevSemster(resultSet.getString("balPrevSemster"));
				tolaniFormBean.setTotalFee(resultSet.getString("totalFee"));
				tolaniFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getTOLANIStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END> getTOLANIStudentDetails(" + tolaniFormBean + ") - END");
		return tolaniFormBean;


	}	

	@Override
	public ArrayList<String> getApplicationNumberList(String instituteCode) {
		logger.info("<START>inside getApplicationNumberList");
		ArrayList<String> applicationNoList = new ArrayList<String>() ;
		try {
			callableStatement = con.prepareCall("{call PROC_GET_APPLICATION_NUMBER_LIST_FROM_INSTITUTE_ID(?)}");
			callableStatement.setString(1, instituteCode);
			resultSet=callableStatement.executeQuery(); 
			while (resultSet.next()) {

				applicationNoList.add(resultSet.getString("applicationNo"));						

			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getApplicationNumberList"+e);
			}
		}
		logger.info("<END> inside getApplicationNumberList List is :"+applicationNoList);

		return applicationNoList;
	}

	@Override

	public ArrayList<String> getDueDateList(String applicationNo,String instituteCode) {

		logger.info("<START>inside getDueDateList");
		ArrayList<String> dueDateList = new ArrayList<String>() ;
		try {
			callableStatement = con.prepareCall("{call PROC_GET_DUE_DATE_LIST_FROM_APPLICATION_NUMBER(?,?)}");
			callableStatement.setString(1, applicationNo);
			callableStatement.setString(2, instituteCode);
			resultSet=callableStatement.executeQuery(); 
			while (resultSet.next()) {

				dueDateList.add(resultSet.getString("dueDate"));						

			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getDueDateList"+e);
			}
		}
		logger.info("<END> inside getDueDateList List is :"+dueDateList);

		return dueDateList;

	}

	// CR NO - 77498

	@Override
	public String insertSHIVStudentDetails(SHIVFormBean shivFormBean, String instituteID) {

		// TODO Auto-generated method stub

		long startTime = System.currentTimeMillis();
		logger.info("<START> insertSHIVStudentDetails(" + shivFormBean + ") - START");
		logger.info("insertSHIVStudentDetails---instituteID : "+instituteID);

		String responseString = null;

		try{
			callableStatement = con.prepareCall("{call PROC_SHIV_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,shivFormBean.getApplicantName());
			callableStatement.setString(2,shivFormBean.getFatherName());
			callableStatement.setString(3,shivFormBean.getMotherName());
			callableStatement.setString(4,shivFormBean.getDob());
			callableStatement.setString(5,shivFormBean.getGender());
			callableStatement.setString(6,shivFormBean.getAddress());
			callableStatement.setString(7,shivFormBean.getCity());
			callableStatement.setString(8,shivFormBean.getState());
			callableStatement.setString(9,shivFormBean.getPincode());
			callableStatement.setString(10,shivFormBean.getContact());
			callableStatement.setString(11,shivFormBean.getEmailId());
			callableStatement.setString(12,shivFormBean.getSelectCourse());
			callableStatement.setString(13, shivFormBean.getDuration());
			callableStatement.setString(14,shivFormBean.getEligibilityCriteria());
			callableStatement.setString(15,shivFormBean.getPercMarks());
			callableStatement.setString(16,shivFormBean.getPassedFrom());
			callableStatement.setString(17,shivFormBean.getAmount());
			callableStatement.setString(18,shivFormBean.getDraft());
			callableStatement.setString(19,shivFormBean.getDate());
			callableStatement.setString(20,shivFormBean.getRegisteredUserId());
			callableStatement.setString(21,shivFormBean.getPhotoProof());
			callableStatement.setString(22,instituteID);
			callableStatement.registerOutParameter(23, Types.VARCHAR);
			callableStatement.registerOutParameter(24, Types.VARCHAR);
			callableStatement.registerOutParameter(25, Types.VARCHAR);

			callableStatement.execute(); 
			responseString = callableStatement.getString(25); 
			shivFormBean.setStudentRegistrationId(callableStatement.getString(24));
			shivFormBean.setApplicationNo(callableStatement.getString(23));
			logger.info("responseString : - " + responseString);


		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertTOLANIStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END>  insertSHIVStudentDetails(" + shivFormBean + ") - END");
		return responseString;					
	}
	@Override
	public SHIVFormBean getSHIVStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("<START> getSHIVStudentDetails(" + applicationNo + ") - START");  
		SHIVFormBean shivFormBean = new SHIVFormBean();
		try{
			callableStatement = con.prepareCall("{call PROC_GET_SHIV_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {

				shivFormBean.setApplicantName(resultSet.getString("applicantName"));
				shivFormBean.setFatherName(resultSet.getString("fatherName"));
				shivFormBean.setMotherName(resultSet.getString("motherName"));
				shivFormBean.setDob(resultSet.getString("stdDob"));
				shivFormBean.setGender(resultSet.getString("gender"));
				shivFormBean.setAddress(resultSet.getString("address"));
				shivFormBean.setCity(resultSet.getString("city"));
				shivFormBean.setState(resultSet.getString("state"));
				shivFormBean.setPincode(resultSet.getString("pincode"));
				shivFormBean.setContact(resultSet.getString("contact"));
				shivFormBean.setEmailId(resultSet.getString("emailId"));
				shivFormBean.setSelectCourse(resultSet.getString("selectCourse"));
				shivFormBean.setDuration(resultSet.getString("duration"));
				shivFormBean.setEligibilityCriteria(resultSet.getString("eligibilityCriteria"));
				shivFormBean.setPercMarks(resultSet.getString("percMarks"));
				shivFormBean.setPassedFrom(resultSet.getString("qualifiedExam"));
				shivFormBean.setAmount(resultSet.getString("amount"));
				shivFormBean.setDraft(resultSet.getString("draft"));
				shivFormBean.setDate(resultSet.getString("date"));
				shivFormBean.setPhotoProof(resultSet.getString("photoProof"));
				shivFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			logger.error("Exception inside catch getSHIVStudentDetails"+e);
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getSHIVStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END> getSHIVStudentDetails(" + shivFormBean + ") - END");
		return shivFormBean;


	}
	@Override
	public Map<String, String> getCourseList() {

		logger.info("<START>inside getCourseList");
		Map<String, String> courseMap = new HashMap<String, String>();
		try {
			callableStatement = con.prepareCall("{call PROC_GET_COURSE_LIST_FOR_SHIV()}");
			resultSet=callableStatement.executeQuery(); 
			while (resultSet.next()) {

				courseMap.put(resultSet.getString("courseId"), resultSet.getString("courseName"));						
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getCourseList"+e);
			}
		}
		logger.info("<END> inside getCourseList courseMap is :"+courseMap);

		return courseMap;

	}

	/*
		@Override
		public ArrayList<String> getDurationList(String courseId) {


			logger.info("<START>inside getDurationList");
			 ArrayList<String> durationList = new ArrayList<String>() ;
			try {
				callableStatement = con.prepareCall("{call PROC_GET_DURATION_LIST_FROM_COURSE_ID(?)}");
				callableStatement.setString(1, courseId);
				resultSet=callableStatement.executeQuery(); 
				while (resultSet.next()) {

					durationList.add(resultSet.getString("duration"));						

	            }
			} catch (SQLException e) {
				e.printStackTrace();
			}
			finally {
			    try {
			        if (resultSet != null) {
			            resultSet.close();
			        }
			        if (callableStatement != null) {
			            callableStatement.close();
			        }
			        if (con != null) {
			            con.close();
			        }
			    } catch (Exception e) {
		        	logger.error("Exception inside catch getDurationList"+e);
			    }
			}
			logger.info("<END> inside getDurationList durationList is :"+durationList);

			return durationList;
		}*/
	public SHIVFormBean getDurationList(String courseId) {		
		SHIVFormBean shivFormBean = new SHIVFormBean();
		try {
			logger.info("getTopBidders() - ~START~");

			PreparedStatement stmt=con.prepareStatement("select duration,courseFees FROM FJN_SHIV_COURSE_DURATION_MASTER where courseId=?");  
			stmt.setString(1,courseId);
			resultSet=stmt.executeQuery(); 

			while (resultSet.next()) {				

				shivFormBean.setDuration(resultSet.getString("duration"));
				shivFormBean.setCourseFees(resultSet.getString("courseFees"));			
			}					

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) { resultSet.close(); }
				if (callableStatement != null) { callableStatement.close(); }
				if (con != null) { con.close(); }
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		logger.info("getTopBidders() - ~END~");
		return shivFormBean;
	}




	public String insertIITMStudentDetails(RamaCollageFormBean ramaCollageFormBean,String billerId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertIITMStudentDetails(" + ramaCollageFormBean + "billerId "+billerId+"----) - START");
		String responseString = null;
		try {
			/*logger.info("SP_FJT_insertStudentDetails - " + bhuLoginActionFormBean.getStudentRegistrationId() + "," + studentRegistrationFormBean.getBillerBranchId() + "," + studentRegistrationFormBean.getStrCourse() + "," +
        			bhuLoginActionFormBean.getStrCourseDetails() + "," + bhuLoginActionFormBean.getStrCoursePattern() + "," + studentRegistrationFormBean.getStrCourseTerm() + "," +
        			bhuLoginActionFormBean.getStrCourseType() + "," + bhuLoginActionFormBean.getStudentId() + "," + studentRegistrationFormBean.getStudentName() + "," +
        			bhuLoginActionFormBean.getStudentAlias() + ", OUT, OUT");*/


			/*callableStatement = con.prepareCall("{call SP_FJT_insertStudentDetails_prat(?,?,?,?,?,?,?,?,?,?,?,?)}");*/
			callableStatement = con.prepareCall("{call PROC_FJT_IITM_Registration_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1, ramaCollageFormBean.getStdFirstName());
			callableStatement.setString(2, ramaCollageFormBean.getStdMiddleName1());
			callableStatement.setString(3, ramaCollageFormBean.getStdLastName());
			callableStatement.setString(4, ramaCollageFormBean.getEdBachground());
			callableStatement.setString(5, ramaCollageFormBean.getStdAddress1());
			callableStatement.setString(6, ramaCollageFormBean.getStdCountry());            
			callableStatement.setString(7, ramaCollageFormBean.getStdCity());
			callableStatement.setString(8, ramaCollageFormBean.getStdState());
			callableStatement.setString(9, ramaCollageFormBean.getStdPinCode());
			callableStatement.setString(10, ramaCollageFormBean.getStdLandLine1());
			callableStatement.setString(11, ramaCollageFormBean.getStdEmailId());
			callableStatement.setString(12, ramaCollageFormBean.getStdMobile());
			callableStatement.setString(13, ramaCollageFormBean.getCompanyName());
			callableStatement.setString(14, ramaCollageFormBean.getDesignation());
			callableStatement.setString(15, ramaCollageFormBean.getWorkExperience());
			callableStatement.setString(16, ramaCollageFormBean.getStdAddress2());
			callableStatement.setString(17, ramaCollageFormBean.getWorkPhone());                 
			callableStatement.setString(18, ramaCollageFormBean.getTypeName());                                   
			callableStatement.setString(19, ramaCollageFormBean.getAmt1());
			callableStatement.setString(20, ramaCollageFormBean.getRegisteredUserId());
			callableStatement.setString(21, billerId);//21

			callableStatement.registerOutParameter(22, Types.VARCHAR);//22
			callableStatement.registerOutParameter(23, Types.VARCHAR);//23
			callableStatement.registerOutParameter(24, Types.VARCHAR);//24

			callableStatement.execute();           
			responseString = callableStatement.getString(24); //24
			ramaCollageFormBean.setStudentRegistrationId(callableStatement.getString(23));//23
			ramaCollageFormBean.setApplicationNo(callableStatement.getString(22));//22
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch PROC_FJT_IITM_Registration_Details"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch PROC_FJT_IITM_Registration_Details"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("PROC_FJT_IITM_Registration_Details(" + ramaCollageFormBean + ") - END");
		return responseString;
	}
	public String insertLiveWireStudentDetails(LiveWireOnlineFormBean liveWireOnlineFormBean, String billerId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("insertLiveWireStudentDetails(" + liveWireOnlineFormBean + ") - START");
		logger.info("insertLiveWireStudentDetails---billerId : "+billerId);

		String responseString = null;
		try{
			callableStatement = con.prepareCall("{call PROC_LiveWire_StudentDetails(?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,liveWireOnlineFormBean.getStdName());
			callableStatement.setString(2,liveWireOnlineFormBean.getEmail());
			callableStatement.setString(3,liveWireOnlineFormBean.getMobile());
			callableStatement.setString(4,liveWireOnlineFormBean.getSelectCourse());
			callableStatement.setString(5,liveWireOnlineFormBean.getSelectBranch());
			callableStatement.setString(6,liveWireOnlineFormBean.getTotAmount());				
			callableStatement.setString(7,liveWireOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(8,billerId);
			callableStatement.registerOutParameter(9, Types.VARCHAR);
			callableStatement.registerOutParameter(10, Types.VARCHAR);
			callableStatement.registerOutParameter(11, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(11); 
			liveWireOnlineFormBean.setStudentRegistrationId(callableStatement.getString(10));
			liveWireOnlineFormBean.setApplicationNo(callableStatement.getString(9));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertLiveWireStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertLiveWireStudentDetails(" + liveWireOnlineFormBean + ") - END");
		return responseString;
	}	
	public LiveWireOnlineFormBean getLiveWireStudentDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getLiveWireStudentDetails(" + applicationNo + ") - START");  
		LiveWireOnlineFormBean liveWireOnlineFormBean = new LiveWireOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_LiveWire_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            	
				liveWireOnlineFormBean.setStdName(resultSet.getString("stdName"));
				liveWireOnlineFormBean.setEmail(resultSet.getString("email"));
				liveWireOnlineFormBean.setMobile(resultSet.getString("mobile"));
				liveWireOnlineFormBean.setSelectCourse(resultSet.getString("selectCourse"));
				liveWireOnlineFormBean.setSelectBranch(resultSet.getString("selectBranch"));
				liveWireOnlineFormBean.setTotAmount(resultSet.getString("totAmount"));
				liveWireOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getLiveWireStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getLiveWireStudentDetails(" + liveWireOnlineFormBean + ") - END");
		return liveWireOnlineFormBean;
	}
	public String insertHydroPowerStudentDetails(HydroPowerOnlineFormBean hydroPowerOnlineFormBean, String billerId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("insertHydroPowerStudentDetails(" + hydroPowerOnlineFormBean + ") - START");
		logger.info("insertHydroPowerStudentDetails---billerId : "+billerId);

		String responseString = null;
		try{
			callableStatement = con.prepareCall("{call PROC_HydroPower_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,hydroPowerOnlineFormBean.getRollno());
			callableStatement.setString(2,hydroPowerOnlineFormBean.getStdName());
			callableStatement.setString(3,hydroPowerOnlineFormBean.getFatherName());
			callableStatement.setString(4,hydroPowerOnlineFormBean.getStdDOB());
			callableStatement.setString(5,hydroPowerOnlineFormBean.getMobile());
			callableStatement.setString(6,hydroPowerOnlineFormBean.getSelectBranch());
			callableStatement.setString(7,hydroPowerOnlineFormBean.getSelectBatch());
			callableStatement.setString(8,hydroPowerOnlineFormBean.getSelectSemester());
			callableStatement.setString(9,hydroPowerOnlineFormBean.getSemTutionFee());
			callableStatement.setString(10,hydroPowerOnlineFormBean.getSemPdpFee());
			callableStatement.setString(11,hydroPowerOnlineFormBean.getSemExamFee());
			callableStatement.setString(12,hydroPowerOnlineFormBean.getYearSecurityFee());
			callableStatement.setString(13,hydroPowerOnlineFormBean.getEnrolmentFee());
			callableStatement.setString(14,hydroPowerOnlineFormBean.getRegistrationFee());
			callableStatement.setString(15,hydroPowerOnlineFormBean.getSemHostalFee());
			callableStatement.setString(16,hydroPowerOnlineFormBean.getSemMessFee());
			callableStatement.setString(17,hydroPowerOnlineFormBean.getOtherFee());
			callableStatement.setString(18,hydroPowerOnlineFormBean.getOtherFeeRemark());
			callableStatement.setString(19,hydroPowerOnlineFormBean.getTotAmount());
			callableStatement.setString(20,hydroPowerOnlineFormBean.getRemarks());		
			callableStatement.setString(21,hydroPowerOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(22,billerId);
			callableStatement.setString(23,hydroPowerOnlineFormBean.getNoOfSubject());
			callableStatement.setString(24,hydroPowerOnlineFormBean.getBackPaperFee());
			callableStatement.setString(25,hydroPowerOnlineFormBean.getDegreeFee());

			callableStatement.registerOutParameter(26, Types.VARCHAR);
			callableStatement.registerOutParameter(27, Types.VARCHAR);
			callableStatement.registerOutParameter(28, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(28); 
			hydroPowerOnlineFormBean.setStudentRegistrationId(callableStatement.getString(27));
			hydroPowerOnlineFormBean.setApplicationNo(callableStatement.getString(26));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertHydroPowerStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertHydroPowerStudentDetails(" + hydroPowerOnlineFormBean + ") - END");
		return responseString;
	}
	public HydroPowerOnlineFormBean getHydroPowerStudentDetails(String applicationNo,String instituteCode)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getHydroPowerStudentDetails(" + applicationNo + ") - START");  
		HydroPowerOnlineFormBean hydroPowerOnlineFormBean = new HydroPowerOnlineFormBean();

//		try{
//			callableStatement = con.prepareCall("{call PROC_GET_HydroPower_STUDENTDETAILS(?)}");
//			callableStatement.setString(1, applicationNo);
//			resultSet = callableStatement.executeQuery(); 
//			while (resultSet.next()) {			            	
//				hydroPowerOnlineFormBean.setRollno(resultSet.getString("rollno"));
//				hydroPowerOnlineFormBean.setStdName(resultSet.getString("stdName"));
//				hydroPowerOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
//				hydroPowerOnlineFormBean.setStdDOB(resultSet.getString("stdDOB"));
//				hydroPowerOnlineFormBean.setMobile(resultSet.getString("mobile"));
//				hydroPowerOnlineFormBean.setSelectBranch(resultSet.getString("selectBranch"));
//				hydroPowerOnlineFormBean.setSelectBatch(resultSet.getString("selectBatch"));
//				hydroPowerOnlineFormBean.setSelectSemester(resultSet.getString("selectSemester"));
//				hydroPowerOnlineFormBean.setSemTutionFee(resultSet.getString("semTutionFee"));
//				hydroPowerOnlineFormBean.setSemPdpFee(resultSet.getString("semPdpFee"));
//				hydroPowerOnlineFormBean.setSemExamFee(resultSet.getString("semExamFee"));
//				hydroPowerOnlineFormBean.setYearSecurityFee(resultSet.getString("yearSecurityFee"));
//				hydroPowerOnlineFormBean.setEnrolmentFee(resultSet.getString("enrolmentFee"));
//				hydroPowerOnlineFormBean.setRegistrationFee(resultSet.getString("registrationFee"));
//				hydroPowerOnlineFormBean.setSemHostalFee(resultSet.getString("semHostalFee"));
//				hydroPowerOnlineFormBean.setSemMessFee(resultSet.getString("semMessFee"));
//				hydroPowerOnlineFormBean.setOtherFee(resultSet.getString("otherFee"));
//				hydroPowerOnlineFormBean.setOtherFeeRemark(resultSet.getString("otherFeeRemark"));
//				hydroPowerOnlineFormBean.setTotAmount(resultSet.getString("totAmount"));
//				hydroPowerOnlineFormBean.setRemarks(resultSet.getString("remarks"));
//				hydroPowerOnlineFormBean.setNoOfSubject(resultSet.getString("noOfSubject"));
//				hydroPowerOnlineFormBean.setBackPaperFee(resultSet.getString("backPaperFee"));
//				hydroPowerOnlineFormBean.setDegreeFee(resultSet.getString("degreeFee"));
//				hydroPowerOnlineFormBean.setApplicationNo(applicationNo);
		StudentRegistrationService studentRegistrationService=new StudentRegistrationService();
		String merchantID=studentRegistrationService.getMerchantId(instituteCode);
				//InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

				try{
					ObjectMapper obMapper = new ObjectMapper();
					ObjectNode objNode = obMapper.createObjectNode();
					/*** *** *** Initialization start *** *** ***/
					SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

					secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
					secureAPIBuilder.setUpstreamServerPort(443);

					secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
					secureAPIBuilder.setVerifyServerSSL(false);

					//String clientId = "actual-smarthub-node-ip";
					//String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

					//secureAPIBuilder.setAuthenticationAlias(clientId);

					//byte[] clientKey = hexStringToByteArray(clientKeyStr);
					//secureAPIBuilder.setAuthenticationKey(clientKey);

					SecureAPIConnection secureAPI = secureAPIBuilder.build();
					
				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteCode);
				smartHubFetchOnlineFormBean.setContext_id(merchantID);
				smartHubFetchOnlineFormBean.setForm_id(applicationNo);
				logger.info("AppNo From dao "+applicationNo);
				String  jsonString2=obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2"+jsonString2);

//				WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/get-form-data");
//				Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//				
//				Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				APIResponse apiResponse1 = null;
				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: " + apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();
				
				
				logger.info("output1"+output1);
				
				JSONObject jsonObject = new JSONObject(output1);
				
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray"+jsonArray);
				JSONObject data = jsonArray.getJSONObject(0);
				JSONObject dataobj = data.getJSONObject("form_data");

				String rollno = dataobj.getString("rollno");
				String stdname = dataobj.getString("stdName");
				String fathername = dataobj.getString("fatherName");
				String stddob = dataobj.getString("stdDOB");
				Long mobile = dataobj.getLong("mobile");
				String selectbranch = dataobj.getString("selectBranch");
				String selectbatch = dataobj.getString("selectBatch");
				String selectsemester = dataobj.getString("selectSemester");
				int semtutionfee = dataobj.getInt("semTutionFee");
				int sempdpfee = dataobj.getInt("semPdpFee");
				int semexamfee = dataobj.getInt("semExamFee");
				int yearsecurityfee = dataobj.getInt("yearSecurityFee");
				int enrolmentfee = dataobj.getInt("enrolmentFee");
				int registrationfee = dataobj.getInt("registrationFee");
				int semhostalfee = dataobj.getInt("semHostalFee");
				int semmessfee = dataobj.getInt("semMessFee");
				int otherfee = dataobj.getInt("otherFee");
				String otherfeeremark = dataobj.getString("otherFeeRemark");
				String remarks = dataobj.getString("remarks");
				int totamount = dataobj.getInt("totAmount");
				String noofsubject = dataobj.getString("noOfSubject");
				int backpaperfee = dataobj.getInt("backPaperFee");
				int degreefee = dataobj.getInt("degreeFee");

//Calling all Setter methods
				hydroPowerOnlineFormBean.setRollno(rollno);
				hydroPowerOnlineFormBean.setStdName(stdname);
				hydroPowerOnlineFormBean.setFatherName(fathername);
				hydroPowerOnlineFormBean.setStdDOB(stddob);
				hydroPowerOnlineFormBean.setMobile(String.valueOf(mobile));
				hydroPowerOnlineFormBean.setSelectBranch(selectbranch);
				hydroPowerOnlineFormBean.setSelectBatch(selectbatch);
				hydroPowerOnlineFormBean.setSelectSemester(selectsemester);
				hydroPowerOnlineFormBean.setSemTutionFee(String.valueOf(semtutionfee));
				hydroPowerOnlineFormBean.setSemPdpFee(String.valueOf(sempdpfee));
				hydroPowerOnlineFormBean.setSemExamFee(String.valueOf(semexamfee));
				hydroPowerOnlineFormBean.setYearSecurityFee(String.valueOf(yearsecurityfee));
				hydroPowerOnlineFormBean.setEnrolmentFee(String.valueOf(enrolmentfee));
				hydroPowerOnlineFormBean.setRegistrationFee(String.valueOf(registrationfee));
				hydroPowerOnlineFormBean.setSemHostalFee(String.valueOf(semhostalfee));
				hydroPowerOnlineFormBean.setSemMessFee(String.valueOf(semmessfee));
				hydroPowerOnlineFormBean.setOtherFee(String.valueOf(otherfee));
				hydroPowerOnlineFormBean.setOtherFeeRemark(otherfeeremark);
				hydroPowerOnlineFormBean.setRemarks(remarks);
				hydroPowerOnlineFormBean.setTotAmount(String.valueOf(totamount));
				hydroPowerOnlineFormBean.setNoOfSubject(noofsubject);
				hydroPowerOnlineFormBean.setBackPaperFee(String.valueOf(backpaperfee));
				hydroPowerOnlineFormBean.setDegreeFee(String.valueOf(degreefee));

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getHydroPowerStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getHydroPowerStudentDetails(" + hydroPowerOnlineFormBean + ") - END");
		return hydroPowerOnlineFormBean;
	}  

	public String insertAmbikaPurStudentDetails(AmbikapurOnlineFormBean ambikaPurOnlineFormBean, String billerId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("<Start >insertAmbikaPurStudentDetails(" + ambikaPurOnlineFormBean + ") - START");
		logger.info("insertAmbikaPurStudentDetails---billerId : "+billerId);

		String responseString = null;
		/*	try{
		callableStatement = con.prepareCall("{call PROC_AmbikaPur_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?)}");
		callableStatement.setString(1,ambikaPurOnlineFormBean.getStudentName());
		callableStatement.setString(2,ambikaPurOnlineFormBean.getFatherName());
		callableStatement.setString(3,ambikaPurOnlineFormBean.getTicketNumber());
		callableStatement.setString(4,ambikaPurOnlineFormBean.getMeritList());
		callableStatement.setString(5,ambikaPurOnlineFormBean.getSelectGender());
		callableStatement.setString(6,ambikaPurOnlineFormBean.getSelectCategory());
		callableStatement.setString(7,ambikaPurOnlineFormBean.getSelectCourse());
		callableStatement.setString(8,ambikaPurOnlineFormBean.getTotAmount());

		callableStatement.setString(9,ambikaPurOnlineFormBean.getRegisteredUserId());				
		callableStatement.setString(10,billerId);

		callableStatement.registerOutParameter(11, Types.VARCHAR);
		callableStatement.registerOutParameter(12, Types.VARCHAR);
		callableStatement.registerOutParameter(13, Types.VARCHAR);

  callableStatement.execute(); 

  responseString = callableStatement.getString(13); 
  ambikaPurOnlineFormBean.setStudentRegistrationId(callableStatement.getString(12));
  ambikaPurOnlineFormBean.setApplicationNo(callableStatement.getString(11));
  logger.info("responseString : - " + responseString);*/
		try{
			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,ambikaPurOnlineFormBean.getTotAmount());
			callableStatement.setString(2,ambikaPurOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,ambikaPurOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			ambikaPurOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			ambikaPurOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertAmbikaPurStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertAmbikaPurStudentDetails(" + ambikaPurOnlineFormBean + ") - END");
		return responseString;
	}
	public AmbikapurOnlineFormBean getAmbikapurStudentDetails(String applicationNo,String instituteCode)
	{

		long startTime = System.currentTimeMillis();
		logger.info("getAmbikapurStudentDetails(" + applicationNo + ") - START");  
		AmbikapurOnlineFormBean ambikaOnlineFormBean = new AmbikapurOnlineFormBean();

//		try{
//			callableStatement = con.prepareCall("{call PROC_GET_Ambikapur_STUDENTDETAILS(?)}");
//			callableStatement.setString(1, applicationNo);
//			resultSet = callableStatement.executeQuery(); 
//			while (resultSet.next()) {			            	
//				ambikaOnlineFormBean.setStudentName(resultSet.getString("studentName"));
//
//				ambikaOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
//				ambikaOnlineFormBean.setTicketNumber(resultSet.getString("ticketNumber"));
//				ambikaOnlineFormBean.setMeritList(resultSet.getString("meritList"));
//				ambikaOnlineFormBean.setSelectGender(resultSet.getString("selectGender"));
//				ambikaOnlineFormBean.setSelectCategory(resultSet.getString("selectCategory"));
//				ambikaOnlineFormBean.setSelectCourse(resultSet.getString("selectCourse"));
//				ambikaOnlineFormBean.setTotAmount(resultSet.getString("totAmount"));
//				ambikaOnlineFormBean.setApplicationNo(applicationNo);
//			}
		StudentRegistrationService studentRegistrationService=new StudentRegistrationService();
		String merchantID=studentRegistrationService.getMerchantId(instituteCode);
				//InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

				try{
					ObjectMapper obMapper = new ObjectMapper();
					ObjectNode objNode = obMapper.createObjectNode();
					/*** *** *** Initialization start *** *** ***/
					SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

					secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
					secureAPIBuilder.setUpstreamServerPort(443);

					secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
					secureAPIBuilder.setVerifyServerSSL(false);

					//String clientId = "actual-smarthub-node-ip";
					//String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

					//secureAPIBuilder.setAuthenticationAlias(clientId);

					//byte[] clientKey = hexStringToByteArray(clientKeyStr);
					//secureAPIBuilder.setAuthenticationKey(clientKey);

					SecureAPIConnection secureAPI = secureAPIBuilder.build();
					
				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteCode);
				smartHubFetchOnlineFormBean.setContext_id(merchantID);
				smartHubFetchOnlineFormBean.setForm_id(applicationNo);
				logger.info("AppNo From dao "+applicationNo);
				String  jsonString2=obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2"+jsonString2);

//				WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/get-form-data");
//				Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//				
//				Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				APIResponse apiResponse1 = null;
				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: " + apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();
				
				
				logger.info("output1"+output1);
				
				JSONObject jsonObject = new JSONObject(output1);
				
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray"+jsonArray);
		JSONObject data=jsonArray.getJSONObject(0);
		JSONObject dataobj=data.getJSONObject("form_data");
		
		String stuName=dataobj.getString("student_name");
		
		String father_name=dataobj.getString("father_name");
		String ticket_number=dataobj.getString("ticket_number");
		String merit_list=dataobj.getString("merit_list");
		String select_gender=dataobj.getString("select_gender");
		String select_category=dataobj.getString("select_category");
		String select_course=dataobj.getString("select_course");
		int total_amount=dataobj.getInt("total_amount");
		
		
		
		ambikaOnlineFormBean.setStudentName(stuName);
		ambikaOnlineFormBean.setFatherName(father_name);
		ambikaOnlineFormBean.setTicketNumber(ticket_number);
		ambikaOnlineFormBean.setMeritList(merit_list);
		ambikaOnlineFormBean.setSelectGender(select_gender);
		ambikaOnlineFormBean.setSelectCourse(select_course);
		ambikaOnlineFormBean.setSelectCategory(select_category);
		ambikaOnlineFormBean.setTotAmount(String.valueOf(total_amount));
		ambikaOnlineFormBean.setApplicationNo(applicationNo);

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getAmbikapurStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getAmbikapurStudentDetails(" + ambikaOnlineFormBean + ") - END");
		return ambikaOnlineFormBean;
	}
	public String	getAmbikaStudentFees(String coursetype,String gendertype, String categorytype)
	{	
		long startTime = System.currentTimeMillis();
		logger.info("<Start >getAmbikaStudentFees  coursetype : "+coursetype+ "gendertype : "+gendertype +"categorytype : "+categorytype);  
		String studentFees=null;
		if("Female".equalsIgnoreCase(gendertype))
		{
			categorytype="Any";
		}
		try{
			callableStatement = con.prepareCall("{call PROC_GET_AmbikaStudentFees(?,?,?)}");
			callableStatement.setString(1, coursetype);
			callableStatement.setString(2, gendertype);
			callableStatement.setString(3, categorytype);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            	
				studentFees= resultSet.getString("Fees");
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getAmbikaStudentFees"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getAmbikapurStudentDetails studentFees" + studentFees +"- END");
		return studentFees;
	}
	public String insertICBRStudentDetails(ICBROnlineFormBean icbrOnlineFormBean, String billerId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("insertHydroPowerStudentDetails(" + icbrOnlineFormBean + ") - START");
		logger.info("insertHydroPowerStudentDetails---billerId : "+billerId);

		String responseString = null;
		/*try{
		callableStatement = con.prepareCall("{call PROC_ICBR_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?)}");
		callableStatement.setString(1,icbrOnlineFormBean.getNameofApplicant());
		callableStatement.setString(2,icbrOnlineFormBean.getAddress());
		callableStatement.setString(3,icbrOnlineFormBean.getEmailId());
		callableStatement.setString(4,icbrOnlineFormBean.getMobileNo());
		callableStatement.setString(5,icbrOnlineFormBean.getFeeHeads());
		callableStatement.setString(6,icbrOnlineFormBean.getFees());
		callableStatement.setString(7,icbrOnlineFormBean.getTotalAmount());
		callableStatement.setString(8,icbrOnlineFormBean.getPayment());
		callableStatement.setString(9,icbrOnlineFormBean.getRegisteredUserId());

		callableStatement.setString(10,billerId);

		callableStatement.registerOutParameter(11, Types.VARCHAR);
		callableStatement.registerOutParameter(12, Types.VARCHAR);
		callableStatement.registerOutParameter(13, Types.VARCHAR);

callableStatement.execute(); 

responseString = callableStatement.getString(13); 
icbrOnlineFormBean.setStudentRegistrationId(callableStatement.getString(12));
icbrOnlineFormBean.setApplicationNo(callableStatement.getString(11));
logger.info("responseString : - " + responseString);
		 */
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,icbrOnlineFormBean.getTotalAmount());
			callableStatement.setString(2,icbrOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,icbrOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			icbrOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			icbrOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertHydroPowerStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertHydroPowerStudentDetails(" + icbrOnlineFormBean + ") - END");
		return responseString;
	}

	public ICBROnlineFormBean getICBRStudentDetails(String applicationNo,String instituteCode)
	{
		long startTime = System.currentTimeMillis();
		logger.info("geticbrStudentDetails(" + applicationNo + ") - START");  
		ICBROnlineFormBean icbrOnlineFormBean = new ICBROnlineFormBean();

//		try{
//			callableStatement = con.prepareCall("{call PROC_GET_ICBR_STUDENTDETAILS(?)}");
//			callableStatement.setString(1, applicationNo);
//			resultSet = callableStatement.executeQuery(); 
//			while (resultSet.next()) {			            	
//				icbrOnlineFormBean.setNameofApplicant(resultSet.getString("nameofApplicant"));
//				icbrOnlineFormBean.setAddress(resultSet.getString("address"));
//				icbrOnlineFormBean.setEmailId(resultSet.getString("emailId"));
//				icbrOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));
//				icbrOnlineFormBean.setFeeHeads(resultSet.getString("feeHeads"));
//				icbrOnlineFormBean.setFees(resultSet.getString("fees"));
//				icbrOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));
//				icbrOnlineFormBean.setPayment(resultSet.getString("payment"));
//				icbrOnlineFormBean.setRegisteredUserId(resultSet.getString("registeredUserId"));            	
//				icbrOnlineFormBean.setApplicationNo(applicationNo);
//			}
		StudentRegistrationService studentRegistrationService=new StudentRegistrationService();
		String merchantID=studentRegistrationService.getMerchantId(instituteCode);
				//InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

				try{
					ObjectMapper obMapper = new ObjectMapper();
					ObjectNode objNode = obMapper.createObjectNode();
					/*** *** *** Initialization start *** *** ***/
					SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

					secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
					secureAPIBuilder.setUpstreamServerPort(443);

					secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
					secureAPIBuilder.setVerifyServerSSL(false);

					//String clientId = "actual-smarthub-node-ip";
					//String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

					//secureAPIBuilder.setAuthenticationAlias(clientId);

					//byte[] clientKey = hexStringToByteArray(clientKeyStr);
					//secureAPIBuilder.setAuthenticationKey(clientKey);

					SecureAPIConnection secureAPI = secureAPIBuilder.build();
					
				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteCode);
				smartHubFetchOnlineFormBean.setContext_id(merchantID);
				smartHubFetchOnlineFormBean.setForm_id(applicationNo);
				logger.info("AppNo From dao "+applicationNo);
				String  jsonString2=obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2"+jsonString2);

//				WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/get-form-data");
//				Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//				
//				Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				APIResponse apiResponse1 = null;
				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: " + apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();
				
				
				logger.info("output1"+output1);
				
				JSONObject jsonObject = new JSONObject(output1);
				
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray"+jsonArray);
		JSONObject data = jsonArray.getJSONObject(0);
		JSONObject dataobj = data.getJSONObject("form_data");

		String stuName = dataobj.getString("nameof_applicant");

		String address_details = dataobj.getString("address_details");
		String fee_heads = dataobj.getString("fee_heads");
		int fees_details = dataobj.getInt("fees_details");
		int amt_paid = dataobj.getInt("total_amount");
		Long mobile_number = dataobj.getLong("mobile_no");
		String email_id = dataobj.getString("email_id");

		icbrOnlineFormBean.setNameofApplicant(stuName);
		icbrOnlineFormBean.setAddress(address_details);
		icbrOnlineFormBean.setFeeHeads(fee_heads);
		icbrOnlineFormBean.setFees(String.valueOf(fees_details));
		icbrOnlineFormBean.setEmailId(email_id);
		icbrOnlineFormBean.setMobileNo(String.valueOf(mobile_number));
		icbrOnlineFormBean.setTotalAmount(String.valueOf(amt_paid));
		icbrOnlineFormBean.setApplicationNo(applicationNo);

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getHydroPowerStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("geticbrStudentDetails(" + icbrOnlineFormBean + ") - END");
		return icbrOnlineFormBean;
	} 

	public String insertRamanujanAAStudentDetails(RamanujanAAOnlineFormBean ramanujanAAOnlineFormBean,String billerId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("<Start >insertRamanujanAAStudentDetails(" + ramanujanAAOnlineFormBean + ") - START");
		logger.info("insertRamanujanAAStudentDetails---billerId : "+billerId);

		String responseString = null;
		try{
			callableStatement = con.prepareCall("{call PROC_RamanujanAA_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,ramanujanAAOnlineFormBean.getStudentName());
			callableStatement.setString(2,ramanujanAAOnlineFormBean.getRollNumber());
			callableStatement.setString(3,ramanujanAAOnlineFormBean.getMobileNumber());
			callableStatement.setString(4,ramanujanAAOnlineFormBean.getEmailId());
			callableStatement.setString(5,ramanujanAAOnlineFormBean.getPassingYear());

			callableStatement.setString(6,ramanujanAAOnlineFormBean.getSelectCourse());
			callableStatement.setString(7,ramanujanAAOnlineFormBean.getTotAmount());

			callableStatement.setString(8,ramanujanAAOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(9,billerId);

			callableStatement.registerOutParameter(10, Types.VARCHAR);
			callableStatement.registerOutParameter(11, Types.VARCHAR);
			callableStatement.registerOutParameter(12, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(12); 
			ramanujanAAOnlineFormBean.setStudentRegistrationId(callableStatement.getString(11));
			ramanujanAAOnlineFormBean.setApplicationNo(callableStatement.getString(10));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertAmbikaPurStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertAmbikaPurStudentDetails(" + ramanujanAAOnlineFormBean + ") - END");
		return responseString;
	}

	public RamanujanAAOnlineFormBean getRamanujanAAStudentDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getRamanujanAAStudentDetails(" + applicationNo + ") - START");  
		RamanujanAAOnlineFormBean ramanujanAAOnlineFormBean = new RamanujanAAOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_RamanujanAA_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            	
				ramanujanAAOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				ramanujanAAOnlineFormBean.setRollNumber(resultSet.getString("rollNumber"));
				ramanujanAAOnlineFormBean.setMobileNumber(resultSet.getString("mobileNumber"));
				ramanujanAAOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				ramanujanAAOnlineFormBean.setPassingYear(resultSet.getString("passingYear"));
				ramanujanAAOnlineFormBean.setSelectCourse(resultSet.getString("selectCourse"));
				ramanujanAAOnlineFormBean.setTotAmount(resultSet.getString("totAmount"));

				ramanujanAAOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getRamanujanAAStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getRamanujanAAStudentDetails(" + ramanujanAAOnlineFormBean + ") - END");
		return ramanujanAAOnlineFormBean;
	}
	public ShepaOnlineFormBean getShepaStudentDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getShepaStudentDetails(" + applicationNo + ") - START");  
		ShepaOnlineFormBean shepaOnlineFormBean = new ShepaOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_SHEPA_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            	
				shepaOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				shepaOnlineFormBean.setFatherName(resultSet.getString("fatherName"));

				shepaOnlineFormBean.setRollNo(resultSet.getString("rollNumber"));
				shepaOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				shepaOnlineFormBean.setMobileNumber(resultSet.getString("mobileNumber"));	            	
				shepaOnlineFormBean.setTotalFee(resultSet.getString("totalFee"));
				shepaOnlineFormBean.setSemester(resultSet.getString("semester"));
				shepaOnlineFormBean.setCollege(resultSet.getString("college"));
				shepaOnlineFormBean.setCourse(resultSet.getString("course"));
				shepaOnlineFormBean.setRegisteredUserId(resultSet.getString("registeredUserId"));            	
				shepaOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getHydroPowerStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getShepaStudentDetails(" + shepaOnlineFormBean + ") - END");
		return shepaOnlineFormBean;
	} 
	public String insertShepaStudentDetails(ShepaOnlineFormBean shepaOnlineFormBean,String billerId) {


		long startTime = System.currentTimeMillis();
		logger.info("insertShepaStudentDetails(" + shepaOnlineFormBean + ") - START ===billerId=>>"+billerId);


		String responseString = null;
		try {
			logger.info("PROC_FJT_SHEPA_Registration_Details(" + shepaOnlineFormBean + ") - START");
			callableStatement = con.prepareCall("{call PROC_FJT_SHEPA_Registration_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1, shepaOnlineFormBean.getRollNo());
			callableStatement.setString(2, shepaOnlineFormBean.getStudentName());
			callableStatement.setString(3, shepaOnlineFormBean.getFatherName());

			callableStatement.setString(4, shepaOnlineFormBean.getMobileNumber());
			callableStatement.setString(5, shepaOnlineFormBean.getEmailId());
			callableStatement.setString(6, shepaOnlineFormBean.getCollege());
			callableStatement.setString(7, shepaOnlineFormBean.getCourse());            
			callableStatement.setString(8, shepaOnlineFormBean.getSemester());
			callableStatement.setString(9, shepaOnlineFormBean.getTotalFee());
			callableStatement.setString(10, shepaOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(11, billerId);//10


			callableStatement.registerOutParameter(12, Types.VARCHAR);
			callableStatement.registerOutParameter(13, Types.VARCHAR);
			callableStatement.registerOutParameter(14, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(14); 
			shepaOnlineFormBean.setStudentRegistrationId(callableStatement.getString(13));
			shepaOnlineFormBean.setApplicationNo(callableStatement.getString(12));
			logger.info("PROC_FJT_SHEPA_Registration_Details responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertShepaStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertShepaStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertShepaStudentDetails(" + shepaOnlineFormBean + ") - END");
		return responseString;
	}

	//CR KASHI STARTS
	@Override
	public String insertKASHIStudentDetails(KASHIFormBean kashiFormBean,
			String instituteID) {
		// TODO Auto-generated method stub

		long startTime = System.currentTimeMillis();
		logger.info("<START> insertKASHIStudentDetails(" + kashiFormBean + ") - START");
		logger.info("insertKASHIStudentDetails---instituteID : "+instituteID);

		String responseString = null;
		String mobileNo = kashiFormBean.getMobileNo();
		if(mobileNo==null || mobileNo.equals(""))
		{
			mobileNo="1234567890";
		}
		try{
			callableStatement = con.prepareCall("{call PROC_KASHI_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,kashiFormBean.getRollNo());
			callableStatement.setString(2,kashiFormBean.getStdName());

			callableStatement.setString(3,mobileNo);
			callableStatement.setString(4,kashiFormBean.getEmailId());
			callableStatement.setString(5,kashiFormBean.getCourseName());
			callableStatement.setString(6,kashiFormBean.getSemester());
			callableStatement.setString(7,kashiFormBean.getTotalFee());

			callableStatement.setString(8,kashiFormBean.getRegisteredUserId());
			callableStatement.setString(9,instituteID);

			callableStatement.registerOutParameter(10, Types.VARCHAR);
			callableStatement.registerOutParameter(11, Types.VARCHAR);
			callableStatement.registerOutParameter(12, Types.VARCHAR);

			callableStatement.execute(); 
			responseString = callableStatement.getString(12); 
			kashiFormBean.setStudentRegistrationId(callableStatement.getString(11));
			kashiFormBean.setApplicationNo(callableStatement.getString(10));
			logger.info("responseString : - " + responseString);


		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertKASHIStudentDetails"+e);
			}


		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END>  insertKASHIStudentDetails(" + kashiFormBean + ") - END");
		return responseString;

	} 
	@Override
	public KASHIFormBean getKASHIStudentDetails(String applicationNo) {
		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("<START> getKASHIStudentDetails(" + applicationNo + ") - START");  
		KASHIFormBean kashiFormBean = new KASHIFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_KASHI_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {

				kashiFormBean.setRollNo(resultSet.getString("rollNo"));
				kashiFormBean.setStdName(resultSet.getString("stdName"));
				String mobileNo=resultSet.getString("mobileNo");
				if(mobileNo==null || mobileNo.equals("1234567890"))
				{
					mobileNo="";
				}
				kashiFormBean.setMobileNo(mobileNo);
				kashiFormBean.setEmailId(resultSet.getString("emailId"));
				kashiFormBean.setCourseName(resultSet.getString("courseName"));
				kashiFormBean.setSemester(resultSet.getString("semester"));
				kashiFormBean.setTotalFee(resultSet.getString("totalFee"));
				kashiFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getKASHIStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END> getKASHIStudentDetails(" + kashiFormBean + ") - END");
		return kashiFormBean;
	}
	//CR KASHI ENS

	public String insertWeinderStudentDetails(WeidnerOnlineFormBean weidnerOnlineFormBean,String billerId) {

		long startTime = System.currentTimeMillis();
		logger.info("insertWinderStudentDetails(" + weidnerOnlineFormBean + ") - START ===billerId=>>"+billerId);


		String responseString = null;
		try {
			/*
			 * logger.info("PROC_FJT_WEINDER_Registration_Details(" + weidnerOnlineFormBean
			 * + ") - START"); callableStatement = con.
			 * prepareCall("{call PROC_FJT_WEINDER_Registration_Details(?,?,?,?,?,?,?,?,?,?,?,?)}"
			 * ); callableStatement.setString(1, weidnerOnlineFormBean.getStudentName());
			 * callableStatement.setString(2, weidnerOnlineFormBean.getFatherName());
			 * callableStatement.setString(3, weidnerOnlineFormBean.getClassValue());
			 * callableStatement.setString(4, weidnerOnlineFormBean.getSection());
			 * callableStatement.setString(5, weidnerOnlineFormBean.getAdmissionNo());
			 * callableStatement.setString(6, weidnerOnlineFormBean.getFeesAmount());
			 * callableStatement.setString(7, weidnerOnlineFormBean.getRemark());
			 * callableStatement.setString(8, weidnerOnlineFormBean.getRegisteredUserId());
			 * callableStatement.setString(9, billerId);//9
			 * callableStatement.registerOutParameter(10, Types.VARCHAR);
			 * callableStatement.registerOutParameter(11, Types.VARCHAR);
			 * callableStatement.registerOutParameter(12, Types.VARCHAR);
			 * 
			 * callableStatement.execute(); responseString =
			 * callableStatement.getString(12);
			 * weidnerOnlineFormBean.setStudentRegistrationId(callableStatement.getString(11
			 * )); weidnerOnlineFormBean.setApplicationNo(callableStatement.getString(10));
			 * logger.info("PROC_FJT_WEINDER_Registration_Details responseString : - " +
			 * responseString);
			 */
			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,weidnerOnlineFormBean.getFeesAmount());
			callableStatement.setString(2,weidnerOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,weidnerOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			weidnerOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			weidnerOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertWeinderStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();






				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertWeinderStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertShepaStudentDetails(" + weidnerOnlineFormBean + ") - END");
		return responseString;
	} 

	public WeidnerOnlineFormBean getWeidnerStudentDetails(String applicationNo,String instituteCode)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getWeidnerStudentDetails(" + applicationNo + ") - START");  
		WeidnerOnlineFormBean weidnerOnlineFormBean = new WeidnerOnlineFormBean();

//		try{
//			callableStatement = con.prepareCall("{call PROC_GET_WEINDER_STUDENTDETAILS(?)}");
//			callableStatement.setString(1, applicationNo);
//			resultSet = callableStatement.executeQuery(); 
//			while (resultSet.next()) {			            	
//				weidnerOnlineFormBean.setStudentName(resultSet.getString("studentName"));
//				weidnerOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
//				weidnerOnlineFormBean.setClassValue(resultSet.getString("class"));
//				weidnerOnlineFormBean.setSection(resultSet.getString("section"));	            	
//				weidnerOnlineFormBean.setAdmissionNo(resultSet.getString("admissionNo"));
//				weidnerOnlineFormBean.setFeesAmount(resultSet.getString("feesAmount"));
//				weidnerOnlineFormBean.setRemark(resultSet.getString("remark"));
//				weidnerOnlineFormBean.setRegisteredUserId(resultSet.getString("registerId"));            	
//				weidnerOnlineFormBean.setApplicationNo(applicationNo);
//
//
//
//
//
//			}
		StudentRegistrationService studentRegistrationService=new StudentRegistrationService();
		String merchantID=studentRegistrationService.getMerchantId(instituteCode);
				//InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

				try{
					ObjectMapper obMapper = new ObjectMapper();
					ObjectNode objNode = obMapper.createObjectNode();
					/*** *** *** Initialization start *** *** ***/
					SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

					secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
					secureAPIBuilder.setUpstreamServerPort(443);

					secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
					secureAPIBuilder.setVerifyServerSSL(false);

					//String clientId = "actual-smarthub-node-ip";
					//String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

					//secureAPIBuilder.setAuthenticationAlias(clientId);

					//byte[] clientKey = hexStringToByteArray(clientKeyStr);
					//secureAPIBuilder.setAuthenticationKey(clientKey);

					SecureAPIConnection secureAPI = secureAPIBuilder.build();
					
				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteCode);
				smartHubFetchOnlineFormBean.setContext_id(merchantID);
				smartHubFetchOnlineFormBean.setForm_id(applicationNo);
				logger.info("AppNo From dao "+applicationNo);
				String  jsonString2=obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2"+jsonString2);

//				WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/get-form-data");
//				Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//				
//				Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				APIResponse apiResponse1 = null;
				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: " + apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();
				
				
				logger.info("output1"+output1);
				
				JSONObject jsonObject = new JSONObject(output1);
				
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray"+jsonArray);
		JSONObject data=jsonArray.getJSONObject(0);
		JSONObject dataobj=data.getJSONObject("form_data");
		
		String stuName=dataobj.getString("student_name");
		
		String father_name=dataobj.getString("father_name");
		
	    String class_value=dataobj.getString("class_value");
		
		String section_details=dataobj.getString("section_details");
		
		
		String admission_no=dataobj.getString("admission_no");
		String remark=dataobj.getString("remark_message");
		int fees_amount=dataobj.getInt("fees_amount");

		
		
		weidnerOnlineFormBean.setStudentName(stuName);
		weidnerOnlineFormBean.setFatherName(father_name);
		weidnerOnlineFormBean.setClassValue(class_value);
		weidnerOnlineFormBean.setSection(section_details);
		weidnerOnlineFormBean.setAdmissionNo(admission_no);
		weidnerOnlineFormBean.setFeesAmount(String.valueOf(fees_amount));
		weidnerOnlineFormBean.setRemark(remark);
		weidnerOnlineFormBean.setApplicationNo(applicationNo);
		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getHydroPowerStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getShepaStudentDetails(" + weidnerOnlineFormBean + ") - END");
		return weidnerOnlineFormBean;
	} 

	public String insertFinolexStudentDetails(FinolexOnlineFormBean finolexOnlineFormBean,String billerId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("<Start >insertFinolexStudentDetails(" + finolexOnlineFormBean + ") - START");
		logger.info("insertFinolexStudentDetails---billerId : "+billerId);

		String responseString = null;
		/*try{
	callableStatement = con.prepareCall("{call PROC_Finolex_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
	callableStatement.setString(1,finolexOnlineFormBean.getStudentINR());
	callableStatement.setString(2,finolexOnlineFormBean.getStudentName());
	callableStatement.setString(3,finolexOnlineFormBean.getSelectGender());
	callableStatement.setString(4,finolexOnlineFormBean.getSelectAdmission());
	callableStatement.setString(5,finolexOnlineFormBean.getHiddenBranch());

	callableStatement.setString(6,finolexOnlineFormBean.getAcademicYear());
	callableStatement.setString(7,finolexOnlineFormBean.getSelectAdmissionType());

	callableStatement.setString(8,finolexOnlineFormBean.getSelectAdmissionCategory());		
	callableStatement.setString(9,finolexOnlineFormBean.getParentAnnualIncome());		
	callableStatement.setString(10,finolexOnlineFormBean.getFullAddress());		
	callableStatement.setString(11,finolexOnlineFormBean.getState());		
	callableStatement.setString(12,finolexOnlineFormBean.getStudentContactNo());		
	callableStatement.setString(13,finolexOnlineFormBean.getParentContactNo());		
	callableStatement.setString(14,finolexOnlineFormBean.getEmailId());		
	callableStatement.setString(15,finolexOnlineFormBean.getTutionFee());		
	callableStatement.setString(16,finolexOnlineFormBean.getDevelopmentFee());		
	callableStatement.setString(17,finolexOnlineFormBean.getEnrolmentFee());		
	callableStatement.setString(18,finolexOnlineFormBean.getInsurancePolicyAmt());		
	callableStatement.setString(19,finolexOnlineFormBean.getUniversityOtherFee());		
	callableStatement.setString(20,finolexOnlineFormBean.getUniversityTutionFee());		
	callableStatement.setString(21,finolexOnlineFormBean.getHostelCharges());		
	callableStatement.setString(22,finolexOnlineFormBean.getFormFee());		
	callableStatement.setString(23,finolexOnlineFormBean.getLessAmount());		
	callableStatement.setString(24,finolexOnlineFormBean.getTotAmount());		
	callableStatement.setString(25, finolexOnlineFormBean.getRegisteredUserId());

	callableStatement.setString(26,billerId);

	callableStatement.registerOutParameter(27, Types.VARCHAR);
	callableStatement.registerOutParameter(28, Types.VARCHAR);
	callableStatement.registerOutParameter(29, Types.VARCHAR);

callableStatement.execute(); 

responseString = callableStatement.getString(29); 
finolexOnlineFormBean.setStudentRegistrationId(callableStatement.getString(28));
finolexOnlineFormBean.setApplicationNo(callableStatement.getString(27));
logger.info("responseString : - " + responseString);

		 */
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,finolexOnlineFormBean.getTotAmount());
			callableStatement.setString(2,finolexOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,finolexOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			finolexOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			finolexOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);


		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertFinolexStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertFinolexStudentDetails(" + finolexOnlineFormBean + ") - END");
		return responseString;
	}
	public FinolexOnlineFormBean getFinolexStudentDetails(String applicationNo,String instituteCode)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getFinolexStudentDetails(" + applicationNo + ") - START");  
		FinolexOnlineFormBean finolexOnlineFormBean = new FinolexOnlineFormBean();

//		try{
//			callableStatement = con.prepareCall("{call PROC_GET_Finolex_STUDENTDETAILS(?)}");
//			callableStatement.setString(1, applicationNo);
//			resultSet = callableStatement.executeQuery(); 
//			while (resultSet.next()) {			            	
//
//				finolexOnlineFormBean.setStudentINR(resultSet.getString("studentINR"));
//				finolexOnlineFormBean.setStudentName(resultSet.getString("studentName"));
//				finolexOnlineFormBean.setSelectGender(resultSet.getString("selectGender"));
//				finolexOnlineFormBean.setSelectAdmission(resultSet.getString("selectAdmission"));
//				finolexOnlineFormBean.setHiddenBranch(resultSet.getString("hiddenBranch"));
//				finolexOnlineFormBean.setAcademicYear(resultSet.getString("academicYear"));
//				finolexOnlineFormBean.setSelectAdmissionType(resultSet.getString("selectAdmissionType"));
//				finolexOnlineFormBean.setSelectAdmissionCategory(resultSet.getString("selectAdmissionCategory"));
//				finolexOnlineFormBean.setParentAnnualIncome(resultSet.getString("parentAnnualIncome"));
//				finolexOnlineFormBean.setFullAddress(resultSet.getString("fullAddress"));
//				finolexOnlineFormBean.setState(resultSet.getString("state"));
//				finolexOnlineFormBean.setStudentContactNo(resultSet.getString("studentContactNo"));
//				finolexOnlineFormBean.setParentContactNo(resultSet.getString("parentContactNo"));
//				finolexOnlineFormBean.setEmailId(resultSet.getString("emailId"));
//				finolexOnlineFormBean.setTutionFee(resultSet.getString("tutionFee"));
//				finolexOnlineFormBean.setDevelopmentFee(resultSet.getString("developmentFee"));
//				finolexOnlineFormBean.setEnrolmentFee(resultSet.getString("enrolmentFee"));
//				finolexOnlineFormBean.setInsurancePolicyAmt(resultSet.getString("insurancePolicyAmt"));
//				finolexOnlineFormBean.setUniversityOtherFee(resultSet.getString("universityOtherFee"));
//				finolexOnlineFormBean.setUniversityTutionFee(resultSet.getString("universityTutionFee"));
//				finolexOnlineFormBean.setHostelCharges(resultSet.getString("hostelCharges"));
//				finolexOnlineFormBean.setFormFee(resultSet.getString("formFee"));
//				finolexOnlineFormBean.setLessAmount(resultSet.getString("lessAmount"));
//				finolexOnlineFormBean.setTotAmount(resultSet.getString("totAmount"));
//				finolexOnlineFormBean.setApplicationNo(applicationNo);
//
//			}
		StudentRegistrationService studentRegistrationService=new StudentRegistrationService();
		String merchantID=studentRegistrationService.getMerchantId(instituteCode);
				//InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

				try{
					ObjectMapper obMapper = new ObjectMapper();
					ObjectNode objNode = obMapper.createObjectNode();
					/*** *** *** Initialization start *** *** ***/
					SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

					secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
					secureAPIBuilder.setUpstreamServerPort(443);

					secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
					secureAPIBuilder.setVerifyServerSSL(false);

					//String clientId = "actual-smarthub-node-ip";
					//String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

					//secureAPIBuilder.setAuthenticationAlias(clientId);

					//byte[] clientKey = hexStringToByteArray(clientKeyStr);
					//secureAPIBuilder.setAuthenticationKey(clientKey);

					SecureAPIConnection secureAPI = secureAPIBuilder.build();
					
				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteCode);
				smartHubFetchOnlineFormBean.setContext_id(merchantID);
				smartHubFetchOnlineFormBean.setForm_id(applicationNo);
				logger.info("AppNo From dao "+applicationNo);
				String  jsonString2=obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2"+jsonString2);

//				WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/get-form-data");
//				Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//				
//				Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				APIResponse apiResponse1 = null;
				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: " + apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();
				
				
				logger.info("output1"+output1);
				
				JSONObject jsonObject = new JSONObject(output1);
				
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray"+jsonArray);
		JSONObject data=jsonArray.getJSONObject(0);
		JSONObject dataobj=data.getJSONObject("form_data");
		
		String student_irn=dataobj.getString("student_irn");
		String stuName=dataobj.getString("student_name");
		String select_gender=dataobj.getString("select_gender");
		String select_admission=dataobj.getString("select_admission");
		
		String select_branch=dataobj.getString("select_branch");
		String hidden_branch=dataobj.getString("hidden_branch");
		String academic_year=dataobj.getString("academic_year");
		String select_admissiontype=dataobj.getString("select_admissiontype");
		String select_admissioncategory=dataobj.getString("select_admissioncategory");
		
		int parent_annualincome=dataobj.getInt("parent_annualincome");
		String full_address=dataobj.getString("full_address");
		
		String state_name=dataobj.getString("state_name");
		Long student_contactno=dataobj.getLong("student_contactno");
		Long parent_contactno=dataobj.getLong("parent_contactno");
		String email_id=dataobj.getString("email_id");
		
		int tution_fee=dataobj.getInt("tution_fee");
		int development_fee=dataobj.getInt("development_fee");
		
		int enrolment_fee=dataobj.getInt("enrolment_fee");
		int insurance_policyamt=dataobj.getInt("insurance_policyamt");
		
		int university_otherfee=dataobj.getInt("university_otherfee");
		int university_tutionfee=dataobj.getInt("university_tutionfee");
		
		int hostel_charges=dataobj.getInt("hostel_charges");
		int form_fee=dataobj.getInt("form_fee");
		
		int less_amount=dataobj.getInt("less_amount");
		int total_amount=dataobj.getInt("total_amount");
		
		
		finolexOnlineFormBean.setStudentINR(student_irn);
		finolexOnlineFormBean.setStudentName(stuName);
		finolexOnlineFormBean.setSelectGender(select_gender);
		
		finolexOnlineFormBean.setSelectAdmission(select_admission);
		finolexOnlineFormBean.setHiddenBranch(hidden_branch);
		
		finolexOnlineFormBean.setAcademicYear(academic_year);
		finolexOnlineFormBean.setSelectAdmissionType(select_admissiontype);
		finolexOnlineFormBean.setSelectAdmissionCategory(select_admissioncategory);
		finolexOnlineFormBean.setParentAnnualIncome(String.valueOf(parent_annualincome));
		finolexOnlineFormBean.setFullAddress(full_address);
		finolexOnlineFormBean.setStudentContactNo(String.valueOf(student_contactno));
		finolexOnlineFormBean.setParentContactNo(String.valueOf(parent_contactno));
		finolexOnlineFormBean.setState(state_name);
		finolexOnlineFormBean.setEmailId(email_id);
		finolexOnlineFormBean.setHostelCharges(String.valueOf(hostel_charges));
		finolexOnlineFormBean.setTutionFee(String.valueOf(tution_fee));
		finolexOnlineFormBean.setDevelopmentFee(String.valueOf(development_fee));
  		finolexOnlineFormBean.setUniversityOtherFee(String.valueOf(university_otherfee));
		finolexOnlineFormBean.setUniversityTutionFee(String.valueOf(university_tutionfee));
		finolexOnlineFormBean.setLessAmount(String.valueOf(less_amount));
		finolexOnlineFormBean.setTotAmount(String.valueOf(total_amount));
		finolexOnlineFormBean.setFormFee(String.valueOf(form_fee));
		finolexOnlineFormBean.setInsurancePolicyAmt(String.valueOf(insurance_policyamt));
		finolexOnlineFormBean.setApplicationNo(applicationNo);
		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getFinolexStudentDetails"+e);
			}	
		}
		logger.error("End getFinolexStudentDetails" +finolexOnlineFormBean);
		return finolexOnlineFormBean;
	}
	public Map<String,String> getFinolexInstituteStudentFees(String finolexadmissionType,String finolexadmissionTo)
	{
		Map<String,String> studentFee=new HashMap<String,String>();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_FinolexInst_STUDENT_FEES(?,?)}");
			callableStatement.setString(1, finolexadmissionType);
			callableStatement.setString(2, finolexadmissionTo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            	

				studentFee.put(resultSet.getString("feehead"), resultSet.getString("fees"));

			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getFinolexStudentDetails"+e);
			}	
		}

		return studentFee;
	}
	public Map<String,String>  FetchFinolexStuFees_catWise(String finolexadmissionCategory,String finolexadmissionTo)

	{
		Map<String,String> studentFee=new HashMap<String,String>();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_FinolexcatWise_ST_FEES(?,?)}");
			callableStatement.setString(1, finolexadmissionCategory);
			callableStatement.setString(2, finolexadmissionTo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            	

				studentFee.put(resultSet.getString("feehead"), resultSet.getString("fees"));

			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getFinolexStudentDetails"+e);
			}	
		}

		return studentFee;
	}

	public String	getPrincipalUpStudentFees(String coursetype,String gendertype,String practicals,String yearOfStudy,String course)
	{	
		long startTime = System.currentTimeMillis();
		logger.info("<Start>getPrincipalUpStudentFees  coursetype : "+coursetype+" gendertype : "+gendertype + " practicals : "+practicals+ " yearOfStudy : "+yearOfStudy +" course : "+course);
		String studentFees=null;
		try{
			callableStatement = con.prepareCall("{call PROC_GET_PrincipalUPStudentFees(?,?,?,?,?)}");
			callableStatement.setString(1, coursetype);
			callableStatement.setString(2, gendertype);
			callableStatement.setString(3, practicals);
			callableStatement.setString(4, yearOfStudy);
			callableStatement.setString(5, course);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            	
				studentFees= resultSet.getString("Fees");
			}

		}catch(Exception e)
		{
			logger.error("Exception inside catch getPrincipalUpStudentFees"+e);
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside finaly catch getPrincipalUpStudentFees"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getPrincipalUpStudentFees studentFees" + studentFees +"- END");
		return studentFees;
	}
	public String insertPrincipalStudentDetails(PrincipalUPOnlineFormBean principalUPOnlineFormBean,String billerId) {


		long startTime = System.currentTimeMillis();
		logger.info("insertPrincipalStudentDetails(" + principalUPOnlineFormBean + ") - START ===billerId=>>"+billerId);


		String responseString = null;
		try {
			logger.info("PROC_FJT_PRINCIPAL_Registration_Details(" + principalUPOnlineFormBean + ") - START");
			callableStatement = con.prepareCall("{call PROC_FJT_PRINCIPAL_Registration_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1, principalUPOnlineFormBean.getRollNumber());
			callableStatement.setString(2, principalUPOnlineFormBean.getStudentName());
			callableStatement.setString(3, principalUPOnlineFormBean.getMobileNumber());
			callableStatement.setString(4, principalUPOnlineFormBean.getCourseType());
			callableStatement.setString(5, principalUPOnlineFormBean.getCourse());
			callableStatement.setString(6, principalUPOnlineFormBean.getGender());            
			callableStatement.setString(7, principalUPOnlineFormBean.getPracticals());
			callableStatement.setString(8, principalUPOnlineFormBean.getYearOfStudy());	   

			callableStatement.setString(9, principalUPOnlineFormBean.getSubject());
			callableStatement.setString(10, principalUPOnlineFormBean.getFees());
			callableStatement.setString(11, principalUPOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(12, billerId);//10

			callableStatement.registerOutParameter(13, Types.VARCHAR);
			callableStatement.registerOutParameter(14, Types.VARCHAR);
			callableStatement.registerOutParameter(15, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(15); 
			principalUPOnlineFormBean.setStudentRegistrationId(callableStatement.getString(14));
			principalUPOnlineFormBean.setApplicationNo(callableStatement.getString(13));
			logger.info("PROC_FJT_PRINCIPAL_Registration_Details responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertPrincipalStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertPrincipalStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertPrincipalStudentDetails(" + principalUPOnlineFormBean + ") - END");
		return responseString;
	} 
	public PrincipalUPOnlineFormBean getPrincipalUpStudentDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getPrincipalUpStudentDetails(" + applicationNo + ") - START");  
		PrincipalUPOnlineFormBean principalUPOnlineFormBean = new PrincipalUPOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_PrincipalUp_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            	
				principalUPOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				principalUPOnlineFormBean.setRollNumber(resultSet.getString("rollNumber"));
				principalUPOnlineFormBean.setMobileNumber(resultSet.getString("mobileNumber"));	            	
				principalUPOnlineFormBean.setFees(resultSet.getString("Fees"));
				principalUPOnlineFormBean.setCourse(resultSet.getString("course"));
				principalUPOnlineFormBean.setCourseType(resultSet.getString("courseType"));
				principalUPOnlineFormBean.setGender(resultSet.getString("gender"));
				principalUPOnlineFormBean.setPracticals(resultSet.getString("practicals"));
				principalUPOnlineFormBean.setYearOfStudy(resultSet.getString("yearOfStudy"));
				principalUPOnlineFormBean.setSubject(resultSet.getString("subject"));            	
				principalUPOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			logger.error("Exception inside catch getPrincipalUpStudentDetails"+e);
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside Finally catch getPrincipalUpStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getPrincipalUpStudentDetails(" + principalUPOnlineFormBean + ") - END");
		return principalUPOnlineFormBean;
	} 

	public ShepaOnlineFormBean getYugantarStudentDetails(String applicationNo,String instituteCode)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getYugantarStudentDetails(" + applicationNo + ") - START");  
		ShepaOnlineFormBean shepaOnlineFormBean = new ShepaOnlineFormBean();

//		try{
//			callableStatement = con.prepareCall("{call PROC_GET_Yuganar_STUDENTDETAILS(?)}");
//			callableStatement.setString(1, applicationNo);
//			resultSet = callableStatement.executeQuery(); 
//			while (resultSet.next()) {			            	
//				shepaOnlineFormBean.setStudentName(resultSet.getString("studentName"));
//				shepaOnlineFormBean.setFatherName(resultSet.getString("fathername"));
//				shepaOnlineFormBean.setContactNumber(resultSet.getString("contactNumber"));
//				shepaOnlineFormBean.setRemark(resultSet.getString("remark"));	            	
//				shepaOnlineFormBean.setClassName(resultSet.getString("classname"));
//				shepaOnlineFormBean.setFees(resultSet.getString("fees"));
//				shepaOnlineFormBean.setRegisterNumber(resultSet.getString("registerNumber"));
//				shepaOnlineFormBean.setApplicationNo(applicationNo);
//			}
		StudentRegistrationService studentRegistrationService=new StudentRegistrationService();
		String merchantID=studentRegistrationService.getMerchantId(instituteCode);
				//InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

				try{
					ObjectMapper obMapper = new ObjectMapper();
					ObjectNode objNode = obMapper.createObjectNode();
					/*** *** *** Initialization start *** *** ***/
					SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

					secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
					secureAPIBuilder.setUpstreamServerPort(443);

					secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
					secureAPIBuilder.setVerifyServerSSL(false);

					//String clientId = "actual-smarthub-node-ip";
					//String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

					//secureAPIBuilder.setAuthenticationAlias(clientId);

					//byte[] clientKey = hexStringToByteArray(clientKeyStr);
					//secureAPIBuilder.setAuthenticationKey(clientKey);

					SecureAPIConnection secureAPI = secureAPIBuilder.build();
					
				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteCode);
				smartHubFetchOnlineFormBean.setContext_id(merchantID);
				smartHubFetchOnlineFormBean.setForm_id(applicationNo);
				logger.info("AppNo From dao "+applicationNo);
				String  jsonString2=obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2"+jsonString2);

//				WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/get-form-data");
//				Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//				
//				Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				APIResponse apiResponse1 = null;
				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: " + apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();
				
				
				logger.info("output1"+output1);
				
				JSONObject jsonObject = new JSONObject(output1);
				
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray"+jsonArray);
		JSONObject data=jsonArray.getJSONObject(0);
		JSONObject dataobj=data.getJSONObject("form_data");
		
		String registerno=dataobj.getString("register_number");
		String stuName=dataobj.getString("student_name");
		String fatherName=dataobj.getString("father_name");
		String className=dataobj.getString("class_name");
		int fees_details=dataobj.getInt("fees_details");
		String remark_details=dataobj.getString("remark_details");
		
		Long contact_number=dataobj.getLong("contact_number");
		
		shepaOnlineFormBean.setRegisterNumber(registerno);
		shepaOnlineFormBean.setStudentName(stuName);
		shepaOnlineFormBean.setFatherName(fatherName);
		shepaOnlineFormBean.setClassName(className);
		shepaOnlineFormBean.setFees(String.valueOf(fees_details));
		shepaOnlineFormBean.setRemark(remark_details);
		
		shepaOnlineFormBean.setTotalFee(String.valueOf(fees_details));
		shepaOnlineFormBean.setContactNumber(String.valueOf(contact_number));
		
		shepaOnlineFormBean.setApplicationNo(applicationNo);

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getYugantarStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getYugantarStudentDetails(" + shepaOnlineFormBean + ") - END");
		return shepaOnlineFormBean;
	}

	public String insertYugantarStudentDetails(ShepaOnlineFormBean shepaOnlineFormBean,String billerId) {

		long startTime = System.currentTimeMillis();
		logger.info("insertYugantarStudentDetails(" + shepaOnlineFormBean + ") - START ===billerId=>>"+billerId);


		String responseString = null;
		try {
			logger.info("PROC_FJT_yugantar_Registration_Details(" + shepaOnlineFormBean + ") - START");
			callableStatement = con.prepareCall("{call PROC_FJT_yugantar_Registration_Details(?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1, shepaOnlineFormBean.getRegisterNumber());
			callableStatement.setString(2, shepaOnlineFormBean.getStudentName());
			callableStatement.setString(3, shepaOnlineFormBean.getContactNumber());
			callableStatement.setString(4, shepaOnlineFormBean.getRemark());
			callableStatement.setString(5, shepaOnlineFormBean.getClassName());
			callableStatement.setString(6, shepaOnlineFormBean.getFatherName());            
			callableStatement.setString(7, shepaOnlineFormBean.getFees());
			callableStatement.setString(8, shepaOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(9, billerId);//10

			callableStatement.registerOutParameter(10, Types.VARCHAR);
			callableStatement.registerOutParameter(11, Types.VARCHAR);
			callableStatement.registerOutParameter(12, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(12); 
			shepaOnlineFormBean.setStudentRegistrationId(callableStatement.getString(11));
			shepaOnlineFormBean.setApplicationNo(callableStatement.getString(10));
			logger.info("PROC_FJT_yugantar_Registration_Details responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertYugantarStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertYugantarStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertYugantarStudentDetails(" + shepaOnlineFormBean + ") - END");
		return responseString;
	} 

	//KRISHAK STARTS
	@Override
	public String insertKrishakStudentDetails(KRISHAKFormBean krishakFormBean,String billerId) {
		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("insertKrishakStudentDetails(" + krishakFormBean + ") - START ===billerId=>>"+billerId);

		String responseString = null;
		/*
		 * try { logger.info("PROC_KRISHAK_StudentDetails(" + krishakFormBean +
		 * ") - START"); callableStatement = con.
		 * prepareCall("{call PROC_KRISHAK_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}"
		 * ); callableStatement.setString(1, krishakFormBean.getName());
		 * callableStatement.setString(2, krishakFormBean.getFatherName());
		 * callableStatement.setString(3, krishakFormBean.getMotherName());
		 * callableStatement.setString(4, krishakFormBean.getAddress());
		 * callableStatement.setString(5, krishakFormBean.getGender());
		 * callableStatement.setString(6, krishakFormBean.getFeesAmount());
		 * callableStatement.setString(7, krishakFormBean.getCourse());
		 * callableStatement.setString(8, krishakFormBean.getYear());
		 * callableStatement.setString(9, krishakFormBean.getRemarks());
		 * callableStatement.setString(10, krishakFormBean.getMobileNo());
		 * callableStatement.setString(11, krishakFormBean.getRegisteredUserId());
		 * callableStatement.setString(12, billerId);
		 * callableStatement.registerOutParameter(13, Types.VARCHAR);
		 * callableStatement.registerOutParameter(14, Types.VARCHAR);
		 * callableStatement.registerOutParameter(15, Types.VARCHAR);
		 * 
		 * callableStatement.execute(); responseString =
		 * callableStatement.getString(15);
		 * krishakFormBean.setStudentRegistrationId(callableStatement.getString(14));
		 * krishakFormBean.setApplicationNo(callableStatement.getString(13));
		 * logger.info("PROC_KRISHAK_StudentDetails responseString : - " +
		 * responseString);
		 */
		try{
			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,krishakFormBean.getFeesAmount());
			callableStatement.setString(2,krishakFormBean.getApplicationNo());
			callableStatement.setString(3,krishakFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			krishakFormBean.setStudentRegistrationId(callableStatement.getString(6));
			krishakFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch insertKrishakStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertKrishakStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertKrishakStudentDetails(" + krishakFormBean + ") - END");
		return responseString;
	}

	@Override
	public KRISHAKFormBean getKrishakStudentDetails(String applicationNo,String instituteCode) {
		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("getKrishakStudentDetails(" + applicationNo + ") - START");  
		KRISHAKFormBean krishakFormBean = new KRISHAKFormBean();

//		try{
//			callableStatement = con.prepareCall("{call PROC_GET_KRISHAK_STUDENTDETAILS(?)}");
//			callableStatement.setString(1, applicationNo);
//			resultSet = callableStatement.executeQuery(); 
//			while (resultSet.next()) {			            	
//				krishakFormBean.setName(resultSet.getString("name"));
//				krishakFormBean.setFatherName(resultSet.getString("fatherName"));
//				krishakFormBean.setMotherName(resultSet.getString("motherName"));
//				krishakFormBean.setAddress(resultSet.getString("address"));	            	
//				krishakFormBean.setGender(resultSet.getString("gender"));
//				krishakFormBean.setFeesAmount(resultSet.getString("feesAmount"));
//				krishakFormBean.setCourse(resultSet.getString("course"));
//				krishakFormBean.setYear(resultSet.getString("years"));
//				krishakFormBean.setRemarks(resultSet.getString("remarks"));
//				krishakFormBean.setMobileNo(resultSet.getString("mobileNo"));
//				krishakFormBean.setRegisteredUserId(resultSet.getString("registerId"));            	
//				krishakFormBean.setApplicationNo(applicationNo);
//			}
		StudentRegistrationService studentRegistrationService=new StudentRegistrationService();
		String merchantID=studentRegistrationService.getMerchantId(instituteCode);
				//InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

				try{
					ObjectMapper obMapper = new ObjectMapper();
					ObjectNode objNode = obMapper.createObjectNode();
					/*** *** *** Initialization start *** *** ***/
					SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

					secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
					secureAPIBuilder.setUpstreamServerPort(443);

					secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
					secureAPIBuilder.setVerifyServerSSL(false);

					//String clientId = "actual-smarthub-node-ip";
					//String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

					//secureAPIBuilder.setAuthenticationAlias(clientId);

					//byte[] clientKey = hexStringToByteArray(clientKeyStr);
					//secureAPIBuilder.setAuthenticationKey(clientKey);

					SecureAPIConnection secureAPI = secureAPIBuilder.build();
					
				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteCode);
				smartHubFetchOnlineFormBean.setContext_id(merchantID);
				smartHubFetchOnlineFormBean.setForm_id(applicationNo);
				logger.info("AppNo From dao "+applicationNo);
				String  jsonString2=obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2"+jsonString2);

//				WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/get-form-data");
//				Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//				
//				Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				APIResponse apiResponse1 = null;
				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: " + apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();
				
				
				logger.info("output1"+output1);
				
				JSONObject jsonObject = new JSONObject(output1);
				
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray"+jsonArray);
		JSONObject data = jsonArray.getJSONObject(0);
		JSONObject dataobj = data.getJSONObject("form_data");

		// code ended by priya form engine

		String stuName = dataobj.getString("student_name");

		String father_name = dataobj.getString("father_name");

		String mother_name = dataobj.getString("mother_name");

		String address_details = dataobj.getString("address_details");

		String select_gender = dataobj.getString("select_gender");
		int fees_amount = dataobj.getInt("fees_amount");
		String course_name = dataobj.getString("course_name");
		String class_year = dataobj.getString("class_year");
		String remarks_details = dataobj.getString("remarks_details");
		Long mobile_no = dataobj.getLong("mobile_no");

		krishakFormBean.setName(stuName);
		krishakFormBean.setFatherName(father_name);
		krishakFormBean.setMotherName(mother_name);
		krishakFormBean.setAddress(address_details);
		krishakFormBean.setGender(select_gender);
		krishakFormBean.setFeesAmount(String.valueOf(fees_amount));
		krishakFormBean.setCourse(course_name);
		krishakFormBean.setYear(class_year);
		krishakFormBean.setMobileNo(String.valueOf(mobile_no));
		krishakFormBean.setRemarks(remarks_details);
		krishakFormBean.setApplicationNo(applicationNo);

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getKrishakStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getKrishakStudentDetails(" + krishakFormBean + ") - END");
		return krishakFormBean;
	}
	//KRISHAK ENDS
	public String insertMahadeviYadavStudentDetails(MahadeviYadavOnlineFormBean mahadeviYadavOnlineFormBean,String billerId) {
		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("insertMahadeviYadavStudentDetails(" + mahadeviYadavOnlineFormBean + ") - START ===billerId=>>"+billerId);

		String responseString = null;
		/*
		 * try { logger.info("PROC_MahadeviYadav_StudentDetails(" +
		 * mahadeviYadavOnlineFormBean + ") - START"); callableStatement = con.
		 * prepareCall("{call PROC_MahadeviYadav_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?)}"
		 * ); callableStatement.setString(1, mahadeviYadavOnlineFormBean.getStdName());
		 * callableStatement.setString(2, mahadeviYadavOnlineFormBean.getFormNo());
		 * callableStatement.setString(3, mahadeviYadavOnlineFormBean.getRollNo());
		 * callableStatement.setString(4, mahadeviYadavOnlineFormBean.getStdDOB());
		 * callableStatement.setString(5, mahadeviYadavOnlineFormBean.getFatherName());
		 * callableStatement.setString(6, mahadeviYadavOnlineFormBean.getCls());
		 * callableStatement.setString(7, mahadeviYadavOnlineFormBean.getSection());
		 * callableStatement.setString(8, mahadeviYadavOnlineFormBean.getMobileNo());
		 * callableStatement.setString(9, mahadeviYadavOnlineFormBean.getTotalFees());
		 * callableStatement.setString(10,
		 * mahadeviYadavOnlineFormBean.getRegisteredUserId());
		 * callableStatement.setString(11, billerId);
		 * callableStatement.registerOutParameter(12, Types.VARCHAR);
		 * callableStatement.registerOutParameter(13, Types.VARCHAR);
		 * callableStatement.registerOutParameter(14, Types.VARCHAR);
		 * 
		 * callableStatement.execute(); responseString =
		 * callableStatement.getString(14);
		 * mahadeviYadavOnlineFormBean.setStudentRegistrationId(callableStatement.
		 * getString(13));
		 * mahadeviYadavOnlineFormBean.setApplicationNo(callableStatement.getString(12))
		 * ; logger.info("PROC_MahadeviYadav_StudentDetails responseString : - " +
		 * responseString);
		 */
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,mahadeviYadavOnlineFormBean.getTotalFees());
			callableStatement.setString(2,mahadeviYadavOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,mahadeviYadavOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			mahadeviYadavOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			mahadeviYadavOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);

		} catch (Exception e) {
			logger.error("Exception inside catch insertKrishakStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertKrishakStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertMahadeviYadavStudentDetails(" + mahadeviYadavOnlineFormBean + ") - END");
		return responseString;
	}

	@Override
	public MahadeviYadavOnlineFormBean getMahadeviYadavStudentDetails(String applicationNo,String instituteCode) {
		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("getMahadeviYadavStudentDetails(" + applicationNo + ") - START");  
		MahadeviYadavOnlineFormBean mahadeviYadavOnlineFormBean = new MahadeviYadavOnlineFormBean();

//		try{
//			callableStatement = con.prepareCall("{call PROC_GET_MahadeviYadav_STUDENTDETAILS(?)}");
//			callableStatement.setString(1, applicationNo);
//			resultSet = callableStatement.executeQuery(); 
//			while (resultSet.next()) {			            	
//				mahadeviYadavOnlineFormBean.setStdName(resultSet.getString("stdName"));
//				mahadeviYadavOnlineFormBean.setFormNo(resultSet.getString("formNo"));
//				mahadeviYadavOnlineFormBean.setRollNo(resultSet.getString("rollNo"));
//				mahadeviYadavOnlineFormBean.setStdDOB(resultSet.getString("stdDOB"));	            	
//				mahadeviYadavOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
//				mahadeviYadavOnlineFormBean.setCls(resultSet.getString("cls"));
//				mahadeviYadavOnlineFormBean.setSection(resultSet.getString("section"));
//				mahadeviYadavOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));
//				mahadeviYadavOnlineFormBean.setTotalFees(resultSet.getString("totalFees"));
//				mahadeviYadavOnlineFormBean.setRegisteredUserId(resultSet.getString("registerId"));            	
//				mahadeviYadavOnlineFormBean.setApplicationNo(applicationNo);            	 
//			}
		StudentRegistrationService studentRegistrationService=new StudentRegistrationService();
		String merchantID=studentRegistrationService.getMerchantId(instituteCode);
				//InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

				try{
					ObjectMapper obMapper = new ObjectMapper();
					ObjectNode objNode = obMapper.createObjectNode();
					/*** *** *** Initialization start *** *** ***/
					SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

					secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
					secureAPIBuilder.setUpstreamServerPort(443);

					secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
					secureAPIBuilder.setVerifyServerSSL(false);

					//String clientId = "actual-smarthub-node-ip";
					//String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

					//secureAPIBuilder.setAuthenticationAlias(clientId);

					//byte[] clientKey = hexStringToByteArray(clientKeyStr);
					//secureAPIBuilder.setAuthenticationKey(clientKey);

					SecureAPIConnection secureAPI = secureAPIBuilder.build();
					
				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteCode);
				smartHubFetchOnlineFormBean.setContext_id(merchantID);
				smartHubFetchOnlineFormBean.setForm_id(applicationNo);
				logger.info("AppNo From dao "+applicationNo);
				String  jsonString2=obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2"+jsonString2);

//				WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/get-form-data");
//				Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//				
//				Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				APIResponse apiResponse1 = null;
				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: " + apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();
				
				
				logger.info("output1"+output1);
				
				JSONObject jsonObject = new JSONObject(output1);
				
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray"+jsonArray);
		JSONObject data = jsonArray.getJSONObject(0);
		JSONObject dataobj = data.getJSONObject("form_data");

		String stuName = dataobj.getString("std_name");
		String roll_no = dataobj.getString("roll_no");
		String form_no = dataobj.getString("form_no");
		String dob_date = dataobj.getString("std_dob");
		String father_name = dataobj.getString("father_name");
		String class_1 = dataobj.getString("cls_details");
		String section_details = dataobj.getString("section_details");

		int amt_paid = dataobj.getInt("total_fees");
		Long mobile_number = dataobj.getLong("mobile_no");

		mahadeviYadavOnlineFormBean.setStdName(stuName);
		mahadeviYadavOnlineFormBean.setFormNo(form_no);
		mahadeviYadavOnlineFormBean.setRollNo(roll_no);
		mahadeviYadavOnlineFormBean.setStdDOB(mahadeviYadavOnlineFormBean.getStdDOB());
		mahadeviYadavOnlineFormBean.setFatherName(father_name);
		mahadeviYadavOnlineFormBean.setSection(section_details);
		mahadeviYadavOnlineFormBean.setMobileNo(String.valueOf(mobile_number));
		mahadeviYadavOnlineFormBean.setTotalFees(String.valueOf(amt_paid));
		mahadeviYadavOnlineFormBean.setApplicationNo(applicationNo);

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getMahadeviYadavStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getMahadeviYadavStudentDetails(" + mahadeviYadavOnlineFormBean + ") - END");
		return mahadeviYadavOnlineFormBean;
	}

	//ABHAY Starts
	@Override
	public String insertAbhayStudentDetails(ABHAYFormBean abhayFormBean,
			String billerId) {
		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("insertAbhayStudentDetails(" + abhayFormBean + ") - START ===billerId=>>"+billerId);

		String responseString = null;
		/*
		 * try { logger.info("PROC_ABHAY_StudentDetails(" + abhayFormBean +
		 * ") - START"); callableStatement = con.
		 * prepareCall("{call PROC_ABHAY_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
		 * callableStatement.setString(1, abhayFormBean.getName());
		 * callableStatement.setString(2, abhayFormBean.getFormNo());
		 * callableStatement.setString(3, abhayFormBean.getRollNo());
		 * callableStatement.setString(4, abhayFormBean.getDob());
		 * callableStatement.setString(5, abhayFormBean.getFatherName());
		 * callableStatement.setString(6, abhayFormBean.getClass1());
		 * callableStatement.setString(7, abhayFormBean.getSection());
		 * callableStatement.setString(8, abhayFormBean.getMobileNo());
		 * callableStatement.setString(9, abhayFormBean.getTotalfees());
		 * callableStatement.setString(10, abhayFormBean.getRegisteredUserId());
		 * callableStatement.setString(11, billerId);
		 * callableStatement.registerOutParameter(12, Types.VARCHAR);
		 * callableStatement.registerOutParameter(13, Types.VARCHAR);
		 * callableStatement.registerOutParameter(14, Types.VARCHAR);
		 * 
		 * callableStatement.execute(); responseString =
		 * callableStatement.getString(14);
		 * abhayFormBean.setStudentRegistrationId(callableStatement.getString(13));
		 * abhayFormBean.setApplicationNo(callableStatement.getString(12));
		 * logger.info("PROC_ABHAY_StudentDetails responseString : - " +
		 * responseString);
		 */
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,abhayFormBean.getTotalfees());
			callableStatement.setString(2,abhayFormBean.getApplicationNo());
			callableStatement.setString(3,abhayFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			abhayFormBean.setStudentRegistrationId(callableStatement.getString(6));
			abhayFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);

		} catch (Exception e) {
			logger.error("Exception inside catch insertAbhayStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertAbhayStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertAbhayStudentDetails(" + abhayFormBean + ") - END");
		return responseString;
	}

	@Override
	public ABHAYFormBean getAbhayStudentDetails(String applicationNo,String instituteCode) {
		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("getAbhayStudentDetails(" + applicationNo + ") - START");  
		ABHAYFormBean abhayFormBean = new ABHAYFormBean();

//		try{
//			callableStatement = con.prepareCall("{call PROC_GET_ABHAY_STUDENTDETAILS(?)}");
//			callableStatement.setString(1, applicationNo);
//
//
//			resultSet = callableStatement.executeQuery(); 
//			while (resultSet.next()) {			            	
//				abhayFormBean.setName(resultSet.getString("name"));
//				abhayFormBean.setFormNo(resultSet.getString("formNo"));
//				abhayFormBean.setRollNo(resultSet.getString("rollNo"));
//				abhayFormBean.setDob(resultSet.getString("dob"));	            	
//				abhayFormBean.setFatherName(resultSet.getString("fatherName"));
//				abhayFormBean.setClass1(resultSet.getString("class"));
//				abhayFormBean.setSection(resultSet.getString("section"));
//				abhayFormBean.setMobileNo(resultSet.getString("mobileNo"));
//				abhayFormBean.setTotalfees(resultSet.getString("totalfees"));
//				abhayFormBean.setRegisteredUserId(resultSet.getString("registerId"));            	
//				abhayFormBean.setApplicationNo(applicationNo);            	 
//			}
		StudentRegistrationService studentRegistrationService=new StudentRegistrationService();
		String merchantID=studentRegistrationService.getMerchantId(instituteCode);
				//InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

				try{
					ObjectMapper obMapper = new ObjectMapper();
					ObjectNode objNode = obMapper.createObjectNode();
					/*** *** *** Initialization start *** *** ***/
					SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

					secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
					secureAPIBuilder.setUpstreamServerPort(443);

					secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
					secureAPIBuilder.setVerifyServerSSL(false);

					//String clientId = "actual-smarthub-node-ip";
					//String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

					//secureAPIBuilder.setAuthenticationAlias(clientId);

					//byte[] clientKey = hexStringToByteArray(clientKeyStr);
					//secureAPIBuilder.setAuthenticationKey(clientKey);

					SecureAPIConnection secureAPI = secureAPIBuilder.build();
					
				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteCode);
				smartHubFetchOnlineFormBean.setContext_id(merchantID);
				smartHubFetchOnlineFormBean.setForm_id(applicationNo);
				logger.info("AppNo From dao "+applicationNo);
				String  jsonString2=obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2"+jsonString2);

//				WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/get-form-data");
//				Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//				
//				Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				APIResponse apiResponse1 = null;
				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: " + apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();
				
				
				logger.info("output1"+output1);
				
				JSONObject jsonObject = new JSONObject(output1);
				
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray"+jsonArray);
		JSONObject data = jsonArray.getJSONObject(0);
		JSONObject dataobj = data.getJSONObject("form_data");

		String stuName = dataobj.getString("student_name");
		String roll_no = dataobj.getString("roll_no");
		String form_no = dataobj.getString("form_no");
		String father_name = dataobj.getString("father_name");
		String class_1 = dataobj.getString("class_1");
		String section_details = dataobj.getString("section_details");

		int amt_paid = dataobj.getInt("total_fees");
		Long mobile_number = dataobj.getLong("mobile_no");

		abhayFormBean.setName(stuName);
		abhayFormBean.setFormNo(form_no);
		abhayFormBean.setRollNo(roll_no);
		abhayFormBean.setDob(abhayFormBean.getDob());
		abhayFormBean.setFatherName(father_name);
		abhayFormBean.setSection(section_details);
		abhayFormBean.setMobileNo(String.valueOf(mobile_number));
		abhayFormBean.setTotalfees(String.valueOf(amt_paid));
		abhayFormBean.setApplicationNo(applicationNo);

		}catch(Exception e)
		{
			e.printStackTrace();

		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getAbhayStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getAbhayStudentDetails(" + abhayFormBean + ") - END");
		return abhayFormBean;
	}
	//ABHAY ENDS


	@Override
	public HNBGUFormBean getHNBGUStudentDetails(String applicationNo,String instituteCode) {
		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("getHNBGUStudentDetails(" + applicationNo + ") - START");  
		HNBGUFormBean HNBGUFormBean = new HNBGUFormBean();

//		try{
//			callableStatement = con.prepareCall("{call PROC_GET_HNBGU_STUDENTDETAILS(?)}");
//			callableStatement.setString(1, applicationNo);
//			resultSet = callableStatement.executeQuery(); 
//			while (resultSet.next()) {			            	
//				HNBGUFormBean.setName(resultSet.getString("name"));
//				HNBGUFormBean.setFatherName(resultSet.getString("fatherName"));
//				HNBGUFormBean.setMotherName(resultSet.getString("motherName"));
//				HNBGUFormBean.setAdharNumber(resultSet.getString("adharNumber"));	            	
//				HNBGUFormBean.setBusFee(resultSet.getString("busFee"));
//				HNBGUFormBean.setTutionFee(resultSet.getString("tutionFee"));
//				HNBGUFormBean.setCautionFee(resultSet.getString("cautionFee"));
//				HNBGUFormBean.setExamFee(resultSet.getString("examFee"));
//				HNBGUFormBean.setSportFee(resultSet.getString("sportFee"));
//				HNBGUFormBean.setOtherAnnualFee(resultSet.getString("otherAnnualFee"));
//				HNBGUFormBean.setEnrollmentFee(resultSet.getString("enrollmentFee"));
//				HNBGUFormBean.setDegreeFee(resultSet.getString("degreeFee"));
//				HNBGUFormBean.setOtherFee(resultSet.getString("otherFee"));
//				HNBGUFormBean.setTotalFee(resultSet.getString("totalFee"));
//				HNBGUFormBean.setClassName(resultSet.getString("className"));
//
//				HNBGUFormBean.setMobileNo(resultSet.getString("mobileNo"));
//				HNBGUFormBean.setDateOfBirth(resultSet.getString("dateOfBirth"));
//				HNBGUFormBean.setOtherFeeRemark(resultSet.getString("otherFeeRemark"));
//				HNBGUFormBean.setSemester(resultSet.getString("semester"));
//				HNBGUFormBean.setStudentID(resultSet.getString("studentID"));
//				HNBGUFormBean.setOldStudentNumber(resultSet.getString("oldStudentNumber"));
//				HNBGUFormBean.setNewStudentNumber(resultSet.getString("newStudentNumber"));
//				HNBGUFormBean.setSubject1(resultSet.getString("subject1"));          
//
//				HNBGUFormBean.setSubject2(resultSet.getString("subject2"));
//				HNBGUFormBean.setSubject3(resultSet.getString("subject3"));
//				HNBGUFormBean.setSubject4(resultSet.getString("subject4"));
//				HNBGUFormBean.setTypesOfPractical(resultSet.getString("typesOfPractical"));
//				HNBGUFormBean.setTypesOfGroup(resultSet.getString("typesOfGroup"));
//				HNBGUFormBean.setTypesOfStd(resultSet.getString("typesOfStd"));
//				HNBGUFormBean.setEmailId(resultSet.getString("emailid"));
//
//				HNBGUFormBean.setApplicationNo(applicationNo);
//			}
		StudentRegistrationService studentRegistrationService=new StudentRegistrationService();
		String merchantID=studentRegistrationService.getMerchantId(instituteCode);
				//InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

				try{
					ObjectMapper obMapper = new ObjectMapper();
					ObjectNode objNode = obMapper.createObjectNode();
					/*** *** *** Initialization start *** *** ***/
					SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

					secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
					secureAPIBuilder.setUpstreamServerPort(443);

					secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
					secureAPIBuilder.setVerifyServerSSL(false);

					//String clientId = "actual-smarthub-node-ip";
					//String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

					//secureAPIBuilder.setAuthenticationAlias(clientId);

					//byte[] clientKey = hexStringToByteArray(clientKeyStr);
					//secureAPIBuilder.setAuthenticationKey(clientKey);

					SecureAPIConnection secureAPI = secureAPIBuilder.build();
					
				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteCode);
				smartHubFetchOnlineFormBean.setContext_id(merchantID);
				smartHubFetchOnlineFormBean.setForm_id(applicationNo);
				logger.info("AppNo From dao "+applicationNo);
				String  jsonString2=obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2"+jsonString2);

//				WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/get-form-data");
//				Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//				
//				Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				APIResponse apiResponse1 = null;
				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: " + apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();
				
				
				logger.info("output1"+output1);
				
				JSONObject jsonObject = new JSONObject(output1);
				
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray"+jsonArray);
		JSONObject data=jsonArray.getJSONObject(0);
		JSONObject dataobj=data.getJSONObject("form_data");
		
		String selectpayment_category=dataobj.getString("selectpayment_category");
		
		String class_name=dataobj.getString("class_name");
		String select_semester=dataobj.getString("select_semester");
		String typesof_group=dataobj.getString("typesof_group");
		String typesof_practical=dataobj.getString("typesof_practical");
		String typesof_std=dataobj.getString("typesof_std");
		
		String subject_1=dataobj.getString("subject_1");
		String subject_2=dataobj.getString("subject_2");
		String subject_3=dataobj.getString("subject_3");
		String subject_4=dataobj.getString("subject_4");
		String student_id=dataobj.getString("student_id");
		String student_name=dataobj.getString("student_name");
		Long mobile_no=dataobj.getLong("mobile_no");
		
		String father_name=dataobj.getString("father_name");
		String mother_name=dataobj.getString("mother_name");
		String dateof_birth=dataobj.getString("dateof_birth");
		int adhar_number=dataobj.getInt("adhar_number");
		
		int tution_fee=dataobj.getInt("tution_fee");
		int caution_fee=dataobj.getInt("caution_fee");
		int exam_fee=dataobj.getInt("exam_fee");
		int bus_fee=dataobj.getInt("bus_fee");
		
		int other_fee=dataobj.getInt("other_fee");
		String other_feeremark=dataobj.getString("other_feeremark");
		int sport_fee=dataobj.getInt("sport_fee");
		int other_annualfee=dataobj.getInt("other_annualfee");
		
		int degree_fee=dataobj.getInt("degree_fee");
		String oldstudent_number=dataobj.getString("oldstudent_number");
		String newstudent_number=dataobj.getString("newstudent_number");
		
		
		HNBGUFormBean.setClassName(class_name);
		HNBGUFormBean.setFatherName(father_name);
		HNBGUFormBean.setMotherName(mother_name);
		HNBGUFormBean.setSemester(select_semester);
		HNBGUFormBean.setTypesOfGroup(typesof_group);
		HNBGUFormBean.setTypesOfPractical(typesof_practical);
		HNBGUFormBean.setTypesOfStd(typesof_std);
		
		HNBGUFormBean.setSubject1(subject_1);
		HNBGUFormBean.setSubject2(subject_2);
		HNBGUFormBean.setSubject3(subject_3);
		HNBGUFormBean.setSubject4(subject_4);
		
		HNBGUFormBean.setStudentID(student_id);
		HNBGUFormBean.setName(student_name);
		
		HNBGUFormBean.setDateOfBirth(HNBGUFormBean.getDateOfBirth());
		HNBGUFormBean.setAdharNumber(HNBGUFormBean.getAdharNumber());
		HNBGUFormBean.setCautionFee(String.valueOf(caution_fee));
		HNBGUFormBean.setTutionFee(String.valueOf(tution_fee));
		HNBGUFormBean.setExamFee(String.valueOf(exam_fee));
		HNBGUFormBean.setBusFee(String.valueOf(bus_fee));
		HNBGUFormBean.setOtherFee(String.valueOf(other_fee));
		HNBGUFormBean.setOtherFeeRemark(String.valueOf(other_feeremark));
		HNBGUFormBean.setSportFee(String.valueOf(sport_fee));
		HNBGUFormBean.setOtherAnnualFee(String.valueOf(other_annualfee));
		HNBGUFormBean.setDegreeFee(String.valueOf(degree_fee));
		HNBGUFormBean.setOldStudentNumber(oldstudent_number);
		HNBGUFormBean.setNewStudentNumber(newstudent_number);
		HNBGUFormBean.setApplicationNo(applicationNo);

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getHNBGUStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getHNBGUStudentDetails(" + HNBGUFormBean + ") - END");
		return HNBGUFormBean;
	}
	public Map<String, String> getHNBGUCourseFeesAmt(String className1,String cgroup1,String semester1,String typesOfStd)
	{
		Map<String,String> studentFee=new HashMap<String,String>();
		String name=className1+" "+semester1;
		try{
			callableStatement = con.prepareCall("{call PROC_GET_HNBGU_STUDENT_FEES(?,?,?)}");
			callableStatement.setString(1, name);
			callableStatement.setString(2, cgroup1);
			callableStatement.setString(3, typesOfStd);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            	

				studentFee.put("tutionFee",resultSet.getString("TutionFee"));
				studentFee.put("cautionFee",resultSet.getString("CautionFee"));
				/*studentFee.put("examFee",resultSet.getString("ExamFee"));*/
				studentFee.put("sportFee",resultSet.getString("SportFee"));
				studentFee.put("otherAnnualFee",resultSet.getString("OtherAnnualFee"));
				studentFee.put("enrollmentFee",resultSet.getString("EnrollmentFee"));
				studentFee.put("degreeFee",resultSet.getString("DegreeFee"));
				/*studentFee.put("examFee",resultSet.getString("ExamFee"));*/
				/*studentFee.put("busFee",resultSet.getString("BusFee"));*/
				studentFee.put("otherFee",resultSet.getString("OtherFee"));
				studentFee.put("totalFee",resultSet.getString("TotalFee"));

			}

		}catch(Exception e)
		{
			logger.error("Exception inside catch getHNBGUCourseFeesAmt"+e);

		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getHNBGUCourseFeesAmt"+e);
			}	
		}

		return studentFee;
	}
	@Override
	public String insertHnbguStudentDetails(HNBGUFormBean hNBGUFormDean,String billerId) {
		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("insertHnbguStudentDetails(" + hNBGUFormDean + ") - START ===billerId=>>"+billerId);

		String responseString = null;
		/*
		 * try { logger.info("PROC_HNBGU_StudentDetails(" + hNBGUFormDean +
		 * ") - START"); callableStatement = con.
		 * prepareCall("{call PROC_HNBGU_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}"
		 * ); callableStatement.setString(1, hNBGUFormDean.getName());
		 * callableStatement.setString(2, hNBGUFormDean.getFatherName());
		 * callableStatement.setString(3, hNBGUFormDean.getMotherName());
		 * callableStatement.setString(4, hNBGUFormDean.getAdharNumber());
		 * callableStatement.setString(5, hNBGUFormDean.getBusFee());
		 * callableStatement.setString(6, hNBGUFormDean.getTutionFee());
		 * callableStatement.setString(7, hNBGUFormDean.getCautionFee());
		 * callableStatement.setString(8, hNBGUFormDean.getClassName());
		 * callableStatement.setString(9, hNBGUFormDean.getExamFee());
		 * callableStatement.setString(10, hNBGUFormDean.getMobileNo());
		 * callableStatement.setString(11, hNBGUFormDean.getDateOfBirth());
		 * callableStatement.setString(12, hNBGUFormDean.getOtherFee());
		 * callableStatement.setString(13, hNBGUFormDean.getTotalFee());
		 * callableStatement.setString(14, hNBGUFormDean.getTypesOfStd());
		 * callableStatement.setString(15, hNBGUFormDean.getOtherFeeRemark());
		 * callableStatement.setString(16, hNBGUFormDean.getSemester());
		 * callableStatement.setString(17, hNBGUFormDean.getStudentID());
		 * callableStatement.setString(18, hNBGUFormDean.getSubject1());
		 * callableStatement.setString(19, hNBGUFormDean.getSubject2());
		 * callableStatement.setString(20, hNBGUFormDean.getSubject3());
		 * callableStatement.setString(21, hNBGUFormDean.getSubject4());
		 * callableStatement.setString(22, hNBGUFormDean.getTypesOfPractical());
		 * callableStatement.setString(23, hNBGUFormDean.getTypesOfGroup());
		 * callableStatement.setString(24, hNBGUFormDean.getEmailId());
		 * callableStatement.setString(25, hNBGUFormDean.getSportFee());
		 * callableStatement.setString(26, hNBGUFormDean.getOtherAnnualFee());
		 * callableStatement.setString(27, hNBGUFormDean.getEnrollmentFee());
		 * callableStatement.setString(28, hNBGUFormDean.getDegreeFee());
		 * callableStatement.setString(29, hNBGUFormDean.getOldStudentNumber());
		 * callableStatement.setString(30, hNBGUFormDean.getNewStudentNumber());
		 * 
		 * callableStatement.setString(31, hNBGUFormDean.getRegisteredUserId());
		 * callableStatement.setString(32, billerId);
		 * callableStatement.registerOutParameter(33, Types.VARCHAR);
		 * callableStatement.registerOutParameter(34, Types.VARCHAR);
		 * callableStatement.registerOutParameter(35, Types.VARCHAR);
		 * 
		 * callableStatement.execute(); responseString =
		 * callableStatement.getString(35);
		 * hNBGUFormDean.setStudentRegistrationId(callableStatement.getString(34));
		 * hNBGUFormDean.setApplicationNo(callableStatement.getString(33));
		 * logger.info("PROC_HNBGU_StudentDetails responseString : - " +
		 * responseString);
		 */
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,hNBGUFormDean.getTotalFee());
			callableStatement.setString(2,hNBGUFormDean.getApplicationNo());
			callableStatement.setString(3,hNBGUFormDean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			hNBGUFormDean.setStudentRegistrationId(callableStatement.getString(6));
			hNBGUFormDean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);


		} catch (Exception e) {
			logger.error("Exception inside catch insertHnbguStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertHnbguStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertHnbguStudentDetails(" + hNBGUFormDean + ") - END");
		return responseString;
	}

	//RAJ Starts
	@Override
	public String insertRajStudentDetails(RAJFormBean rajFormBean, String billerId) {

		long startTime = System.currentTimeMillis();
		logger.info("insertRajStudentDetails(" + rajFormBean + ") - START ===billerId=>>"+billerId);

		String responseString = null;
		/*
		 * try { logger.info("PROC_RAJ_StudentDetails(" + rajFormBean + ") - START");
		 * callableStatement =
		 * con.prepareCall("{call PROC_RAJ_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?)}"
		 * ); callableStatement.setString(1, rajFormBean.getName());
		 * callableStatement.setString(2, rajFormBean.getFormNo());
		 * callableStatement.setString(3, rajFormBean.getRollNo());
		 * callableStatement.setString(4, rajFormBean.getDob());
		 * callableStatement.setString(5, rajFormBean.getFatherName());
		 * callableStatement.setString(6, rajFormBean.getClass1());
		 * callableStatement.setString(7, rajFormBean.getSection());
		 * callableStatement.setString(8, rajFormBean.getMobileNo());
		 * callableStatement.setString(9, rajFormBean.getTotalfees());
		 * callableStatement.setString(10, rajFormBean.getRegisteredUserId());
		 * callableStatement.setString(11, billerId);
		 * callableStatement.registerOutParameter(12, Types.VARCHAR);
		 * callableStatement.registerOutParameter(13, Types.VARCHAR);
		 * callableStatement.registerOutParameter(14, Types.VARCHAR);
		 * 
		 * callableStatement.execute(); responseString =
		 * callableStatement.getString(14);
		 * rajFormBean.setStudentRegistrationId(callableStatement.getString(13));
		 * rajFormBean.setApplicationNo(callableStatement.getString(12));
		 * logger.info("PROC_RAJ_StudentDetails responseString : - " + responseString);
		 */
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,rajFormBean.getTotalfees());
			callableStatement.setString(2,rajFormBean.getApplicationNo());
			callableStatement.setString(3,rajFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			rajFormBean.setStudentRegistrationId(callableStatement.getString(6));
			rajFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);

		} catch (Exception e) {
			logger.error("Exception inside catch insertRajStudentDetails"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertRajStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertRajStudentDetails(" + rajFormBean + ") - END");
		return responseString;
	}

	@Override
	public RAJFormBean getRajStudentDetails(String applicationNo,String instituteCode) {
		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("getRajStudentDetails(" + applicationNo + ") - START");  
		RAJFormBean rajFormBean = new RAJFormBean();

//		try{
//			callableStatement = con.prepareCall("{call PROC_GET_RAJ_STUDENTDETAILS(?)}");
//			callableStatement.setString(1, applicationNo);
//
//
//			resultSet = callableStatement.executeQuery(); 
//			while (resultSet.next()) {			            	
//				rajFormBean.setName(resultSet.getString("name"));
//				rajFormBean.setFormNo(resultSet.getString("formNo"));
//				rajFormBean.setRollNo(resultSet.getString("rollNo"));
//				rajFormBean.setDob(resultSet.getString("dob"));	            	
//				rajFormBean.setFatherName(resultSet.getString("fatherName"));
//				rajFormBean.setClass1(resultSet.getString("class"));
//				rajFormBean.setSection(resultSet.getString("section"));
//				rajFormBean.setMobileNo(resultSet.getString("mobileNo"));
//				rajFormBean.setTotalfees(resultSet.getString("totalfees"));
//				rajFormBean.setRegisteredUserId(resultSet.getString("registerId"));            	
//				rajFormBean.setApplicationNo(applicationNo);            	 
//			}
		StudentRegistrationService studentRegistrationService=new StudentRegistrationService();
		String merchantID=studentRegistrationService.getMerchantId(instituteCode);
				//InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

				try{
					ObjectMapper obMapper = new ObjectMapper();
					ObjectNode objNode = obMapper.createObjectNode();
					/*** *** *** Initialization start *** *** ***/
					SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

					secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
					secureAPIBuilder.setUpstreamServerPort(443);

					secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
					secureAPIBuilder.setVerifyServerSSL(false);

					//String clientId = "actual-smarthub-node-ip";
					//String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

					//secureAPIBuilder.setAuthenticationAlias(clientId);

					//byte[] clientKey = hexStringToByteArray(clientKeyStr);
					//secureAPIBuilder.setAuthenticationKey(clientKey);

					SecureAPIConnection secureAPI = secureAPIBuilder.build();
					
				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteCode);
				smartHubFetchOnlineFormBean.setContext_id(merchantID);
				smartHubFetchOnlineFormBean.setForm_id(applicationNo);
				logger.info("AppNo From dao "+applicationNo);
				String  jsonString2=obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2"+jsonString2);

//				WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/get-form-data");
//				Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//				
//				Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				APIResponse apiResponse1 = null;
				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: " + apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();
				
				
				logger.info("output1"+output1);
				
				JSONObject jsonObject = new JSONObject(output1);
				
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray"+jsonArray);
		JSONObject data = jsonArray.getJSONObject(0);
		JSONObject dataobj = data.getJSONObject("form_data");

		String stuName = dataobj.getString("student_name");
		String roll_no = dataobj.getString("roll_no");
		String form_no = dataobj.getString("form_no");
		String dob_date = dataobj.getString("dob_date");
		String father_name = dataobj.getString("father_name");
		String class_1 = dataobj.getString("class_1");
		String section_details = dataobj.getString("section_details");

		int amt_paid = dataobj.getInt("total_fees");
		Long mobile_number = dataobj.getLong("mobile_no");

		rajFormBean.setName(stuName);
		rajFormBean.setFormNo(form_no);
		rajFormBean.setRollNo(roll_no);
		rajFormBean.setDob(rajFormBean.getDob());
		rajFormBean.setFatherName(father_name);
		rajFormBean.setSection(section_details);
		rajFormBean.setMobileNo(String.valueOf(mobile_number));
		rajFormBean.setTotalfees(String.valueOf(amt_paid));
		rajFormBean.setApplicationNo(applicationNo);

		}catch(Exception e)
		{
			e.printStackTrace();

		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getRajStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getRajStudentDetails(" + rajFormBean + ") - END");
		return rajFormBean;
	}
	//RAJ ENDS
	public String insertOercStudentDetails(OERCOnlineFormBean oercOnlineFormBean, String billerId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("insertOercStudentDetails(" + oercOnlineFormBean + ") - START");
		logger.info("insertOercStudentDetails---billerId : "+billerId);

		String responseString = null;
		/*try{
		callableStatement = con.prepareCall("{call PROC_OERC_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?)}");
		callableStatement.setString(1,oercOnlineFormBean.getStdName());
		callableStatement.setString(2,oercOnlineFormBean.getMobileNumber());
		callableStatement.setString(3,oercOnlineFormBean.getEmailId());
		callableStatement.setString(4,oercOnlineFormBean.getAddress());
		callableStatement.setString(5,oercOnlineFormBean.getSelectCourseName());
		callableStatement.setString(6,oercOnlineFormBean.getDuration());
		callableStatement.setString(7,oercOnlineFormBean.getTotAmount());	
		callableStatement.setString(8,oercOnlineFormBean.getRegisteredUserId());				
		callableStatement.setString(9,billerId);

		callableStatement.registerOutParameter(10, Types.VARCHAR);
		callableStatement.registerOutParameter(11, Types.VARCHAR);
		callableStatement.registerOutParameter(12, Types.VARCHAR);

		  callableStatement.execute(); 

		  responseString = callableStatement.getString(12); 
		  oercOnlineFormBean.setStudentRegistrationId(callableStatement.getString(11));
		  oercOnlineFormBean.setApplicationNo(callableStatement.getString(10));
		  logger.info("responseString : - " + responseString);
		 */
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,oercOnlineFormBean.getTotAmount());
			callableStatement.setString(2,oercOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,oercOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			oercOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			oercOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);


		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertOercStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertOercStudentDetails(" + oercOnlineFormBean + ") - END");
		return responseString;
	}
	public OERCOnlineFormBean getOercStudentDetails(String applicationNo,String instituteCode)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getOercStudentDetails(" + applicationNo + ") - START");  
		OERCOnlineFormBean oercOnlineFormBean = new OERCOnlineFormBean();

//		try{
//			callableStatement = con.prepareCall("{call PROC_GET_OERC_STUDENTDETAILS(?)}");
//			callableStatement.setString(1, applicationNo);
//			resultSet = callableStatement.executeQuery(); 
//			while (resultSet.next()) {			            	
//				oercOnlineFormBean.setStdName(resultSet.getString("stdName"));
//				oercOnlineFormBean.setMobileNumber(resultSet.getString("mobileNumber"));
//				oercOnlineFormBean.setEmailId(resultSet.getString("emailId"));
//				oercOnlineFormBean.setAddress(resultSet.getString("address"));
//				oercOnlineFormBean.setSelectCourseName(resultSet.getString("selectCourseName"));
//				oercOnlineFormBean.setDuration(resultSet.getString("duration"));
//				oercOnlineFormBean.setTotAmount(resultSet.getString("totAmount"));	            		            	
//				oercOnlineFormBean.setApplicationNo(applicationNo);
//			}
		StudentRegistrationService studentRegistrationService=new StudentRegistrationService();
		String merchantID=studentRegistrationService.getMerchantId(instituteCode);
				//InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

				try{
					ObjectMapper obMapper = new ObjectMapper();
					ObjectNode objNode = obMapper.createObjectNode();
					/*** *** *** Initialization start *** *** ***/
					SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

					secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
					secureAPIBuilder.setUpstreamServerPort(443);

					secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
					secureAPIBuilder.setVerifyServerSSL(false);

					//String clientId = "actual-smarthub-node-ip";
					//String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

					//secureAPIBuilder.setAuthenticationAlias(clientId);

					//byte[] clientKey = hexStringToByteArray(clientKeyStr);
					//secureAPIBuilder.setAuthenticationKey(clientKey);

					SecureAPIConnection secureAPI = secureAPIBuilder.build();
					
				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteCode);
				smartHubFetchOnlineFormBean.setContext_id(merchantID);
				smartHubFetchOnlineFormBean.setForm_id(applicationNo);
				logger.info("AppNo From dao "+applicationNo);
				String  jsonString2=obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2"+jsonString2);

//				WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/get-form-data");
//				Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//				
//				Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				APIResponse apiResponse1 = null;
				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: " + apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();
				
				
				logger.info("output1"+output1);
				
				JSONObject jsonObject = new JSONObject(output1);
				
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray"+jsonArray);
		JSONObject data = jsonArray.getJSONObject(0);
		JSONObject dataobj = data.getJSONObject("form_data");

		String stuName = dataobj.getString("std_name");

		String email_id = dataobj.getString("email_id");
		String address_details = dataobj.getString("address_details");
		String select_coursename = dataobj.getString("select_coursename");
		String duration_details = dataobj.getString("duration_details");
		int amt_paid = dataobj.getInt("total_amount");
		Long mobile_number = dataobj.getLong("mobile_number");

		oercOnlineFormBean.setStdName(stuName);
		oercOnlineFormBean.setMobileNumber(String.valueOf(mobile_number));
		oercOnlineFormBean.setEmailId(email_id);
		oercOnlineFormBean.setAddress(address_details);
		oercOnlineFormBean.setSelectCourseName(select_coursename);
		oercOnlineFormBean.setDuration(duration_details);
		oercOnlineFormBean.setTotAmount(String.valueOf(amt_paid));
		oercOnlineFormBean.setApplicationNo(applicationNo);

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getOercStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getOercStudentDetails(" + oercOnlineFormBean + ") - END");
		return oercOnlineFormBean;
	}

	//CR79005 OERCP STARTS
	@Override
	public String insertOercpStudentDetails(
			OERCPOnlineFormBean oercpOnlineFormBean, String billerId) {
		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("insertOercpStudentDetails(" + oercpOnlineFormBean + ") - START");
		logger.info("insertOercpStudentDetails---billerId : "+billerId);

		String responseString = null;
		/*try{
	callableStatement = con.prepareCall("{call PROC_OERCP_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?)}");
	callableStatement.setString(1,oercpOnlineFormBean.getStdName());
	callableStatement.setString(2,oercpOnlineFormBean.getMobileNumber());
	callableStatement.setString(3,oercpOnlineFormBean.getEmailId());
	callableStatement.setString(4,oercpOnlineFormBean.getAddress());
	callableStatement.setString(5,oercpOnlineFormBean.getSelectCourseName());
	callableStatement.setString(6,oercpOnlineFormBean.getDuration());
	callableStatement.setString(7,oercpOnlineFormBean.getTotAmount());	
	callableStatement.setString(8,oercpOnlineFormBean.getRegisteredUserId());				
	callableStatement.setString(9,billerId);

	callableStatement.registerOutParameter(10, Types.VARCHAR);
	callableStatement.registerOutParameter(11, Types.VARCHAR);
	callableStatement.registerOutParameter(12, Types.VARCHAR);

	  callableStatement.execute(); 

	  responseString = callableStatement.getString(12); 
	  oercpOnlineFormBean.setStudentRegistrationId(callableStatement.getString(11));
	  oercpOnlineFormBean.setApplicationNo(callableStatement.getString(10));
	  logger.info("responseString : - " + responseString);
		 */

		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,oercpOnlineFormBean.getTotAmount());
			callableStatement.setString(2,oercpOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,oercpOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			oercpOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			oercpOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);


		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertOercpStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertOercpStudentDetails(" + oercpOnlineFormBean + ") - END");
		return responseString;
	}

	@Override
	public OERCPOnlineFormBean getOercpStudentDetails(String applicationNo) {
		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("getOercpStudentDetails(" + applicationNo + ") - START");  
		OERCPOnlineFormBean oercpOnlineFormBean = new OERCPOnlineFormBean();

//		try{
//			callableStatement = con.prepareCall("{call PROC_GET_OERCP_STUDENTDETAILS(?)}");
//			callableStatement.setString(1, applicationNo);
//			resultSet = callableStatement.executeQuery(); 
//			while (resultSet.next()) {			            	
//				oercpOnlineFormBean.setStdName(resultSet.getString("stdName"));
//				oercpOnlineFormBean.setMobileNumber(resultSet.getString("mobileNumber"));
//				oercpOnlineFormBean.setEmailId(resultSet.getString("emailId"));
//				oercpOnlineFormBean.setAddress(resultSet.getString("address"));
//				oercpOnlineFormBean.setSelectCourseName(resultSet.getString("selectCourseName"));
//				oercpOnlineFormBean.setDuration(resultSet.getString("duration"));
//				oercpOnlineFormBean.setTotAmount(resultSet.getString("totAmount"));	            		            	
//				oercpOnlineFormBean.setApplicationNo(applicationNo);
//			}
		StudentRegistrationService studentRegistrationService=new StudentRegistrationService();
		String merchantID=studentRegistrationService.getMerchantId(instituteCode);
				//InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

				try{
					ObjectMapper obMapper = new ObjectMapper();
					ObjectNode objNode = obMapper.createObjectNode();
					/*** *** *** Initialization start *** *** ***/
					SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

					secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
					secureAPIBuilder.setUpstreamServerPort(443);

					secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
					secureAPIBuilder.setVerifyServerSSL(false);

					//String clientId = "actual-smarthub-node-ip";
					//String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

					//secureAPIBuilder.setAuthenticationAlias(clientId);

					//byte[] clientKey = hexStringToByteArray(clientKeyStr);
					//secureAPIBuilder.setAuthenticationKey(clientKey);

					SecureAPIConnection secureAPI = secureAPIBuilder.build();
					
				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteCode);
				smartHubFetchOnlineFormBean.setContext_id(merchantID);
				smartHubFetchOnlineFormBean.setForm_id(applicationNo);
				logger.info("AppNo From dao "+applicationNo);
				String  jsonString2=obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2"+jsonString2);

//				WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/get-form-data");
//				Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//				
//				Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				APIResponse apiResponse1 = null;
				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: " + apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();
				
				
				logger.info("output1"+output1);
				
				JSONObject jsonObject = new JSONObject(output1);
				
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray"+jsonArray);
		JSONObject data = jsonArray.getJSONObject(0);
		JSONObject dataobj = data.getJSONObject("form_data");
		// code ended by priya

		String stuName = dataobj.getString("std_name");

		String email_id = dataobj.getString("email_id");
		String address_details = dataobj.getString("address_details");
		String select_coursename = dataobj.getString("select_coursename");
		String duration_details = dataobj.getString("duration_details");
		int amt_paid = dataobj.getInt("total_amount");
		Long mobile_number = dataobj.getLong("mobile_number");

		oercpOnlineFormBean.setStdName(stuName);
		oercpOnlineFormBean.setMobileNumber(String.valueOf(mobile_number));
		oercpOnlineFormBean.setEmailId(email_id);
		oercpOnlineFormBean.setAddress(address_details);
		oercpOnlineFormBean.setSelectCourseName(select_coursename);
		oercpOnlineFormBean.setDuration(duration_details);
		oercpOnlineFormBean.setTotAmount(String.valueOf(amt_paid));
		oercpOnlineFormBean.setApplicationNo(applicationNo);

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getOercStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getOercpStudentDetails(" + oercpOnlineFormBean + ") - END");
		return oercpOnlineFormBean;
	}  
	//CR79005 OERCP ENDS

	@Override
	public StandfordOnlineFormBean getStandStudentDetails(String applicationNo,String instituteCode) {
		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("getStandStudentDetails(" + applicationNo + ") - START");  
		StandfordOnlineFormBean standfordOnlineFormBean = new StandfordOnlineFormBean();

//		try{
//			//callableStatement = con.prepareCall("{call PROC_GET_STANDFORD_STUDENTDETAILS(?)}");
//			callableStatement = con.prepareCall("{call PROC_GET_STANDFORD_STUDENTDETAILS(?)}");
//			callableStatement.setString(1, applicationNo);
//			resultSet = callableStatement.executeQuery(); 
//			while (resultSet.next()) {			            	
//				standfordOnlineFormBean.setAddNo(resultSet.getString("addNo"));
//				standfordOnlineFormBean.setStudentName(resultSet.getString("studentName"));
//				standfordOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
//				standfordOnlineFormBean.setClassName(resultSet.getString("className"));
//				standfordOnlineFormBean.setSections(resultSet.getString("sections"));
//				standfordOnlineFormBean.setMiscellaneous(resultSet.getString("miscellaneous"));
//				standfordOnlineFormBean.setAnnualCharges(resultSet.getString("annualCharges"));
//				standfordOnlineFormBean.setExamFee(resultSet.getString("examFee"));
//				standfordOnlineFormBean.setRemarks(resultSet.getString("remarks"));
//				standfordOnlineFormBean.setTransaportCharges(resultSet.getString("transaportCharges"));
//				standfordOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));
//				standfordOnlineFormBean.setDateOfBirth(resultSet.getString("dateOfBirth"));
//				standfordOnlineFormBean.setMobileNumber(resultSet.getString("mobileNumber"));
//				standfordOnlineFormBean.setPupilFund(resultSet.getString("pupilFund"));
//				standfordOnlineFormBean.setTutionFee(resultSet.getString("tutionFee"));
//				standfordOnlineFormBean.setApplicationNo(applicationNo);
//
//			}
		StudentRegistrationService studentRegistrationService=new StudentRegistrationService();
		String merchantID=studentRegistrationService.getMerchantId(instituteCode);
				//InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

				try{
					ObjectMapper obMapper = new ObjectMapper();
					ObjectNode objNode = obMapper.createObjectNode();
					/*** *** *** Initialization start *** *** ***/
					SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

					secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
					secureAPIBuilder.setUpstreamServerPort(443);

					secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
					secureAPIBuilder.setVerifyServerSSL(false);

					//String clientId = "actual-smarthub-node-ip";
					//String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

					//secureAPIBuilder.setAuthenticationAlias(clientId);

					//byte[] clientKey = hexStringToByteArray(clientKeyStr);
					//secureAPIBuilder.setAuthenticationKey(clientKey);

					SecureAPIConnection secureAPI = secureAPIBuilder.build();
					
				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteCode);
				smartHubFetchOnlineFormBean.setContext_id(merchantID);
				smartHubFetchOnlineFormBean.setForm_id(applicationNo);
				logger.info("AppNo From dao "+applicationNo);
				String  jsonString2=obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2"+jsonString2);

//				WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/get-form-data");
//				Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//				
//				Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				APIResponse apiResponse1 = null;
				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: " + apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();
				
				
				logger.info("output1"+output1);
				
				JSONObject jsonObject = new JSONObject(output1);
				
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray"+jsonArray);
		JSONObject data = jsonArray.getJSONObject(0);
		JSONObject dataobj = data.getJSONObject("form_data");

		String add_no = dataobj.getString("add_no");
		String student_name = dataobj.getString("student_name");
		String class_name = dataobj.getString("class_name");
		String sections_details = dataobj.getString("sections_details");
		int annual_charges = dataobj.getInt("annual_charges");
		int tution_fee = dataobj.getInt("tution_fee");
		int pupil_fund = dataobj.getInt("pupil_fund");

		int transaport_charges = dataobj.getInt("transaport_charges");
		int exam_fee = dataobj.getInt("exam_fee");
		int miscellaneous_charges = dataobj.getInt("miscellaneous_charges");

		String date_ofbirth = dataobj.getString("date_ofbirth");
		int total_amount = dataobj.getInt("total_amount");
		Long mobile_number = dataobj.getLong("mobile_number");

		standfordOnlineFormBean.setAddNo(add_no);
		standfordOnlineFormBean.setStudentName(student_name);
		standfordOnlineFormBean.setClassName(class_name);
		standfordOnlineFormBean.setSections(sections_details);
		standfordOnlineFormBean.setAnnualCharges(String.valueOf(annual_charges));
		standfordOnlineFormBean.setTutionFee(String.valueOf(tution_fee));

		standfordOnlineFormBean.setPupilFund(String.valueOf(pupil_fund));
		standfordOnlineFormBean.setTransaportCharges(String.valueOf(transaport_charges));
		standfordOnlineFormBean.setExamFee(String.valueOf(exam_fee));
		standfordOnlineFormBean.setMiscellaneous(String.valueOf(miscellaneous_charges));
		standfordOnlineFormBean.setDateOfBirth(standfordOnlineFormBean.getDateOfBirth());

		standfordOnlineFormBean.setTotalAmount(String.valueOf(total_amount));
		standfordOnlineFormBean.setMobileNumber(String.valueOf(mobile_number));
		standfordOnlineFormBean.setApplicationNo(applicationNo);

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getStandStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getStandStudentDetails(" + standfordOnlineFormBean + ") - END");
		return standfordOnlineFormBean;
	}  
	public String insertStandStudentDetails(StandfordOnlineFormBean standfordOnlineFormBean, String billerId,String instcode)
	{
		long startTime = System.currentTimeMillis();
		logger.info("insertStandStudentDetails(" + standfordOnlineFormBean + ") - START");
		logger.info("insertStandStudentDetails---billerId : "+billerId +"instcode "+instcode);

		String responseString = null;
		/*try{
		callableStatement = con.prepareCall("{call PROC_STANDFORD_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
	//callableStatement = con.prepareCall("{call PROC_STANDFORD_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
	callableStatement.setString(1,standfordOnlineFormBean.getAddNo());
	callableStatement.setString(2,standfordOnlineFormBean.getStudentName());
	callableStatement.setString(3,standfordOnlineFormBean.getMobileNumber());
	callableStatement.setString(4,standfordOnlineFormBean.getFatherName());
	callableStatement.setString(5,standfordOnlineFormBean.getClassName());
	callableStatement.setString(6,standfordOnlineFormBean.getSections());
	callableStatement.setString(7,standfordOnlineFormBean.getMiscellaneous());
	callableStatement.setString(8,standfordOnlineFormBean.getDateOfBirth());
	callableStatement.setString(9,standfordOnlineFormBean.getExamFee());
	callableStatement.setString(10,standfordOnlineFormBean.getTotalAmount());
	callableStatement.setString(11,standfordOnlineFormBean.getTransaportCharges());
	callableStatement.setString(12,standfordOnlineFormBean.getPupilFund());
	callableStatement.setString(13,standfordOnlineFormBean.getAnnualCharges());
	callableStatement.setString(14,standfordOnlineFormBean.getTutionFee());
	callableStatement.setString(15,standfordOnlineFormBean.getRemarks());
	callableStatement.setString(16,standfordOnlineFormBean.getRegisteredUserId());	
	callableStatement.setString(17,billerId);
	callableStatement.setString(18,instcode);
	callableStatement.registerOutParameter(19, Types.VARCHAR);
	callableStatement.registerOutParameter(20, Types.VARCHAR);
	callableStatement.registerOutParameter(21, Types.VARCHAR);

	  callableStatement.execute(); 

	  responseString = callableStatement.getString(21); 
	  standfordOnlineFormBean.setStudentRegistrationId(callableStatement.getString(20));
	  standfordOnlineFormBean.setApplicationNo(callableStatement.getString(19));
	  logger.info("responseString : - " + responseString);
		 */
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,standfordOnlineFormBean.getTotalAmount());
			callableStatement.setString(2,standfordOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,standfordOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			standfordOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			standfordOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);


		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertStandStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertStandStudentDetails(" + standfordOnlineFormBean + ") - END");
		return responseString;
	}
	public String insertSheetlaStudentDetails(SheetlaOnlineFormBean sheetlaOnlineFormBean, String billerId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("insertSheetlaStudentDetails(" + sheetlaOnlineFormBean + ") - START");
		logger.info("insertSheetlaStudentDetails---billerId : "+billerId);

		String responseString = null;
		/*try{
	callableStatement = con.prepareCall("{call PROC_Sheetla_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
	callableStatement.setString(1,sheetlaOnlineFormBean.getAdmissionNo());
	callableStatement.setString(2,sheetlaOnlineFormBean.getStdName());
	callableStatement.setString(3,sheetlaOnlineFormBean.getFatherName());
	callableStatement.setString(4,sheetlaOnlineFormBean.getSelectClass());
	callableStatement.setString(5,sheetlaOnlineFormBean.getSelectSections());
	callableStatement.setString(6,sheetlaOnlineFormBean.getStdDOB());
	callableStatement.setString(7,sheetlaOnlineFormBean.getMobile());
	callableStatement.setString(8,sheetlaOnlineFormBean.getProspectusFee());
	callableStatement.setString(9,sheetlaOnlineFormBean.getAdmissionFee());
	callableStatement.setString(10,sheetlaOnlineFormBean.getAnnualFee());
	callableStatement.setString(11,sheetlaOnlineFormBean.getDevelopmentFee());
	callableStatement.setString(12,sheetlaOnlineFormBean.getSecurityFee());
	callableStatement.setString(13,sheetlaOnlineFormBean.getTuitionFee());
	callableStatement.setString(14,sheetlaOnlineFormBean.getLabFee());
	callableStatement.setString(15,sheetlaOnlineFormBean.getSportsFee());
	callableStatement.setString(16,sheetlaOnlineFormBean.getMusicFee());
	callableStatement.setString(17,sheetlaOnlineFormBean.getComputerFee());
	callableStatement.setString(18,sheetlaOnlineFormBean.getMiscellaneousFee());
	callableStatement.setString(19,sheetlaOnlineFormBean.getExamFee());
	callableStatement.setString(20,sheetlaOnlineFormBean.getTransportFee());
	callableStatement.setString(21,sheetlaOnlineFormBean.getLateFee());
	callableStatement.setString(22,sheetlaOnlineFormBean.getRemarks());
	callableStatement.setString(23,sheetlaOnlineFormBean.getTotAmount());

	callableStatement.setString(24,sheetlaOnlineFormBean.getRegisteredUserId());				
	callableStatement.setString(25,billerId);

	callableStatement.registerOutParameter(26, Types.VARCHAR);
	callableStatement.registerOutParameter(27, Types.VARCHAR);
	callableStatement.registerOutParameter(28, Types.VARCHAR);

	callableStatement.execute(); 

	  responseString = callableStatement.getString(28); 
	  sheetlaOnlineFormBean.setStudentRegistrationId(callableStatement.getString(27));
	  sheetlaOnlineFormBean.setApplicationNo(callableStatement.getString(26));
	  logger.info("responseString : - " + responseString);*/

		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,sheetlaOnlineFormBean.getTotAmount());
			callableStatement.setString(2,sheetlaOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,sheetlaOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			sheetlaOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			sheetlaOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);

		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSheetlaStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertSheetlaStudentDetails(" + sheetlaOnlineFormBean + ") - END");
		return responseString;
	}
	public SheetlaOnlineFormBean getSheetlaStudentDetails(String applicationNo,String instituteCode)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getSheetlaStudentDetails(" + applicationNo + ") - START");  
		SheetlaOnlineFormBean sheetlaOnlineFormBean = new SheetlaOnlineFormBean();

//		try{
//			callableStatement = con.prepareCall("{call PROC_GET_Sheetla_STUDENTDETAILS(?)}");
//			callableStatement.setString(1, applicationNo);
//			resultSet = callableStatement.executeQuery(); 
//			while (resultSet.next()) {			            	
//				sheetlaOnlineFormBean.setAdmissionNo(resultSet.getString("admissionNo"));
//				sheetlaOnlineFormBean.setStdName(resultSet.getString("stdName"));
//				sheetlaOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
//				sheetlaOnlineFormBean.setSelectClass(resultSet.getString("selectClass"));
//				sheetlaOnlineFormBean.setSelectSections(resultSet.getString("selectSections"));
//				sheetlaOnlineFormBean.setStdDOB(resultSet.getString("stdDOB"));
//				sheetlaOnlineFormBean.setMobile(resultSet.getString("mobile"));
//				sheetlaOnlineFormBean.setProspectusFee(resultSet.getString("prospectusFee"));
//				sheetlaOnlineFormBean.setAdmissionFee(resultSet.getString("admissionFee"));
//				sheetlaOnlineFormBean.setAnnualFee(resultSet.getString("annualFee"));
//				sheetlaOnlineFormBean.setDevelopmentFee(resultSet.getString("developmentFee"));
//				sheetlaOnlineFormBean.setSecurityFee(resultSet.getString("securityFee"));
//				sheetlaOnlineFormBean.setTuitionFee(resultSet.getString("tuitionFee"));
//				sheetlaOnlineFormBean.setLabFee(resultSet.getString("labFee"));
//				sheetlaOnlineFormBean.setSportsFee(resultSet.getString("sportsFee"));
//				sheetlaOnlineFormBean.setMusicFee(resultSet.getString("musicFee"));
//				sheetlaOnlineFormBean.setComputerFee(resultSet.getString("computerFee"));
//				sheetlaOnlineFormBean.setMiscellaneousFee(resultSet.getString("miscellaneousFee"));
//				sheetlaOnlineFormBean.setExamFee(resultSet.getString("examFee"));
//				sheetlaOnlineFormBean.setTransportFee(resultSet.getString("transportFee"));
//				sheetlaOnlineFormBean.setLateFee(resultSet.getString("lateFee"));	 
//				sheetlaOnlineFormBean.setRemarks(resultSet.getString("remarks"));
//				sheetlaOnlineFormBean.setTotAmount(resultSet.getString("totAmount"));	            		            		            	
//				sheetlaOnlineFormBean.setApplicationNo(applicationNo);
//			}
		StudentRegistrationService studentRegistrationService=new StudentRegistrationService();
		String merchantID=studentRegistrationService.getMerchantId(instituteCode);
				//InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

				try{
					ObjectMapper obMapper = new ObjectMapper();
					ObjectNode objNode = obMapper.createObjectNode();
					/*** *** *** Initialization start *** *** ***/
					SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

					secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
					secureAPIBuilder.setUpstreamServerPort(443);

					secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
					secureAPIBuilder.setVerifyServerSSL(false);

					//String clientId = "actual-smarthub-node-ip";
					//String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

					//secureAPIBuilder.setAuthenticationAlias(clientId);

					//byte[] clientKey = hexStringToByteArray(clientKeyStr);
					//secureAPIBuilder.setAuthenticationKey(clientKey);

					SecureAPIConnection secureAPI = secureAPIBuilder.build();
					
				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteCode);
				smartHubFetchOnlineFormBean.setContext_id(merchantID);
				smartHubFetchOnlineFormBean.setForm_id(applicationNo);
				logger.info("AppNo From dao "+applicationNo);
				String  jsonString2=obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2"+jsonString2);

//				WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/get-form-data");
//				Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//				
//				Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				APIResponse apiResponse1 = null;
				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: " + apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();
				
				
				logger.info("output1"+output1);
				
				JSONObject jsonObject = new JSONObject(output1);
				
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray"+jsonArray);
		JSONObject data = jsonArray.getJSONObject(0);
		JSONObject dataobj = data.getJSONObject("form_data");

		String stuName = dataobj.getString("std_name");

		String admission_no = dataobj.getString("admission_no");
		String father_name = dataobj.getString("father_name");
		String select_class = dataobj.getString("select_class");
		String select_sections = dataobj.getString("select_sections");
		Long mobile_number = dataobj.getLong("mobile_no");

		int prospectus_fee = dataobj.getInt("prospectus_fee");
		int admission_fee = dataobj.getInt("admission_fee");
		int annual_fee = dataobj.getInt("annual_fee");
		int development_fee = dataobj.getInt("development_fee");

		int security_fee = dataobj.getInt("security_fee");
		int tuition_fee = dataobj.getInt("tuition_fee");
		int lab_fee = dataobj.getInt("lab_fee");
		int sports_fee = dataobj.getInt("sports_fee");

		int music_fee = dataobj.getInt("music_fee");
		int computer_fee = dataobj.getInt("computer_fee");
		int miscellaneous_fee = dataobj.getInt("miscellaneous_fee");
		int exam_fee = dataobj.getInt("exam_fee");

		int transport_fee = dataobj.getInt("transport_fee");
		int late_fee = dataobj.getInt("late_fee");
		String remarks_details = dataobj.getString("remarks_details");

		int amt_paid = dataobj.getInt("total_amount");

		sheetlaOnlineFormBean.setStdName(stuName);
		sheetlaOnlineFormBean.setFatherName(father_name);
		sheetlaOnlineFormBean.setAdmissionNo(admission_no);
		sheetlaOnlineFormBean.setSelectClass(select_class);
		sheetlaOnlineFormBean.setSelectSections(select_sections);
		sheetlaOnlineFormBean.setMobile(String.valueOf(mobile_number));
		sheetlaOnlineFormBean.setTotAmount(String.valueOf(amt_paid));
		sheetlaOnlineFormBean.setProspectusFee(String.valueOf(prospectus_fee));
		sheetlaOnlineFormBean.setAdmissionFee(String.valueOf(admission_fee));
		sheetlaOnlineFormBean.setAnnualFee(String.valueOf(annual_fee));
		sheetlaOnlineFormBean.setDevelopmentFee(String.valueOf(development_fee));
		sheetlaOnlineFormBean.setSecurityFee(String.valueOf(security_fee));
		sheetlaOnlineFormBean.setTuitionFee(String.valueOf(tuition_fee));

		sheetlaOnlineFormBean.setLabFee(String.valueOf(lab_fee));
		sheetlaOnlineFormBean.setSportsFee(String.valueOf(sports_fee));
		sheetlaOnlineFormBean.setMusicFee(String.valueOf(music_fee));
		sheetlaOnlineFormBean.setComputerFee(String.valueOf(computer_fee));

		sheetlaOnlineFormBean.setTuitionFee(String.valueOf(miscellaneous_fee));

		sheetlaOnlineFormBean.setExamFee(String.valueOf(exam_fee));
		sheetlaOnlineFormBean.setTransportFee(String.valueOf(transport_fee));
		sheetlaOnlineFormBean.setLateFee(String.valueOf(late_fee));
		sheetlaOnlineFormBean.setRemarks(remarks_details);
		sheetlaOnlineFormBean.setApplicationNo(applicationNo);

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getSheetlaStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getSheetlaStudentDetails(" + sheetlaOnlineFormBean + ") - END");
		return sheetlaOnlineFormBean;
	}

	public MicronOnlineFormBean getMicronStudentDetails(String applicationNo,String instituteCode)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getMicronStudentDetails(" + applicationNo + ") - START");  
		MicronOnlineFormBean micronOnlineFormBean = new MicronOnlineFormBean();

//		try{
//			callableStatement = con.prepareCall("{call PROC_GET_MICRON_STUDENTDETAILS(?)}");
//			callableStatement.setString(1, applicationNo);
//			resultSet = callableStatement.executeQuery(); 
//			while (resultSet.next()) {		
//
//				micronOnlineFormBean.setRegNo(resultSet.getString("regNo"));
//				micronOnlineFormBean.setCandidateName(resultSet.getString("CandidateName"));
//				micronOnlineFormBean.setGuardianName(resultSet.getString("GuardianName"));
//				micronOnlineFormBean.setMobileNumber(resultSet.getString("MobileNumber"));
//				micronOnlineFormBean.setCandidateAge(resultSet.getString("CandidateAge"));
//				micronOnlineFormBean.setRegistrationFee(resultSet.getString("RegistrationFee"));
//				micronOnlineFormBean.setFeeCategory(resultSet.getString("FeeCategory"));
//				micronOnlineFormBean.setPaymentCycle(resultSet.getString("PaymentCycle"));
//				micronOnlineFormBean.setTotalFeesAmount(resultSet.getString("TotalFeesAmount"));
//				micronOnlineFormBean.setApplicationNo(applicationNo);
//			}
		StudentRegistrationService studentRegistrationService=new StudentRegistrationService();
		String merchantID=studentRegistrationService.getMerchantId(instituteCode);
				//InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

				try{
					ObjectMapper obMapper = new ObjectMapper();
					ObjectNode objNode = obMapper.createObjectNode();
					/*** *** *** Initialization start *** *** ***/
					SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

					secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
					secureAPIBuilder.setUpstreamServerPort(443);

					secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
					secureAPIBuilder.setVerifyServerSSL(false);

					//String clientId = "actual-smarthub-node-ip";
					//String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

					//secureAPIBuilder.setAuthenticationAlias(clientId);

					//byte[] clientKey = hexStringToByteArray(clientKeyStr);
					//secureAPIBuilder.setAuthenticationKey(clientKey);

					SecureAPIConnection secureAPI = secureAPIBuilder.build();
					
				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteCode);
				smartHubFetchOnlineFormBean.setContext_id(merchantID);
				smartHubFetchOnlineFormBean.setForm_id(applicationNo);
				logger.info("AppNo From dao "+applicationNo);
				String  jsonString2=obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2"+jsonString2);

//				WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/get-form-data");
//				Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//				
//				Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				APIResponse apiResponse1 = null;
				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: " + apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();
				
				
				logger.info("output1"+output1);
				
				JSONObject jsonObject = new JSONObject(output1);
				
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray"+jsonArray);
		JSONObject data = jsonArray.getJSONObject(0);
		JSONObject dataobj = data.getJSONObject("form_data");

		String reg_no = dataobj.getString("reg_no");

		String candidate_name = dataobj.getString("candidate_name");
		String guardian_name = dataobj.getString("guardian_name");
		int candidate_age = dataobj.getInt("candidate_age");
		String fee_category = dataobj.getString("fee_category");
		int registration_fee = dataobj.getInt("registration_fee");
		String payment_cycle = dataobj.getString("payment_cycle");
		int total_feesamount = dataobj.getInt("total_feesamount");
		Long mobile_number = dataobj.getLong("mobile_number");

		micronOnlineFormBean.setRegNo(reg_no);
		micronOnlineFormBean.setMobileNumber(String.valueOf(mobile_number));
		micronOnlineFormBean.setCandidateName(candidate_name);
		micronOnlineFormBean.setGuardianName(guardian_name);
		micronOnlineFormBean.setCandidateAge(String.valueOf(candidate_age));
		micronOnlineFormBean.setFeeCategory(fee_category);
		micronOnlineFormBean.setRegistrationFee(String.valueOf(registration_fee));
		micronOnlineFormBean.setPaymentCycle(payment_cycle);
		micronOnlineFormBean.setTotalFeesAmount(String.valueOf(total_feesamount));
		micronOnlineFormBean.setApplicationNo(applicationNo);

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getMicronStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getMicronStudentDetails(" + micronOnlineFormBean + ") - END");
		return micronOnlineFormBean;
	}
	public String insertMicronStudentDetails(MicronOnlineFormBean MicronOnlineFormBean, String billerId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("insertStandStudentDetails(" + MicronOnlineFormBean + ") - START");
		logger.info("insertStandStudentDetails---billerId : "+billerId);

		String responseString = null;
		/*try{
	callableStatement = con.prepareCall("{call PROC_MICRON_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
	callableStatement.setString(1,MicronOnlineFormBean.getRegNo());
	callableStatement.setString(2,MicronOnlineFormBean.getCandidateName());
	callableStatement.setString(3,MicronOnlineFormBean.getGuardianName());
	callableStatement.setString(4,MicronOnlineFormBean.getMobileNumber());
	callableStatement.setString(5,MicronOnlineFormBean.getCandidateAge());
	callableStatement.setString(6,MicronOnlineFormBean.getRegistrationFee());
	callableStatement.setString(7,MicronOnlineFormBean.getFeeCategory());
	callableStatement.setString(8,MicronOnlineFormBean.getPaymentCycle());
	callableStatement.setString(9,MicronOnlineFormBean.getTotalFeesAmount());
	callableStatement.setString(10,MicronOnlineFormBean.getRegisteredUserId());	
	callableStatement.setString(11,billerId);
	callableStatement.registerOutParameter(12, Types.VARCHAR);
	callableStatement.registerOutParameter(13, Types.VARCHAR);
	callableStatement.registerOutParameter(14, Types.VARCHAR);

	callableStatement.execute(); 

	  responseString = callableStatement.getString(14); 
	  MicronOnlineFormBean.setStudentRegistrationId(callableStatement.getString(13));
	  MicronOnlineFormBean.setApplicationNo(callableStatement.getString(12));
	  logger.info("responseString : - " + responseString);
		 */

		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,MicronOnlineFormBean.getTotalFeesAmount());
			callableStatement.setString(2,MicronOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,MicronOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			MicronOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			MicronOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);

		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertMicronStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertMicronStudentDetails(" + MicronOnlineFormBean + ") - END");
		return responseString;
	}

	public String getMicronStudentFees(String PaymentCycle,String feecategory)
	{

		long startTime = System.currentTimeMillis();
		logger.info("<Start >getMicronStudentFees  PaymentCycle : "+PaymentCycle+ "feecategory : "+feecategory);  
		String studentFees="";
		try{
			callableStatement = con.prepareCall("{call PROC_GET_MicronStudentFees(?,?)}");
			callableStatement.setString(1, PaymentCycle);
			callableStatement.setString(2, feecategory);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            	
				studentFees= resultSet.getString("totalamount");
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getMicronStudentFees"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getMicronStudentFees studentFees" + studentFees +"- END");
		return studentFees;

	}
	public String insertGarawarStudentDetails(GaharwarOnlineFormBean gaharwarOnlineFormBean, String billerId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("insertGarawarStudentDetails(" + gaharwarOnlineFormBean + ") - START");
		logger.info("insertGarawarStudentDetails---billerId : "+billerId);

		String responseString = null;
		/*try{
	callableStatement = con.prepareCall("{call PROC_GAHARWAR_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
	callableStatement.setString(1,gaharwarOnlineFormBean.getName());
	callableStatement.setString(2,gaharwarOnlineFormBean.getFathername());
	callableStatement.setString(3,gaharwarOnlineFormBean.getMobileNumber());
	callableStatement.setString(4,gaharwarOnlineFormBean.getEmaiId());
	callableStatement.setString(5,gaharwarOnlineFormBean.getPayto());
	callableStatement.setString(6,gaharwarOnlineFormBean.getRegistrationFee());
	callableStatement.setString(7,gaharwarOnlineFormBean.getFormprospectusFee());
	callableStatement.setString(8,gaharwarOnlineFormBean.getAdmissionFee());
	callableStatement.setString(9,gaharwarOnlineFormBean.getCourseFee());
	callableStatement.setString(10,gaharwarOnlineFormBean.getInstallmentFee());
	callableStatement.setString(11,gaharwarOnlineFormBean.getOthers());
	callableStatement.setString(12,gaharwarOnlineFormBean.getExamFee());
	callableStatement.setString(13,gaharwarOnlineFormBean.getPlacementCharges());
	callableStatement.setString(14,gaharwarOnlineFormBean.getTotal());
	callableStatement.setString(15,gaharwarOnlineFormBean.getRegisteredUserId());	
	callableStatement.setString(16,billerId);
	callableStatement.registerOutParameter(17, Types.VARCHAR);
	callableStatement.registerOutParameter(18, Types.VARCHAR);
	callableStatement.registerOutParameter(19, Types.VARCHAR);

	callableStatement.execute(); 

	  responseString = callableStatement.getString(19); 
	  gaharwarOnlineFormBean.setStudentRegistrationId(callableStatement.getString(18));
	  gaharwarOnlineFormBean.setApplicationNo(callableStatement.getString(17));
	  logger.info("responseString : - " + responseString);

		 */try{

			 callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			 callableStatement.setString(1,gaharwarOnlineFormBean.getTotal());
			 callableStatement.setString(2,gaharwarOnlineFormBean.getApplicationNo());
			 callableStatement.setString(3,gaharwarOnlineFormBean.getRegisteredUserId());
			 callableStatement.setString(4,billerId);


			 callableStatement.registerOutParameter(5, Types.VARCHAR);
			 callableStatement.registerOutParameter(6, Types.VARCHAR);
			 callableStatement.registerOutParameter(7, Types.VARCHAR);
			 callableStatement.execute(); 
			 responseString = callableStatement.getString(7); 
			 gaharwarOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			 gaharwarOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			 logger.info("responseString : - " + responseString);



		 }catch(Exception e){
			 e.printStackTrace();
		 }
		 finally {
			 try {
				 if (resultSet != null) {
					 resultSet.close();
				 }
				 if (callableStatement != null) {
					 callableStatement.close();
				 }
				 if (con != null) {
					 con.close();
				 }
			 } catch (Exception e) {
				 logger.error("Exception inside catch insertMicronStudentDetails"+e);
			 }
		 }
		 long endTime = System.currentTimeMillis();
		 logger.info("** EXECUTION TIME **" + (endTime - startTime));
		 logger.info("insertMicronStudentDetails(" + gaharwarOnlineFormBean + ") - END");
		 return responseString;
	}
	public GaharwarOnlineFormBean getGarawarStudentDetails(String applicationNo,String instituteCode)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getGarawarStudentDetails(" + applicationNo + ") - START");  
		GaharwarOnlineFormBean gaharwarOnlineFormBean = new GaharwarOnlineFormBean();

//		try{
//			callableStatement = con.prepareCall("{call PROC_GET_GAHARWAR_STUDENTDETAILS(?)}");
//			callableStatement.setString(1, applicationNo);
//			resultSet = callableStatement.executeQuery(); 
//			while (resultSet.next()) {		
//
//				gaharwarOnlineFormBean.setName(resultSet.getString("name"));
//				gaharwarOnlineFormBean.setFathername(resultSet.getString("fathername"));
//				gaharwarOnlineFormBean.setMobileNumber(resultSet.getString("mobileNumber"));
//				gaharwarOnlineFormBean.setEmaiId(resultSet.getString("emailId"));
//				gaharwarOnlineFormBean.setPayto(resultSet.getString("payto"));
//				gaharwarOnlineFormBean.setRegistrationFee(resultSet.getString("registrationFee"));
//				gaharwarOnlineFormBean.setFormprospectusFee(resultSet.getString("formprospectusFee"));
//				gaharwarOnlineFormBean.setAdmissionFee(resultSet.getString("admissionFee"));
//				gaharwarOnlineFormBean.setCourseFee(resultSet.getString("courseFee"));
//				gaharwarOnlineFormBean.setInstallmentFee(resultSet.getString("installmentFee"));
//				gaharwarOnlineFormBean.setOthers(resultSet.getString("others"));
//				gaharwarOnlineFormBean.setExamFee(resultSet.getString("examFee"));
//				gaharwarOnlineFormBean.setPlacementCharges(resultSet.getString("placementCharges"));
//				gaharwarOnlineFormBean.setTotal(resultSet.getString("total"));            	
//				gaharwarOnlineFormBean.setApplicationNo(applicationNo);
//			}
		StudentRegistrationService studentRegistrationService=new StudentRegistrationService();
		String merchantID=studentRegistrationService.getMerchantId(instituteCode);
				//InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

				try{
					ObjectMapper obMapper = new ObjectMapper();
					ObjectNode objNode = obMapper.createObjectNode();
					/*** *** *** Initialization start *** *** ***/
					SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

					secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
					secureAPIBuilder.setUpstreamServerPort(443);

					secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
					secureAPIBuilder.setVerifyServerSSL(false);

					//String clientId = "actual-smarthub-node-ip";
					//String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

					//secureAPIBuilder.setAuthenticationAlias(clientId);

					//byte[] clientKey = hexStringToByteArray(clientKeyStr);
					//secureAPIBuilder.setAuthenticationKey(clientKey);

					SecureAPIConnection secureAPI = secureAPIBuilder.build();
					
				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteCode);
				smartHubFetchOnlineFormBean.setContext_id(merchantID);
				smartHubFetchOnlineFormBean.setForm_id(applicationNo);
				logger.info("AppNo From dao "+applicationNo);
				String  jsonString2=obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2"+jsonString2);

//				WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/get-form-data");
//				Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//				
//				Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				APIResponse apiResponse1 = null;
				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: " + apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();
				
				
				logger.info("output1"+output1);
				
				JSONObject jsonObject = new JSONObject(output1);
				
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray"+jsonArray);
		JSONObject data = jsonArray.getJSONObject(0);
		JSONObject dataobj = data.getJSONObject("form_data");

		String application_name = dataobj.getString("applicant_name");
		String father_name = dataobj.getString("father_name");
		int mobile_number = dataobj.getInt("mobile_number");
		String emai_id = dataobj.getString("emai_id");
		String pay_to = dataobj.getString("pay_to");

		int registration_fee = dataobj.getInt("registration_fee");
		int formprospectus_fee = dataobj.getInt("formprospectus_fee");
		int admission_fee = dataobj.getInt("admission_fee");
		int course_fee = dataobj.getInt("course_fee");
		int installment_fee = dataobj.getInt("installment_fee");
		int others_charges = dataobj.getInt("others_charges");
		int exam_fee = dataobj.getInt("exam_fee");
		int placement_charges = dataobj.getInt("placement_charges");
		int amt_paid = dataobj.getInt("total_amount");

		gaharwarOnlineFormBean.setName(application_name);
		gaharwarOnlineFormBean.setFathername(father_name);
		gaharwarOnlineFormBean.setEmaiId(emai_id);
		gaharwarOnlineFormBean.setPayto(pay_to);

		gaharwarOnlineFormBean.setRegistrationFee(String.valueOf(registration_fee));
		gaharwarOnlineFormBean.setFormprospectusFee(String.valueOf(formprospectus_fee));
		gaharwarOnlineFormBean.setAdmissionFee(String.valueOf(admission_fee));
		gaharwarOnlineFormBean.setCourseFee(String.valueOf(course_fee));

		gaharwarOnlineFormBean.setInstallmentFee(String.valueOf(installment_fee));
		gaharwarOnlineFormBean.setOthers(String.valueOf(others_charges));

		gaharwarOnlineFormBean.setPlacementCharges(String.valueOf(placement_charges));

		gaharwarOnlineFormBean.setTotal(String.valueOf(amt_paid));
		gaharwarOnlineFormBean.setApplicationNo(applicationNo);

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getGarawarStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getGarawarStudentDetails(" + gaharwarOnlineFormBean + ") - END");
		return gaharwarOnlineFormBean;
	}

	public String insertNehuPayStudentDetails(NehuPayOnlineBean nehuPayOnlineBean, String billerId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("insertNehuPayStudentDetails(" + nehuPayOnlineBean + ") - START ===billerId=>>"+billerId);

		String responseString = null;
		try {
			logger.info("PROC_RAJ_StudentDetails(" + nehuPayOnlineBean + ") - START");
			callableStatement = con.prepareCall("{call FJN_NehuPayDetails_StdRegistration(?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1, nehuPayOnlineBean.getName());
			callableStatement.setString(2, nehuPayOnlineBean.getDob());
			callableStatement.setString(3, nehuPayOnlineBean.getMobileNo());
			callableStatement.setString(4, nehuPayOnlineBean.getFirmName());
			callableStatement.setString(5, nehuPayOnlineBean.getTypeofPayment());
			callableStatement.setString(6, nehuPayOnlineBean.getTenRefNo()); 
			callableStatement.setString(7, nehuPayOnlineBean.getTotalfees());
			callableStatement.setString(8, nehuPayOnlineBean.getRegisteredUserId());
			callableStatement.setString(9, billerId);
			callableStatement.registerOutParameter(10, Types.VARCHAR);
			callableStatement.registerOutParameter(11, Types.VARCHAR);
			callableStatement.registerOutParameter(12, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(12); 
			nehuPayOnlineBean.setStudentRegistrationId(callableStatement.getString(11));
			nehuPayOnlineBean.setApplicationNo(callableStatement.getString(10));
			logger.info("FJN_NehuPayDetails_Std_Registration responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch FJN_NehuPayDetails_Std_Registration"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch FJN_NehuPayDetails_Std_Registration"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("FJN_NehuPayDetails_Std_Registration(" + nehuPayOnlineBean + ") - END");
		return responseString;	
	}
	public NehuPayOnlineBean getNehuPayStudentDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getNehuPayStudentDetails(" + applicationNo + ") - START");  
		NehuPayOnlineBean nehuPayOnlineBean = new NehuPayOnlineBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_NehuPay_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {		

				nehuPayOnlineBean.setName(resultSet.getString("name"));
				nehuPayOnlineBean.setDob(resultSet.getString("dob"));
				nehuPayOnlineBean.setMobileNo(resultSet.getString("mobileNo"));
				nehuPayOnlineBean.setFirmName(resultSet.getString("firmName"));
				nehuPayOnlineBean.setTenRefNo(resultSet.getString("tenRefNo"));
				nehuPayOnlineBean.setTotalfees(resultSet.getString("totalfees"));
				nehuPayOnlineBean.setTypeofPayment(resultSet.getString("typeofPayment"));

				nehuPayOnlineBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getNehuPayStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getGarawarStudentDetails(" + nehuPayOnlineBean + ") - END");
		return nehuPayOnlineBean;

	}
	public List<String> getNehuPayPaymentTypeList()
	{
		List<String> pamenttypeList=new ArrayList<String>();

		long startTime = System.currentTimeMillis();
		logger.info("getNehuPayPaymentTypeList - START");  
		NehuPayOnlineBean nehuPayOnlineBean = new NehuPayOnlineBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_NehuPaymentTypeList_STUDENTDETAILS()}");

			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {		

				pamenttypeList.add(resultSet.getString("payment_type"))  ;
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getNehuPayPaymentTypeList"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getNehuPayPaymentTypeList - END  pamenttypeList size : "+pamenttypeList.size());

		return pamenttypeList;
	}
	public Map<String,String> getNehuPayPaymentTypeFeesList(String nehupayPaymentType)
	{
		Map<String,String> pamenttypeFeeList=new HashMap<String,String>();

		long startTime = System.currentTimeMillis();
		logger.info("getNehuPayPaymentTypeFeesList - START");  
		NehuPayOnlineBean nehuPayOnlineBean = new NehuPayOnlineBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_NehuPaymentTypeFeesList(?)}");
			callableStatement.setString(1, nehupayPaymentType);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {		

				pamenttypeFeeList.put(resultSet.getString("Amount_provider"), resultSet.getString("Amount"));
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getNehuPayPaymentTypeFeesList"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getNehuPayPaymentTypeFeesList - END  pamenttypeList size : "+pamenttypeFeeList.size());

		return pamenttypeFeeList;
	}
	public String insertAllenInstituteDetails(ApiInstituteRequestBean[] apiInstituteRequestBean,String instCode)
	{
		ApiInstituteRequestBean apiInstituteRequestBeanApi = new ApiInstituteRequestBean();
		apiInstituteRequestBeanApi = apiInstituteRequestBean[0];
		long startTime = System.currentTimeMillis();
		logger.info("insertAllenInstituteDetails(" + apiInstituteRequestBean + ") - START ===billerId=>>"+apiInstituteRequestBean);

		String responseString = null;
		try {
			logger.info("PROC_RAJ_StudentDetails(" + apiInstituteRequestBean + ") - START");
			callableStatement = con.prepareCall("{call FJN_AllenApi_StdRegistration(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1, apiInstituteRequestBeanApi.getStatus());
			callableStatement.setString(2, apiInstituteRequestBeanApi.getFno());
			callableStatement.setString(3, apiInstituteRequestBeanApi.getStudentname());
			callableStatement.setString(4, apiInstituteRequestBeanApi.getGuardianname());
			callableStatement.setString(5, apiInstituteRequestBeanApi.getPaymode());
			callableStatement.setString(6, apiInstituteRequestBeanApi.getStudycentercode()); 
			callableStatement.setString(7, apiInstituteRequestBeanApi.getStudycentername());
			callableStatement.setString(8, apiInstituteRequestBeanApi.getStream());
			callableStatement.setString(9, apiInstituteRequestBeanApi.getCoursecode());
			callableStatement.setString(10, apiInstituteRequestBeanApi.getCoursename());
			callableStatement.setString(11, apiInstituteRequestBeanApi.getAmount());
			callableStatement.setString(12, apiInstituteRequestBeanApi.getMobile()); 
			callableStatement.setString(13, instCode);
			callableStatement.registerOutParameter(14, Types.VARCHAR);
			callableStatement.registerOutParameter(15, Types.VARCHAR);
			callableStatement.registerOutParameter(16, Types.VARCHAR);

			callableStatement.execute();           
			responseString = callableStatement.getString(16); 
			apiInstituteRequestBeanApi.setStudentRegistrationId(callableStatement.getString(15));
			apiInstituteRequestBeanApi.setApplicationNo(callableStatement.getString(14));
			logger.info("FJN_NehuPayDetails_Std_Registration responseString : - " + responseString);
		} catch (Exception e) {
			logger.error("Exception inside catch FJN_AllenApi_StdRegistration"+e);
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch FJN_AllenApi_StdRegistration"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("FJN_AllenApi_StdRegistration(" + apiInstituteRequestBean + ") - END");
		return responseString;	
	}
	public ApiInstituteRequestBean getAllenStudentDetails(String fno)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getOercStudentDetails(" + fno + ") - START");  
		ApiInstituteRequestBean apiInstituteRequestBean = new ApiInstituteRequestBean();
		try{
			callableStatement = con.prepareCall("{call PROC_GET_Allen_STUDENTDETAILS(?)}");
			callableStatement.setString(1, fno);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {	
				apiInstituteRequestBean.setStatus(resultSet.getString("Status"));
				apiInstituteRequestBean.setFno(resultSet.getString("fno"));
				apiInstituteRequestBean.setStudentname(resultSet.getString("studentname"));
				apiInstituteRequestBean.setGuardianname(resultSet.getString("guardianname"));
				apiInstituteRequestBean.setPaymode(resultSet.getString("paymode"));
				apiInstituteRequestBean.setStudycentercode(resultSet.getString("studycentercode"));
				apiInstituteRequestBean.setStudycentername(resultSet.getString("studycentername"));
				apiInstituteRequestBean.setStream(resultSet.getString("stream"));	

				apiInstituteRequestBean.setCoursecode(resultSet.getString("coursecode"));	
				apiInstituteRequestBean.setCoursename(resultSet.getString("coursename"));	
				apiInstituteRequestBean.setAmount(resultSet.getString("amount"));	
				apiInstituteRequestBean.setMobile(resultSet.getString("mobile"));	
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getOercStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getOercStudentDetails(" + apiInstituteRequestBean + ") - END");
		return apiInstituteRequestBean;
	}
	public String insertApiErrorCode(String institutecode, String status) {	
		String responseString = null;
		try {
			logger.info("insertApiErrorCode() - ~START~");	
			String sql="select message  from FJN_Api_Error_code where status=? and institutecode= ? ";
			PreparedStatement stmt=con.prepareStatement(sql);  
			stmt.setString(1,status);
			stmt.setString(2,institutecode);
			logger.info("statusApi:---(" + status + ") - START"); 
			logger.info("institutecode:---(" + institutecode + ") - START"); 
			resultSet = stmt.executeQuery(); 
			while (resultSet.next()) {	

				responseString = resultSet.getString(1); 
				logger.info("responseString:---(" + responseString + ") - START");
			}					
		} catch (Exception e) {
			//	logger.info(e);
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) { resultSet.close(); }
				if (callableStatement != null) { callableStatement.close(); }
				if (con != null) { con.close(); }
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		logger.info("statusApi:---(" + status + ") - START"); 
		logger.info("getTopBidders() - ~END~");
		return responseString;
	}
	public String insertLuciStudentDetails(LuciOnlineFormBean luciOnlineFormBean, String billerId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("insertLuciStudentDetails(" + luciOnlineFormBean + ") - START");
		logger.info("insertLuciStudentDetails---billerId : "+billerId);

		String responseString = null;
		/*try{
	callableStatement = con.prepareCall("{call PROC_Luci_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
	callableStatement.setString(1,luciOnlineFormBean.getUniqueId());
	callableStatement.setString(2,luciOnlineFormBean.getStdName());
	callableStatement.setString(3,luciOnlineFormBean.getMobile());
	callableStatement.setString(4,luciOnlineFormBean.getEmail());
	callableStatement.setString(5,luciOnlineFormBean.getPerAddress());
	callableStatement.setString(6,luciOnlineFormBean.getCity());
	callableStatement.setString(7,luciOnlineFormBean.getSelectState());
	callableStatement.setString(8,luciOnlineFormBean.getSelectCourse());	
	callableStatement.setString(9,luciOnlineFormBean.getTotAmount());

	callableStatement.setString(10,luciOnlineFormBean.getRegisteredUserId());				
	callableStatement.setString(11,billerId);

	callableStatement.registerOutParameter(12, Types.VARCHAR);
	callableStatement.registerOutParameter(13, Types.VARCHAR);
	callableStatement.registerOutParameter(14, Types.VARCHAR);

	callableStatement.execute(); 

	  responseString = callableStatement.getString(14); 
	  luciOnlineFormBean.setApplicationNo(callableStatement.getString(12));
	  logger.info("responseString : - " + responseString);
		 */

		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,luciOnlineFormBean.getTotAmount());
			callableStatement.setString(2,luciOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,luciOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			luciOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			luciOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertLuciStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertLuciStudentDetails(" + luciOnlineFormBean + ") - END");
		return responseString;
	}
	public LuciOnlineFormBean getLuciStudentDetails(String applicationNo,String instituteCode)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getLuciStudentDetails(" + applicationNo + ") - START");  
		LuciOnlineFormBean luciOnlineFormBean = new LuciOnlineFormBean();

//		try{
//			callableStatement = con.prepareCall("{call PROC_GET_Luci_STUDENTDETAILS(?)}");
//			callableStatement.setString(1, applicationNo);
//			resultSet = callableStatement.executeQuery(); 
//			while (resultSet.next()) {			            	
//				luciOnlineFormBean.setUniqueId(resultSet.getString("uniqueId"));
//				luciOnlineFormBean.setStdName(resultSet.getString("stdName"));
//				luciOnlineFormBean.setMobile(resultSet.getString("mobile"));
//				luciOnlineFormBean.setEmail(resultSet.getString("email"));
//				luciOnlineFormBean.setPerAddress(resultSet.getString("perAddress"));
//				luciOnlineFormBean.setCity(resultSet.getString("city"));
//				luciOnlineFormBean.setSelectState(resultSet.getString("selectState"));
//				luciOnlineFormBean.setSelectCourse(resultSet.getString("selectCourse"));        
//				luciOnlineFormBean.setTotAmount(resultSet.getString("totAmount"));	            		            		            	
//				luciOnlineFormBean.setApplicationNo(applicationNo);
//			}
		StudentRegistrationService studentRegistrationService=new StudentRegistrationService();
		String merchantID=studentRegistrationService.getMerchantId(instituteCode);
				//InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

				try{
					ObjectMapper obMapper = new ObjectMapper();
					ObjectNode objNode = obMapper.createObjectNode();
					/*** *** *** Initialization start *** *** ***/
					SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

					secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
					secureAPIBuilder.setUpstreamServerPort(443);

					secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
					secureAPIBuilder.setVerifyServerSSL(false);

					//String clientId = "actual-smarthub-node-ip";
					//String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

					//secureAPIBuilder.setAuthenticationAlias(clientId);

					//byte[] clientKey = hexStringToByteArray(clientKeyStr);
					//secureAPIBuilder.setAuthenticationKey(clientKey);

					SecureAPIConnection secureAPI = secureAPIBuilder.build();
					
				SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
				smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
				smartHubFetchOnlineFormBean.setForm_name(instituteCode);
				smartHubFetchOnlineFormBean.setContext_id(merchantID);
				smartHubFetchOnlineFormBean.setForm_id(applicationNo);
				logger.info("AppNo From dao "+applicationNo);
				String  jsonString2=obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
				logger.info("jsonString2"+jsonString2);

//				WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/get-form-data");
//				Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//				
//				Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
				APIResponse apiResponse1 = null;
				apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

				System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: " + apiResponse1.getResponseCode());

				logger.info("responseString", apiResponse1.toString());

				if (apiResponse1.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
				}
				logger.info("Output from Server .... \n");
				String output1 = apiResponse1.getData().toString();
				
				
				logger.info("output1"+output1);
				
				JSONObject jsonObject = new JSONObject(output1);
				
				JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
				logger.info("jsonArray"+jsonArray);
		JSONObject data = jsonArray.getJSONObject(0);
		JSONObject dataobj = data.getJSONObject("form_data");

		String unique_id = dataobj.getString("unique_id");

		String student_name = dataobj.getString("student_name");
		Long mobile_number = dataobj.getLong("mobile_no");
		String email_id = dataobj.getString("email_id");
		String per_address = dataobj.getString("per_address");
		String city_name = dataobj.getString("city_name");
		String select_course = dataobj.getString("select_course");
		String select_state = dataobj.getString("select_state");

		int amt_paid = dataobj.getInt("tot_amount");

		luciOnlineFormBean.setUniqueId(unique_id);
		luciOnlineFormBean.setStdName(student_name);
		luciOnlineFormBean.setMobile(String.valueOf(mobile_number));
		luciOnlineFormBean.setEmail(email_id);
		luciOnlineFormBean.setPerAddress(per_address);
		luciOnlineFormBean.setCity(city_name);
		luciOnlineFormBean.setSelectCourse(select_course);
		luciOnlineFormBean.setSelectState(select_state);
		luciOnlineFormBean.setTotAmount(String.valueOf(amt_paid));

		luciOnlineFormBean.setTotAmount(String.valueOf(amt_paid));
		luciOnlineFormBean.setApplicationNo(applicationNo);

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getLuciStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getLuciStudentDetails(" + luciOnlineFormBean + ") - END");
		return luciOnlineFormBean;
	}
	public String insertOnlineGeetaColStudentDetails(GeetaCollegeOnlineFormBean geetaCollegeOnlineFormBean, String instituteId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("insertOnlineGeetaColStudentDetails(" + geetaCollegeOnlineFormBean + ") - START");  		  		
		String responseString = null;
		try{
			callableStatement = con.prepareCall("{call PROC_GEETACOLLEGE_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,geetaCollegeOnlineFormBean.getSelectHostel());
			callableStatement.setString(2,geetaCollegeOnlineFormBean.getSelectHostelFeeType());
			callableStatement.setString(3,geetaCollegeOnlineFormBean.getSelectMonth());
			callableStatement.setString(4,geetaCollegeOnlineFormBean.getAcademicYear());
			callableStatement.setString(5,geetaCollegeOnlineFormBean.getSelectCourse());
			callableStatement.setString(6,geetaCollegeOnlineFormBean.getSelectYear());
			callableStatement.setString(7,geetaCollegeOnlineFormBean.getHostelFeeMonthly());
			callableStatement.setString(8,geetaCollegeOnlineFormBean.getSelectFeeType());
			callableStatement.setString(9,geetaCollegeOnlineFormBean.getSelectSemester());
			callableStatement.setString(10,geetaCollegeOnlineFormBean.getSelectCourseName());
			callableStatement.setString(11,geetaCollegeOnlineFormBean.getExamFee());
			callableStatement.setString(12,geetaCollegeOnlineFormBean.getNonGovtFee());
			callableStatement.setString(13,geetaCollegeOnlineFormBean.getUniversityFee());
			callableStatement.setString(14,geetaCollegeOnlineFormBean.getAutonomousFee());
			callableStatement.setString(15,geetaCollegeOnlineFormBean.getJanbhaghidariFee());
			callableStatement.setString(16,geetaCollegeOnlineFormBean.getSelfFinanceCourseFee());
			callableStatement.setString(17,geetaCollegeOnlineFormBean.getRgvpFee());
			callableStatement.setString(18,geetaCollegeOnlineFormBean.getAdmissionHostelFee());
			callableStatement.setString(19,geetaCollegeOnlineFormBean.getMonthlyHostelFee());  		
			callableStatement.setString(20,geetaCollegeOnlineFormBean.getTotAmount());
			callableStatement.setString(21,geetaCollegeOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(22,instituteId);
			callableStatement.registerOutParameter(23, Types.VARCHAR);
			callableStatement.registerOutParameter(24, Types.VARCHAR);
			callableStatement.registerOutParameter(25, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(25); 
			geetaCollegeOnlineFormBean.setStudentRegistrationId(callableStatement.getString(24));
			geetaCollegeOnlineFormBean.setApplicationNo(callableStatement.getString(23));
			logger.info("responseString : - " + responseString);

		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertOnlineGeetaColStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertOnlineGeetaColStudentDetails(" + geetaCollegeOnlineFormBean + ") - END");
		return responseString;
	}	
	public GeetaCollegeOnlineFormBean getGeetaColStudentDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getGeetaColStudentDetails(" + applicationNo + ") - START");  
		GeetaCollegeOnlineFormBean geetaCollegeOnlineFormBean = new GeetaCollegeOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_GEETACOL_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            	
				geetaCollegeOnlineFormBean.setSelectHostel(resultSet.getString("selectHostel"));
				geetaCollegeOnlineFormBean.setSelectHostelFeeType(resultSet.getString("selectHostelFeeType"));
				geetaCollegeOnlineFormBean.setSelectMonth(resultSet.getString("selectMonth"));
				geetaCollegeOnlineFormBean.setAcademicYear(resultSet.getString("academicYear"));
				geetaCollegeOnlineFormBean.setSelectCourse(resultSet.getString("selectCourse"));
				geetaCollegeOnlineFormBean.setSelectYear(resultSet.getString("selectYear"));
				geetaCollegeOnlineFormBean.setHostelFeeMonthly(resultSet.getString("hostelFeeMonthly"));
				geetaCollegeOnlineFormBean.setSelectFeeType(resultSet.getString("selectFeeType"));
				geetaCollegeOnlineFormBean.setSelectSemester(resultSet.getString("selectSemester"));
				geetaCollegeOnlineFormBean.setSelectCourseName(resultSet.getString("selectCourseName"));
				geetaCollegeOnlineFormBean.setExamFee(resultSet.getString("examFee"));
				geetaCollegeOnlineFormBean.setNonGovtFee(resultSet.getString("nonGovtFee"));
				geetaCollegeOnlineFormBean.setUniversityFee(resultSet.getString("universityFee"));
				geetaCollegeOnlineFormBean.setAutonomousFee(resultSet.getString("autonomousFee"));
				geetaCollegeOnlineFormBean.setJanbhaghidariFee(resultSet.getString("janbhaghidariFee"));
				geetaCollegeOnlineFormBean.setSelfFinanceCourseFee(resultSet.getString("selfFinanceCourseFee"));
				geetaCollegeOnlineFormBean.setRgvpFee(resultSet.getString("rgvpFee"));
				geetaCollegeOnlineFormBean.setAdmissionHostelFee(resultSet.getString("admissionHostelFee"));
				geetaCollegeOnlineFormBean.setMonthlyHostelFee(resultSet.getString("monthlyHostelFee"));  	            	
				geetaCollegeOnlineFormBean.setTotAmount(resultSet.getString("totAmount"));  	            	
				geetaCollegeOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getGeetaColStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getGeetaColStudentDetails(" + geetaCollegeOnlineFormBean + ") - END");
		return geetaCollegeOnlineFormBean;
	}  
	@Override
	public Map<String, String> getChaduryCourseTypeList(String coursname) {
		logger.info("<START>inside getAdmissionTypeList");
		Map<String, String> admissionTypeMap = new HashMap<String, String>();
		try {
			callableStatement = con.prepareCall("{call PROC_GET_CHADHURIFEES_ADMISSION_TYPE(?)}");
			callableStatement.setString(1, coursname);
			resultSet=callableStatement.executeQuery(); 
			while (resultSet.next()) {

				admissionTypeMap.put(resultSet.getString("FeeType"), resultSet.getString("Amount"));						
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		logger.info("<END> inside getAdmissionTypeList admissionTypeMap is :"+admissionTypeMap);

		return admissionTypeMap;
	}
	public String insertChaudharyCollegeStudentDetails(ChaudharyCollegeOnlineBean chaudharyCollegeOnlineBean, String billerId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("insertChaudharyCollegeStudentDetails(" + chaudharyCollegeOnlineBean + ") - START");
		logger.info("insertChaudharyCollegeStudentDetails---billerId : "+billerId);

		String responseString = null;
		try{
			callableStatement = con.prepareCall("{call FJN_Chaudhary_College_StdRegistration_new(?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,chaudharyCollegeOnlineBean.getCollegeName());
			callableStatement.setString(2,chaudharyCollegeOnlineBean.getCollegeCode());
			callableStatement.setString(3,chaudharyCollegeOnlineBean.getMobileNo());	
			callableStatement.setString(4,chaudharyCollegeOnlineBean.getTotalfees());

			callableStatement.setString(5,chaudharyCollegeOnlineBean.getRegisteredUserId());				
			callableStatement.setString(6,billerId);

			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.registerOutParameter(8, Types.VARCHAR);
			callableStatement.registerOutParameter(9, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(9); 
			chaudharyCollegeOnlineBean.setStudentRegistrationId(callableStatement.getString(8));
			chaudharyCollegeOnlineBean.setApplicationNo(callableStatement.getString(7));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertLuciStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("chaudharyCollegeOnlineBean(" + chaudharyCollegeOnlineBean + ") - END");
		return responseString;
	}

	@Override
	public String insertChauFeeDetails(ChaudharyCollegeOnlineBeanGrid chaudharyCollegeOnlineBeanGrid,String ApplicationNo) {

		long startTime = System.currentTimeMillis();
		logger.info("insertChauFeeDetails(" + chaudharyCollegeOnlineBeanGrid + ") - START");


		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_FJT_Chaudhary_Fee_Details_new(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1, chaudharyCollegeOnlineBeanGrid.getTypeoffees());
			callableStatement.setString(2, chaudharyCollegeOnlineBeanGrid.getSelectCourse()); 
			callableStatement.setString(3, chaudharyCollegeOnlineBeanGrid.getSubCourse()); 
			callableStatement.setString(4, chaudharyCollegeOnlineBeanGrid.getNumberofstudents()); 
			callableStatement.setString(5, chaudharyCollegeOnlineBeanGrid.getRegistrationFee()); 
			callableStatement.setString(6, chaudharyCollegeOnlineBeanGrid.getRkfund()); 
			callableStatement.setString(7, chaudharyCollegeOnlineBeanGrid.getDevelopmentFee()); 
			callableStatement.setString(8, chaudharyCollegeOnlineBeanGrid.getHolydayhomefee()); 
			callableStatement.setString(9, chaudharyCollegeOnlineBeanGrid.getYouthWelfareFee()); 
			callableStatement.setString(10, chaudharyCollegeOnlineBeanGrid.getSportsFee()); 
			callableStatement.setString(11, chaudharyCollegeOnlineBeanGrid.getNssFee()); 
			callableStatement.setString(12, chaudharyCollegeOnlineBeanGrid.getCurriculamCharges()); 
			callableStatement.setString(13, chaudharyCollegeOnlineBeanGrid.getYouthRedCrossFee()); 
			callableStatement.setString(14, chaudharyCollegeOnlineBeanGrid.getUniversityMagzinFee()); 
			// callableStatement.setString(15, chaudharyCollegeOnlineBeanGrid.getRegistrationreturnfees()); 
			callableStatement.setString(15, chaudharyCollegeOnlineBeanGrid.getContinuationreturnfees()); 
			callableStatement.setString(16, chaudharyCollegeOnlineBeanGrid.getExamfees()); 
			callableStatement.setString(17, chaudharyCollegeOnlineBeanGrid.getOtherFees()); 
			callableStatement.setString(18, chaudharyCollegeOnlineBeanGrid.getLatefeeCharges()); 
			callableStatement.setString(19, ApplicationNo);



			callableStatement.registerOutParameter(20, Types.VARCHAR);


			callableStatement.execute();           
			responseString = callableStatement.getString(20); 



			logger.info("responseString : - " + responseString);

		} catch (Exception e) {
			logger.error("Exception inside catch insertChauFeeDetails"+e);
		} finally {

			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertChauFeeDetails"+e);
			}
		} 
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertChauFeeDetails(" + chaudharyCollegeOnlineBeanGrid + ") - END");
		return responseString;
	}

	public ChaudharyCollegeOnlineBean getchaduryColStudentDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("ChaudharyCollegeOnlineBean(" + applicationNo + ") - START");  
		ChaudharyCollegeOnlineBean chaudharyCollegeOnlineBean = new ChaudharyCollegeOnlineBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_Chaudhary_College_STUDENTDETAILS_new(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {		

				chaudharyCollegeOnlineBean.setCollegeName(resultSet.getString("collegeName"));
				chaudharyCollegeOnlineBean.setCollegeCode(resultSet.getString("collegeCode"));
				chaudharyCollegeOnlineBean.setMobileNo(resultSet.getString("mobileNo"));

				chaudharyCollegeOnlineBean.setTotalfees(resultSet.getString("totalfees"));            	           	
				chaudharyCollegeOnlineBean.setApplicationNo(applicationNo);
			}

			ChaudharyCollegeOnlineBeanGrid chaudharyCollegeOnlineBeanGrid = null;
			List<ChaudharyCollegeOnlineBeanGrid> feeDetailsList=new ArrayList<ChaudharyCollegeOnlineBeanGrid>();
			callableStatement = con.prepareCall("{call PROC_GET_Chaudhary_FeeDetails_STUDENTDETAILS_new(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {	
				chaudharyCollegeOnlineBeanGrid = new ChaudharyCollegeOnlineBeanGrid();
				chaudharyCollegeOnlineBeanGrid.setTypeoffees(resultSet.getString("typeoffees"));
				chaudharyCollegeOnlineBeanGrid.setSelectCourse(resultSet.getString("selectCourse")); 
				chaudharyCollegeOnlineBeanGrid.setSubCourse(resultSet.getString("subCourse"));
				chaudharyCollegeOnlineBeanGrid.setNumberofstudents(resultSet.getString("numberofstudents"));
				chaudharyCollegeOnlineBeanGrid.setRegistrationFee(resultSet.getString("registrationFee"));
				chaudharyCollegeOnlineBeanGrid.setRkfund(resultSet.getString("rkfund"));
				chaudharyCollegeOnlineBeanGrid.setDevelopmentFee(resultSet.getString("developmentFee"));
				chaudharyCollegeOnlineBeanGrid.setHolydayhomefee(resultSet.getString("holydayhomefee"));
				chaudharyCollegeOnlineBeanGrid.setYouthWelfareFee(resultSet.getString("youthWelfareFee"));
				chaudharyCollegeOnlineBeanGrid.setSportsFee(resultSet.getString("sportsFee"));
				chaudharyCollegeOnlineBeanGrid.setNssFee(resultSet.getString("nssFee"));
				chaudharyCollegeOnlineBeanGrid.setCurriculamCharges(resultSet.getString("curriculamCharges"));
				chaudharyCollegeOnlineBeanGrid.setYouthRedCrossFee(resultSet.getString("youthRedCrossFee"));
				chaudharyCollegeOnlineBeanGrid.setUniversityMagzinFee(resultSet.getString("universityMagzinFee"));
				//	chaudharyCollegeOnlineBeanGrid.setRegistrationreturnfees(resultSet.getString("registrationreturnfees"));
				chaudharyCollegeOnlineBeanGrid.setContinuationreturnfees(resultSet.getString("continuationreturnfees"));
				chaudharyCollegeOnlineBeanGrid.setExamfees(resultSet.getString("examfees"));
				chaudharyCollegeOnlineBeanGrid.setOtherFees(resultSet.getString("otherFees"));
				chaudharyCollegeOnlineBeanGrid.setLatefeeCharges(resultSet.getString("latefeeCharges"));
				feeDetailsList.add(chaudharyCollegeOnlineBeanGrid);


			}
			chaudharyCollegeOnlineBean.setFeeDetailsList(feeDetailsList);



		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getchaduryColStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getchaduryColStudentDetails(" + chaudharyCollegeOnlineBean + ") - END");
		return chaudharyCollegeOnlineBean;

	}


	public String insertGSFCStudentDetails(GSFCOnlineFormBean gsfcOnlineFormBean, String instituteId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("insertGSFCStudentDetails(" + gsfcOnlineFormBean + ") - START");  		  		
		String responseString = null;
		/*try{
		callableStatement = con.prepareCall("{call PROC_GSFC_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
		callableStatement.setString(1,gsfcOnlineFormBean.getStudentId());
		callableStatement.setString(2,gsfcOnlineFormBean.getBranchName());
		callableStatement.setString(3,gsfcOnlineFormBean.getAcademicYear());
		callableStatement.setString(4,gsfcOnlineFormBean.getFeeType());
		callableStatement.setString(5,gsfcOnlineFormBean.getCourseName());
		callableStatement.setString(6,gsfcOnlineFormBean.getStudentName());
		callableStatement.setString(7,gsfcOnlineFormBean.getFatherName());
		callableStatement.setString(8,gsfcOnlineFormBean.getCity());
		callableStatement.setString(9,gsfcOnlineFormBean.getState());
		callableStatement.setString(10,gsfcOnlineFormBean.getMobileNo());
		callableStatement.setString(11,gsfcOnlineFormBean.getEmailId());
		callableStatement.setString(12,gsfcOnlineFormBean.getTotAmount());


		callableStatement.setString(13,gsfcOnlineFormBean.getRegisteredUserId());				
		callableStatement.setString(14,instituteId);

		callableStatement.registerOutParameter(15, Types.VARCHAR);
		callableStatement.registerOutParameter(16, Types.VARCHAR);
		callableStatement.registerOutParameter(17, Types.VARCHAR);

  callableStatement.execute(); 

  responseString = callableStatement.getString(17); 
  gsfcOnlineFormBean.setStudentRegistrationId(callableStatement.getString(16));
  gsfcOnlineFormBean.setApplicationNo(callableStatement.getString(15));
  logger.info("responseString : - " + responseString);*/
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,gsfcOnlineFormBean.getTotAmount());
			callableStatement.setString(2,gsfcOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,gsfcOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,instituteId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			gsfcOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			gsfcOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);


		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertGSFCStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertGSFCStudentDetails(" + gsfcOnlineFormBean + ") - END");
		return responseString;
	}
	public GSFCOnlineFormBean getGSFCStudentDetails(String applicationNo)
	{

		long startTime = System.currentTimeMillis();
		logger.info("getGSFCStudentDetails(" + applicationNo + ") - START");  
		GSFCOnlineFormBean gsfcOnlineFormBean = new GSFCOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_GSFC_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            	
				gsfcOnlineFormBean.setStudentId(resultSet.getString("studentId"));
				gsfcOnlineFormBean.setBranchName(resultSet.getString("branchName"));
				gsfcOnlineFormBean.setAcademicYear(resultSet.getString("academicYear"));
				gsfcOnlineFormBean.setFeeType(resultSet.getString("feeType"));
				gsfcOnlineFormBean.setCourseName(resultSet.getString("courseName"));
				gsfcOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				gsfcOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				gsfcOnlineFormBean.setCity(resultSet.getString("city"));
				gsfcOnlineFormBean.setState(resultSet.getString("state"));
				gsfcOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));
				gsfcOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				gsfcOnlineFormBean.setTotAmount(resultSet.getString("totAmount"));

				gsfcOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch gsfcOnlineFormBean"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getgsfcOnlineFormBean(" + gsfcOnlineFormBean + ") - END");
		return gsfcOnlineFormBean;
	}
	@Override
	public Map<String, String> getChaduryAdmissionTypeList(String studentCategory,String coursname) {
		logger.info("<START>inside getChaduryAdmissionTypeList");
		Map<String, String> admissionTypeMap = new HashMap<String, String>();
		try {
			callableStatement = con.prepareCall("{call PROC_GET_CHADHURI_ADMISSION_FEES_TYPE(?,?)}");
			callableStatement.setString(1, studentCategory);
			callableStatement.setString(2, coursname);
			resultSet=callableStatement.executeQuery(); 
			while (resultSet.next()) {

				admissionTypeMap.put(resultSet.getString("FeeType"), resultSet.getString("Amount"));						
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSWARAStudentDetails"+e);
			}
		}
		logger.info("<END> inside getAdmissionTypeList admissionTypeMap is :"+admissionTypeMap);

		return admissionTypeMap;
	}
	public String insertChaudharyAdmissionStudentDetails(ChaudharyADMISSIONOnlineBean chaudharyADMISSIONOnlineBean, String billerId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("insertChaudharyAdmissionStudentDetails(" + chaudharyADMISSIONOnlineBean + ") - START");
		logger.info("insertChaudharyAdmissionStudentDetails---billerId : "+billerId);

		String responseString = null;
		/*try{
	callableStatement = con.prepareCall("{call FJN_Chaudhary_Admission_StdRegistration(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
	callableStatement.setString(1,chaudharyADMISSIONOnlineBean.getRegistrationNo());
	callableStatement.setString(2,chaudharyADMISSIONOnlineBean.getStudentName());
	callableStatement.setString(3,chaudharyADMISSIONOnlineBean.getFatherName());
	callableStatement.setString(4,chaudharyADMISSIONOnlineBean.getClasss());
	callableStatement.setString(5,chaudharyADMISSIONOnlineBean.getMobileNo());
	callableStatement.setString(6,chaudharyADMISSIONOnlineBean.getPaymentRemerks());
	callableStatement.setString(7,chaudharyADMISSIONOnlineBean.getStudentCategory());
	callableStatement.setString(8,chaudharyADMISSIONOnlineBean.getSession());	
	callableStatement.setString(9,chaudharyADMISSIONOnlineBean.getSelectCourse());	
	callableStatement.setString(10,chaudharyADMISSIONOnlineBean.getAdmissionRegistrationFee());	
	callableStatement.setString(11,chaudharyADMISSIONOnlineBean.getTuitionFees());	
	callableStatement.setString(12,chaudharyADMISSIONOnlineBean.getDevelopmentFee());	
	callableStatement.setString(13,chaudharyADMISSIONOnlineBean.getCurriculamCharges());	
	callableStatement.setString(14,chaudharyADMISSIONOnlineBean.getBreakageFee());	
	callableStatement.setString(15,chaudharyADMISSIONOnlineBean.getFiledVisitPracticalFee());	
	callableStatement.setString(16,chaudharyADMISSIONOnlineBean.getManagementFee());	
	callableStatement.setString(17,chaudharyADMISSIONOnlineBean.getEquipementMantenanceFee());	
	callableStatement.setString(18,chaudharyADMISSIONOnlineBean.getDrugsLabratoryFee());	
	callableStatement.setString(19,chaudharyADMISSIONOnlineBean.getRegistrationCumEnrolmentFee());	
	callableStatement.setString(20,chaudharyADMISSIONOnlineBean.getMedicalFee());	
	callableStatement.setString(21,chaudharyADMISSIONOnlineBean.getUniversityMagzinFee());	
	callableStatement.setString(22,chaudharyADMISSIONOnlineBean.getStudentAidFund());	
	callableStatement.setString(23,chaudharyADMISSIONOnlineBean.getSportsRegistrationFee());	
	callableStatement.setString(24,chaudharyADMISSIONOnlineBean.getYouthWelfareFee());
	callableStatement.setString(25,chaudharyADMISSIONOnlineBean.getHouseExminationFee());	
	callableStatement.setString(26,chaudharyADMISSIONOnlineBean.getIdentyCardFee());	
	callableStatement.setString(27,chaudharyADMISSIONOnlineBean.getNssFee());	
	callableStatement.setString(28,chaudharyADMISSIONOnlineBean.getRkfund());	
	callableStatement.setString(29,chaudharyADMISSIONOnlineBean.getDilapidationFund());	
	callableStatement.setString(30,chaudharyADMISSIONOnlineBean.getYouthRedCrossFee());	
	callableStatement.setString(31,chaudharyADMISSIONOnlineBean.getAmalgamatedFund());	
	callableStatement.setString(32,chaudharyADMISSIONOnlineBean.getLateFee());
	callableStatement.setString(33,chaudharyADMISSIONOnlineBean.getThirdSemFee());
	callableStatement.setString(34,chaudharyADMISSIONOnlineBean.getOtherFees());
	callableStatement.setString(35,chaudharyADMISSIONOnlineBean.getTotalfees());	

	callableStatement.setString(36,chaudharyADMISSIONOnlineBean.getRegisteredUserId());				
	callableStatement.setString(37,billerId);

	callableStatement.registerOutParameter(38, Types.VARCHAR);
	callableStatement.registerOutParameter(39, Types.VARCHAR);
	callableStatement.registerOutParameter(40, Types.VARCHAR);

	callableStatement.execute(); 

	  responseString = callableStatement.getString(40); 
	  chaudharyADMISSIONOnlineBean.setStudentRegistrationId(callableStatement.getString(39));
	  chaudharyADMISSIONOnlineBean.setApplicationNo(callableStatement.getString(38));
	  logger.info("responseString : - " + responseString);*/

		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,chaudharyADMISSIONOnlineBean.getTotalfees());
			callableStatement.setString(2,chaudharyADMISSIONOnlineBean.getApplicationNo());
			callableStatement.setString(3,chaudharyADMISSIONOnlineBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			chaudharyADMISSIONOnlineBean.setStudentRegistrationId(callableStatement.getString(6));
			chaudharyADMISSIONOnlineBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);


		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertLuciStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("chaudharyADMISSIONOnlineBean(" + chaudharyADMISSIONOnlineBean + ") - END");
		return responseString;
	}
	public ChaudharyADMISSIONOnlineBean getChaudharyAdmissionStudentDetails(String applicationNo)
	{

		long startTime = System.currentTimeMillis();
		logger.info("ChaudharyCollegeOnlineBean(" + applicationNo + ") - START");  
		ChaudharyADMISSIONOnlineBean chaudharyADMISSIONOnlineBean = new ChaudharyADMISSIONOnlineBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_Chaudhary_AdmissionFee_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {		

				chaudharyADMISSIONOnlineBean.setRegistrationNo(resultSet.getString("registrationNo"));
				chaudharyADMISSIONOnlineBean.setStudentName(resultSet.getString("studentName"));
				chaudharyADMISSIONOnlineBean.setFatherName(resultSet.getString("fatherName"));
				chaudharyADMISSIONOnlineBean.setClasss(resultSet.getString("classs"));
				chaudharyADMISSIONOnlineBean.setMobileNo(resultSet.getString("mobileNo"));
				chaudharyADMISSIONOnlineBean.setPaymentRemerks(resultSet.getString("paymentRemerks"));
				chaudharyADMISSIONOnlineBean.setStudentCategory(resultSet.getString("studentCategory"));
				chaudharyADMISSIONOnlineBean.setSession(resultSet.getString("session"));
				chaudharyADMISSIONOnlineBean.setSelectCourse(resultSet.getString("selectCourse"));
				chaudharyADMISSIONOnlineBean.setAdmissionRegistrationFee(resultSet.getString("admissionRegistrationFee"));
				chaudharyADMISSIONOnlineBean.setTuitionFees(resultSet.getString("tuitionFees"));
				chaudharyADMISSIONOnlineBean.setDevelopmentFee(resultSet.getString("developmentFee"));
				chaudharyADMISSIONOnlineBean.setCurriculamCharges(resultSet.getString("curriculamCharges"));
				chaudharyADMISSIONOnlineBean.setBreakageFee(resultSet.getString("breakageFee"));
				chaudharyADMISSIONOnlineBean.setFiledVisitPracticalFee(resultSet.getString("filedVisitPracticalFee"));
				chaudharyADMISSIONOnlineBean.setManagementFee(resultSet.getString("managementFee"));
				chaudharyADMISSIONOnlineBean.setEquipementMantenanceFee(resultSet.getString("equipementMantenanceFee"));
				chaudharyADMISSIONOnlineBean.setDrugsLabratoryFee(resultSet.getString("drugsLabratoryFee"));
				chaudharyADMISSIONOnlineBean.setRegistrationCumEnrolmentFee(resultSet.getString("registrationCumEnrolmentFee"));
				chaudharyADMISSIONOnlineBean.setMedicalFee(resultSet.getString("medicalFee"));
				chaudharyADMISSIONOnlineBean.setUniversityMagzinFee(resultSet.getString("universityMagzinFee"));
				chaudharyADMISSIONOnlineBean.setStudentAidFund(resultSet.getString("studentAidFund"));
				chaudharyADMISSIONOnlineBean.setSportsRegistrationFee(resultSet.getString("sportsRegistrationFee"));
				chaudharyADMISSIONOnlineBean.setYouthWelfareFee(resultSet.getString("youthWelfareFee"));
				chaudharyADMISSIONOnlineBean.setHouseExminationFee(resultSet.getString("houseExminationFee"));
				chaudharyADMISSIONOnlineBean.setIdentyCardFee(resultSet.getString("identyCardFee"));
				chaudharyADMISSIONOnlineBean.setNssFee(resultSet.getString("nssFee"));
				chaudharyADMISSIONOnlineBean.setRkfund(resultSet.getString("rkfund"));
				chaudharyADMISSIONOnlineBean.setDilapidationFund(resultSet.getString("dilapidationFund"));
				chaudharyADMISSIONOnlineBean.setYouthRedCrossFee(resultSet.getString("youthRedCrossFee"));
				chaudharyADMISSIONOnlineBean.setAmalgamatedFund(resultSet.getString("amalgamatedFund"));
				chaudharyADMISSIONOnlineBean.setLateFee(resultSet.getString("lateFee"));
				chaudharyADMISSIONOnlineBean.setThirdSemFee(resultSet.getString("thirdSemFee")); 
				chaudharyADMISSIONOnlineBean.setOtherFees(resultSet.getString("otherFees"));
				chaudharyADMISSIONOnlineBean.setTotalfees(resultSet.getString("totalfees"));           	

				chaudharyADMISSIONOnlineBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getNehuPayStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getGarawarStudentDetails(" + chaudharyADMISSIONOnlineBean + ") - END");
		return chaudharyADMISSIONOnlineBean;

	}
	public String insertChaudharyMiscellanouStudentDetails(ChaudharyMiscellanousOnlineBean chaudharyMiscellanousOnlineBean, String billerId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("ChaudharyMiscellanousOnlineBean(" + chaudharyMiscellanousOnlineBean + ") - START");
		logger.info("ChaudharyMiscellanousOnlineBean---billerId : "+billerId);

		String responseString = null;
		try{
			callableStatement = con.prepareCall("{call FJN_Chaudhary_Miscellanous_StdRegistration(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,chaudharyMiscellanousOnlineBean.getRegistrationNo());
			callableStatement.setString(2,chaudharyMiscellanousOnlineBean.getStudentName());
			callableStatement.setString(3,chaudharyMiscellanousOnlineBean.getFatherName());
			callableStatement.setString(4,chaudharyMiscellanousOnlineBean.getClasss());
			callableStatement.setString(5,chaudharyMiscellanousOnlineBean.getMobileNo());
			callableStatement.setString(6,chaudharyMiscellanousOnlineBean.getPurpose());
			callableStatement.setString(7,chaudharyMiscellanousOnlineBean.getReEnterFeePurpose());	
			callableStatement.setString(8,chaudharyMiscellanousOnlineBean.getFeesAmount());	
			callableStatement.setString(9,chaudharyMiscellanousOnlineBean.getLateFee());	
			callableStatement.setString(10,chaudharyMiscellanousOnlineBean.getOtherFees());
			callableStatement.setString(11,chaudharyMiscellanousOnlineBean.getTotalfees());	
			callableStatement.setString(12,chaudharyMiscellanousOnlineBean.getAddress());
			callableStatement.setString(13,chaudharyMiscellanousOnlineBean.getRegisteredUserId());				
			callableStatement.setString(14,billerId);

			callableStatement.registerOutParameter(15, Types.VARCHAR);
			callableStatement.registerOutParameter(16, Types.VARCHAR);
			callableStatement.registerOutParameter(17, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(17); 
			chaudharyMiscellanousOnlineBean.setStudentRegistrationId(callableStatement.getString(16));
			chaudharyMiscellanousOnlineBean.setApplicationNo(callableStatement.getString(15));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertLuciStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("ChaudharyMiscellanousOnlineBean(" + chaudharyMiscellanousOnlineBean + ") - END");
		return responseString;
	}
	public ChaudharyMiscellanousOnlineBean getChaudharyMiscellanousStudentDetails(String applicationNo)
	{

		long startTime = System.currentTimeMillis();
		logger.info("ChaudharyCollegeOnlineBean(" + applicationNo + ") - START");  
		ChaudharyMiscellanousOnlineBean chaudharyMiscellanousOnlineBean = new ChaudharyMiscellanousOnlineBean();
		try{
			callableStatement = con.prepareCall("{call PROC_GET_Chaudhary_Miscellanous_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {		

				chaudharyMiscellanousOnlineBean.setRegistrationNo(resultSet.getString("registrationNo"));
				chaudharyMiscellanousOnlineBean.setStudentName(resultSet.getString("studentName"));
				chaudharyMiscellanousOnlineBean.setFatherName(resultSet.getString("fatherName"));
				chaudharyMiscellanousOnlineBean.setClasss(resultSet.getString("classs"));
				chaudharyMiscellanousOnlineBean.setMobileNo(resultSet.getString("mobileNo"));
				//chaudharyMiscellanousOnlineBean.setPaymentRemerks(resultSet.getString("paymentRemerks"));           
				chaudharyMiscellanousOnlineBean.setPurpose(resultSet.getString("purpose"));
				chaudharyMiscellanousOnlineBean.setReEnterFeePurpose(resultSet.getString("reEnterFeePurpose"));
				chaudharyMiscellanousOnlineBean.setFeesAmount(resultSet.getString("feesAmount"));
				chaudharyMiscellanousOnlineBean.setLateFee(resultSet.getString("lateFee"));
				chaudharyMiscellanousOnlineBean.setOtherFees(resultSet.getString("otherFees"));
				chaudharyMiscellanousOnlineBean.setTotalfees(resultSet.getString("totalfees")); 
				//chaudharyMiscellanousOnlineBean.setNameofDepositor(resultSet.getString("nameofDepositor"));
				//chaudharyMiscellanousOnlineBean.setContactNo(resultSet.getString("contactNo"));
				chaudharyMiscellanousOnlineBean.setAddress(resultSet.getString("address"));   

				chaudharyMiscellanousOnlineBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getNehuPayStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getGarawarStudentDetails(" + chaudharyMiscellanousOnlineBean + ") - END");
		return chaudharyMiscellanousOnlineBean;

	}
	public String insertNLUStudentDetails(NLUOnlineFormBean nluOnlineFormBean, String billerId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("insertNLUStudentDetails(" + nluOnlineFormBean + ") - START");
		logger.info("insertNLUStudentDetails---billerId : "+billerId);

		String responseString = null;
		/*try{
		callableStatement = con.prepareCall("{call PROC_NLU_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
		callableStatement.setString(1,nluOnlineFormBean.getStdName());
		callableStatement.setString(2,nluOnlineFormBean.getFatherName());
		callableStatement.setString(3,nluOnlineFormBean.getStdDOB());
		callableStatement.setString(4,nluOnlineFormBean.getRollno());
		callableStatement.setString(5,nluOnlineFormBean.getEmail());
		callableStatement.setString(6,nluOnlineFormBean.getMobile());
		callableStatement.setString(7,nluOnlineFormBean.getSelectCourse());
		callableStatement.setString(8,nluOnlineFormBean.getSelectNRI());
		callableStatement.setString(9,nluOnlineFormBean.getSelectSemester1());
		callableStatement.setString(10,nluOnlineFormBean.getRemarks());		
		callableStatement.setString(11,nluOnlineFormBean.getTotAmount());

		callableStatement.setString(12,nluOnlineFormBean.getRegisteredUserId());				
		callableStatement.setString(13,billerId);		

		callableStatement.registerOutParameter(14, Types.VARCHAR);
		callableStatement.registerOutParameter(15, Types.VARCHAR);
		callableStatement.registerOutParameter(16, Types.VARCHAR);

		callableStatement.execute(); 

		  responseString = callableStatement.getString(16); 
		  nluOnlineFormBean.setStudentRegistrationId(callableStatement.getString(15));
		  nluOnlineFormBean.setApplicationNo(callableStatement.getString(14));
		  logger.info("responseString : - " + responseString);

		 */
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,nluOnlineFormBean.getTotAmount());
			callableStatement.setString(2,nluOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,nluOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			nluOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			nluOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertNLUStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertNLUStudentDetails(" + nluOnlineFormBean + ") - END");
		return responseString;
	}
	public NLUOnlineFormBean getNLUStudentDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getNLUStudentDetails(" + applicationNo + ") - START");  
		NLUOnlineFormBean nluOnlineFormBean = new NLUOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_NLU_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	
				nluOnlineFormBean.setStdName(resultSet.getString("stdName"));
				nluOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				nluOnlineFormBean.setStdDOB(resultSet.getString("stdDOB"));
				nluOnlineFormBean.setRollno(resultSet.getString("rollno"));
				nluOnlineFormBean.setEmail(resultSet.getString("email"));
				nluOnlineFormBean.setMobile(resultSet.getString("mobile"));
				nluOnlineFormBean.setSelectCourse(resultSet.getString("selectCourse"));
				nluOnlineFormBean.setSelectNRI(resultSet.getString("selectNRI"));	            	
				nluOnlineFormBean.setSelectSemester1(resultSet.getString("selectSemester1"));
				nluOnlineFormBean.setRemarks(resultSet.getString("remarks"));	            	
				nluOnlineFormBean.setTotAmount(resultSet.getString("totAmount"));	            	
				nluOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getNLUStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getNLUStudentDetails(" + nluOnlineFormBean + ") - END");
		return nluOnlineFormBean;
	}
	public String insertDPSCStudentDetails(DPSCOnlineFormBean dpscOnlineFormBean, String billerId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("insertDPSCStudentDetails(" + dpscOnlineFormBean + ") - START");
		logger.info("insertDPSCStudentDetails---billerId : "+billerId);

		String responseString = null;
		/*try{
	callableStatement = con.prepareCall("{call PROC_DPSC_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
	callableStatement.setString(1,dpscOnlineFormBean.getAdmissionNo());
	callableStatement.setString(2,dpscOnlineFormBean.getStdName());
	callableStatement.setString(3,dpscOnlineFormBean.getFatherName());
	callableStatement.setString(4,dpscOnlineFormBean.getMotherName());
	callableStatement.setString(5,dpscOnlineFormBean.getStdClass());
	callableStatement.setString(6,dpscOnlineFormBean.getStdDOB());
	callableStatement.setString(7,dpscOnlineFormBean.getPlace());
	callableStatement.setString(8,dpscOnlineFormBean.getMobile());
	callableStatement.setString(9,dpscOnlineFormBean.getSelectSession());
	callableStatement.setString(10,dpscOnlineFormBean.getTutionFee());
	callableStatement.setString(11,dpscOnlineFormBean.getTransportFee());
	callableStatement.setString(12,dpscOnlineFormBean.getLateFee());
	callableStatement.setString(13,dpscOnlineFormBean.getOtherFee());
	callableStatement.setString(14,dpscOnlineFormBean.getRemarks());		
	callableStatement.setString(15,dpscOnlineFormBean.getTotAmount());

	callableStatement.setString(16,dpscOnlineFormBean.getRegisteredUserId());				
	callableStatement.setString(17,billerId);		

	callableStatement.registerOutParameter(18, Types.VARCHAR);
	callableStatement.registerOutParameter(19, Types.VARCHAR);
	callableStatement.registerOutParameter(20, Types.VARCHAR);

	callableStatement.execute(); 

	  responseString = callableStatement.getString(20); 
	  dpscOnlineFormBean.setStudentRegistrationId(callableStatement.getString(19));
	  dpscOnlineFormBean.setApplicationNo(callableStatement.getString(18));
	  logger.info("responseString : - " + responseString);
		 */


		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,dpscOnlineFormBean.getTotAmount());
			callableStatement.setString(2,dpscOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,dpscOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			dpscOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			dpscOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertDPSCStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertDPSCStudentDetails(" + dpscOnlineFormBean + ") - END");
		return responseString;
	}
	public DPSCOnlineFormBean getDPSCStudentDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getDPSCStudentDetails(" + applicationNo + ") - START");  
		DPSCOnlineFormBean dpscOnlineFormBean = new DPSCOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_DPSC_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		          
				dpscOnlineFormBean.setAdmissionNo(resultSet.getString("admissionNo"));
				dpscOnlineFormBean.setStdName(resultSet.getString("stdName"));
				dpscOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				dpscOnlineFormBean.setMotherName(resultSet.getString("motherName"));
				dpscOnlineFormBean.setStdClass(resultSet.getString("stdClass"));
				dpscOnlineFormBean.setStdDOB(resultSet.getString("stdDOB"));
				dpscOnlineFormBean.setPlace(resultSet.getString("place"));            	
				dpscOnlineFormBean.setMobile(resultSet.getString("mobile"));
				dpscOnlineFormBean.setSelectSession(resultSet.getString("selectSession"));
				dpscOnlineFormBean.setTutionFee(resultSet.getString("tutionFee"));	            	
				dpscOnlineFormBean.setTransportFee(resultSet.getString("transportFee"));
				dpscOnlineFormBean.setLateFee(resultSet.getString("lateFee"));
				dpscOnlineFormBean.setOtherFee(resultSet.getString("otherFee"));
				dpscOnlineFormBean.setRemarks(resultSet.getString("remarks"));	            	
				dpscOnlineFormBean.setTotAmount(resultSet.getString("totAmount"));	            	
				dpscOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getDPSCStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getDPSCStudentDetails(" + dpscOnlineFormBean + ") - END");
		return dpscOnlineFormBean;
	}








	public String insertNLU1StudentDetails(NLUOnlineFormBean nluOnlineFormBean, String billerId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("insertNLU1StudentDetails(" + nluOnlineFormBean + ") - START");
		logger.info("insertNLU1StudentDetails---billerId : "+billerId);

		String responseString = null;
		try{
			callableStatement = con.prepareCall("{call PROC_NLU1_StudentDetails(?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,nluOnlineFormBean.getStdName());
			callableStatement.setString(2,nluOnlineFormBean.getEmail());
			callableStatement.setString(3,nluOnlineFormBean.getMobile());	
			callableStatement.setString(4,nluOnlineFormBean.getPaymentPurpose());
			callableStatement.setString(5,nluOnlineFormBean.getRemarks());		
			callableStatement.setString(6,nluOnlineFormBean.getTotAmount());

			callableStatement.setString(7,nluOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(8,billerId);		

			callableStatement.registerOutParameter(9, Types.VARCHAR);
			callableStatement.registerOutParameter(10, Types.VARCHAR);
			callableStatement.registerOutParameter(11, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(11); 
			nluOnlineFormBean.setStudentRegistrationId(callableStatement.getString(10));
			nluOnlineFormBean.setApplicationNo(callableStatement.getString(9));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertNLU1StudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertNLU1StudentDetails(" + nluOnlineFormBean + ") - END");
		return responseString;
	}
	public NLUOnlineFormBean getNLU1StudentDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getNLU1StudentDetails(" + applicationNo + ") - START");  
		NLUOnlineFormBean nluOnlineFormBean = new NLUOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_NLU1_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	
				nluOnlineFormBean.setStdName(resultSet.getString("stdName"));            	
				nluOnlineFormBean.setEmail(resultSet.getString("email"));
				nluOnlineFormBean.setMobile(resultSet.getString("mobile"));	            	
				nluOnlineFormBean.setPaymentPurpose(resultSet.getString("paymentPurpose"));
				nluOnlineFormBean.setRemarks(resultSet.getString("remarks"));	            	
				nluOnlineFormBean.setTotAmount(resultSet.getString("totAmount"));	            	
				nluOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getNLU1StudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getNLU1StudentDetails(" + nluOnlineFormBean + ") - END");
		return nluOnlineFormBean;
	}
	public String insertAmricanStudentDetails(AmericanOnlineFormBean americanOnlineFormBean, String billerId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("insertDPSCStudentDetails(" + americanOnlineFormBean + ") - START");
		logger.info("insertDPSCStudentDetails---billerId : "+billerId);

		String responseString = null;
		try{
			callableStatement = con.prepareCall("{call PROC_American_School_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,americanOnlineFormBean.getFranchiseName());
			callableStatement.setString(2,americanOnlineFormBean.getFranchiseAddress());
			callableStatement.setString(3,americanOnlineFormBean.getSelectState());
			callableStatement.setString(4,americanOnlineFormBean.getEmailID());
			callableStatement.setString(5,americanOnlineFormBean.getMobileNumber());
			callableStatement.setString(6,americanOnlineFormBean.getFranchiseeFees());
			callableStatement.setString(7,americanOnlineFormBean.getToysGames());
			callableStatement.setString(8,americanOnlineFormBean.getFurnitureFixtures());
			callableStatement.setString(9,americanOnlineFormBean.getStudentKit());
			callableStatement.setString(10,americanOnlineFormBean.getSchoolKit());
			callableStatement.setString(11,americanOnlineFormBean.getOthers());
			callableStatement.setString(12,americanOnlineFormBean.getTotalFee());
			callableStatement.setString(13,americanOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(14,billerId);		

			callableStatement.registerOutParameter(15, Types.VARCHAR);
			callableStatement.registerOutParameter(16, Types.VARCHAR);
			callableStatement.registerOutParameter(17, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(17); 
			americanOnlineFormBean.setStudentRegistrationId(callableStatement.getString(16));
			americanOnlineFormBean.setApplicationNo(callableStatement.getString(15));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertDPSCStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("americanOnlineFormBean(" + americanOnlineFormBean + ") - END");
		return responseString;
	}
	public AmericanOnlineFormBean getAmricanStudentDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getAmricanStudentDetails(" + applicationNo + ") - START");  
		AmericanOnlineFormBean americanOnlineFormBean = new AmericanOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_American_School_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	
				americanOnlineFormBean.setFranchiseName(resultSet.getString("franchiseName"));
				americanOnlineFormBean.setFranchiseAddress(resultSet.getString("franchiseAddress"));
				americanOnlineFormBean.setSelectState(resultSet.getString("selectState"));
				americanOnlineFormBean.setEmailID(resultSet.getString("emailID"));
				americanOnlineFormBean.setMobileNumber(resultSet.getString("mobileNumber"));
				americanOnlineFormBean.setFranchiseeFees(resultSet.getString("franchiseeFees"));
				americanOnlineFormBean.setToysGames(resultSet.getString("toysGames"));
				americanOnlineFormBean.setFurnitureFixtures(resultSet.getString("furnitureFixtures"));	            	
				americanOnlineFormBean.setStudentKit(resultSet.getString("studentKit"));
				americanOnlineFormBean.setSchoolKit(resultSet.getString("schoolKit"));	            	
				americanOnlineFormBean.setOthers(resultSet.getString("others"));
				americanOnlineFormBean.setTotalFee(resultSet.getString("totalFee"));	
				americanOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getNLUStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getamericanOnlineFormBean(" + americanOnlineFormBean + ") - END");
		return americanOnlineFormBean;
	}
	public String insertPathFinderStudentDetails(PathFinderOnlineFormBean pathFinderOnlineFormBean, String billerId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("insertPathFinderStudentDetails(" + pathFinderOnlineFormBean + ") - START");
		logger.info("insertPathFinderStudentDetails---billerId : "+billerId);

		String responseString = null;
		try{
			callableStatement = con.prepareCall("{call PROC_PathFinder_School_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,pathFinderOnlineFormBean.getStudentName());
			callableStatement.setString(2,pathFinderOnlineFormBean.getStudentPhonrNo());
			callableStatement.setString(3,pathFinderOnlineFormBean.getFatherName());
			callableStatement.setString(4,pathFinderOnlineFormBean.getStudentEmailId());
			callableStatement.setString(5,pathFinderOnlineFormBean.getCourse());
			callableStatement.setString(6,pathFinderOnlineFormBean.getProgramme());
			callableStatement.setString(7,pathFinderOnlineFormBean.getTotalAmount());
			callableStatement.setString(8,pathFinderOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(9,billerId);		

			callableStatement.registerOutParameter(10, Types.VARCHAR);
			callableStatement.registerOutParameter(11, Types.VARCHAR);
			callableStatement.registerOutParameter(12, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(12); 
			pathFinderOnlineFormBean.setStudentRegistrationId(callableStatement.getString(11));
			pathFinderOnlineFormBean.setApplicationNo(callableStatement.getString(10));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertDPSCStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("pathFinderOnlineFormBean(" + pathFinderOnlineFormBean + ") - END");
		return responseString;
	}
	public PathFinderOnlineFormBean getpathFinderStudentDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getAmricanStudentDetails(" + applicationNo + ") - START");  
		PathFinderOnlineFormBean pathFinderOnlineFormBean = new PathFinderOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_PathFinder_School_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	
				pathFinderOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				pathFinderOnlineFormBean.setStudentPhonrNo(resultSet.getString("studentPhonrNo"));
				pathFinderOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				pathFinderOnlineFormBean.setStudentEmailId(resultSet.getString("studentEmailId"));
				pathFinderOnlineFormBean.setCourse(resultSet.getString("course"));
				pathFinderOnlineFormBean.setProgramme(resultSet.getString("programme"));
				pathFinderOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));
				pathFinderOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getNLUStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("pathFinderOnlineFormBean(" + pathFinderOnlineFormBean + ") - END");
		return pathFinderOnlineFormBean;
	}
	public String insertKashiTechnologyStudentDetails(FeesForm feesForm, String billerId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("insertKashiTechnologyStudentDetails(" + feesForm + ") - START");
		logger.info("insertKashiTechnologyStudentDetails---billerId : "+billerId);

		String responseString = null;
		/*try{
	callableStatement = con.prepareCall("{call PROC_Kashi_Technology_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
	callableStatement.setString(1,feesForm.getFeePayment());
	callableStatement.setString(2,feesForm.getSelectFeeSession());
	callableStatement.setString(3,feesForm.getStudentName());
	callableStatement.setString(4,feesForm.getGuardianName());
	callableStatement.setString(5,feesForm.getMobileNo());
	callableStatement.setString(6,feesForm.getSelectCourse());
	callableStatement.setString(7,feesForm.getSelectBranch());
	callableStatement.setString(8,feesForm.getSelectYear());
	callableStatement.setString(9,feesForm.getCollegeFee());
	callableStatement.setString(10,feesForm.getHostelFee());
	callableStatement.setString(11,feesForm.getTransportFee());
	callableStatement.setString(12,feesForm.getRemarks());
	callableStatement.setString(13,feesForm.getTotalFee());
	callableStatement.setString(14,feesForm.getRollno());	
	callableStatement.setString(15,feesForm.getRegisteredUserId());		
	callableStatement.setString(16,billerId);		

	callableStatement.registerOutParameter(17, Types.VARCHAR);
	callableStatement.registerOutParameter(18, Types.VARCHAR);
	callableStatement.registerOutParameter(19, Types.VARCHAR);

	callableStatement.execute(); 

	  responseString = callableStatement.getString(19); 
	  feesForm.setStudentRegistrationId(callableStatement.getString(18));
	  feesForm.setApplicationNo(callableStatement.getString(17));
	  logger.info("responseString : - " + responseString);
		 */try{

			 callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			 callableStatement.setString(1,feesForm.getTotalFee());
			 callableStatement.setString(2,feesForm.getApplicationNo());
			 callableStatement.setString(3,feesForm.getRegisteredUserId());
			 callableStatement.setString(4,billerId);


			 callableStatement.registerOutParameter(5, Types.VARCHAR);
			 callableStatement.registerOutParameter(6, Types.VARCHAR);
			 callableStatement.registerOutParameter(7, Types.VARCHAR);
			 callableStatement.execute(); 
			 responseString = callableStatement.getString(7); 
			 feesForm.setStudentRegistrationId(callableStatement.getString(6));
			 feesForm.setApplicationNo(callableStatement.getString(5));
			 logger.info("responseString : - " + responseString);



		 }catch(Exception e){
			 e.printStackTrace();
		 }
		 finally {
			 try {
				 if (resultSet != null) {
					 resultSet.close();
				 }
				 if (callableStatement != null) {
					 callableStatement.close();
				 }
				 if (con != null) {
					 con.close();
				 }
			 } catch (Exception e) {
				 logger.error("Exception inside catch insertDPSCStudentDetails"+e);
			 }
		 }
		 long endTime = System.currentTimeMillis();
		 logger.info("** EXECUTION TIME **" + (endTime - startTime));
		 logger.info("feesForm(" + feesForm + ") - END");
		 return responseString;
	}
	public FeesForm getKashiTechnologyStudentDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getKashiTechnologyStudentDetails(" + applicationNo + ") - START");  
		FeesForm feesForm = new FeesForm();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_Kashi_Technology_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	
				feesForm.setFeePayment(resultSet.getString("feePayment"));
				feesForm.setSelectFeeSession(resultSet.getString("selectFeeSession"));
				feesForm.setStudentName(resultSet.getString("studentName"));
				feesForm.setGuardianName(resultSet.getString("guardianName"));
				feesForm.setMobileNo(resultSet.getString("mobileNo"));
				feesForm.setSelectCourse(resultSet.getString("selectCourse"));
				feesForm.setSelectBranch(resultSet.getString("selectBranch"));
				feesForm.setSelectYear(resultSet.getString("selectYear"));
				feesForm.setCollegeFee(resultSet.getString("collegeFee"));
				feesForm.setHostelFee(resultSet.getString("hostelFee"));
				feesForm.setTransportFee(resultSet.getString("transportFee"));
				feesForm.setRemarks(resultSet.getString("remarks"));
				feesForm.setTotalFee(resultSet.getString("totalFee")); 
				feesForm.setRollno(resultSet.getString("rollno")); 
				feesForm.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getNLUStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("feesForm(" + feesForm + ") - END");
		return feesForm;
	}
	public String insertThangamInnovativeStudentDetails(ThangamInnovativeOnlineFormBean thangamInnovativeOnlineFormBean, String billerId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("insertThangamInnovativeStudentDetails(" + thangamInnovativeOnlineFormBean + ") - START");
		logger.info("insertThangamInnovativeStudentDetails---billerId : "+billerId);

		String responseString = null;
		try{
			callableStatement = con.prepareCall("{call PROC_Thangam_Innovative_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,thangamInnovativeOnlineFormBean.getStudentGRNO());
			callableStatement.setString(2,thangamInnovativeOnlineFormBean.getStudentName());
			callableStatement.setString(3,thangamInnovativeOnlineFormBean.getClassandSection());
			callableStatement.setString(4,thangamInnovativeOnlineFormBean.getFatherandMotherName());
			callableStatement.setString(5,thangamInnovativeOnlineFormBean.getSchoolFee());
			callableStatement.setString(6,thangamInnovativeOnlineFormBean.getTransportFee());
			callableStatement.setString(7,thangamInnovativeOnlineFormBean.getHealthDrinkSnacksFee());
			callableStatement.setString(8,thangamInnovativeOnlineFormBean.getLunchFee());
			callableStatement.setString(9,thangamInnovativeOnlineFormBean.getLateFee());
			callableStatement.setString(10,thangamInnovativeOnlineFormBean.getOthersFee());
			callableStatement.setString(11,thangamInnovativeOnlineFormBean.getRemarks());
			callableStatement.setString(12,thangamInnovativeOnlineFormBean.getMobileNO());
			callableStatement.setString(13,thangamInnovativeOnlineFormBean.getEmail());
			callableStatement.setString(14,thangamInnovativeOnlineFormBean.getTotalAmount());	
			callableStatement.setString(15,thangamInnovativeOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(16,billerId);

			callableStatement.registerOutParameter(17, Types.VARCHAR);
			callableStatement.registerOutParameter(18, Types.VARCHAR);
			callableStatement.registerOutParameter(19, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(19); 
			thangamInnovativeOnlineFormBean.setStudentRegistrationId(callableStatement.getString(18));
			thangamInnovativeOnlineFormBean.setApplicationNo(callableStatement.getString(17));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertHydroPowerStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("thangamInnovativeOnlineFormBean(" + thangamInnovativeOnlineFormBean + ") - END");
		return responseString;
	}

	public ThangamInnovativeOnlineFormBean getThangamInnovativeStudentDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getThangamInnovativeStudentDetails(" + applicationNo + ") - START");  
		ThangamInnovativeOnlineFormBean thangamInnovativeOnlineFormBean = new ThangamInnovativeOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_Thangam_Innovative_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	
				thangamInnovativeOnlineFormBean.setStudentGRNO(resultSet.getString("studentGRNO"));
				thangamInnovativeOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				thangamInnovativeOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				thangamInnovativeOnlineFormBean.setClassandSection(resultSet.getString("classandSection"));
				thangamInnovativeOnlineFormBean.setFatherandMotherName(resultSet.getString("fatherandMotherName"));
				thangamInnovativeOnlineFormBean.setSchoolFee(resultSet.getString("schoolFee"));
				thangamInnovativeOnlineFormBean.setTransportFee(resultSet.getString("transportFee"));
				thangamInnovativeOnlineFormBean.setHealthDrinkSnacksFee(resultSet.getString("healthDrinkSnacksFee"));
				thangamInnovativeOnlineFormBean.setLunchFee(resultSet.getString("lunchFee"));
				thangamInnovativeOnlineFormBean.setLateFee(resultSet.getString("lateFee"));
				thangamInnovativeOnlineFormBean.setOthersFee(resultSet.getString("othersFee"));
				thangamInnovativeOnlineFormBean.setRemarks(resultSet.getString("remarks"));
				thangamInnovativeOnlineFormBean.setMobileNO(resultSet.getString("mobileNO")); 
				thangamInnovativeOnlineFormBean.setEmail(resultSet.getString("email"));
				thangamInnovativeOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));
				thangamInnovativeOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getNLUStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getThangamInnovativeStudentDetails(" + thangamInnovativeOnlineFormBean + ") - END");
		return thangamInnovativeOnlineFormBean;
	}
	public String insertThangamKidzeeStudentDetails(ThangamKidzeeOnlineFormBean thangamKidzeeOnlineFormBean, String billerId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("insertThangamKidzeeStudentDetails(" + thangamKidzeeOnlineFormBean + ") - START");
		logger.info("insertThangamKidzeeStudentDetails---billerId : "+billerId);

		String responseString = null;
		try{
			callableStatement = con.prepareCall("{call PROC_Thangam_Kidzee_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,thangamKidzeeOnlineFormBean.getStudentGRNO());
			callableStatement.setString(2,thangamKidzeeOnlineFormBean.getStudentName());
			callableStatement.setString(3,thangamKidzeeOnlineFormBean.getClassandSection());
			callableStatement.setString(4,thangamKidzeeOnlineFormBean.getFatherandMotherName());
			callableStatement.setString(5,thangamKidzeeOnlineFormBean.getSchoolFee());
			callableStatement.setString(6,thangamKidzeeOnlineFormBean.getTransportFee());
			callableStatement.setString(7,thangamKidzeeOnlineFormBean.getLateFee());
			callableStatement.setString(8,thangamKidzeeOnlineFormBean.getOthersFee());
			callableStatement.setString(9,thangamKidzeeOnlineFormBean.getRemarks());
			callableStatement.setString(10,thangamKidzeeOnlineFormBean.getMobileNO());
			callableStatement.setString(11,thangamKidzeeOnlineFormBean.getEmail());
			callableStatement.setString(12,thangamKidzeeOnlineFormBean.getTotalAmount());	
			callableStatement.setString(13,thangamKidzeeOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(14,billerId);

			callableStatement.registerOutParameter(15, Types.VARCHAR);
			callableStatement.registerOutParameter(16, Types.VARCHAR);
			callableStatement.registerOutParameter(17, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(17); 
			thangamKidzeeOnlineFormBean.setStudentRegistrationId(callableStatement.getString(16));
			thangamKidzeeOnlineFormBean.setApplicationNo(callableStatement.getString(15));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertThangamKidzeeStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("thangamKidzeeOnlineFormBean(" + thangamKidzeeOnlineFormBean + ") - END");
		return responseString;
	}
	public ThangamKidzeeOnlineFormBean getThangamKidzeeStudentDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getThangamKidzeeStudentDetails(" + applicationNo + ") - START");  
		ThangamKidzeeOnlineFormBean thangamKidzeeOnlineFormBean = new ThangamKidzeeOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_Thangam_Kidzee_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	
				thangamKidzeeOnlineFormBean.setStudentGRNO(resultSet.getString("studentGRNO"));
				thangamKidzeeOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				thangamKidzeeOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				thangamKidzeeOnlineFormBean.setClassandSection(resultSet.getString("classandSection"));
				thangamKidzeeOnlineFormBean.setFatherandMotherName(resultSet.getString("fatherandMotherName"));
				thangamKidzeeOnlineFormBean.setSchoolFee(resultSet.getString("schoolFee"));
				thangamKidzeeOnlineFormBean.setTransportFee(resultSet.getString("transportFee"));
				thangamKidzeeOnlineFormBean.setLateFee(resultSet.getString("lateFee"));
				thangamKidzeeOnlineFormBean.setOthersFee(resultSet.getString("othersFee"));
				thangamKidzeeOnlineFormBean.setRemarks(resultSet.getString("remarks"));
				thangamKidzeeOnlineFormBean.setMobileNO(resultSet.getString("mobileNO")); 
				thangamKidzeeOnlineFormBean.setEmail(resultSet.getString("email"));
				thangamKidzeeOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));
				thangamKidzeeOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getThangamKidzeeStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getThangamKidzeeStudentDetails(" + thangamKidzeeOnlineFormBean + ") - END");
		return thangamKidzeeOnlineFormBean;
	}

	public String insertCUOHaryanaStudentDetails(CUOHaryanaOnlineFormBean cuoHaryanaOnlineFormBean, String billerId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("insertCUOHaryanaStudentDetails(" + cuoHaryanaOnlineFormBean + ") - START");
		logger.info("insertCUOHaryanaStudentDetails---billerId : "+billerId);

		String responseString = null;
		try{
			/*
			 * callableStatement = con.
			 * prepareCall("{call PROC_COUHaryana_StudentRegistration(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}"
			 * ); callableStatement.setString(1,cuoHaryanaOnlineFormBean.getStdName());
			 * callableStatement.setString(2,cuoHaryanaOnlineFormBean.getGender());
			 * callableStatement.setString(3,cuoHaryanaOnlineFormBean.getFathername());
			 * callableStatement.setString(4,cuoHaryanaOnlineFormBean.getMothername());
			 * callableStatement.setString(5,cuoHaryanaOnlineFormBean.getEnrollmentNo());
			 * callableStatement.setString(6,cuoHaryanaOnlineFormBean.getSession());
			 * callableStatement.setString(7,cuoHaryanaOnlineFormBean.getNameOfExam());
			 * callableStatement.setString(8,cuoHaryanaOnlineFormBean.getPassingYear());
			 * callableStatement.setString(9,cuoHaryanaOnlineFormBean.getResult());
			 * callableStatement.setString(10,cuoHaryanaOnlineFormBean.getDistrict());
			 * callableStatement.setString(11,cuoHaryanaOnlineFormBean.getState());
			 * callableStatement.setString(12,cuoHaryanaOnlineFormBean.getPinCode());
			 * callableStatement.setString(13,cuoHaryanaOnlineFormBean.getEmail());
			 * callableStatement.setString(14,cuoHaryanaOnlineFormBean.getMobileno());
			 * 
			 * callableStatement.setString(15,cuoHaryanaOnlineFormBean.getAdharNo());
			 * callableStatement.setString(16,cuoHaryanaOnlineFormBean.getParticipation());
			 * callableStatement.setString(17,cuoHaryanaOnlineFormBean.getDateOfPay());
			 * callableStatement.setString(18,cuoHaryanaOnlineFormBean.getRegistrationFee())
			 * ; callableStatement.setString(19,cuoHaryanaOnlineFormBean.getPhotoProof());
			 * 
			 * callableStatement.setString(20,cuoHaryanaOnlineFormBean.getRegisteredUserId()
			 * ); callableStatement.setString(21,billerId);
			 * 
			 * callableStatement.registerOutParameter(22, Types.VARCHAR);
			 * callableStatement.registerOutParameter(23, Types.VARCHAR);
			 * callableStatement.registerOutParameter(24, Types.VARCHAR);
			 * 
			 * callableStatement.execute();
			 * 
			 * responseString = callableStatement.getString(24);
			 * cuoHaryanaOnlineFormBean.setStudentRegistrationId(callableStatement.getString
			 * (23));
			 * cuoHaryanaOnlineFormBean.setApplicationNo(callableStatement.getString(22));
			 * logger.info("responseString : - " + responseString);
			 */
			//try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,cuoHaryanaOnlineFormBean.getRegistrationFee());
			callableStatement.setString(2,cuoHaryanaOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,cuoHaryanaOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			cuoHaryanaOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			cuoHaryanaOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);




		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertCUOHaryanaStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertCUOHaryanaStudentDetails(" + cuoHaryanaOnlineFormBean + ") - END");
		return responseString;
	}
	public CUOHaryanaOnlineFormBean getCUOHaryanaStudentDetails(String applicationNo)
	{
		logger.info("<Start > getCUOHaryanaStudentDetails   applicationNo : "+applicationNo);
		CUOHaryanaOnlineFormBean cuoHaryanaOnlineFormBean =new CUOHaryanaOnlineFormBean();


		try{
			callableStatement = con.prepareCall("{call PROC_GET_CUOHaryana_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	
				cuoHaryanaOnlineFormBean.setStdName(resultSet.getString("stdName"));
				cuoHaryanaOnlineFormBean.setGender(resultSet.getString("gender"));
				cuoHaryanaOnlineFormBean.setFathername(resultSet.getString("fathername"));
				cuoHaryanaOnlineFormBean.setMothername(resultSet.getString("mothername"));
				cuoHaryanaOnlineFormBean.setEnrollmentNo(resultSet.getString("enrollmentNo"));
				cuoHaryanaOnlineFormBean.setSession(resultSet.getString("session"));
				cuoHaryanaOnlineFormBean.setNameOfExam(resultSet.getString("nameOfExam"));
				cuoHaryanaOnlineFormBean.setPassingYear(resultSet.getString("passingYear"));
				cuoHaryanaOnlineFormBean.setResult(resultSet.getString("result"));
				cuoHaryanaOnlineFormBean.setDistrict(resultSet.getString("district"));
				cuoHaryanaOnlineFormBean.setState(resultSet.getString("state"));
				cuoHaryanaOnlineFormBean.setPinCode(resultSet.getString("pinCode"));
				cuoHaryanaOnlineFormBean.setEmail(resultSet.getString("email"));
				cuoHaryanaOnlineFormBean.setMobileno(resultSet.getString("mobileno"));
				cuoHaryanaOnlineFormBean.setAdharNo(resultSet.getString("adharNo"));
				cuoHaryanaOnlineFormBean.setParticipation(resultSet.getString("participation"));
				cuoHaryanaOnlineFormBean.setDateOfPay(resultSet.getString("dateOfPay"));
				cuoHaryanaOnlineFormBean.setRegistrationFee(resultSet.getString("registrationFee"));
				cuoHaryanaOnlineFormBean.setPhotoProof(resultSet.getString("photoProof"));
				cuoHaryanaOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getCUOHaryanaStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();

		logger.info("getCUOHaryanaStudentDetails(" + cuoHaryanaOnlineFormBean + ") - END");	
		return cuoHaryanaOnlineFormBean;
	}
	public ArrayList<String> getAllStatesName()
	{
		ArrayList<String> ListofAllState=new ArrayList<String>();
		try{
			callableStatement = con.prepareCall("{call PROC_GET_AllStateName()}");

			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            	

				ListofAllState.add(resultSet.getString("State_Name"));           
			}
		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getAllStatesName"+e);
			}	
		}

		return ListofAllState;

	}
	public String insertCUOKashmirStudentDetails(CUOKashmirOnlineFormBean cuoKashmirFormBean, String billerId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("insertCUOKashmirStudentDetails(" + cuoKashmirFormBean + ") - START");
		logger.info("insertCUOKashmirStudentDetails---billerId : "+billerId);

		String responseString = null;
		try{
			callableStatement = con.prepareCall("{call PROC_COUKashmir_StudentRegistration(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,cuoKashmirFormBean.getNames());
			callableStatement.setString(2,cuoKashmirFormBean.getMobileNo());
			callableStatement.setString(3,cuoKashmirFormBean.getEmailId());
			callableStatement.setString(4,cuoKashmirFormBean.getApplicationFormNo());
			callableStatement.setString(5,cuoKashmirFormBean.getSemester());
			callableStatement.setString(6,cuoKashmirFormBean.getAmount());
			callableStatement.setString(7,cuoKashmirFormBean.getEnrollmentNo());
			callableStatement.setString(8,cuoKashmirFormBean.getNotificationNo());
			callableStatement.setString(9,cuoKashmirFormBean.getPostAppliedFor());
			callableStatement.setString(10,cuoKashmirFormBean.getNotificationDate());
			callableStatement.setString(11,cuoKashmirFormBean.getEmployementType());
			callableStatement.setString(12,cuoKashmirFormBean.getDepartment());
			callableStatement.setString(13,cuoKashmirFormBean.getEmployeeCode());
			callableStatement.setString(14,cuoKashmirFormBean.getAmountToRefund());

			callableStatement.setString(15,cuoKashmirFormBean.getAmountAdvanced());
			callableStatement.setString(16,cuoKashmirFormBean.getAddressParentage());
			callableStatement.setString(17,cuoKashmirFormBean.getInformationTitle());
			callableStatement.setString(18,cuoKashmirFormBean.getAddress());
			callableStatement.setString(19,cuoKashmirFormBean.getEnrollmentNoFormNo());

			callableStatement.setString(20,cuoKashmirFormBean.getPurpose());
			callableStatement.setString(21,cuoKashmirFormBean.getTenderTitle());
			callableStatement.setString(22,cuoKashmirFormBean.getTenderNoticeNo());
			callableStatement.setString(23,cuoKashmirFormBean.getGstNO());
			callableStatement.setString(24,cuoKashmirFormBean.getPaymentType());
			callableStatement.setString(25,cuoKashmirFormBean.getCandidateName());
			callableStatement.setString(26,cuoKashmirFormBean.getParentage());
			callableStatement.setString(27,cuoKashmirFormBean.getProgrameName());
			callableStatement.setString(28,cuoKashmirFormBean.getFeeAmount());
			callableStatement.setString(29,cuoKashmirFormBean.getFeeTypes());
			callableStatement.setString(30,cuoKashmirFormBean.getNameofSupplier());


			callableStatement.setString(31,cuoKashmirFormBean.getRegisteredUserId());				
			callableStatement.setString(32,billerId);

			callableStatement.registerOutParameter(33, Types.VARCHAR);
			callableStatement.registerOutParameter(34, Types.VARCHAR);
			callableStatement.registerOutParameter(35, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(35); 
			cuoKashmirFormBean.setStudentRegistrationId(callableStatement.getString(34));
			cuoKashmirFormBean.setApplicationNo(callableStatement.getString(33));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertCUOKashmirStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertCUOKashmirStudentDetails(" + cuoKashmirFormBean + ") - END");
		return responseString;	
	}

	public CUOKashmirOnlineFormBean getCUOKashmirStudentDetails(String applicationNo)
	{
		logger.info("<Start > getCUOHaryanaStudentDetails   applicationNo : "+applicationNo);
		CUOKashmirOnlineFormBean cuoKashmirOnlineFormBean =new CUOKashmirOnlineFormBean();


		try{
			callableStatement = con.prepareCall("{call PROC_GET_CUOKashmir_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	

				cuoKashmirOnlineFormBean.setFeeTypes(resultSet.getString("feeTypes"));
				cuoKashmirOnlineFormBean.setNames(resultSet.getString("names"));
				cuoKashmirOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));
				cuoKashmirOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				cuoKashmirOnlineFormBean.setApplicationFormNo(resultSet.getString("applicationFormNo"));
				cuoKashmirOnlineFormBean.setSemester(resultSet.getString("semester"));
				cuoKashmirOnlineFormBean.setAmount(resultSet.getString("amount"));
				cuoKashmirOnlineFormBean.setEnrollmentNo(resultSet.getString("enrollmentNo"));
				cuoKashmirOnlineFormBean.setNotificationNo(resultSet.getString("notificationNo"));
				cuoKashmirOnlineFormBean.setPostAppliedFor(resultSet.getString("postAppliedFor"));
				cuoKashmirOnlineFormBean.setNotificationDate(resultSet.getString("notificationDate"));
				cuoKashmirOnlineFormBean.setEmployementType(resultSet.getString("employementType"));
				cuoKashmirOnlineFormBean.setDepartment(resultSet.getString("department"));
				cuoKashmirOnlineFormBean.setEmployeeCode(resultSet.getString("employeeCode"));
				cuoKashmirOnlineFormBean.setAmountToRefund(resultSet.getString("amountToRefund"));
				cuoKashmirOnlineFormBean.setAmountAdvanced(resultSet.getString("amountAdvanced"));
				cuoKashmirOnlineFormBean.setAddressParentage(resultSet.getString("addressParentage"));
				cuoKashmirOnlineFormBean.setInformationTitle(resultSet.getString("informationTitle"));
				cuoKashmirOnlineFormBean.setAddress(resultSet.getString("address"));
				cuoKashmirOnlineFormBean.setEnrollmentNoFormNo(resultSet.getString("enrollmentNoFormNo"));
				cuoKashmirOnlineFormBean.setPurpose(resultSet.getString("purpose"));
				cuoKashmirOnlineFormBean.setTenderTitle(resultSet.getString("tenderTitle"));
				cuoKashmirOnlineFormBean.setTenderNoticeNo(resultSet.getString("tenderNoticeNo"));
				cuoKashmirOnlineFormBean.setGstNO(resultSet.getString("gstNO"));
				cuoKashmirOnlineFormBean.setPaymentType(resultSet.getString("paymentType"));
				cuoKashmirOnlineFormBean.setCandidateName(resultSet.getString("candidateName"));
				cuoKashmirOnlineFormBean.setParentage(resultSet.getString("parentage"));
				cuoKashmirOnlineFormBean.setProgrameName(resultSet.getString("programeName"));
				cuoKashmirOnlineFormBean.setFeeAmount(resultSet.getString("feeAmount"));
				cuoKashmirOnlineFormBean.setNameofSupplier(resultSet.getString("nameofSupplier"));

				cuoKashmirOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getCUOKashmirStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();

		logger.info("getCUOHaryanaStudentDetails(" + cuoKashmirOnlineFormBean + ") - END");	
		return cuoKashmirOnlineFormBean;	
	}
	public String insertRoyalDentalStudentDetails(RoyalDentalOnlineFormBean royalDentalOnlineFormBean, String billerId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("insertRoyalDentalStudentDetails(" + royalDentalOnlineFormBean + ") - START");
		logger.info("insertRoyalDentalStudentDetails---billerId : "+billerId);

		String responseString = null;
		/*try{
	callableStatement = con.prepareCall("{call PROC_Royal_Dental_StdentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
	callableStatement.setString(1,royalDentalOnlineFormBean.getStudentName());
	callableStatement.setString(2,royalDentalOnlineFormBean.getAdmissionNo());
	callableStatement.setString(3,royalDentalOnlineFormBean.getFatherName());
	callableStatement.setString(4,royalDentalOnlineFormBean.getCity());
	callableStatement.setString(5,royalDentalOnlineFormBean.getState());
	callableStatement.setString(6,royalDentalOnlineFormBean.getMobileNO());
	callableStatement.setString(7,royalDentalOnlineFormBean.getEmail());
	callableStatement.setString(8,royalDentalOnlineFormBean.getBranchName());
	callableStatement.setString(9,royalDentalOnlineFormBean.getAcademicYear());
	callableStatement.setString(10,royalDentalOnlineFormBean.getCourseName());
	callableStatement.setString(11,royalDentalOnlineFormBean.getFeeType());
	callableStatement.setString(12,royalDentalOnlineFormBean.getRemarks());
	callableStatement.setString(13,royalDentalOnlineFormBean.getTotalAmount());	


	callableStatement.setString(14,royalDentalOnlineFormBean.getRegisteredUserId());				
	callableStatement.setString(15,billerId);

	callableStatement.registerOutParameter(16, Types.VARCHAR);
	callableStatement.registerOutParameter(17, Types.VARCHAR);
	callableStatement.registerOutParameter(18, Types.VARCHAR);

	callableStatement.execute(); 

	responseString = callableStatement.getString(18); 
	royalDentalOnlineFormBean.setStudentRegistrationId(callableStatement.getString(17));
	royalDentalOnlineFormBean.setApplicationNo(callableStatement.getString(16));
	logger.info("responseString : - " + responseString);
		 */


		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,royalDentalOnlineFormBean.getTotalAmount());
			callableStatement.setString(2,royalDentalOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,royalDentalOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			royalDentalOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			royalDentalOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);

		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertRoyalDentalStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("royalDentalOnlineFormBean(" + royalDentalOnlineFormBean + ") - END");
		return responseString;
	}
	public RoyalDentalOnlineFormBean getRoyalDentalStudentDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getRoyalDentalStudentDetails(" + applicationNo + ") - START");  
		RoyalDentalOnlineFormBean royalDentalOnlineFormBean = new RoyalDentalOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_Royal_Dental_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	

				royalDentalOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				royalDentalOnlineFormBean.setAdmissionNo(resultSet.getString("admissionNo"));
				royalDentalOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				royalDentalOnlineFormBean.setCity(resultSet.getString("city"));
				royalDentalOnlineFormBean.setState(resultSet.getString("state"));
				royalDentalOnlineFormBean.setMobileNO(resultSet.getString("mobileNo"));
				royalDentalOnlineFormBean.setEmail(resultSet.getString("email"));
				royalDentalOnlineFormBean.setBranchName(resultSet.getString("branchName"));
				royalDentalOnlineFormBean.setAcademicYear(resultSet.getString("academicYear"));
				royalDentalOnlineFormBean.setCourseName(resultSet.getString("courseName")); 
				royalDentalOnlineFormBean.setFeeType(resultSet.getString("feeType"));
				royalDentalOnlineFormBean.setRemarks(resultSet.getString("remarks"));
				royalDentalOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));
				royalDentalOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getRoyalDentalStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getRoyalDentalStudentDetails(" + royalDentalOnlineFormBean + ") - END");
		return royalDentalOnlineFormBean;
	}
	public String insertVishalInstituteStudentDetails(VishalInstOnlineFormBean vishalInstOnlineFormBean, String billerId)
	{
		long startTime = System.currentTimeMillis();
		logger.info("insertVishalInstituteStudentDetails(" + vishalInstOnlineFormBean + ") - START");
		logger.info("insertVishalInstituteStudentDetails---billerId : "+billerId);

		String responseString = null;
		try{
			callableStatement = con.prepareCall("{call PROC_Vishal_Institue_StdentDetails(?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,vishalInstOnlineFormBean.getStudentName());
			callableStatement.setString(2,vishalInstOnlineFormBean.getFatherName());
			callableStatement.setString(3,vishalInstOnlineFormBean.getTemporaryId());
			callableStatement.setString(4,vishalInstOnlineFormBean.getMobileNO());
			callableStatement.setString(5,vishalInstOnlineFormBean.getTotalFee());



			callableStatement.setString(6,vishalInstOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(7,billerId);

			callableStatement.registerOutParameter(8, Types.VARCHAR);
			callableStatement.registerOutParameter(9, Types.VARCHAR);
			callableStatement.registerOutParameter(10, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(10); 
			vishalInstOnlineFormBean.setStudentRegistrationId(callableStatement.getString(9));
			vishalInstOnlineFormBean.setApplicationNo(callableStatement.getString(8));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertVishalInstituteStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("vishalInstOnlineFormBean(" + vishalInstOnlineFormBean + ") - END");
		return responseString;
	}
	public VishalInstOnlineFormBean getVishalInstStudentDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getVishalInstStudentDetails(" + applicationNo + ") - START");  
		VishalInstOnlineFormBean vishalInstOnlineFormBean = new VishalInstOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_Vishal_Institute_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	

				vishalInstOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				vishalInstOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				vishalInstOnlineFormBean.setTemporaryId(resultSet.getString("temporaryId"));
				vishalInstOnlineFormBean.setMobileNO(resultSet.getString("mobileNO"));
				vishalInstOnlineFormBean.setTotalFee(resultSet.getString("totalFee"));


				vishalInstOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getVishalInstStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getVishalInstStudentDetails(" + vishalInstOnlineFormBean + ") - END");
		return vishalInstOnlineFormBean;

	}
	public String insertFeePaymentStudentDetails(FeePaymentOnlineFormBean feePaymentOnlineFormBean,String billerId){

		long startTime = System.currentTimeMillis();
		logger.info("insertFeePaymentStudentDetails(" + feePaymentOnlineFormBean + ") - START");
		logger.info("insertFeePaymentStudentDetails---billerId : "+billerId);

		String responseString = null;
		try{
			callableStatement = con.prepareCall("{call PROC_Fee_Payment_StdentDetails_new(?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,feePaymentOnlineFormBean.getStudent());
			callableStatement.setString(2,feePaymentOnlineFormBean.getRollNo());
			callableStatement.setString(3,feePaymentOnlineFormBean.getStudentName());
			callableStatement.setString(4,feePaymentOnlineFormBean.getDob());
			callableStatement.setString(5,feePaymentOnlineFormBean.getFatherName());
			callableStatement.setString(6,feePaymentOnlineFormBean.getCourse());
			callableStatement.setString(7,feePaymentOnlineFormBean.getPattern());
			callableStatement.setString(8,feePaymentOnlineFormBean.getDuration());
			callableStatement.setString(9,feePaymentOnlineFormBean.getTotalAmount());



			callableStatement.setString(10,feePaymentOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(11,billerId);

			callableStatement.registerOutParameter(12, Types.VARCHAR);
			callableStatement.registerOutParameter(13, Types.VARCHAR);
			callableStatement.registerOutParameter(14, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(14); 
			feePaymentOnlineFormBean.setStudentRegistrationId(callableStatement.getString(13));
			feePaymentOnlineFormBean.setApplicationNo(callableStatement.getString(12));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertFeePaymentStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("feePaymentOnlineFormBean(" + feePaymentOnlineFormBean + ") - END");
		return responseString;	
	}
	public FeePaymentOnlineFormBean getFeePaymentStudentDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getFeePaymentStudentDetails(" + applicationNo + ") - START");  
		FeePaymentOnlineFormBean feePaymentOnlineFormBean = new FeePaymentOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_FEE_PAYMENT_STUDENTDETAILS_new(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	
				feePaymentOnlineFormBean.setStudent(resultSet.getString("student"));
				feePaymentOnlineFormBean.setRollNo(resultSet.getString("rollNo"));
				feePaymentOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				feePaymentOnlineFormBean.setDob(resultSet.getString("DateOfBirth"));
				feePaymentOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				feePaymentOnlineFormBean.setCourse(resultSet.getString("course"));
				feePaymentOnlineFormBean.setPattern(resultSet.getString("pattern"));
				feePaymentOnlineFormBean.setDuration(resultSet.getString("duration"));

				feePaymentOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));


				feePaymentOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getFeePaymentStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getFeePaymentStudentDetails(" + feePaymentOnlineFormBean + ") - END");
		return feePaymentOnlineFormBean;
	}
	public String insertFeePayment1StudentDetails(FeePayment1OnlineFormBean feePayment1OnlineFormBean,String billerId){

		long startTime = System.currentTimeMillis();
		logger.info("insertFeePayment1StudentDetails(" + feePayment1OnlineFormBean + ") - START");
		logger.info("insertFeePayment1StudentDetails---billerId : "+billerId);

		String responseString = null;
		try{
			callableStatement = con.prepareCall("{call PROC_Fee_Payment1_StdentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,feePayment1OnlineFormBean.getScholarStatus());
			callableStatement.setString(2,feePayment1OnlineFormBean.getName());
			callableStatement.setString(3,feePayment1OnlineFormBean.getRollNo());
			callableStatement.setString(4,feePayment1OnlineFormBean.getDateOfBirth());
			callableStatement.setString(5,feePayment1OnlineFormBean.getFatherName());
			callableStatement.setString(6,feePayment1OnlineFormBean.getCourse());
			callableStatement.setString(7,feePayment1OnlineFormBean.getYear());
			callableStatement.setString(8,feePayment1OnlineFormBean.getTotalAmount());



			callableStatement.setString(9,feePayment1OnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(10,billerId);

			callableStatement.registerOutParameter(11, Types.VARCHAR);
			callableStatement.registerOutParameter(12, Types.VARCHAR);
			callableStatement.registerOutParameter(13, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(13); 
			feePayment1OnlineFormBean.setStudentRegistrationId(callableStatement.getString(12));
			feePayment1OnlineFormBean.setApplicationNo(callableStatement.getString(11));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertFeePayment1StudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("feePayment1OnlineFormBean(" + feePayment1OnlineFormBean + ") - END");
		return responseString;	
	}

	public FeePayment1OnlineFormBean getFeePayment1StudentDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getFeePayment1StudentDetails(" + applicationNo + ") - START");  
		FeePayment1OnlineFormBean feePayment1OnlineFormBean = new FeePayment1OnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_FEE_PAYMENT1_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	
				feePayment1OnlineFormBean.setScholarStatus(resultSet.getString("scholarStatus"));
				feePayment1OnlineFormBean.setName(resultSet.getString("name"));
				feePayment1OnlineFormBean.setRollNo(resultSet.getString("rollNo"));
				feePayment1OnlineFormBean.setDateOfBirth(resultSet.getString("dateOfBirth"));
				feePayment1OnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				feePayment1OnlineFormBean.setCourse(resultSet.getString("course"));
				feePayment1OnlineFormBean.setYear(resultSet.getString("year"));
				feePayment1OnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));
				feePayment1OnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getFeePayment1StudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getFeePayment1StudentDetails(" + feePayment1OnlineFormBean + ") - END");
		return feePayment1OnlineFormBean;
	}

	public String insertJayshreePeriwalStudentDetails(JayshreePeriwalOnlineFormBean jayshreePeriwalOnlineFormBean,String billerId) {


		long startTime = System.currentTimeMillis();
		logger.info("insertJayshreePeriwalStudentDetails(" + jayshreePeriwalOnlineFormBean + ") - START");
		logger.info("insertJayshreePeriwalStudentDetails---billerId : "+billerId);

		String responseString = null;
		try{
			callableStatement = con.prepareCall("{call PROC_Jayshree_Periwal_studentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,jayshreePeriwalOnlineFormBean.getNameOfStudent());
			callableStatement.setString(2,jayshreePeriwalOnlineFormBean.getFatherName());
			callableStatement.setString(3,jayshreePeriwalOnlineFormBean.getClassField());
			callableStatement.setString(4,jayshreePeriwalOnlineFormBean.getSection());
			callableStatement.setString(5,jayshreePeriwalOnlineFormBean.getAdmissionNo());
			callableStatement.setString(6,jayshreePeriwalOnlineFormBean.getMoblieNo());
			callableStatement.setString(7,jayshreePeriwalOnlineFormBean.getFeeHeads());
			callableStatement.setString(8,jayshreePeriwalOnlineFormBean.getTerm());
			callableStatement.setString(9,jayshreePeriwalOnlineFormBean.getRemark()); 
			callableStatement.setString(10,jayshreePeriwalOnlineFormBean.getTotalAmount());




			callableStatement.setString(11,jayshreePeriwalOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(12,billerId);

			callableStatement.registerOutParameter(13, Types.VARCHAR);
			callableStatement.registerOutParameter(14, Types.VARCHAR);
			callableStatement.registerOutParameter(15, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(15); 
			jayshreePeriwalOnlineFormBean.setStudentRegistrationId(callableStatement.getString(14));
			jayshreePeriwalOnlineFormBean.setApplicationNo(callableStatement.getString(13));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertJayshreePeriwalStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("jayshreePeriwalOnlineFormBean(" + jayshreePeriwalOnlineFormBean + ") - END");
		return responseString;
	}
	public JayshreePeriwalOnlineFormBean getJayshreePeriwalStudentDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getJayshreePeriwalStudentDetails(" + applicationNo + ") - START");  
		JayshreePeriwalOnlineFormBean jayshreePeriwalOnlineFormBean = new JayshreePeriwalOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_Jayshree_Periwal_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	
				jayshreePeriwalOnlineFormBean.setNameOfStudent(resultSet.getString("nameOfStudent"));
				jayshreePeriwalOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				jayshreePeriwalOnlineFormBean.setClassField(resultSet.getString("classField"));
				jayshreePeriwalOnlineFormBean.setSection(resultSet.getString("section"));
				jayshreePeriwalOnlineFormBean.setAdmissionNo(resultSet.getString("admissionNo"));
				jayshreePeriwalOnlineFormBean.setMoblieNo(resultSet.getString("moblieNo"));
				jayshreePeriwalOnlineFormBean.setFeeHeads(resultSet.getString("feeHeads"));
				jayshreePeriwalOnlineFormBean.setTerm(resultSet.getString("term"));
				jayshreePeriwalOnlineFormBean.setRemark(resultSet.getString("remark"));
				jayshreePeriwalOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));


				jayshreePeriwalOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getJayshreePeriwalStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getJayshreePeriwalStudentDetails(" + jayshreePeriwalOnlineFormBean + ") - END");
		return jayshreePeriwalOnlineFormBean;
	}
	public String insertJayshreePeriStudentDetails(JayshreePeriOnlineFormBean jayshreePeriOnlineFormBean,String billerId) {


		long startTime = System.currentTimeMillis();
		logger.info("insertJayshreePeriStudentDetails(" + jayshreePeriOnlineFormBean + ") - START");
		logger.info("insertJayshreePeriStudentDetails---billerId : "+billerId);

		String responseString = null;
		try{
			callableStatement = con.prepareCall("{call PROC_Jayshree_Periwal_International_studentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,jayshreePeriOnlineFormBean.getNameOfStudent());
			callableStatement.setString(2,jayshreePeriOnlineFormBean.getFatherName());
			callableStatement.setString(3,jayshreePeriOnlineFormBean.getClassField());
			callableStatement.setString(4,jayshreePeriOnlineFormBean.getQuarterlyFee());
			callableStatement.setString(5,jayshreePeriOnlineFormBean.getTransportationFee());
			callableStatement.setString(6,jayshreePeriOnlineFormBean.getImprest());
			callableStatement.setString(7,jayshreePeriOnlineFormBean.getLateFee());
			callableStatement.setString(8,jayshreePeriOnlineFormBean.getAdmissionNo());
			callableStatement.setString(9,jayshreePeriOnlineFormBean.getMoblieNo());
			callableStatement.setString(10,jayshreePeriOnlineFormBean.getFeeHeads());
			callableStatement.setString(11,jayshreePeriOnlineFormBean.getTerm());
			callableStatement.setString(12,jayshreePeriOnlineFormBean.getRemark()); 
			callableStatement.setString(13,jayshreePeriOnlineFormBean.getTotalAmount());




			callableStatement.setString(14,jayshreePeriOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(15,billerId);

			callableStatement.registerOutParameter(16, Types.VARCHAR);
			callableStatement.registerOutParameter(17, Types.VARCHAR);
			callableStatement.registerOutParameter(18, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(18); 
			jayshreePeriOnlineFormBean.setStudentRegistrationId(callableStatement.getString(17));
			jayshreePeriOnlineFormBean.setApplicationNo(callableStatement.getString(16));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertJayshreePeriStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("jayshreePeriOnlineFormBean(" + jayshreePeriOnlineFormBean + ") - END");
		return responseString;
	}
	public JayshreePeriOnlineFormBean getJayshreePeriStudentDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getJayshreePeriStudentDetails(" + applicationNo + ") - START");  
		JayshreePeriOnlineFormBean jayshreePeriOnlineFormBean = new JayshreePeriOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_Jayshree_Periwal_International_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	
				jayshreePeriOnlineFormBean.setNameOfStudent(resultSet.getString("nameOfStudent"));
				jayshreePeriOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				jayshreePeriOnlineFormBean.setClassField(resultSet.getString("classField"));
				jayshreePeriOnlineFormBean.setQuarterlyFee(resultSet.getString("quarterlyFee"));
				jayshreePeriOnlineFormBean.setTransportationFee(resultSet.getString("transportationFee"));
				jayshreePeriOnlineFormBean.setImprest(resultSet.getString("imprest"));
				jayshreePeriOnlineFormBean.setLateFee(resultSet.getString("lateFee"));
				jayshreePeriOnlineFormBean.setAdmissionNo(resultSet.getString("admissionNo"));
				jayshreePeriOnlineFormBean.setMoblieNo(resultSet.getString("moblieNo"));
				jayshreePeriOnlineFormBean.setFeeHeads(resultSet.getString("feeHeads"));
				jayshreePeriOnlineFormBean.setTerm(resultSet.getString("term"));
				jayshreePeriOnlineFormBean.setRemark(resultSet.getString("remark"));
				jayshreePeriOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));


				jayshreePeriOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getJayshreePeriStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getJayshreePeriStudentDetails(" + jayshreePeriOnlineFormBean + ") - END");
		return jayshreePeriOnlineFormBean;
	}
	public String insertLancersSchoolStudentDetails(LancersOnlineFormBean lancersOnlineFormBean,String billerId)
	{

		long startTime = System.currentTimeMillis();
		logger.info("insertLancersSchoolStudentDetails(" + lancersOnlineFormBean + ") - START");
		logger.info("insertLancersSchoolStudentDetails---billerId : "+billerId);

		String responseString = null;
		try{
			callableStatement = con.prepareCall("{call PROC_Lancers_International_School_studentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,lancersOnlineFormBean.getName());
			callableStatement.setString(2,lancersOnlineFormBean.getFatherName());
			callableStatement.setString(3,lancersOnlineFormBean.getMotherName());
			callableStatement.setString(4,lancersOnlineFormBean.getDateOfBirth());
			callableStatement.setString(5,lancersOnlineFormBean.getGender());
			callableStatement.setString(6,lancersOnlineFormBean.getMobileNo());
			callableStatement.setString(7,lancersOnlineFormBean.getPermanentAddress());
			callableStatement.setString(8,lancersOnlineFormBean.getCurrentAddress());
			callableStatement.setString(9,lancersOnlineFormBean.getNationality());
			callableStatement.setString(10,lancersOnlineFormBean.getDesiredGrade());
			callableStatement.setString(11,lancersOnlineFormBean.getSession());
			callableStatement.setString(12,lancersOnlineFormBean.getOciPassport()); 
			callableStatement.setString(13,lancersOnlineFormBean.getOtherInfo());
			callableStatement.setString(14,lancersOnlineFormBean.getAmount());




			callableStatement.setString(15,lancersOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(16,billerId);

			callableStatement.registerOutParameter(17, Types.VARCHAR);
			callableStatement.registerOutParameter(18, Types.VARCHAR);
			callableStatement.registerOutParameter(19, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(19); 
			lancersOnlineFormBean.setStudentRegistrationId(callableStatement.getString(18));
			lancersOnlineFormBean.setApplicationNo(callableStatement.getString(17));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertLancersSchoolStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("lancersOnlineFormBean(" + lancersOnlineFormBean + ") - END");
		return responseString;
	}
	public LancersOnlineFormBean getLancersStudentDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getLancersSchoolStudentDetails(" + applicationNo + ") - START");  
		LancersOnlineFormBean lancersOnlineFormBean = new LancersOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_Lancers_International_School_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	
				lancersOnlineFormBean.setName(resultSet.getString("name"));
				lancersOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				lancersOnlineFormBean.setMotherName(resultSet.getString("motherName"));
				lancersOnlineFormBean.setDateOfBirth(resultSet.getString("dateOfBirth"));
				lancersOnlineFormBean.setGender(resultSet.getString("gender"));
				lancersOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));
				lancersOnlineFormBean.setPermanentAddress(resultSet.getString("permanentAddress"));
				lancersOnlineFormBean.setCurrentAddress(resultSet.getString("currentAddress"));
				lancersOnlineFormBean.setNationality(resultSet.getString("nationality"));
				lancersOnlineFormBean.setDesiredGrade(resultSet.getString("desiredGrade"));
				lancersOnlineFormBean.setSession(resultSet.getString("session"));
				lancersOnlineFormBean.setOciPassport(resultSet.getString("ociPassport"));
				lancersOnlineFormBean.setOtherInfo(resultSet.getString("otherInfo"));
				lancersOnlineFormBean.setAmount(resultSet.getString("amount"));


				lancersOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getLancersSchoolStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getLancersSchoolStudentDetails(" + lancersOnlineFormBean + ") - END");
		return lancersOnlineFormBean;
	}
	public String insertKrishnaLawStudentDetails(KrishnaLawOnlineFormBean krishnaLawOnlineFormBean,String billerId)
	{

		long startTime = System.currentTimeMillis();
		logger.info("insertKrishnaLawStudentDetails(" + krishnaLawOnlineFormBean + ") - START");
		logger.info("insertKrishnaLawStudentDetails---billerId : "+billerId);

		String responseString = null;
		/*try{
			callableStatement = con.prepareCall("{call PROC_Krishna_Law_School_studentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,krishnaLawOnlineFormBean.getStudentFirstName());
			callableStatement.setString(2,krishnaLawOnlineFormBean.getStudentMiddleName());
			callableStatement.setString(3,krishnaLawOnlineFormBean.getStudentLastName());
			callableStatement.setString(4,krishnaLawOnlineFormBean.getDateOfBirth());
			callableStatement.setString(5,krishnaLawOnlineFormBean.getEnrollNo());
			callableStatement.setString(6,krishnaLawOnlineFormBean.getFatherFirstName());
			callableStatement.setString(7,krishnaLawOnlineFormBean.getFatherMiddleName());
			callableStatement.setString(8,krishnaLawOnlineFormBean.getFatherLastName());
			callableStatement.setString(9,krishnaLawOnlineFormBean.getCourse());
			callableStatement.setString(10,krishnaLawOnlineFormBean.getSemester());
			callableStatement.setString(11,krishnaLawOnlineFormBean.getEmailId());
			callableStatement.setString(12,krishnaLawOnlineFormBean.getMobileNo());
			callableStatement.setString(13,krishnaLawOnlineFormBean.getFeeType());
			callableStatement.setString(14,krishnaLawOnlineFormBean.getAmount());




			callableStatement.setString(15,krishnaLawOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(16,billerId);

			callableStatement.registerOutParameter(17, Types.VARCHAR);
			callableStatement.registerOutParameter(18, Types.VARCHAR);
			callableStatement.registerOutParameter(19, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(19); 
			krishnaLawOnlineFormBean.setStudentRegistrationId(callableStatement.getString(18));
			krishnaLawOnlineFormBean.setApplicationNo(callableStatement.getString(17));
			logger.info("responseString : - " + responseString);
*/
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,krishnaLawOnlineFormBean.getAmount());
			callableStatement.setString(2,krishnaLawOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,krishnaLawOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			krishnaLawOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			krishnaLawOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);

		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertKrishnaLawStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("krishnaLawOnlineFormBean(" + krishnaLawOnlineFormBean + ") - END");
		return responseString;
	}
	public KrishnaLawOnlineFormBean getKrishnaLawStudentDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getKrishnaLawStudentDetails(" + applicationNo + ") - START");  
		KrishnaLawOnlineFormBean krishnaLawOnlineFormBean = new KrishnaLawOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_Krishna_Law_School_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	
				krishnaLawOnlineFormBean.setStudentFirstName(resultSet.getString("studentFirstName"));
				krishnaLawOnlineFormBean.setStudentMiddleName(resultSet.getString("studentMiddleName"));
				krishnaLawOnlineFormBean.setStudentLastName(resultSet.getString("studentLastName"));
				krishnaLawOnlineFormBean.setDateOfBirth(resultSet.getString("dateOfBirth"));
				krishnaLawOnlineFormBean.setEnrollNo(resultSet.getString("enrollNo"));
				krishnaLawOnlineFormBean.setFatherFirstName(resultSet.getString("fatherFirstName"));
				krishnaLawOnlineFormBean.setFatherMiddleName(resultSet.getString("fatherMiddleName"));
				krishnaLawOnlineFormBean.setFatherLastName(resultSet.getString("fatherLastName"));
				krishnaLawOnlineFormBean.setCourse(resultSet.getString("course"));
				krishnaLawOnlineFormBean.setSemester(resultSet.getString("semester"));
				krishnaLawOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				krishnaLawOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));
				krishnaLawOnlineFormBean.setFeeType(resultSet.getString("feeType"));
				krishnaLawOnlineFormBean.setAmount(resultSet.getString("amount"));


				krishnaLawOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getKrishnaLawStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getKrishnaLawStudentDetails(" + krishnaLawOnlineFormBean + ") - END");
		return krishnaLawOnlineFormBean;
	}//----------For Delhi Public School Budgam -- insert
	public String insertdpsBudgamDetails(DpsBudgamOnlineFormBean dpsBudgamOnlineFormBean,String billerId)
	{

		long startTime = System.currentTimeMillis();
		logger.info("insertdpsBudgamDetails(" + dpsBudgamOnlineFormBean + ") - START");
		logger.info("insertdpsBudgamDetails---billerId : "+billerId);

		String responseString = null;
		/*try{
			callableStatement = con.prepareCall("{call PROC_DPS_Budgam_studentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,dpsBudgamOnlineFormBean.getAdmissionNo());
			callableStatement.setString(2,dpsBudgamOnlineFormBean.getStudentName());
			callableStatement.setString(3,dpsBudgamOnlineFormBean.getParentAge());
			callableStatement.setString(4,dpsBudgamOnlineFormBean.getDateOfBirth());
			callableStatement.setString(5,dpsBudgamOnlineFormBean.getClassText());
			callableStatement.setString(6,dpsBudgamOnlineFormBean.getMobileNo());
			callableStatement.setString(7,dpsBudgamOnlineFormBean.getEmailId());
			callableStatement.setString(8,dpsBudgamOnlineFormBean.getFeeHeads());
			callableStatement.setString(9,dpsBudgamOnlineFormBean.getAmount());
			callableStatement.setString(10,dpsBudgamOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(11,billerId);

			callableStatement.registerOutParameter(12, Types.VARCHAR);
			callableStatement.registerOutParameter(13, Types.VARCHAR);
			callableStatement.registerOutParameter(14, Types.VARCHAR);


			callableStatement.execute(); 

			responseString = callableStatement.getString(14); 
			dpsBudgamOnlineFormBean.setStudentRegistrationId(callableStatement.getString(13));
			dpsBudgamOnlineFormBean.setApplicationNo(callableStatement.getString(12));
			logger.info("responseString : - " + responseString);
*/
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,dpsBudgamOnlineFormBean.getAmount());
			callableStatement.setString(2,dpsBudgamOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,dpsBudgamOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			dpsBudgamOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			dpsBudgamOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);


		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertKrishnaLawStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("dpsBudgamOnlineFormBean(" + dpsBudgamOnlineFormBean + ") - END");
		return responseString;
	}

	public DpsBudgamOnlineFormBean getDpsBudgamStudentDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getdpsBudgamDetails(" + applicationNo + ") - START");  
		DpsBudgamOnlineFormBean dpsBudgamOnlineFormBean = new DpsBudgamOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_DPS_Budgam_studentDetails(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {
				dpsBudgamOnlineFormBean.setAdmissionNo(resultSet.getString("admissionNo"));
				dpsBudgamOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				dpsBudgamOnlineFormBean.setParentAge(resultSet.getString("parentAge"));
				dpsBudgamOnlineFormBean.setDateOfBirth(resultSet.getString("dateOfBirth"));
				dpsBudgamOnlineFormBean.setClassText(resultSet.getString("classText"));
				dpsBudgamOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));
				dpsBudgamOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				dpsBudgamOnlineFormBean.setFeeHeads(resultSet.getString("feeHeads"));
				dpsBudgamOnlineFormBean.setAmount(resultSet.getString("amount"));


				dpsBudgamOnlineFormBean.setApplicationNo(applicationNo);
			}



		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getdpsBudgamDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getdpsBudgamDetails(" + dpsBudgamOnlineFormBean + ") - END");
		return dpsBudgamOnlineFormBean;
	}
	public String insertKulluStudentDetails(KulluOnlineFormBean kulluOnlineFormBean,String billerId)
	{

		long startTime = System.currentTimeMillis();
		logger.info("insertKulluStudentDetails(" + kulluOnlineFormBean + ") - START");
		logger.info("insertKulluStudentDetails---billerId : "+billerId);

		String responseString = null;
		/*try{
			callableStatement = con.prepareCall("{call PROC_Kullu_School_studentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,kulluOnlineFormBean.getStudentName());
			callableStatement.setString(2,kulluOnlineFormBean.getFathersName());
			callableStatement.setString(3,kulluOnlineFormBean.getRollNo());
			callableStatement.setString(4,kulluOnlineFormBean.getMobileNo());
			callableStatement.setString(5,kulluOnlineFormBean.getEmailId());
			callableStatement.setString(6,kulluOnlineFormBean.getCourse());
			callableStatement.setString(7,kulluOnlineFormBean.getSemester());
			callableStatement.setString(8,kulluOnlineFormBean.getSeatType());
			callableStatement.setString(9,kulluOnlineFormBean.getTotalAmount());
			callableStatement.setString(10,kulluOnlineFormBean.getDepositeDate());
			callableStatement.setString(11,kulluOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(12,billerId);

			callableStatement.registerOutParameter(13, Types.VARCHAR);
			callableStatement.registerOutParameter(14, Types.VARCHAR);
			callableStatement.registerOutParameter(15, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(15); 
			kulluOnlineFormBean.setStudentRegistrationId(callableStatement.getString(14));
			kulluOnlineFormBean.setApplicationNo(callableStatement.getString(13));
			logger.info("responseString : - " + responseString);*/
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,kulluOnlineFormBean.getTotalAmount());
			callableStatement.setString(2,kulluOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,kulluOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			kulluOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			kulluOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);




		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertKulluStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("kulluOnlineFormBean(" + kulluOnlineFormBean + ") - END");
		return responseString;
	}
	public KulluOnlineFormBean getKulluStudentDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("KulluOnlineFormBean(" + applicationNo + ") - START");  
		KulluOnlineFormBean kulluOnlineFormBean = new KulluOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_Kullu_School_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	
				kulluOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				kulluOnlineFormBean.setFathersName(resultSet.getString("fathersName"));
				kulluOnlineFormBean.setRollNo(resultSet.getString("rollNo"));
				kulluOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));
				kulluOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				kulluOnlineFormBean.setCourse(resultSet.getString("course"));
				kulluOnlineFormBean.setSemester(resultSet.getString("semester"));
				kulluOnlineFormBean.setSeatType(resultSet.getString("seatType"));
				kulluOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));
				kulluOnlineFormBean.setDepositeDate(resultSet.getString("depositeDate"));



				kulluOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getKrishnaLawStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getKulluStudentDetails(" + kulluOnlineFormBean + ") - END");
		return kulluOnlineFormBean;
	}
	public String insertBiyaniStudentDetails(BiyaniOnlineFormBean biyaniOnlineFormBean,String billerId)
	{

		long startTime = System.currentTimeMillis();
		logger.info("insertBiyaniStudentDetails(" + biyaniOnlineFormBean + ") - START");
		logger.info("insertBiyaniStudentDetails---billerId : "+billerId);

		String responseString = null;
		/*try{
			callableStatement = con.prepareCall("{call PROC_Biyani_School_studentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,biyaniOnlineFormBean.getNameOfStudent());
			callableStatement.setString(2,biyaniOnlineFormBean.getDateOfBirth());
			callableStatement.setString(3,biyaniOnlineFormBean.getNationality());
			callableStatement.setString(4,biyaniOnlineFormBean.getCategory());
			callableStatement.setString(5,biyaniOnlineFormBean.getAddress());
			callableStatement.setString(6,biyaniOnlineFormBean.getCity());
			callableStatement.setString(7,biyaniOnlineFormBean.getState());
			callableStatement.setString(8,biyaniOnlineFormBean.getEmailId());
			callableStatement.setString(9,biyaniOnlineFormBean.getPhoneNo());
			callableStatement.setString(10,biyaniOnlineFormBean.getFatherName());
			callableStatement.setString(11,biyaniOnlineFormBean.getFatherContactNo());
			callableStatement.setString(12,biyaniOnlineFormBean.getMotherName());
			callableStatement.setString(13,biyaniOnlineFormBean.getLocalGardianName());
			callableStatement.setString(14,biyaniOnlineFormBean.getLastQualifyingExam());
			callableStatement.setString(15,biyaniOnlineFormBean.getRemark());
			callableStatement.setString(16,biyaniOnlineFormBean.getPercentageLastExam());
			callableStatement.setString(17,biyaniOnlineFormBean.getCourse());
			callableStatement.setString(18,biyaniOnlineFormBean.getAccomodation());
			callableStatement.setString(19,biyaniOnlineFormBean.getFeeType());
			callableStatement.setString(20,biyaniOnlineFormBean.getTotalAmount());



			callableStatement.setString(21,biyaniOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(22,billerId);

			callableStatement.registerOutParameter(23, Types.VARCHAR);
			callableStatement.registerOutParameter(24, Types.VARCHAR);
			callableStatement.registerOutParameter(25, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(25); 
			biyaniOnlineFormBean.setStudentRegistrationId(callableStatement.getString(24));
			biyaniOnlineFormBean.setApplicationNo(callableStatement.getString(23));
			logger.info("responseString : - " + responseString);
*/
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,biyaniOnlineFormBean.getTotalAmount());
			callableStatement.setString(2,biyaniOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,biyaniOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			biyaniOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			biyaniOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);


		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertBiyaniStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("biyaniOnlineFormBean(" + biyaniOnlineFormBean + ") - END");
		return responseString;
	}
	public BiyaniOnlineFormBean getBiyaniStudentDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("biyaniOnlineFormBean(" + applicationNo + ") - START");  
		BiyaniOnlineFormBean biyaniOnlineFormBean = new BiyaniOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_Biyani_School_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	
				biyaniOnlineFormBean.setNameOfStudent(resultSet.getString("nameOfStudent"));
				biyaniOnlineFormBean.setDateOfBirth(resultSet.getString("dateOfBirth"));

				biyaniOnlineFormBean.setNationality(resultSet.getString("nationality"));
				biyaniOnlineFormBean.setCategory(resultSet.getString("category"));
				biyaniOnlineFormBean.setAddress(resultSet.getString("address"));
				biyaniOnlineFormBean.setCity(resultSet.getString("city"));
				biyaniOnlineFormBean.setState(resultSet.getString("state"));
				biyaniOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				biyaniOnlineFormBean.setPhoneNo(resultSet.getString("phoneNo"));
				biyaniOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				biyaniOnlineFormBean.setFatherContactNo(resultSet.getString("fatherContactNo"));
				biyaniOnlineFormBean.setMotherName(resultSet.getString("motherName"));
				biyaniOnlineFormBean.setLocalGardianName(resultSet.getString("localGardianName"));
				biyaniOnlineFormBean.setLastQualifyingExam(resultSet.getString("lastQualifyingExam"));
				biyaniOnlineFormBean.setRemark(resultSet.getString("remark"));
				biyaniOnlineFormBean.setPercentageLastExam(resultSet.getString("percentageLastExam"));
				biyaniOnlineFormBean.setCourse(resultSet.getString("course"));
				biyaniOnlineFormBean.setAccomodation(resultSet.getString("accomodation"));
				biyaniOnlineFormBean.setFeeType(resultSet.getString("feeType"));
				biyaniOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));



				biyaniOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getBiyaniStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getBiyaniStudentDetails(" + biyaniOnlineFormBean + ") - END");
		return biyaniOnlineFormBean;
	}
	public String insertShrirRamEducationalDetails(ShriRamEducationalOnlineFormBean shriRamEducationalOnlineFormBean,String billerId){

		long startTime = System.currentTimeMillis();
		logger.info("insertShrirRamEducationalDetails(" + shriRamEducationalOnlineFormBean + ") - START");
		logger.info("insertShrirRamEducationalDetails---billerId : "+billerId);

		String responseString = null;
		try{

			callableStatement = con.prepareCall("{call PROC_ShriRam_Educational_Trust_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,shriRamEducationalOnlineFormBean.getInstituteName());
			callableStatement.setString(2,shriRamEducationalOnlineFormBean.getStudentId());
			callableStatement.setString(3,shriRamEducationalOnlineFormBean.getRollNo());
			callableStatement.setString(4,shriRamEducationalOnlineFormBean.getStudentName());
			callableStatement.setString(5,shriRamEducationalOnlineFormBean.getMobileNo());
			callableStatement.setString(6,shriRamEducationalOnlineFormBean.getEmailId());
			callableStatement.setString(7,shriRamEducationalOnlineFormBean.getCity());
			callableStatement.setString(8,shriRamEducationalOnlineFormBean.getState());
			callableStatement.setString(9,shriRamEducationalOnlineFormBean.getCourseName());
			callableStatement.setString(10,shriRamEducationalOnlineFormBean.getCourseYear());
			callableStatement.setString(11,shriRamEducationalOnlineFormBean.getFeesAmount());
			callableStatement.setString(12,shriRamEducationalOnlineFormBean.getRemarks());



			callableStatement.setString(13,shriRamEducationalOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(14,billerId);

			callableStatement.registerOutParameter(15, Types.VARCHAR);
			callableStatement.registerOutParameter(16, Types.VARCHAR);
			callableStatement.registerOutParameter(17, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(17); 
			shriRamEducationalOnlineFormBean.setStudentRegistrationId(callableStatement.getString(16));
			shriRamEducationalOnlineFormBean.setApplicationNo(callableStatement.getString(15));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertShrirRamEducationalDetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("shriRamEducationalOnlineFormBean(" + shriRamEducationalOnlineFormBean + ") - END");	
		return responseString;
	}

	public ShriRamEducationalOnlineFormBean getShriRamEducationalDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("ShriRamEducationalOnlineFormBean(" + applicationNo + ") - START");  
		ShriRamEducationalOnlineFormBean shriRamEducationalOnlineFormBean = new ShriRamEducationalOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_ShriRam_Edu_TDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	
				shriRamEducationalOnlineFormBean.setInstituteName(resultSet.getString("instituteName"));
				shriRamEducationalOnlineFormBean.setStudentId(resultSet.getString("studentId"));
				shriRamEducationalOnlineFormBean.setRollNo(resultSet.getString("rollNo"));
				shriRamEducationalOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				shriRamEducationalOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));
				shriRamEducationalOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				shriRamEducationalOnlineFormBean.setCity(resultSet.getString("city"));
				shriRamEducationalOnlineFormBean.setState(resultSet.getString("state"));
				shriRamEducationalOnlineFormBean.setCourseName(resultSet.getString("courseName"));
				shriRamEducationalOnlineFormBean.setCourseYear(resultSet.getString("courseYear"));
				shriRamEducationalOnlineFormBean.setFeesAmount(resultSet.getString("feesAmount"));
				shriRamEducationalOnlineFormBean.setRemarks(resultSet.getString("remarks"));

				shriRamEducationalOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getShriRamEducationalDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getShriRamEducationalDetails(" + shriRamEducationalOnlineFormBean + ") - END");
		return shriRamEducationalOnlineFormBean;
	}
	public String insertTeamWorkEducationDetails(TeamworkEducationOnlineFormBean teamworkEducationOnlineFormBean,String billerId){

		long startTime = System.currentTimeMillis();
		logger.info("insertTeamWorkEducationDetails(" + teamworkEducationOnlineFormBean + ") - START");
		logger.info("insertTeamWorkEducationDetails---billerId : "+billerId);

		String responseString = null;
		/*try{

			callableStatement = con.prepareCall("{call PROC_Teamwork_Education_Details(?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,teamworkEducationOnlineFormBean.getStudentName());
			callableStatement.setString(2,teamworkEducationOnlineFormBean.getParentName());
			callableStatement.setString(3,teamworkEducationOnlineFormBean.getAdmissionNumber());
			callableStatement.setString(4,teamworkEducationOnlineFormBean.getEmailId());
			callableStatement.setString(5,teamworkEducationOnlineFormBean.getLocation());
			callableStatement.setString(6,teamworkEducationOnlineFormBean.getCourse());
			callableStatement.setString(7,teamworkEducationOnlineFormBean.getAmount());


			callableStatement.setString(8,teamworkEducationOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(9,billerId);

			callableStatement.registerOutParameter(10, Types.VARCHAR);
			callableStatement.registerOutParameter(11, Types.VARCHAR);
			callableStatement.registerOutParameter(12, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(12); 
			teamworkEducationOnlineFormBean.setStudentRegistrationId(callableStatement.getString(11));
			teamworkEducationOnlineFormBean.setApplicationNo(callableStatement.getString(10));
			logger.info("responseString : - " + responseString);
*/
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,teamworkEducationOnlineFormBean.getAmount());
			callableStatement.setString(2,teamworkEducationOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,teamworkEducationOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			teamworkEducationOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			teamworkEducationOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);

		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertTeamWorkEducationDetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("teamworkEducationOnlineFormBean(" + teamworkEducationOnlineFormBean + ") - END");	
		return responseString;
	}
	public TeamworkEducationOnlineFormBean getTeamworkEducationDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("TeamworkEducationOnlineFormBean(" + applicationNo + ") - START");  
		TeamworkEducationOnlineFormBean teamworkEducationOnlineFormBean = new TeamworkEducationOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_Teamwork_Edu_DETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	
				teamworkEducationOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				teamworkEducationOnlineFormBean.setParentName(resultSet.getString("parentName"));
				teamworkEducationOnlineFormBean.setAdmissionNumber(resultSet.getString("admissionNumber"));
				teamworkEducationOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				teamworkEducationOnlineFormBean.setLocation(resultSet.getString("location"));
				teamworkEducationOnlineFormBean.setCourse(resultSet.getString("course"));
				teamworkEducationOnlineFormBean.setAmount(resultSet.getString("amount"));

				teamworkEducationOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getTeamworkEducationDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getTeamworkEducationDetails(" + teamworkEducationOnlineFormBean + ") - END");
		return teamworkEducationOnlineFormBean;
	}

	//CR84632 - JBCI
	public String insertJbciStudentDetails(JBCIOnlineFormBean jbciOnlineFormBean,String billerId)
	{

		long startTime = System.currentTimeMillis();
		logger.info("insertJbciStudentDetails(" + jbciOnlineFormBean + ") - START");
		logger.info("insertJbciStudentDetails---billerId : "+billerId);

		String responseString = null;
		try{
			callableStatement = con.prepareCall("{call PROC_JBCI_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,jbciOnlineFormBean.getFirstName());
			callableStatement.setString(2,jbciOnlineFormBean.getLastName());
			callableStatement.setString(3,jbciOnlineFormBean.getAddress());
			callableStatement.setString(4,jbciOnlineFormBean.getCity());
			callableStatement.setString(5,jbciOnlineFormBean.getState());
			callableStatement.setString(6,jbciOnlineFormBean.getCountry());
			callableStatement.setString(7,jbciOnlineFormBean.getEmailId());
			callableStatement.setString(8,jbciOnlineFormBean.getMobileNo());
			callableStatement.setString(9,jbciOnlineFormBean.getRegistrationNo());
			callableStatement.setString(10,jbciOnlineFormBean.getEventName());
			callableStatement.setString(11,jbciOnlineFormBean.getTotalAmount());

			callableStatement.setString(12,jbciOnlineFormBean.getRegisteredUserId());				



			callableStatement.setString(13,billerId);

			callableStatement.registerOutParameter(14, Types.VARCHAR);
			callableStatement.registerOutParameter(15, Types.VARCHAR);
			callableStatement.registerOutParameter(16, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(16); 
			jbciOnlineFormBean.setStudentRegistrationId(callableStatement.getString(15));
			jbciOnlineFormBean.setApplicationNo(callableStatement.getString(14));
			logger.info("responseString : - " + responseString);




		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertjbciStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();

		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("jbciOnlineFormBean(" + jbciOnlineFormBean + ") - END");
		return responseString;
	}
	public JBCIOnlineFormBean getJbciStudentDetails(String applicationNo)

	{
		long startTime = System.currentTimeMillis();
		logger.info("jbciOnlineFormBean(" + applicationNo + ") - START");  
		JBCIOnlineFormBean jbciOnlineFormBean = new JBCIOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_JBCI_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	
				jbciOnlineFormBean.setFirstName(resultSet.getString("firstName"));
				jbciOnlineFormBean.setLastName(resultSet.getString("lastName"));
				jbciOnlineFormBean.setAddress(resultSet.getString("address"));
				jbciOnlineFormBean.setCity(resultSet.getString("city"));
				jbciOnlineFormBean.setState(resultSet.getString("state"));
				jbciOnlineFormBean.setCountry(resultSet.getString("country"));
				jbciOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				jbciOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));
				jbciOnlineFormBean.setRegistrationNo(resultSet.getString("registrationNo"));
				jbciOnlineFormBean.setEventName(resultSet.getString("eventName"));
				jbciOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));

				jbciOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getJbciStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getJbciStudentDetails(" + jbciOnlineFormBean + ") - END");
		return jbciOnlineFormBean;
	}
	public String insertAbdulKalamDetails(AbdulKalamOnlineFormBean abdulKalamOnlineFormBean,String billerId){

		long startTime = System.currentTimeMillis();
		logger.info("insertAbdulKalamDetails(" + abdulKalamOnlineFormBean + ") - START");
		logger.info("insertAbdulKalamDetails---billerId : "+billerId);

		String responseString = null;
		try{

			callableStatement = con.prepareCall("{call PROC_abdul_kalam_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,abdulKalamOnlineFormBean.getStudentId());
			callableStatement.setString(2,abdulKalamOnlineFormBean.getRollNo());
			callableStatement.setString(3,abdulKalamOnlineFormBean.getStudentName());
			callableStatement.setString(4,abdulKalamOnlineFormBean.getMobileNo());
			callableStatement.setString(5,abdulKalamOnlineFormBean.getEmailId());
			callableStatement.setString(6,abdulKalamOnlineFormBean.getCity());
			callableStatement.setString(7,abdulKalamOnlineFormBean.getState());
			callableStatement.setString(8,abdulKalamOnlineFormBean.getCourseName());
			callableStatement.setString(9,abdulKalamOnlineFormBean.getCourseYear());
			callableStatement.setString(10,abdulKalamOnlineFormBean.getFeesAmount());
			callableStatement.setString(11,abdulKalamOnlineFormBean.getRemarks());



			callableStatement.setString(12,abdulKalamOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(13,billerId);

			callableStatement.registerOutParameter(14, Types.VARCHAR);
			callableStatement.registerOutParameter(15, Types.VARCHAR);
			callableStatement.registerOutParameter(16, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(16); 
			abdulKalamOnlineFormBean.setStudentRegistrationId(callableStatement.getString(15));
			abdulKalamOnlineFormBean.setApplicationNo(callableStatement.getString(14));
			logger.info("responseString : - " + responseString);




		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertAbdulKalamDetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("abdulKalamOnlineFormBean(" + abdulKalamOnlineFormBean + ") - END");	
		return responseString;
	}

	public AbdulKalamOnlineFormBean getAbdulKalamDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("AbdulKalamOnlineFormBean(" + applicationNo + ") - START");  
		AbdulKalamOnlineFormBean abdulKalamOnlineFormBean = new AbdulKalamOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_Abdul_Kalam_TDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	
				abdulKalamOnlineFormBean.setStudentId(resultSet.getString("studentId"));
				abdulKalamOnlineFormBean.setRollNo(resultSet.getString("rollNo"));
				abdulKalamOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				abdulKalamOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));
				abdulKalamOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				abdulKalamOnlineFormBean.setCity(resultSet.getString("city"));
				abdulKalamOnlineFormBean.setState(resultSet.getString("state"));
				abdulKalamOnlineFormBean.setCourseName(resultSet.getString("courseName"));
				abdulKalamOnlineFormBean.setCourseYear(resultSet.getString("courseYear"));
				abdulKalamOnlineFormBean.setFeesAmount(resultSet.getString("feesAmount"));
				abdulKalamOnlineFormBean.setRemarks(resultSet.getString("remarks"));

				abdulKalamOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getAbdulKalamDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getAbdulKalamDetails(" + abdulKalamOnlineFormBean + ") - END");
		return abdulKalamOnlineFormBean;
	}
	public String insertJainSubodhDetails(SSJainSubodhOnlineFormBean ssJainSubodhOnlineFormBean,String billerId){

		long startTime = System.currentTimeMillis();
		logger.info("insertJainSubodhDetails(" + ssJainSubodhOnlineFormBean + ") - START");
		logger.info("insertJainSubodhDetails---billerId : "+billerId);

		String responseString = null;
		/*try{

			callableStatement = con.prepareCall("{call PROC_Jain_Subodh_Details(?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,ssJainSubodhOnlineFormBean.getFormNo());
			callableStatement.setString(2,ssJainSubodhOnlineFormBean.getName());
			callableStatement.setString(3,ssJainSubodhOnlineFormBean.getFatherName());
			callableStatement.setString(4,ssJainSubodhOnlineFormBean.getMobileNumber());
			callableStatement.setString(5,ssJainSubodhOnlineFormBean.getCourse());
			callableStatement.setString(6,ssJainSubodhOnlineFormBean.getCourseName());
			callableStatement.setString(7,ssJainSubodhOnlineFormBean.getFeeAmount());
			callableStatement.setString(8,ssJainSubodhOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(9,billerId);

			callableStatement.registerOutParameter(10, Types.VARCHAR);
			callableStatement.registerOutParameter(11, Types.VARCHAR);
			callableStatement.registerOutParameter(12, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(12); 
			ssJainSubodhOnlineFormBean.setStudentRegistrationId(callableStatement.getString(11));
			ssJainSubodhOnlineFormBean.setApplicationNo(callableStatement.getString(10));
			logger.info("responseString : - " + responseString);
*/
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,ssJainSubodhOnlineFormBean.getFeeAmount());
			callableStatement.setString(2,ssJainSubodhOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,ssJainSubodhOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			ssJainSubodhOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			ssJainSubodhOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);


		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertJainSubodhDetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("ssJainSubodhOnlineFormBean(" + ssJainSubodhOnlineFormBean + ") - END");	
		return responseString;
	}
	public SSJainSubodhOnlineFormBean getJainSubodhDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("SSJainSubodhOnlineFormBean(" + applicationNo + ") - START");  
		SSJainSubodhOnlineFormBean jainSubodhOnlineFormBean = new SSJainSubodhOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_JAIN_SUBODH_DETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	
				jainSubodhOnlineFormBean.setFormNo(resultSet.getString("formNo"));
				jainSubodhOnlineFormBean.setName(resultSet.getString("name"));
				jainSubodhOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				jainSubodhOnlineFormBean.setMobileNumber(resultSet.getString("mobileNumber"));
				jainSubodhOnlineFormBean.setCourse(resultSet.getString("course"));
				jainSubodhOnlineFormBean.setCourseName(resultSet.getString("courseName"));
				jainSubodhOnlineFormBean.setFeeAmount(resultSet.getString("feeAmount"));
				jainSubodhOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getJainSubodhDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getJainSubodhDetails(" + jainSubodhOnlineFormBean + ") - END");
		return jainSubodhOnlineFormBean;
	}
	public String insertNaiminathDetails(NaiminathOnlineFormBean naiminathOnlineFormBean,String billerId){

		long startTime = System.currentTimeMillis();
		logger.info("insertNaiminathDetails(" + naiminathOnlineFormBean + ") - START");
		logger.info("insertNaiminathDetails---billerId : "+billerId);

		String responseString = null;
		/*try{

			callableStatement = con.prepareCall("{call PROC_Naiminath_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,naiminathOnlineFormBean.getStudentName());
			callableStatement.setString(2,naiminathOnlineFormBean.getAadhaarCardNo());
			callableStatement.setString(3,naiminathOnlineFormBean.getMobileNo());
			callableStatement.setString(4,naiminathOnlineFormBean.getEmailId());
			callableStatement.setString(5,naiminathOnlineFormBean.getCity());
			callableStatement.setString(6,naiminathOnlineFormBean.getState());
			callableStatement.setString(7,naiminathOnlineFormBean.getCourseName());
			callableStatement.setString(8,naiminathOnlineFormBean.getFeesAmount());
			callableStatement.setString(9,naiminathOnlineFormBean.getRemarks());


			callableStatement.setString(10,naiminathOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(11,billerId);

			callableStatement.registerOutParameter(12, Types.VARCHAR);
			callableStatement.registerOutParameter(13, Types.VARCHAR);
			callableStatement.registerOutParameter(14, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(14); 
			naiminathOnlineFormBean.setStudentRegistrationId(callableStatement.getString(13));
			naiminathOnlineFormBean.setApplicationNo(callableStatement.getString(12));
			logger.info("responseString : - " + responseString);
*/
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,naiminathOnlineFormBean.getFeesAmount());
			callableStatement.setString(2,naiminathOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,naiminathOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			naiminathOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			naiminathOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertNaiminathDetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("naiminathOnlineFormBean(" + naiminathOnlineFormBean + ") - END");	
		return responseString;
	}
	public NaiminathOnlineFormBean getNaiminathDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("NaiminathOnlineFormBean(" + applicationNo + ") - START");  
		NaiminathOnlineFormBean naiminathOnlineFormBean = new NaiminathOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_NAIMINATH_DETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	
				naiminathOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				naiminathOnlineFormBean.setAadhaarCardNo(resultSet.getString("aadhaarCardNo"));
				naiminathOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));
				naiminathOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				naiminathOnlineFormBean.setCity(resultSet.getString("city"));
				naiminathOnlineFormBean.setState(resultSet.getString("state"));
				naiminathOnlineFormBean.setCourseName(resultSet.getString("courseName"));
				naiminathOnlineFormBean.setFeesAmount(resultSet.getString("feesAmount"));
				naiminathOnlineFormBean.setRemarks(resultSet.getString("remarks"));
				naiminathOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getNaiminathDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getNaiminathDetails(" + naiminathOnlineFormBean + ") - END");
		return naiminathOnlineFormBean;
	}
	public String insertSPHSchoolDetails(SPHSchoolOnlineFormBean sphSchoolOnlineFormBean,String billerId){

		long startTime = System.currentTimeMillis();
		logger.info("insertSPHSchoolDetails(" + sphSchoolOnlineFormBean + ") - START");
		logger.info("insertSPHSchoolDetails---billerId : "+billerId);

		String responseString = null;
		/*try{

			callableStatement = con.prepareCall("{call PROC_SPHSchool_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,sphSchoolOnlineFormBean.getAdmissionNo());
			callableStatement.setString(2,sphSchoolOnlineFormBean.getStudentName());
			callableStatement.setString(3,sphSchoolOnlineFormBean.getCclass());
			callableStatement.setString(4,sphSchoolOnlineFormBean.getSection());
			callableStatement.setString(5,sphSchoolOnlineFormBean.getFatherName());
			callableStatement.setString(6,sphSchoolOnlineFormBean.getDate());
			callableStatement.setString(7,sphSchoolOnlineFormBean.getMobileNumber());
			callableStatement.setString(8,sphSchoolOnlineFormBean.getSchoolFee());
			callableStatement.setString(9,sphSchoolOnlineFormBean.getTotalAmount());



			callableStatement.setString(10,sphSchoolOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(11,billerId);

			callableStatement.registerOutParameter(12, Types.VARCHAR);
			callableStatement.registerOutParameter(13, Types.VARCHAR);
			callableStatement.registerOutParameter(14, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(14); 
			sphSchoolOnlineFormBean.setStudentRegistrationId(callableStatement.getString(13));
			sphSchoolOnlineFormBean.setApplicationNo(callableStatement.getString(12));
			logger.info("responseString : - " + responseString);*/
		
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,sphSchoolOnlineFormBean.getSchoolFee());
			callableStatement.setString(2,sphSchoolOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,sphSchoolOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			sphSchoolOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			sphSchoolOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);




		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSPHSchoolDetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("sphSchoolOnlineFormBean(" + sphSchoolOnlineFormBean + ") - END");	
		return responseString;
	}
	public SPHSchoolOnlineFormBean getSPHSchoolDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("SPHSchoolOnlineFormBean(" + applicationNo + ") - START");  
		SPHSchoolOnlineFormBean sphSchoolOnlineFormBean = new SPHSchoolOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_SPHSchool_DETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	
				sphSchoolOnlineFormBean.setAdmissionNo(resultSet.getString("admissionNo"));
				sphSchoolOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				sphSchoolOnlineFormBean.setCclass(resultSet.getString("class"));
				sphSchoolOnlineFormBean.setSection(resultSet.getString("section"));
				sphSchoolOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				sphSchoolOnlineFormBean.setDate(resultSet.getString("date"));
				sphSchoolOnlineFormBean.setMobileNumber(resultSet.getString("mobileNumber"));
				sphSchoolOnlineFormBean.setSchoolFee(resultSet.getString("schoolFee"));
				sphSchoolOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));
				sphSchoolOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getSPHSchoolDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getSPHSchoolDetails(" + sphSchoolOnlineFormBean + ") - END");
		return sphSchoolOnlineFormBean;
	}

	//Goenka START
	@Override
	public String insertGOENKADetails(GOENKAOnlineFormBean goenkaOnlineFormBean,
			String billerId) {
		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("insertGOENKADetails(" + goenkaOnlineFormBean + ") - START");
		logger.info("insertGOENKADetails---billerId : "+billerId);

		String responseString = null;
		/*try{

	callableStatement = con.prepareCall("{call PROC_GOENKA_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

	callableStatement.setString(1,goenkaOnlineFormBean.getStudName());
	callableStatement.setString(2,goenkaOnlineFormBean.getDateOfBirth());
	callableStatement.setString(3,goenkaOnlineFormBean.getGender());
	callableStatement.setString(4,goenkaOnlineFormBean.getMobileNo());
	callableStatement.setString(5,goenkaOnlineFormBean.getPermAddress());
	callableStatement.setString(6,goenkaOnlineFormBean.getCurrAddress()==null?"":goenkaOnlineFormBean.getCurrAddress());
	callableStatement.setString(7,goenkaOnlineFormBean.getFatherName());
	callableStatement.setString(8,goenkaOnlineFormBean.getFatherOccupation()==null?"":goenkaOnlineFormBean.getFatherOccupation());
	callableStatement.setString(9,goenkaOnlineFormBean.getFatherDesignation()==null?"":goenkaOnlineFormBean.getFatherDesignation());
	callableStatement.setString(10,goenkaOnlineFormBean.getFatherCompanyName()==null?"":goenkaOnlineFormBean.getFatherCompanyName());
	callableStatement.setString(11,goenkaOnlineFormBean.getFatherContachNumber()==null?"":goenkaOnlineFormBean.getFatherContachNumber());
	callableStatement.setString(12,goenkaOnlineFormBean.getFatherEmailId()==null?"":goenkaOnlineFormBean.getFatherEmailId());
	callableStatement.setString(13,goenkaOnlineFormBean.getMotherName());
	callableStatement.setString(14,goenkaOnlineFormBean.getMotherOccupation()==null?"":goenkaOnlineFormBean.getMotherOccupation());
	callableStatement.setString(15,goenkaOnlineFormBean.getMotherDesignation()==null?"":goenkaOnlineFormBean.getMotherDesignation());
	callableStatement.setString(16,goenkaOnlineFormBean.getMotherCompanyName()==null?"":goenkaOnlineFormBean.getMotherCompanyName());
	callableStatement.setString(17,goenkaOnlineFormBean.getMotherContachNumber()==null?"":goenkaOnlineFormBean.getMotherContachNumber());
	callableStatement.setString(18,goenkaOnlineFormBean.getMotherEmailId()==null?"":goenkaOnlineFormBean.getMotherEmailId());
	callableStatement.setString(19,goenkaOnlineFormBean.getNationality());
	callableStatement.setString(20,goenkaOnlineFormBean.getDesiredGrade());
	callableStatement.setString(21,goenkaOnlineFormBean.getSession());
	callableStatement.setString(22,goenkaOnlineFormBean.getOciPassport());
	callableStatement.setString(23,goenkaOnlineFormBean.getOtherInfo()==null?"":goenkaOnlineFormBean.getOtherInfo());
	callableStatement.setString(24,goenkaOnlineFormBean.getTotalAmount());

	callableStatement.setString(25,goenkaOnlineFormBean.getRegisteredUserId());				
	callableStatement.setString(26,billerId);

	callableStatement.registerOutParameter(27, Types.VARCHAR);
	callableStatement.registerOutParameter(28, Types.VARCHAR);
	callableStatement.registerOutParameter(29, Types.VARCHAR);

	callableStatement.execute(); 

	responseString = callableStatement.getString(29); 
	goenkaOnlineFormBean.setStudentRegistrationId(callableStatement.getString(28));
	goenkaOnlineFormBean.setApplicationNo(callableStatement.getString(27));
	logger.info("responseString : - " + responseString);*/

		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,goenkaOnlineFormBean.getTotalAmount());
			callableStatement.setString(2,goenkaOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,goenkaOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			goenkaOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			goenkaOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);

		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertGOENKADetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("goenkaOnlineFormBean(" + goenkaOnlineFormBean + ") - END");	
		return responseString;
	}

	@Override
	public GOENKAOnlineFormBean getGoenkaStudentDetails(String applicationNo) {
		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("GOENKAOnlineFormBean(" + applicationNo + ") - START");  
		GOENKAOnlineFormBean goenkaOnlineFormBean = new GOENKAOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_GOENKA_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	
				goenkaOnlineFormBean.setStudName(resultSet.getString("studName"));
				goenkaOnlineFormBean.setDateOfBirth(resultSet.getString("dateOfBirth"));
				goenkaOnlineFormBean.setGender(resultSet.getString("gender"));
				goenkaOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));
				goenkaOnlineFormBean.setPermAddress(resultSet.getString("permAddress"));
				goenkaOnlineFormBean.setCurrAddress(resultSet.getString("currAddress"));
				goenkaOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				goenkaOnlineFormBean.setFatherOccupation(resultSet.getString("fatherOccupation"));
				goenkaOnlineFormBean.setFatherDesignation(resultSet.getString("fatherDesignation"));
				goenkaOnlineFormBean.setFatherCompanyName(resultSet.getString("fatherCompanyName"));
				goenkaOnlineFormBean.setFatherContachNumber(resultSet.getString("fatherContachNumber"));
				goenkaOnlineFormBean.setFatherEmailId(resultSet.getString("fatherEmailId"));
				goenkaOnlineFormBean.setMotherName(resultSet.getString("motherName"));
				goenkaOnlineFormBean.setMotherOccupation(resultSet.getString("motherOccupation"));
				goenkaOnlineFormBean.setMotherDesignation(resultSet.getString("motherDesignation"));
				goenkaOnlineFormBean.setMotherCompanyName(resultSet.getString("motherCompanyName"));
				goenkaOnlineFormBean.setMotherContachNumber(resultSet.getString("motherContachNumber"));
				goenkaOnlineFormBean.setMotherEmailId(resultSet.getString("motherEmailId"));
				goenkaOnlineFormBean.setNationality(resultSet.getString("nationality"));
				goenkaOnlineFormBean.setDesiredGrade(resultSet.getString("desiredGrade"));
				goenkaOnlineFormBean.setSession(resultSet.getString("session"));
				goenkaOnlineFormBean.setOciPassport(resultSet.getString("ociPassport"));
				goenkaOnlineFormBean.setOtherInfo(resultSet.getString("otherInfo"));

				goenkaOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));
				goenkaOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getGoenkaStudentDetails "+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getGoenkaStudentDetails(" + goenkaOnlineFormBean + ") - END");
		return goenkaOnlineFormBean;
	}
	//Goenka END
	public String insertGRCosmicStudentDetails(GRCosmicOnlineFormBean grCosmicOnlineFormBean, String billerId){

		long startTime = System.currentTimeMillis();
		logger.info("insertGRCosmicStudentDetails(" + grCosmicOnlineFormBean + ") - START");
		logger.info("grCosmicOnlineFormBean---billerId : "+billerId);

		String responseString = null;
		/*try{

	callableStatement = con.prepareCall("{call PROC_insertGRCosmicStudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
	callableStatement.setString(1,grCosmicOnlineFormBean.getStudentId());
	callableStatement.setString(2,grCosmicOnlineFormBean.getRollNo());
	callableStatement.setString(3,grCosmicOnlineFormBean.getStudentName());
	callableStatement.setString(4,grCosmicOnlineFormBean.getFatherName());
	callableStatement.setString(5,grCosmicOnlineFormBean.getMobileNo());
	callableStatement.setString(6,grCosmicOnlineFormBean.getEmailId());
	callableStatement.setString(7,grCosmicOnlineFormBean.getCity());
	callableStatement.setString(8,grCosmicOnlineFormBean.getState());
	callableStatement.setString(9,grCosmicOnlineFormBean.getClassName());
	callableStatement.setString(10,grCosmicOnlineFormBean.getSection());
	callableStatement.setString(11,grCosmicOnlineFormBean.getFeesAmount());
	callableStatement.setString(12,grCosmicOnlineFormBean.getRemarks());


	callableStatement.setString(13,grCosmicOnlineFormBean.getRegisteredUserId());				
	callableStatement.setString(14,billerId);

	callableStatement.registerOutParameter(15, Types.VARCHAR);
	callableStatement.registerOutParameter(16, Types.VARCHAR);
	callableStatement.registerOutParameter(17, Types.VARCHAR);

	callableStatement.execute(); 

	responseString = callableStatement.getString(17); 
	grCosmicOnlineFormBean.setStudentRegistrationId(callableStatement.getString(16));
	grCosmicOnlineFormBean.setApplicationNo(callableStatement.getString(15));
	logger.info("responseString : - " + responseString);
		 */	
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,grCosmicOnlineFormBean.getFeesAmount());
			callableStatement.setString(2,grCosmicOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,grCosmicOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			grCosmicOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			grCosmicOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);

		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch grCosmicOnlineFormBean"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("grCosmicOnlineFormBean(" + grCosmicOnlineFormBean + ") - END");	
		return responseString;
	}
	public GRCosmicOnlineFormBean getGRCosmicStudentDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getGRCosmicStudentDetails(" + applicationNo + ") - START");  
		GRCosmicOnlineFormBean grCosmicOnlineFormBean = new GRCosmicOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_GRCosmic_DETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {	
				grCosmicOnlineFormBean.setStudentId(resultSet.getString("studentId"));
				grCosmicOnlineFormBean.setRollNo(resultSet.getString("rollNo"));
				grCosmicOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				grCosmicOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				grCosmicOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));
				grCosmicOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				grCosmicOnlineFormBean.setCity(resultSet.getString("city"));
				grCosmicOnlineFormBean.setState(resultSet.getString("state"));
				grCosmicOnlineFormBean.setClassName(resultSet.getString("className"));
				grCosmicOnlineFormBean.setSection(resultSet.getString("section"));
				grCosmicOnlineFormBean.setFeesAmount(resultSet.getString("feesAmount"));
				grCosmicOnlineFormBean.setRemarks(resultSet.getString("remarks"));
				grCosmicOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getGRCosmicStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getGRCosmicStudentDetails(" + grCosmicOnlineFormBean + ") - END");
		return grCosmicOnlineFormBean;
	}
	public String insertSwamiTempleDetails(SwamiTempleOnlineFormBean swamiTempleOnlineFormBean, String billerId){

		long startTime = System.currentTimeMillis();
		logger.info("insertSwamiTempleDetails(" + swamiTempleOnlineFormBean + ") - START");
		logger.info("swamiTempleOnlineFormBean---billerId : "+billerId);

		String responseString = null;
		try{

			callableStatement = con.prepareCall("{call PROC_SwamiTemple_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,swamiTempleOnlineFormBean.getDonorName());
			callableStatement.setString(2,swamiTempleOnlineFormBean.getFullPostalAddress());
			callableStatement.setString(3,swamiTempleOnlineFormBean.getContactNumber());
			callableStatement.setString(4,swamiTempleOnlineFormBean.getEmailId());
			callableStatement.setString(5,swamiTempleOnlineFormBean.getValidIdProof());
			callableStatement.setString(6,swamiTempleOnlineFormBean.getValidIdProofNumber());
			callableStatement.setString(7,swamiTempleOnlineFormBean.getNameOfPooja());
			callableStatement.setString(8,swamiTempleOnlineFormBean.getGothram());
			callableStatement.setString(9,swamiTempleOnlineFormBean.getNakshathram());
			callableStatement.setString(10,swamiTempleOnlineFormBean.getPoojaDate());
			callableStatement.setString(11,swamiTempleOnlineFormBean.getNameOfPoojaPerformed());
			callableStatement.setString(12,swamiTempleOnlineFormBean.getNameOfPoojaSubCategory());
			callableStatement.setString(13,swamiTempleOnlineFormBean.getAmount());
			callableStatement.setString(14,swamiTempleOnlineFormBean.getTransactionType());




			callableStatement.setString(15,swamiTempleOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(16,billerId);

			callableStatement.registerOutParameter(17, Types.VARCHAR);
			callableStatement.registerOutParameter(18, Types.VARCHAR);
			callableStatement.registerOutParameter(19, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(19); 
			swamiTempleOnlineFormBean.setStudentRegistrationId(callableStatement.getString(18));
			swamiTempleOnlineFormBean.setApplicationNo(callableStatement.getString(17));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch swamiTempleOnlineFormBean"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("swamiTempleOnlineFormBean(" + swamiTempleOnlineFormBean + ") - END");	
		return responseString;
	}
	public SwamiTempleOnlineFormBean getSwamiTempleDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("SwamiTempleOnlineFormBean(" + applicationNo + ") - START");  
		SwamiTempleOnlineFormBean swamiTempleOnlineFormBean = new SwamiTempleOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_SwamiTemple_DETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	
				swamiTempleOnlineFormBean.setDonorName(resultSet.getString("donorName"));
				swamiTempleOnlineFormBean.setFullPostalAddress(resultSet.getString("fullPostalAddress"));
				swamiTempleOnlineFormBean.setContactNumber(resultSet.getString("contactNumber"));
				swamiTempleOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				swamiTempleOnlineFormBean.setValidIdProof(resultSet.getString("validIdProof"));
				swamiTempleOnlineFormBean.setValidIdProofNumber(resultSet.getString("validIdProofNumber"));
				swamiTempleOnlineFormBean.setNameOfPooja(resultSet.getString("nameOfPooja"));
				swamiTempleOnlineFormBean.setGothram(resultSet.getString("gothram"));
				swamiTempleOnlineFormBean.setNakshathram(resultSet.getString("nakshathram"));
				swamiTempleOnlineFormBean.setPoojaDate(resultSet.getString("poojaDate"));
				swamiTempleOnlineFormBean.setNameOfPoojaPerformed(resultSet.getString("nameOfPoojaPerformed"));
				swamiTempleOnlineFormBean.setNameOfPoojaSubCategory(resultSet.getString("nameOfPoojaSubCategory"));
				swamiTempleOnlineFormBean.setAmount(resultSet.getString("amount"));
				swamiTempleOnlineFormBean.setTransactionType(resultSet.getString("transactionType"));

				swamiTempleOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getSwamiTempleDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getSwamiTempleDetails(" + swamiTempleOnlineFormBean + ") - END");
		return swamiTempleOnlineFormBean;
	}
	public String insertPrarambhDetails(PrarambhOnlineFormBean prarambhOnlineFormBean, String billerId){

		long startTime = System.currentTimeMillis();
		logger.info("insertPrarambhDetails(" + prarambhOnlineFormBean + ") - START");
		logger.info("prarambhOnlineFormBean---billerId : "+billerId);

		String responseString = null;
		try{

			callableStatement = con.prepareCall("{call PROC_Prarambha_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,prarambhOnlineFormBean.getStudentName());
			callableStatement.setString(2,prarambhOnlineFormBean.getFatherName());
			callableStatement.setString(3,prarambhOnlineFormBean.getBatch());
			callableStatement.setString(4,prarambhOnlineFormBean.getStudentId());
			callableStatement.setString(5,prarambhOnlineFormBean.getDateofBirth());
			callableStatement.setString(6,prarambhOnlineFormBean.getPhoneNo());
			callableStatement.setString(7,prarambhOnlineFormBean.getEmailId());
			callableStatement.setString(8,prarambhOnlineFormBean.getCourse());
			callableStatement.setString(9,prarambhOnlineFormBean.getFeeType());
			callableStatement.setString(10,prarambhOnlineFormBean.getTotalAmount());
			callableStatement.setString(11,prarambhOnlineFormBean.getGender());



			callableStatement.setString(12,prarambhOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(13,billerId);

			callableStatement.registerOutParameter(14, Types.VARCHAR);
			callableStatement.registerOutParameter(15, Types.VARCHAR);
			callableStatement.registerOutParameter(16, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(16); 
			prarambhOnlineFormBean.setStudentRegistrationId(callableStatement.getString(15));
			prarambhOnlineFormBean.setApplicationNo(callableStatement.getString(14));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch prarambhOnlineFormBean"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("prarambhOnlineFormBean(" + prarambhOnlineFormBean + ") - END");	
		return responseString;
	}
	public PrarambhOnlineFormBean getPrarambhDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("PrarambhOnlineFormBean(" + applicationNo + ") - START");  
		PrarambhOnlineFormBean prarambhOnlineFormBean = new PrarambhOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_Prarambha_DETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	
				prarambhOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				prarambhOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				prarambhOnlineFormBean.setBatch(resultSet.getString("batch"));
				prarambhOnlineFormBean.setStudentId(resultSet.getString("studentId"));
				prarambhOnlineFormBean.setDateofBirth(resultSet.getString("dateofBirth"));
				prarambhOnlineFormBean.setPhoneNo(resultSet.getString("phoneNo"));
				prarambhOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				prarambhOnlineFormBean.setCourse(resultSet.getString("course"));
				prarambhOnlineFormBean.setGender(resultSet.getString("gender"));
				prarambhOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));


				prarambhOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getPrarambhDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getPrarambhDetails(" + prarambhOnlineFormBean + ") - END");
		return prarambhOnlineFormBean;
	}
	public String getNIPRAmount(String Department,String currency,String fixDate) {
		String response = "";
		CallableStatement callableStatement = null;

		ResultSet resultSet = null;
		try {
			callableStatement = con.prepareCall("{call PROCGETNIPRAMOUNT(?,?,?)}");
			callableStatement.setString(1, Department);
			callableStatement.setString(2, currency);
			callableStatement.setString(3, fixDate);
			resultSet = callableStatement.executeQuery();
			if(resultSet!=null){
				while (resultSet.next()) {
					response = resultSet.getString("Amount");
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			super.releaseConnection();
		}
		return response;
	}
	public String insertShmshiDetails(ShmshiOnlineFormBean shmshiOnlineFormBean,String billerId) {
		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("insertShmshiDetails(" + shmshiOnlineFormBean + ") - START");
		logger.info("insertShmshiDetails---billerId : "+billerId);

		String responseString = null;
		try{

			callableStatement = con.prepareCall("{call PROC_SHAMSI_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1,shmshiOnlineFormBean.getStudName());
			callableStatement.setString(2,shmshiOnlineFormBean.getFatherName());
			callableStatement.setString(3,shmshiOnlineFormBean.getNameofInstitute());
			callableStatement.setString(4,shmshiOnlineFormBean.getTypeOfSeat());
			callableStatement.setString(5,shmshiOnlineFormBean.getRollNo());
			callableStatement.setString(6,shmshiOnlineFormBean.getMobileNo());
			callableStatement.setString(7,shmshiOnlineFormBean.getTrade());
			callableStatement.setString(8,shmshiOnlineFormBean.getSession());
			callableStatement.setString(9,shmshiOnlineFormBean.getEmailId());
			callableStatement.setString(10,shmshiOnlineFormBean.getTotalAmount());
			callableStatement.setString(11,shmshiOnlineFormBean.getSelectSchemeCode());

			callableStatement.setString(12,shmshiOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(13,billerId);





			callableStatement.registerOutParameter(14, Types.VARCHAR);
			callableStatement.registerOutParameter(15, Types.VARCHAR);
			callableStatement.registerOutParameter(16, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(16); 
			shmshiOnlineFormBean.setStudentRegistrationId(callableStatement.getString(15));
			shmshiOnlineFormBean.setApplicationNo(callableStatement.getString(14));
			logger.info("responseString : - " + responseString);

		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertShmshiDetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("shmshiOnlineFormBean(" + shmshiOnlineFormBean + ") - END");	
		return responseString;
	}

	@Override
	public ShmshiOnlineFormBean getShmshiStudentDetails(String applicationNo) {
		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("getShmshiStudentDetails(" + applicationNo + ") - START");  
		ShmshiOnlineFormBean shmshiOnlineFormBean = new ShmshiOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_SHAMSI_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	
				shmshiOnlineFormBean.setStudName(resultSet.getString("studName"));
				shmshiOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				shmshiOnlineFormBean.setNameofInstitute(resultSet.getString("nameofInstitute"));
				shmshiOnlineFormBean.setTypeOfSeat(resultSet.getString("typeOfSeat"));
				shmshiOnlineFormBean.setRollNo(resultSet.getString("rollNo"));
				shmshiOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));
				shmshiOnlineFormBean.setTrade(resultSet.getString("trade"));
				shmshiOnlineFormBean.setSession(resultSet.getString("session"));
				shmshiOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				shmshiOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));

				shmshiOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getShmshiStudentDetails "+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getShmshiStudentDetails(" + shmshiOnlineFormBean + ") - END");
		return shmshiOnlineFormBean;
	}
	public String insertRajashtanDetails(RajsthanOnlineFormBean rajsthanOnlineFormBean,String billerId) {
		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("insertRajashtanDetails(" + rajsthanOnlineFormBean + ") - START");
		logger.info("insertRajashtanDetails---billerId : "+billerId);

		String responseString = null;
		/*try{

	callableStatement = con.prepareCall("{call PROC_Rajashtan_StudentDetails(?,?,?,?,?,?,?,?,?,?,?)}");

	callableStatement.setString(1,rajsthanOnlineFormBean.getNameOfInstitute());
	callableStatement.setString(2,rajsthanOnlineFormBean.getAddress());
	callableStatement.setString(3,rajsthanOnlineFormBean.getEmailId());
	callableStatement.setString(4,rajsthanOnlineFormBean.getMobileNo());
	callableStatement.setString(5,rajsthanOnlineFormBean.getReasonForPayment());
	callableStatement.setString(6,rajsthanOnlineFormBean.getTotalAmount());


	callableStatement.setString(7,rajsthanOnlineFormBean.getRegisteredUserId());				
	callableStatement.setString(8,billerId);

	callableStatement.registerOutParameter(9, Types.VARCHAR);
	callableStatement.registerOutParameter(10, Types.VARCHAR);
	callableStatement.registerOutParameter(11, Types.VARCHAR);

	callableStatement.execute(); 

	responseString = callableStatement.getString(11); 
	rajsthanOnlineFormBean.setStudentRegistrationId(callableStatement.getString(10));
	rajsthanOnlineFormBean.setApplicationNo(callableStatement.getString(9));
	logger.info("responseString : - " + responseString);*/

		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,rajsthanOnlineFormBean.getTotalAmount());
			callableStatement.setString(2,rajsthanOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,rajsthanOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			rajsthanOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			rajsthanOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);

		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertRajashtanDetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("rajsthanOnlineFormBean(" + rajsthanOnlineFormBean + ") - END");	
		return responseString;
	}

	@Override
	public RajsthanOnlineFormBean getRajsthanStudentDetails(String applicationNo) {
		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("getRajsthanStudentDetails(" + applicationNo + ") - START");  
		RajsthanOnlineFormBean rajsthanOnlineFormBean = new RajsthanOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_Rajshtan_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	
				rajsthanOnlineFormBean.setNameOfInstitute(resultSet.getString("nameOfInstitute"));
				rajsthanOnlineFormBean.setAddress(resultSet.getString("address"));
				rajsthanOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				rajsthanOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));
				rajsthanOnlineFormBean.setReasonForPayment(resultSet.getString("reasonForPayment"));
				rajsthanOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));

				rajsthanOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getRajsthanStudentDetails "+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getRajsthanStudentDetails(" + rajsthanOnlineFormBean + ") - END");
		return rajsthanOnlineFormBean;
	}

	public String insertPrarambhFeeDetailsDetails(PraramFeeDetailsBean praramFeeDetailsBean,String applicationNo,String billerId){

		long startTime = System.currentTimeMillis();
		logger.info("insertPrarambhFeeDetailsDetails   praramFeeDetailsBean :" + praramFeeDetailsBean + "applicationNo :"+applicationNo+" - START");
		logger.info("insertPrarambhFeeDetailsDetails---billerId : "+billerId);

		String responseString = null;
		try{

			callableStatement = con.prepareCall("{call PROC_Prarambha_InsertFee_Details(?,?,?,?)}");
			callableStatement.setString(1,praramFeeDetailsBean.getFeeType());
			callableStatement.setString(2,praramFeeDetailsBean.getFeeAmt());
			callableStatement.setString(3,applicationNo);
			callableStatement.registerOutParameter(4, Types.VARCHAR);
			callableStatement.execute(); 
			responseString=callableStatement.getString(4);

			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch praramFeeDetailsBean"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertPrarambhFeeDetailsDetails(" + praramFeeDetailsBean + ") - END");	
		return responseString;
	}
	public ArrayList<PraramFeeDetailsBean>  getPrarambhFeeDetails(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getPrarambhFeeDetails(" + applicationNo + ") - START");  

		ArrayList<PraramFeeDetailsBean> feeDetailsList=new ArrayList<PraramFeeDetailsBean> ();
		try{
			callableStatement = con.prepareCall("{call PROC_GET_Prarambha_FeeDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {	
				PraramFeeDetailsBean praramFeeDetailsBean = new PraramFeeDetailsBean();
				praramFeeDetailsBean.setFeeType(resultSet.getString("feeType"));
				praramFeeDetailsBean.setFeeAmt(resultSet.getString("totalAmount"));
				feeDetailsList.add(praramFeeDetailsBean);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getPrarambhFeeDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getPrarambhFeeDetails    feeDetailsList.size()  :  (" + feeDetailsList.size() + ") - END");
		return feeDetailsList;
	}
	//UDAIPUR START
	@Override
	public String insertUDAIPURDetails(UDAIPUROnlineFormBean udaipurOnlineFormBean,
			String billerId) {
		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("insertUDAIPURDetails(" + udaipurOnlineFormBean + ") - START");
		logger.info("insertUDAIPURDetails---billerId : "+billerId);

		String responseString = null;
		try{

			callableStatement = con.prepareCall("{call PROC_UDAIPUR_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1,udaipurOnlineFormBean.getStudName());
			callableStatement.setString(2,udaipurOnlineFormBean.getFatherName());
			callableStatement.setString(3,udaipurOnlineFormBean.getNameOfInstitute());
			callableStatement.setString(4,udaipurOnlineFormBean.getTypeSeat());
			callableStatement.setString(5, udaipurOnlineFormBean.getFeeTypeSeat());
			callableStatement.setString(6,udaipurOnlineFormBean.getRegistrationNo());
			callableStatement.setString(7,udaipurOnlineFormBean.getMobileNo());
			callableStatement.setString(8,udaipurOnlineFormBean.getTrade());
			callableStatement.setString(9,udaipurOnlineFormBean.getSession());
			callableStatement.setString(10,udaipurOnlineFormBean.getEmailId());
			callableStatement.setString(11,udaipurOnlineFormBean.getTotalAmount());

			callableStatement.setString(12,udaipurOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(13,billerId);

			callableStatement.registerOutParameter(14, Types.VARCHAR);
			callableStatement.registerOutParameter(15, Types.VARCHAR);
			callableStatement.registerOutParameter(16, Types.VARCHAR);

			callableStatement.execute(); 


			responseString = callableStatement.getString(16); 
			udaipurOnlineFormBean.setStudentRegistrationId(callableStatement.getString(15));
			udaipurOnlineFormBean.setApplicationNo(callableStatement.getString(14));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertUDAIPURDetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("udaipurOnlineFormBean(" + udaipurOnlineFormBean + ") - END");	
		return responseString;
	}

	@Override
	public UDAIPUROnlineFormBean getUDAIPURStudentDetails(String applicationNo) {
		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("getUDAIPURStudentDetails(" + applicationNo + ") - START");  
		UDAIPUROnlineFormBean udaipurOnlineFormBean = new UDAIPUROnlineFormBean();


		try{
			callableStatement = con.prepareCall("{call PROC_GET_UDAIPUR_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			
				udaipurOnlineFormBean.setStudName(resultSet.getString("studName"));
				udaipurOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				udaipurOnlineFormBean.setNameOfInstitute(resultSet.getString("nameOfInstitute"));
				udaipurOnlineFormBean.setTypeSeat(resultSet.getString("typeSeat"));
				udaipurOnlineFormBean.setRegistrationNo(resultSet.getString("registrationNo"));
				udaipurOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));
				udaipurOnlineFormBean.setTrade(resultSet.getString("trade"));
				udaipurOnlineFormBean.setSession(resultSet.getString("session"));
				udaipurOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				udaipurOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));

				udaipurOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getUDAIPURStudentDetails "+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getUDAIPURStudentDetails(" + udaipurOnlineFormBean + ") - END");
		return udaipurOnlineFormBean;
	}
	//UDAIPUR END

	//ratanala start

	@Override
	public String insertRatanalaDetails(
			RatanalaOnlineFormBean ratanalaOnlineFormBean, String billerId) {

		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("insertRatanalaDetails(" + ratanalaOnlineFormBean + ") - START");
		logger.info("insertRatanalaDetails---billerId : "+billerId);

		String responseString = null;
		try{

			callableStatement = con.prepareCall("{call PROC_Ratanala_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1,ratanalaOnlineFormBean.getNameOfStudent());
			callableStatement.setString(2,ratanalaOnlineFormBean.getInvoiceNumber());
			callableStatement.setString(3,ratanalaOnlineFormBean.getDiscription());
			callableStatement.setString(4,ratanalaOnlineFormBean.getMobileNo());
			callableStatement.setString(5,ratanalaOnlineFormBean.getEmailId());
			callableStatement.setString(6,ratanalaOnlineFormBean.getTotalAmount());
			callableStatement.setString(7,ratanalaOnlineFormBean.getScholarNoEntry());


			callableStatement.setString(8,ratanalaOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(9,billerId);

			callableStatement.registerOutParameter(10, Types.VARCHAR);
			callableStatement.registerOutParameter(11, Types.VARCHAR);
			callableStatement.registerOutParameter(12, Types.VARCHAR);

			callableStatement.execute(); 


			responseString = callableStatement.getString(12); 
			ratanalaOnlineFormBean.setStudentRegistrationId(callableStatement.getString(11));
			ratanalaOnlineFormBean.setApplicationNo(callableStatement.getString(10));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertRatanalaDetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("ratanalaOnlineFormBean(" + ratanalaOnlineFormBean + ") - END");	
		return responseString;

	}

	@Override
	public RatanalaOnlineFormBean getRatanalaStudentDetails(String applicationNo) {
		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("getRatanalaStudentDetails(" + applicationNo + ") - START");  
		RatanalaOnlineFormBean ratanalaOnlineFormBean = new RatanalaOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_RATANALA_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			
				ratanalaOnlineFormBean.setNameOfStudent(resultSet.getString("studName"));
				ratanalaOnlineFormBean.setInvoiceNumber(resultSet.getString("invoiceNumber"));
				ratanalaOnlineFormBean.setDiscription(resultSet.getString("discription"));
				ratanalaOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));
				ratanalaOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				ratanalaOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));
				ratanalaOnlineFormBean.setScholarNoEntry(resultSet.getString("scholarNoEntry"));

				ratanalaOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getRatanalaStudentDetails "+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getRatanalaStudentDetails(" + ratanalaOnlineFormBean + ") - END");
		return ratanalaOnlineFormBean;
	}
	//ratanala end

	//9 online form start
	public String insertVenkatEduDetails(VenkatEduOnlineFormBean venkatEduOnlineFormBean,String billerId) {

		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("venkatEduOnlineFormBean(" + venkatEduOnlineFormBean + ") - START");
		logger.info("venkatEduOnlineFormBean---billerId : "+billerId);

		String responseString = null;
		/*try{

	callableStatement = con.prepareCall("{call PROC_Venkat_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

	callableStatement.setString(1,venkatEduOnlineFormBean.getStudentName());
	callableStatement.setString(2,venkatEduOnlineFormBean.getRollNo());
	callableStatement.setString(3,venkatEduOnlineFormBean.getFatherName());
	callableStatement.setString(4,venkatEduOnlineFormBean.getCourse());
	callableStatement.setString(5,venkatEduOnlineFormBean.getBranch());
	callableStatement.setString(6,venkatEduOnlineFormBean.getSemester());
	callableStatement.setString(7,venkatEduOnlineFormBean.getFeeType());
	callableStatement.setString(8,venkatEduOnlineFormBean.getYear());
	callableStatement.setString(9,venkatEduOnlineFormBean.getFeesamount());


	callableStatement.setString(10,venkatEduOnlineFormBean.getRegisteredUserId());
	callableStatement.setString(11,billerId);

	callableStatement.registerOutParameter(12, Types.VARCHAR);
	callableStatement.registerOutParameter(13, Types.VARCHAR);
	callableStatement.registerOutParameter(14, Types.VARCHAR);

	callableStatement.execute(); 


	responseString = callableStatement.getString(14); 
	venkatEduOnlineFormBean.setStudentRegistrationId(callableStatement.getString(13));
	venkatEduOnlineFormBean.setApplicationNo(callableStatement.getString(12));
	logger.info("responseString : - " + responseString);*/

		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,venkatEduOnlineFormBean.getFeesamount());
			callableStatement.setString(2,venkatEduOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,venkatEduOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			venkatEduOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			venkatEduOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);

		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch venkatEduOnlineFormBean"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("venkatEduOnlineFormBean(" + venkatEduOnlineFormBean + ") - END");	
		return responseString;

	}

	@Override
	public VenkatEduOnlineFormBean getVenkatEduStudentDetails(String applicationNo) {
		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("getVenkatEduStudentDetails(" + applicationNo + ") - START");  
		VenkatEduOnlineFormBean venkatEduOnlineFormBean = new VenkatEduOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_VenkatEdu_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			
				venkatEduOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				venkatEduOnlineFormBean.setRollNo(resultSet.getString("rollNo"));
				venkatEduOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				venkatEduOnlineFormBean.setCourse(resultSet.getString("course"));
				venkatEduOnlineFormBean.setBranch(resultSet.getString("branch"));
				venkatEduOnlineFormBean.setSemester(resultSet.getString("semester"));
				venkatEduOnlineFormBean.setFeeType(resultSet.getString("feeType"));
				venkatEduOnlineFormBean.setYear(resultSet.getString("year"));
				venkatEduOnlineFormBean.setFeesamount(resultSet.getString("feesamount"));

				venkatEduOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getVenkatEduStudentDetails "+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getVenkatEduStudentDetails(" + venkatEduOnlineFormBean + ") - END");
		return venkatEduOnlineFormBean;
	}
	//online for 9 end
	public String insertMahaEduDetails(MahaEduOnlineFormBean mahaEduOnlineFormBean,String billerId) {

		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("mahaEduOnlineFormBean(" + mahaEduOnlineFormBean + ") - START");
		logger.info("mahaEduOnlineFormBean---billerId : "+billerId);

		String responseString = null;
		/*try{

	callableStatement = con.prepareCall("{call PROC_MahaEdu_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

	callableStatement.setString(1,mahaEduOnlineFormBean.getFirstName());
	callableStatement.setString(2,mahaEduOnlineFormBean.getMiddleName());
	callableStatement.setString(3,mahaEduOnlineFormBean.getLastName());
	callableStatement.setString(4,mahaEduOnlineFormBean.getAddress1());
	callableStatement.setString(5,mahaEduOnlineFormBean.getAddress2());
	callableStatement.setString(6,mahaEduOnlineFormBean.getCity());
	callableStatement.setString(7,mahaEduOnlineFormBean.getPinCode());
	callableStatement.setString(8,mahaEduOnlineFormBean.getState());
	callableStatement.setString(9,mahaEduOnlineFormBean.getCountry());
	callableStatement.setString(10,mahaEduOnlineFormBean.getEmail());
	callableStatement.setString(11,mahaEduOnlineFormBean.getTelePhone());
	callableStatement.setString(12,mahaEduOnlineFormBean.getCitizenshipStatus());
	callableStatement.setString(13,mahaEduOnlineFormBean.getAdharNo());
	callableStatement.setString(14,mahaEduOnlineFormBean.getPanNo());
	callableStatement.setString(15,mahaEduOnlineFormBean.getPurposeOfDonation());
	callableStatement.setString(16,mahaEduOnlineFormBean.getAmount());



	callableStatement.setString(17,mahaEduOnlineFormBean.getRegisteredUserId());
	callableStatement.setString(18,billerId);

	callableStatement.registerOutParameter(19, Types.VARCHAR);
	callableStatement.registerOutParameter(20, Types.VARCHAR);
	callableStatement.registerOutParameter(21, Types.VARCHAR);

	callableStatement.execute(); 


	responseString = callableStatement.getString(21); 
	mahaEduOnlineFormBean.setStudentRegistrationId(callableStatement.getString(20));
	mahaEduOnlineFormBean.setApplicationNo(callableStatement.getString(19));
	logger.info("responseString : - " + responseString);*/

		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,mahaEduOnlineFormBean.getAmount());
			callableStatement.setString(2,mahaEduOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,mahaEduOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			mahaEduOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			mahaEduOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);




		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertMahaEduDetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("mahaEduOnlineFormBean(" + mahaEduOnlineFormBean + ") - END");	
		return responseString;

	}

	@Override
	public MahaEduOnlineFormBean getMahaEduStudentDetails(String applicationNo) {
		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("getMahaEduStudentDetails(" + applicationNo + ") - START");  
		MahaEduOnlineFormBean mahaEduOnlineFormBean = new MahaEduOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_MahaEdu_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			
				mahaEduOnlineFormBean.setFirstName(resultSet.getString("firstName"));
				mahaEduOnlineFormBean.setMiddleName(resultSet.getString("middleName"));
				mahaEduOnlineFormBean.setLastName(resultSet.getString("lastName"));
				mahaEduOnlineFormBean.setAddress1(resultSet.getString("address1"));
				mahaEduOnlineFormBean.setAddress2(resultSet.getString("address1"));
				mahaEduOnlineFormBean.setCity(resultSet.getString("city"));
				mahaEduOnlineFormBean.setPinCode(resultSet.getString("pinCode"));
				mahaEduOnlineFormBean.setState(resultSet.getString("state"));
				mahaEduOnlineFormBean.setCountry(resultSet.getString("country"));
				mahaEduOnlineFormBean.setEmail(resultSet.getString("email"));
				mahaEduOnlineFormBean.setTelePhone(resultSet.getString("telePhone"));
				mahaEduOnlineFormBean.setCitizenshipStatus(resultSet.getString("citizenshipOfStatus"));
				mahaEduOnlineFormBean.setAdharNo(resultSet.getString("AdharNo"));
				mahaEduOnlineFormBean.setPanNo(resultSet.getString("panNo"));
				mahaEduOnlineFormBean.setPurposeOfDonation(resultSet.getString("purposeOfDonation"));
				mahaEduOnlineFormBean.setAmount(resultSet.getString("amount"));


				mahaEduOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getMahaEduStudentDetails "+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getMahaEduStudentDetails(" + mahaEduOnlineFormBean + ") - END");
		return mahaEduOnlineFormBean;
	}

	public String insertAsianDetails(AsianOnlineFormBean asianOnlineFormBean,String billerId){

		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("asianOnlineFormBean(" + asianOnlineFormBean + ") - START");
		logger.info("asianOnlineFormBean---billerId : "+billerId);

		String responseString = null;
		/*try{

	callableStatement = con.prepareCall("{call PROC_Asian_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

	callableStatement.setString(1,asianOnlineFormBean.getStudentName());
	callableStatement.setString(2,asianOnlineFormBean.getFatherName());
	callableStatement.setString(3,asianOnlineFormBean.getEmail());
	callableStatement.setString(4,asianOnlineFormBean.getMobileNo());
	callableStatement.setString(5,asianOnlineFormBean.getAddress());
	callableStatement.setString(6,asianOnlineFormBean.getStudentType());
	callableStatement.setString(7,asianOnlineFormBean.getCourseName());
	callableStatement.setString(8,asianOnlineFormBean.getRemark());
	callableStatement.setString(9,asianOnlineFormBean.getAmount());

	callableStatement.setString(10,asianOnlineFormBean.getRegisteredUserId());
	callableStatement.setString(11,billerId);

	callableStatement.registerOutParameter(12, Types.VARCHAR);
	callableStatement.registerOutParameter(13, Types.VARCHAR);
	callableStatement.registerOutParameter(14, Types.VARCHAR);

	callableStatement.execute(); 

	responseString = callableStatement.getString(14); 
	asianOnlineFormBean.setStudentRegistrationId(callableStatement.getString(13));
	asianOnlineFormBean.setApplicationNo(callableStatement.getString(12));
	logger.info("responseString : - " + responseString);
		 */	
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,asianOnlineFormBean.getAmount());
			callableStatement.setString(2,asianOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,asianOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			asianOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			asianOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);


		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertAsianDetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("asianOnlineFormBean(" + asianOnlineFormBean + ") - END");	
		return responseString;

	}

	@Override
	public AsianOnlineFormBean getAsianStudentDetails(String applicationNo) {
		// TODO Auto-generated method stub
		long startTime = System.currentTimeMillis();
		logger.info("getAsianStudentDetails(" + applicationNo + ") - START");  
		AsianOnlineFormBean asianOnlineFormBean = new AsianOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_Asian_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			
				asianOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				asianOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				asianOnlineFormBean.setEmail(resultSet.getString("email"));
				asianOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));
				asianOnlineFormBean.setAddress(resultSet.getString("address"));
				asianOnlineFormBean.setStudentType(resultSet.getString("studentType"));
				asianOnlineFormBean.setCourseName(resultSet.getString("courseName"));
				asianOnlineFormBean.setRemark(resultSet.getString("remark"));
				asianOnlineFormBean.setAmount(resultSet.getString("amount"));

				asianOnlineFormBean.setApplicationNo(applicationNo);

			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getAsianStudentDetails "+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getAsianStudentDetails(" + asianOnlineFormBean + ") - END");
		return asianOnlineFormBean;
	}


	@Override
	public String insertSmartrepEdu(SmartrepEductionOnlineFormBean smartrepEductionOnlineFormBean, String billerId) {

		long startTime = System.currentTimeMillis();
		logger.info("SmartrepEductionOnlineFormBean(" + smartrepEductionOnlineFormBean + ") - START");
		logger.info("SmartrepEductionOnlineFormBean---billerId : "+billerId);

		String responseString = null;
		/*try{

		callableStatement = con.prepareCall("{call PROC_SmartEduction_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

		callableStatement.setString(1,smartrepEductionOnlineFormBean.getStudentId());
		callableStatement.setString(2,smartrepEductionOnlineFormBean.getStudentName());
		callableStatement.setString(3,smartrepEductionOnlineFormBean.getStdMobileNo());
		callableStatement.setString(4,smartrepEductionOnlineFormBean.getDob());
		callableStatement.setString(5,smartrepEductionOnlineFormBean.getProduct());
		callableStatement.setString(6,smartrepEductionOnlineFormBean.getProductdetails());
		callableStatement.setString(7,smartrepEductionOnlineFormBean.getTotalfee());
		callableStatement.setString(8,smartrepEductionOnlineFormBean.getRemark());
		callableStatement.setString(9,smartrepEductionOnlineFormBean.getCenterremark());
		callableStatement.setString(10,smartrepEductionOnlineFormBean.getStuamount());
		callableStatement.setString(11,smartrepEductionOnlineFormBean.getTotalamount());

		callableStatement.setString(12,smartrepEductionOnlineFormBean.getRegisteredUserId());
		callableStatement.setString(13,billerId);

		callableStatement.registerOutParameter(14, Types.VARCHAR);
		callableStatement.registerOutParameter(15, Types.VARCHAR);
		callableStatement.registerOutParameter(16, Types.VARCHAR);

		callableStatement.execute(); 


		responseString = callableStatement.getString(16); 
		smartrepEductionOnlineFormBean.setStudentRegistrationId(callableStatement.getString(15));
		smartrepEductionOnlineFormBean.setApplicationNo(callableStatement.getString(14));
		logger.info("responseString : - " + responseString);
		 */		
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,smartrepEductionOnlineFormBean.getTotalamount());
			callableStatement.setString(2,smartrepEductionOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,smartrepEductionOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			smartrepEductionOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			smartrepEductionOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);


		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertMahaEduDetails"+e);
			}

		}

		return responseString ;
	}

	@Override
	public SmartrepEductionOnlineFormBean getSmartrepEduDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getMahaEduStudentDetails(" + applicationNo + ") - START");  
		SmartrepEductionOnlineFormBean smartrepEductionOnlineFormBean = new SmartrepEductionOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_SmartrepEducation_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			
				smartrepEductionOnlineFormBean.setStudentId(resultSet.getString("StudentID"));
				smartrepEductionOnlineFormBean.setStudentName(resultSet.getString("StudentName"));
				smartrepEductionOnlineFormBean.setStdMobileNo(resultSet.getString("MobileNo"));
				smartrepEductionOnlineFormBean.setDob(resultSet.getString("DateOfBirth"));
				smartrepEductionOnlineFormBean.setProduct(resultSet.getString("Product"));
				smartrepEductionOnlineFormBean.setProductdetails(resultSet.getString("ProductDetails"));
				smartrepEductionOnlineFormBean.setTotalfee(resultSet.getString("TotolFees"));
				smartrepEductionOnlineFormBean.setRemark(resultSet.getString("Remark"));
				smartrepEductionOnlineFormBean.setCenterremark(resultSet.getString("centerRemark"));
				smartrepEductionOnlineFormBean.setStuamount(resultSet.getString("StudAmount"));
				smartrepEductionOnlineFormBean.setTotalamount(resultSet.getString("TotalAmount"));


				smartrepEductionOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getMahaEduStudentDetails "+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getSmartrepEduDetails(" + smartrepEductionOnlineFormBean + ") - END");
		return smartrepEductionOnlineFormBean;
	}	
	public String insertindianPoliticalDetails(IndianPoliticalOnlineFormBean indianPoliticalOnlineFormBean,String billerId){

		long startTime = System.currentTimeMillis();
		logger.info("insertindianPoliticalDetails(" + indianPoliticalOnlineFormBean + ") - START");
		logger.info("insertindianPoliticalDetails---billerId : "+billerId);

		String responseString = null;
		try{

			callableStatement = con.prepareCall("{call PROC_indianPolitical_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,indianPoliticalOnlineFormBean.getName());
			callableStatement.setString(2,indianPoliticalOnlineFormBean.getDesignation());
			callableStatement.setString(3,indianPoliticalOnlineFormBean.getInstiMainingAdd());
			callableStatement.setString(4,indianPoliticalOnlineFormBean.getMemberNo());
			callableStatement.setString(5,indianPoliticalOnlineFormBean.getMobileNo());
			callableStatement.setString(6,indianPoliticalOnlineFormBean.getGender());
			callableStatement.setString(7,indianPoliticalOnlineFormBean.getEmail());
			callableStatement.setString(8,indianPoliticalOnlineFormBean.getTitalpaper());
			callableStatement.setString(9,indianPoliticalOnlineFormBean.getTravelPlan());
			callableStatement.setString(10,indianPoliticalOnlineFormBean.getPersonName());
			callableStatement.setString(11,indianPoliticalOnlineFormBean.getAccommodation());
			callableStatement.setString(12,indianPoliticalOnlineFormBean.getPersonGender());
			callableStatement.setString(13,indianPoliticalOnlineFormBean.getFee());
			callableStatement.setString(14,indianPoliticalOnlineFormBean.getAotherinfo());

			callableStatement.setString(15,indianPoliticalOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(16,billerId);

			callableStatement.registerOutParameter(17, Types.VARCHAR);
			callableStatement.registerOutParameter(18, Types.VARCHAR);
			callableStatement.registerOutParameter(19, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(19); 
			indianPoliticalOnlineFormBean.setStudentRegistrationId(callableStatement.getString(18));
			indianPoliticalOnlineFormBean.setApplicationNo(callableStatement.getString(17));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch indianPoliticalOnlineFormBean"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("indianPoliticalOnlineFormBean(" + indianPoliticalOnlineFormBean + ") - END");	
		return responseString;
	}

	public IndianPoliticalOnlineFormBean getindianPoliticalStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getindianPoliticalStudentDetails(" + applicationNo + ") - START");  
		IndianPoliticalOnlineFormBean indianPoliticalOnlineFormBean = new IndianPoliticalOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_indianPolitical_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			

				indianPoliticalOnlineFormBean.setName(resultSet.getString("name"));
				indianPoliticalOnlineFormBean.setAccommodation(resultSet.getString("accommodation"));
				indianPoliticalOnlineFormBean.setAotherinfo(resultSet.getString("aotherinfo"));
				indianPoliticalOnlineFormBean.setDesignation(resultSet.getString("designation"));
				indianPoliticalOnlineFormBean.setEmail(resultSet.getString("email"));
				indianPoliticalOnlineFormBean.setFee(resultSet.getString("fee"));
				indianPoliticalOnlineFormBean.setGender(resultSet.getString("gender"));
				indianPoliticalOnlineFormBean.setInstiMainingAdd(resultSet.getString("instiMainingAdd"));
				indianPoliticalOnlineFormBean.setMemberNo(resultSet.getString("memberNo"));
				indianPoliticalOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));
				indianPoliticalOnlineFormBean.setPersonGender(resultSet.getString("personGender"));
				indianPoliticalOnlineFormBean.setPersonName(resultSet.getString("personName"));
				indianPoliticalOnlineFormBean.setTitalpaper(resultSet.getString("titalpaper"));
				indianPoliticalOnlineFormBean.setTravelPlan(resultSet.getString("travelPlan"));

				indianPoliticalOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getindianPoliticalStudentDetails "+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getindianPoliticalStudentDetails(" + indianPoliticalOnlineFormBean + ") - END");
		return indianPoliticalOnlineFormBean;
	}

	@Override
	public String insertMalwaDetails(MalwaFormBean malwaFormBean, String billerId) {
		long startTime = System.currentTimeMillis();
		logger.info("insertMalwaDetails(" + malwaFormBean + ") - START");
		logger.info("insertMalwaDetails---billerId : "+billerId);

		String responseString = null;
		try{

			callableStatement = con.prepareCall("{call PROC_malwa_Details(?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,malwaFormBean.getName());
			callableStatement.setString(2,malwaFormBean.getFathername());
			callableStatement.setString(3,malwaFormBean.getStuid());
			callableStatement.setString(4,malwaFormBean.getStuclass());
			callableStatement.setString(5,malwaFormBean.getMobileNo());
			callableStatement.setString(6,malwaFormBean.getTotalAmount());

			callableStatement.setString(7,malwaFormBean.getRegisteredUserId());				
			callableStatement.setString(8,billerId);

			callableStatement.registerOutParameter(9, Types.VARCHAR);
			callableStatement.registerOutParameter(10, Types.VARCHAR);
			callableStatement.registerOutParameter(11, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(11); 
			malwaFormBean.setStudentRegistrationId(callableStatement.getString(10));
			malwaFormBean.setApplicationNo(callableStatement.getString(9));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch malwaFormBean"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("malwaFormBean(" + malwaFormBean + ") - END");	
		return responseString;
	}

	@Override
	public MalwaFormBean getMalwaStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getmalwaStudentDetails(" + applicationNo + ") - START");  
		MalwaFormBean malwaFormBean = new MalwaFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_Malwa_STUDENTDETAILS (?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			

				malwaFormBean.setName(resultSet.getString("name"));
				malwaFormBean.setFathername(resultSet.getString("fathername"));
				malwaFormBean.setStuid(resultSet.getString("studentid"));
				malwaFormBean.setStuclass(resultSet.getString("studentclass"));
				malwaFormBean.setMobileNo(resultSet.getString("moblieno"));
				malwaFormBean.setTotalAmount(resultSet.getString("totalAmount"));

				malwaFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getmalwaStudentDetails "+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getindianPoliticalStudentDetails(" + malwaFormBean + ") - END");
		return malwaFormBean;

	}



	@Override
	public String insertKashiDetails(KashiInstituteFormBean kashiFormBean, String instituteId) {
		long startTime = System.currentTimeMillis();
		logger.info("<START> insertKASHIStudentDetails(" + kashiFormBean + ") - START");
		logger.info("insertKASHIStudentDetails---instituteID : "+instituteId);

		String responseString = null;
		/*try{
		callableStatement = con.prepareCall("{call PROC_KASHIInstitute_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
		callableStatement.setString(1,kashiFormBean.getRollNo());
		callableStatement.setString(2,kashiFormBean.getStdName());
		callableStatement.setString(3,kashiFormBean.getMobileNo());
		callableStatement.setString(4,kashiFormBean.getEmailId());
		callableStatement.setString(5,kashiFormBean.getCourseName());
		callableStatement.setString(6,kashiFormBean.getSelectBranch());
		callableStatement.setString(7,kashiFormBean.getTotalFee());
		callableStatement.setString(8,kashiFormBean.getGuardianName());
		callableStatement.setString(9,kashiFormBean.getCollegeFee());
		callableStatement.setString(10,kashiFormBean.getHostelFee());
		callableStatement.setString(11,kashiFormBean.getTransportFee());
		callableStatement.setString(12,kashiFormBean.getRemarks());

		callableStatement.setString(13,kashiFormBean.getRegisteredUserId());
		callableStatement.setString(14,instituteId);

		callableStatement.registerOutParameter(15, Types.VARCHAR);

	    callableStatement.registerOutParameter(16, Types.VARCHAR);
	    callableStatement.registerOutParameter(17, Types.VARCHAR);

	    callableStatement.execute(); 
	    responseString = callableStatement.getString(17); 
	    kashiFormBean.setStudentRegistrationId(callableStatement.getString(16));
	    kashiFormBean.setApplicationNo(callableStatement.getString(15));
	    logger.info("responseString : - " + responseString);
		 */	    
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,kashiFormBean.getTotalFee());
			callableStatement.setString(2,kashiFormBean.getApplicationNo());
			callableStatement.setString(3,kashiFormBean.getRegisteredUserId());
			callableStatement.setString(4,instituteId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			kashiFormBean.setStudentRegistrationId(callableStatement.getString(6));
			kashiFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);


		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertKASHIStudentDetails"+e);
			}


		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END>  insertKASHIStudentDetails(" + kashiFormBean + ") - END");
		return responseString;
	}

	@Override
	public KashiInstituteFormBean getKashiStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("<START> getKashiStudentDetails(" + applicationNo + startTime +") - START");  
		KashiInstituteFormBean kashiFormBean = new KashiInstituteFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_KASHIInstitute_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {

				kashiFormBean.setRollNo(resultSet.getString("rollNo"));
				kashiFormBean.setStdName(resultSet.getString("stdName"));
				kashiFormBean.setMobileNo(resultSet.getString("mobileNo"));
				kashiFormBean.setGuardianName(resultSet.getString("gaurdian"));
				kashiFormBean.setCourseName(resultSet.getString("courseName"));
				kashiFormBean.setSelectBranch(resultSet.getString("semester"));
				kashiFormBean.setCollegeFee(resultSet.getString("CollageFees"));
				kashiFormBean.setHostelFee(resultSet.getString("HostelFess"));
				kashiFormBean.setTransportFee(resultSet.getString("Transport"));
				kashiFormBean.setRemarks(resultSet.getString("remarks"));
				kashiFormBean.setTotalFee(resultSet.getString("totalFee"));
				kashiFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getKASHIStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END> getKASHIStudentDetails(" + kashiFormBean + ") - END");
		return kashiFormBean;

	}
	public String insertSuccessEaseDetails(SuccessEaseFormBean successEaseFormBeanFormBean,String billerId){

		long startTime = System.currentTimeMillis();
		logger.info("insertSuccessEaseDetails(" + successEaseFormBeanFormBean + ") - START");
		logger.info("insertSuccessEaseDetails---billerId : "+billerId);

		String responseString = null;
		/*try{

	callableStatement = con.prepareCall("{call PROC_SuccessEase_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
	callableStatement.setString(1,successEaseFormBeanFormBean.getName());
	callableStatement.setString(2,successEaseFormBeanFormBean.getId());
	callableStatement.setString(3,successEaseFormBeanFormBean.getMobileNo());
	callableStatement.setString(4,successEaseFormBeanFormBean.getDob());
	callableStatement.setString(5,successEaseFormBeanFormBean.getProduct());
	callableStatement.setString(6,successEaseFormBeanFormBean.getFullfee());
	callableStatement.setString(7,successEaseFormBeanFormBean.getFinstallment());
	callableStatement.setString(8,successEaseFormBeanFormBean.getSinstallment());
	callableStatement.setString(9,successEaseFormBeanFormBean.getTinstallment());
	callableStatement.setString(10,successEaseFormBeanFormBean.getTotalFee());


	callableStatement.setString(11,successEaseFormBeanFormBean.getRegisteredUserId());				
	callableStatement.setString(12,billerId);

	callableStatement.registerOutParameter(13, Types.VARCHAR);
	callableStatement.registerOutParameter(14, Types.VARCHAR);
	callableStatement.registerOutParameter(15, Types.VARCHAR);

	callableStatement.execute(); 

	responseString = callableStatement.getString(15); 
	successEaseFormBeanFormBean.setStudentRegistrationId(callableStatement.getString(14));
	successEaseFormBeanFormBean.setApplicationNo(callableStatement.getString(13));
	logger.info("responseString : - " + responseString);*/

		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,successEaseFormBeanFormBean.getPayment());
			callableStatement.setString(2,successEaseFormBeanFormBean.getApplicationNo());
			callableStatement.setString(3,successEaseFormBeanFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			successEaseFormBeanFormBean.setStudentRegistrationId(callableStatement.getString(6));
			successEaseFormBeanFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);

		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch SuccessEaseOnlineFormBean"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("SuccessEaseOnlineFormBean(" + successEaseFormBeanFormBean + ") - END");	
		return responseString;
	}

	@Override
	public SuccessEaseFormBean getSuccessEaseStudentDetails(String applicationNo) {
		// TODO Auto-generated method stub

		long startTime = System.currentTimeMillis();
		logger.info("<START> getSuccessEaseStudentDetails(" + applicationNo + startTime +") - START");  
		SuccessEaseFormBean successEaseFormBeanFormBean = new SuccessEaseFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_SuccessEase_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {

				successEaseFormBeanFormBean.setName(resultSet.getString("name"));
				successEaseFormBeanFormBean.setId(resultSet.getString("id"));
				successEaseFormBeanFormBean.setMobileNo(resultSet.getString("mobileNo"));
				successEaseFormBeanFormBean.setDob(resultSet.getString("birthdate"));
				successEaseFormBeanFormBean.setProduct(resultSet.getString("product"));
				successEaseFormBeanFormBean.setFullfee(resultSet.getString("fullfee"));
				successEaseFormBeanFormBean.setFinstallment(resultSet.getString("installment1"));
				successEaseFormBeanFormBean.setSinstallment(resultSet.getString("installment2"));
				successEaseFormBeanFormBean.setTinstallment(resultSet.getString("installment3"));
				successEaseFormBeanFormBean.setTotalFee(resultSet.getString("totalFee"));
				successEaseFormBeanFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getSuccessEaseStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END> getSuccessEaseStudentDetails(" + successEaseFormBeanFormBean + ") - END");
		return successEaseFormBeanFormBean;
	}

	@Override
	public String insertSISDetails(SISFormBean sisFormBean, String instituteId) {
		// TODO Auto-generated method stub


		long startTime = System.currentTimeMillis();
		logger.info("insertSuccessEaseDetails(" + sisFormBean + ") - START");
		logger.info("insertSuccessEaseDetails---billerId : "+instituteId);

		String responseString = null;
		/*try{

		callableStatement = con.prepareCall("{call PROC_SIS_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
		callableStatement.setString(1,sisFormBean.getNatureOfFee());
		callableStatement.setString(2,sisFormBean.getSpecification());
		callableStatement.setString(3,sisFormBean.getStudentname());
		callableStatement.setString(4,sisFormBean.getStudentclass());
		callableStatement.setString(5,sisFormBean.getAdmissionNo());
		callableStatement.setString(6,sisFormBean.getFathername());
		callableStatement.setString(7,sisFormBean.getEmailId());
		callableStatement.setString(8,sisFormBean.getMobileNo());

		callableStatement.setString(9,sisFormBean.getTotalFee());
		callableStatement.setString(10,sisFormBean.getSession());

		callableStatement.setString(11,sisFormBean.getRegisteredUserId());				
		callableStatement.setString(12,instituteId);


		callableStatement.registerOutParameter(13, Types.VARCHAR);
		callableStatement.registerOutParameter(14, Types.VARCHAR);
		callableStatement.registerOutParameter(15, Types.VARCHAR);

		callableStatement.execute(); 

		responseString = callableStatement.getString(15); 
		sisFormBean.setStudentRegistrationId(callableStatement.getString(14));
		sisFormBean.setApplicationNo(callableStatement.getString(13));
		logger.info("responseString : - " + responseString);
		 */	
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,sisFormBean.getTotalFee());
			callableStatement.setString(2,sisFormBean.getApplicationNo());
			callableStatement.setString(3,sisFormBean.getRegisteredUserId());
			callableStatement.setString(4,instituteId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			sisFormBean.setStudentRegistrationId(callableStatement.getString(6));
			sisFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);


		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch SISOnlineFormBean"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("SISOnlineFormBean(" + sisFormBean + ") - END");	
		return responseString;

	}

	@Override
	public SISFormBean getSISStudentDetails(String applicationNo) {
		// TODO Auto-generated method stub

		// TODO Auto-generated method stub

		long startTime = System.currentTimeMillis();
		logger.info("<START> getSISStudentDetails(" + applicationNo + startTime +") - START");  
		SISFormBean sisFormBean = new SISFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_SIS_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {

				sisFormBean.setNatureOfFee(resultSet.getString("natureOfFee"));
				sisFormBean.setSpecification(resultSet.getString("specification"));
				sisFormBean.setStudentname(resultSet.getString("studentname"));
				sisFormBean.setStudentclass(resultSet.getString("studentclass"));
				sisFormBean.setAdmissionNo(resultSet.getString("admissionNo"));
				sisFormBean.setFathername(resultSet.getString("fathername"));
				sisFormBean.setEmailId(resultSet.getString("emailId"));
				sisFormBean.setMobileNo(resultSet.getString("mobileNo"));

				sisFormBean.setTotalFee(resultSet.getString("totalFee"));
				sisFormBean.setSession(resultSet.getString("session"));
				sisFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getSISStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END> getSISStudentDetails(" + sisFormBean + ") - END");
		return sisFormBean;

	}

	@Override
	public String insertHorizonDetails(HorizonOnlineFormBean horizonOnlineFormBean, String instituteId) {
		// TODO Auto-generated method stub

		// TODO Auto-generated method stub


		long startTime = System.currentTimeMillis();
		logger.info("insertHorizonDetails(" + horizonOnlineFormBean + ") - START");
		logger.info("insertHorizonDetails---billerId : "+instituteId);

		String responseString = null;
		try{

			callableStatement = con.prepareCall("{call PROC_Horizon_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,horizonOnlineFormBean.getRegNo());
			callableStatement.setString(2,horizonOnlineFormBean.getName());
			callableStatement.setString(3,horizonOnlineFormBean.getCourse());
			callableStatement.setString(4,horizonOnlineFormBean.getSemester());
			callableStatement.setString(5,horizonOnlineFormBean.getPaymentType());
			callableStatement.setString(6,horizonOnlineFormBean.getExamFee());
			callableStatement.setString(7,horizonOnlineFormBean.getHostelFee());
			callableStatement.setString(8,horizonOnlineFormBean.getMiscellaneous());

			callableStatement.setString(9,horizonOnlineFormBean.getTotalpaymentDetails());

			callableStatement.setString(10,horizonOnlineFormBean.getTotalExamAmount());
			callableStatement.setString(11,horizonOnlineFormBean.getTotalhostelAmount());
			callableStatement.setString(12,horizonOnlineFormBean.getTotalmiscellaneousAmount());

			callableStatement.setString(13,horizonOnlineFormBean.getTotalFee());


			callableStatement.setString(14,horizonOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(15,instituteId);

			callableStatement.registerOutParameter(16, Types.VARCHAR);
			callableStatement.registerOutParameter(17, Types.VARCHAR);
			callableStatement.registerOutParameter(18, Types.VARCHAR);

			callableStatement.execute(); 

			responseString = callableStatement.getString(18); 
			horizonOnlineFormBean.setStudentRegistrationId(callableStatement.getString(17));
			horizonOnlineFormBean.setApplicationNo(callableStatement.getString(16));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch HorizonOnlineFormBean"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("HorizonOnlineFormBean(" + horizonOnlineFormBean + ") - END");	
		return responseString;


	}

	@Override
	public HorizonOnlineFormBean getHorizonStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("<START> getHorizonStudentDetails(" + applicationNo + startTime +") - START");  
		HorizonOnlineFormBean horizonOnlineFormBean = new HorizonOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_HORIZON_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {

				horizonOnlineFormBean.setRegNo(resultSet.getString("regNo"));
				horizonOnlineFormBean.setName(resultSet.getString("name"));
				horizonOnlineFormBean.setCourse(resultSet.getString("course"));
				horizonOnlineFormBean.setSemester(resultSet.getString("semester"));
				horizonOnlineFormBean.setPaymentType(resultSet.getString("paymentType"));
				horizonOnlineFormBean.setExamFee(resultSet.getString("examFee"));
				horizonOnlineFormBean.setHostelFee(resultSet.getString("hostelFee"));
				horizonOnlineFormBean.setMiscellaneous(resultSet.getString("miscellaneous"));

				horizonOnlineFormBean.setTotalpaymentDetails(resultSet.getString("totalpaymentamount1"));
				horizonOnlineFormBean.setTotalExamAmount(resultSet.getString("totalExamAmount"));
				horizonOnlineFormBean.setTotalhostelAmount(resultSet.getString("totalhostelAmount"));
				horizonOnlineFormBean.setTotalmiscellaneousAmount(resultSet.getString("totalmiscellaneousAmount"));
				horizonOnlineFormBean.setTotalFee(resultSet.getString("totalFee"));
				horizonOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getHorizonStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END> getHorizonStudentDetails(" + horizonOnlineFormBean + ") - END");
		return horizonOnlineFormBean;


	}


	@Override
	public HorizonOnlineFormBean getHorizonStudentDetails_Ereceipt(String applicationNo) {

		long startTime = System.currentTimeMillis();
		logger.info("<START> getHorizonStudentDetails_Ereceipt(" + applicationNo + startTime +") - START");  
		HorizonOnlineFormBean horizonOnlineFormBean = new HorizonOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_HORIZON_STUDENTDETAILS_EReciept(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {

				horizonOnlineFormBean.setRegNo(resultSet.getString("regNo"));
				horizonOnlineFormBean.setName(resultSet.getString("name"));
				horizonOnlineFormBean.setCourse(resultSet.getString("course"));
				horizonOnlineFormBean.setSemester(resultSet.getString("semester"));
				horizonOnlineFormBean.setPaymentType(resultSet.getString("paymentType"));
				horizonOnlineFormBean.setExamFee(resultSet.getString("examFee"));
				horizonOnlineFormBean.setHostelFee(resultSet.getString("hostelFee"));
				horizonOnlineFormBean.setMiscellaneous(resultSet.getString("miscellaneous"));

				horizonOnlineFormBean.setTotalpaymentDetails(resultSet.getString("totalpaymentamount1"));
				horizonOnlineFormBean.setTotalExamAmount(resultSet.getString("totalExamAmount"));
				horizonOnlineFormBean.setTotalhostelAmount(resultSet.getString("totalhostelAmount"));
				horizonOnlineFormBean.setTotalmiscellaneousAmount(resultSet.getString("totalmiscellaneousAmount"));


				horizonOnlineFormBean.setTotalFee(resultSet.getString("totalFee"));

				//horizonOnlineFormBean.setTransactionDate(resultSet.getString("transactionDate"));

				String strDate = resultSet.getString("transactionDate");
				SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
				Date convertedDate= new Date();
				convertedDate = dateFormat.parse(strDate);
				SimpleDateFormat sdfnewformat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss.SSS");
				String finalDateString = sdfnewformat.format(convertedDate);

				horizonOnlineFormBean.setTransactionDate(finalDateString);

				horizonOnlineFormBean.setTransactionId(resultSet.getString("Pmt_Id"));
				horizonOnlineFormBean.setTransactionStatus(resultSet.getString("Transaction_Status"));

				horizonOnlineFormBean.setApplicationNo(applicationNo);

				break;
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getHorizonStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END> getHorizonStudentDetails(" + horizonOnlineFormBean + ") - END");
		return horizonOnlineFormBean;


	}

	@Override
	public String insertIICSEdu(IICSEductionOnlineFormBean iicsEductionOnlineFormBean, String billerId) {


		long startTime = System.currentTimeMillis();
		logger.info("IICSOnlineFormBean(" + iicsEductionOnlineFormBean + ") - START");
		logger.info("IICSOnlineFormBean---billerId : "+billerId);

		String responseString = null;
		/*try{

	callableStatement = con.prepareCall("{call PROC_IICSEduction_StudentDetails(?,?,?,?,?,?,?,?,?,?)}");

	callableStatement.setString(1,iicsEductionOnlineFormBean.getStudentName());
	callableStatement.setString(2,iicsEductionOnlineFormBean.getStudentId());
	callableStatement.setString(3,iicsEductionOnlineFormBean.getStdMobileNo());
	callableStatement.setString(4,iicsEductionOnlineFormBean.getAmount());
	callableStatement.setString(5,iicsEductionOnlineFormBean.getTotalamount());

	callableStatement.setString(6,iicsEductionOnlineFormBean.getRegisteredUserId());
	callableStatement.setString(7,billerId);

	callableStatement.registerOutParameter(8, Types.VARCHAR);
	callableStatement.registerOutParameter(9, Types.VARCHAR);
	callableStatement.registerOutParameter(10, Types.VARCHAR);

	callableStatement.execute(); 


	responseString = callableStatement.getString(10); 
	iicsEductionOnlineFormBean.setStudentRegistrationId(callableStatement.getString(9));
	iicsEductionOnlineFormBean.setApplicationNo(callableStatement.getString(8));
	logger.info("responseString : - " + responseString);*/

		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,iicsEductionOnlineFormBean.getTotalamount());
			callableStatement.setString(2,iicsEductionOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,iicsEductionOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			iicsEductionOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			iicsEductionOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);

		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertIICSEduDetails"+e);
			}

		}

		return responseString ;

	}

	@Override
	public IICSEductionOnlineFormBean getIICSStudentDetails(String applicationNo) {

		long startTime = System.currentTimeMillis();
		logger.info("getIICSEduStudentDetails(" + applicationNo + ") - START");  
		IICSEductionOnlineFormBean iicsEductionOnlineFormBean = new IICSEductionOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_IICEEducation_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			
				iicsEductionOnlineFormBean.setStudentId(resultSet.getString("StudentID"));
				iicsEductionOnlineFormBean.setStudentName(resultSet.getString("StudentName"));
				iicsEductionOnlineFormBean.setStdMobileNo(resultSet.getString("MobileNo"));
				iicsEductionOnlineFormBean.setAmount(resultSet.getString("Amount"));
				iicsEductionOnlineFormBean.setTotalamount(resultSet.getString("TotalAmount"));


				iicsEductionOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getIICSEduStudentDetails "+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getSmartrepEduDetails(" + iicsEductionOnlineFormBean + ") - END");
		return iicsEductionOnlineFormBean;



	}

	@Override
	public String insertJawaharStudent(JawaharOnlineFormBean jawaharOnlineFormBean, String billerId) {


		long startTime = System.currentTimeMillis();
		logger.info("insertJawaharStudent(" + jawaharOnlineFormBean + ") - START");
		logger.info("insertJawaharStudent---billerId : "+billerId);

		String responseString = null;
		/*try{

	callableStatement = con.prepareCall("{call PROC_Jawahar_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

	callableStatement.setString(1,jawaharOnlineFormBean.getStudentId());
	callableStatement.setString(2,jawaharOnlineFormBean.getStudName());
	callableStatement.setString(3,jawaharOnlineFormBean.getFatherName());
	callableStatement.setString(4,jawaharOnlineFormBean.getMotherName());
	callableStatement.setString(5,jawaharOnlineFormBean.getStudclass());
	callableStatement.setString(6,jawaharOnlineFormBean.getStudSection());
	callableStatement.setString(7,jawaharOnlineFormBean.getEmaildId());
	callableStatement.setString(8,jawaharOnlineFormBean.getMobileNo());
	callableStatement.setString(9,jawaharOnlineFormBean.getRemarks());
	callableStatement.setString(10,jawaharOnlineFormBean.getFeeAmount());

	callableStatement.setString(11,jawaharOnlineFormBean.getRegisteredUserId());
	callableStatement.setString(12,billerId);

	callableStatement.registerOutParameter(13, Types.VARCHAR);
	callableStatement.registerOutParameter(14, Types.VARCHAR);
	callableStatement.registerOutParameter(15, Types.VARCHAR);

	callableStatement.execute(); 


	responseString = callableStatement.getString(15); 
	jawaharOnlineFormBean.setStudentRegistrationId(callableStatement.getString(14));
	jawaharOnlineFormBean.setApplicationNo(callableStatement.getString(13));
	logger.info("responseString : - " + responseString);*/

		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,jawaharOnlineFormBean.getFeeAmount());
			callableStatement.setString(2,jawaharOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,jawaharOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			jawaharOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			jawaharOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);


		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertJawaharStudent"+e);
			}

		}

		return responseString ;

	}

	@Override
	public JawaharOnlineFormBean getJawaharStudentDetails(String applicationNo) {

		long startTime = System.currentTimeMillis();
		logger.info("getJawaharStudentDetails(" + applicationNo + ") - START");  
		JawaharOnlineFormBean jawaharOnlineFormBean = new JawaharOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_Jawahar_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			
				jawaharOnlineFormBean.setStudentId(resultSet.getString("StudentID"));
				jawaharOnlineFormBean.setStudName(resultSet.getString("StudName"));
				jawaharOnlineFormBean.setMobileNo(resultSet.getString("MobileNo"));
				jawaharOnlineFormBean.setFeeAmount(resultSet.getString("FeesAmount"));
				jawaharOnlineFormBean.setStudclass(resultSet.getString("StudClass"));
				jawaharOnlineFormBean.setStudSection(resultSet.getString("StudSection"));
				jawaharOnlineFormBean.setEmaildId(resultSet.getString("EmailId"));
				jawaharOnlineFormBean.setRemarks(resultSet.getString("Remaks"));
				jawaharOnlineFormBean.setFatherName(resultSet.getString("FatherName"));
				jawaharOnlineFormBean.setMotherName(resultSet.getString("MotherName"));

				jawaharOnlineFormBean.setApplicationNo(applicationNo);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getIICSEduStudentDetails "+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getJawaharStudentDetails(" + jawaharOnlineFormBean + ") - END");
		return jawaharOnlineFormBean;

	}

	@Override
	public String insertVenkateshwarStudent(VenkateshwarOnlineFormBean venkateshwarOnlineFormBean, String billerId) {



		long startTime = System.currentTimeMillis();
		logger.info("venkateshwarOnlineFormBean(" + venkateshwarOnlineFormBean + ") - START");
		logger.info("venkateshwarOnlineFormBean---billerId : "+billerId);

		String responseString = null;
		try{

			callableStatement = con.prepareCall("{call PROC_Venkateshwar_StudentDetails(?,?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1,venkateshwarOnlineFormBean.getStudentName());
			callableStatement.setString(2,venkateshwarOnlineFormBean.getStudentId());
			callableStatement.setString(3,venkateshwarOnlineFormBean.getStdMobileNo());
			callableStatement.setString(4,venkateshwarOnlineFormBean.getCourse());
			callableStatement.setString(5,venkateshwarOnlineFormBean.getTotalamount());

			callableStatement.setString(6,venkateshwarOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(7, billerId);

			callableStatement.registerOutParameter(8, Types.VARCHAR);
			callableStatement.registerOutParameter(9, Types.VARCHAR);
			callableStatement.registerOutParameter(10, Types.VARCHAR);

			callableStatement.execute();

			responseString = callableStatement.getString(10);
			venkateshwarOnlineFormBean.setStudentRegistrationId(callableStatement.getString(9));
			venkateshwarOnlineFormBean.setApplicationNo(callableStatement.getString(8));
			logger.info("responseString : - " + responseString);

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertVenkateshwarStudent" + e);
			}

		}

		return responseString;

	}

	@Override
	public VenkateshwarOnlineFormBean getvenkateshwarStudentDetails(String applicationNo) {

		long startTime = System.currentTimeMillis();
		logger.info("getvenkateshwarStudentDetails(" + applicationNo + ") - START");
		VenkateshwarOnlineFormBean venkateshwarOnlineFormBean = new VenkateshwarOnlineFormBean();

		try {
			callableStatement = con.prepareCall("{call PROC_GET_Venkateshwar_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery();
			while (resultSet.next()) {
				venkateshwarOnlineFormBean.setStudentId(resultSet.getString("StudentID"));
				venkateshwarOnlineFormBean.setStudentName(resultSet.getString("StudentName"));
				venkateshwarOnlineFormBean.setStdMobileNo(resultSet.getString("MobileNo"));
				venkateshwarOnlineFormBean.setCourse(resultSet.getString("Course"));
				venkateshwarOnlineFormBean.setTotalamount(resultSet.getString("TotalAmount"));

				venkateshwarOnlineFormBean.setApplicationNo(applicationNo);
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getvenkateshwarStudentDetails " + e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getvenkateshwarStudentDetails(" + venkateshwarOnlineFormBean + ") - END");
		return venkateshwarOnlineFormBean;

	}

	@Override
	public String insertDelhiSchool(DelhiSchoolOnlineFormBean delhiSchoolOnlineFormBean, String billerId) {

		long startTime = System.currentTimeMillis();
		logger.info("delhiSchoolOnlineFormBean(" + delhiSchoolOnlineFormBean + ") - START");
		logger.info("delhiSchoolOnlineFormBean---billerId : " + billerId);

		String responseString = null;
		/*
		 * try{
		 * 
		 * callableStatement = con.
		 * prepareCall("{call PROC_Delhi_School_StudentDetails(?,?,?,?,?,?,?,?,?,?,?,?)}"
		 * );
		 * 
		 * callableStatement.setString(1,delhiSchoolOnlineFormBean.getStudentName());
		 * callableStatement.setString(2,delhiSchoolOnlineFormBean.getStudclass());
		 * callableStatement.setString(3,delhiSchoolOnlineFormBean.getSection());
		 * callableStatement.setString(4,delhiSchoolOnlineFormBean.getStuadmission());
		 * callableStatement.setString(5,delhiSchoolOnlineFormBean.getStdMobileNo());
		 * callableStatement.setString(6,delhiSchoolOnlineFormBean.getAmount());
		 * callableStatement.setString(7,delhiSchoolOnlineFormBean.getTotalamount());
		 * 
		 * callableStatement.setString(8,delhiSchoolOnlineFormBean.getRegisteredUserId()
		 * ); callableStatement.setString(9,billerId);
		 * 
		 * callableStatement.registerOutParameter(10, Types.VARCHAR);
		 * callableStatement.registerOutParameter(11, Types.VARCHAR);
		 * callableStatement.registerOutParameter(12, Types.VARCHAR);
		 * 
		 * callableStatement.execute();
		 * 
		 * 
		 * responseString = callableStatement.getString(12);
		 * delhiSchoolOnlineFormBean.setStudentRegistrationId(callableStatement.
		 * getString(11));
		 * delhiSchoolOnlineFormBean.setApplicationNo(callableStatement.getString(10));
		 * logger.info("responseString : - " + responseString);
		 */

		try {

			callableStatement = con
					.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");

			callableStatement.setString(1, delhiSchoolOnlineFormBean.getTotalamount());
			callableStatement.setString(2, delhiSchoolOnlineFormBean.getApplicationNo());
			callableStatement.setString(3, delhiSchoolOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4, billerId);

			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute();
			responseString = callableStatement.getString(7);
			delhiSchoolOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			delhiSchoolOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertDelhiSchool" + e);
			}

		}

		return responseString;

	}

	@Override
	public DelhiSchoolOnlineFormBean getDelhiSchoolStudentDetails(String applicationNo) {

		long startTime = System.currentTimeMillis();
		logger.info("getDelhiSchoolStudentDetails(" + applicationNo + ") - START");
		DelhiSchoolOnlineFormBean delhiSchoolOnlineFormBean = new DelhiSchoolOnlineFormBean();

		try {
			callableStatement = con.prepareCall("{call PROC_GET_DelhiSchool_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery();
			while (resultSet.next()) {

				delhiSchoolOnlineFormBean.setStudentName(resultSet.getString("StudentName"));
				delhiSchoolOnlineFormBean.setStudclass(resultSet.getString("StudentClass"));
				delhiSchoolOnlineFormBean.setSection(resultSet.getString("Section"));
				delhiSchoolOnlineFormBean.setStuadmission(resultSet.getString("StudentAdmissionNo"));
				delhiSchoolOnlineFormBean.setStdMobileNo(resultSet.getString("MobileNo"));
				delhiSchoolOnlineFormBean.setAmount(resultSet.getString("Amount"));
				delhiSchoolOnlineFormBean.setTotalamount(resultSet.getString("TotalAmount"));

				delhiSchoolOnlineFormBean.setApplicationNo(applicationNo);
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getDelhiSchoolStudentDetails " + e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getDelhiSchoolStudentDetails(" + delhiSchoolOnlineFormBean + ") - END");
		return delhiSchoolOnlineFormBean;

	}

	@Override
	public String insertBrainStormEaseDetails(BrainStormFormBean brainStormFormBean, String billerId) {

		long startTime = System.currentTimeMillis();
		logger.info("insertBrainStormEaseDetails(" + brainStormFormBean + ") - START");
		logger.info("insertBrainStormEaseDetails---billerId : " + billerId);

		String responseString = null;
		/*
		 * try{
		 * 
		 * callableStatement =
		 * con.prepareCall("{call PROC_BrainStorm_Details(?,?,?,?,?,?,?,?,?,?,?,?)}");
		 * callableStatement.setString(1,brainStormFormBean.getName());
		 * callableStatement.setString(2,brainStormFormBean.getCollegename());
		 * callableStatement.setString(3,brainStormFormBean.getFathername());
		 * callableStatement.setString(4,brainStormFormBean.getDob());
		 * callableStatement.setString(5,brainStormFormBean.getMobileNo());
		 * callableStatement.setString(6,brainStormFormBean.getCourse());
		 * callableStatement.setString(7,brainStormFormBean.getTotalFee());
		 * 
		 * 
		 * callableStatement.setString(8,brainStormFormBean.getRegisteredUserId());
		 * callableStatement.setString(9,billerId);
		 * 
		 * callableStatement.registerOutParameter(10, Types.VARCHAR);
		 * callableStatement.registerOutParameter(11, Types.VARCHAR);
		 * callableStatement.registerOutParameter(12, Types.VARCHAR);
		 * 
		 * callableStatement.execute();
		 * 
		 * responseString = callableStatement.getString(12);
		 * brainStormFormBean.setStudentRegistrationId(callableStatement.getString(11));
		 * brainStormFormBean.setApplicationNo(callableStatement.getString(10));
		 * logger.info("responseString : - " + responseString);
		 */
		try {

			callableStatement = con
					.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");

			callableStatement.setString(1, brainStormFormBean.getTotalFee());
			callableStatement.setString(2, brainStormFormBean.getApplicationNo());
			callableStatement.setString(3, brainStormFormBean.getRegisteredUserId());
			callableStatement.setString(4, billerId);

			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute();
			responseString = callableStatement.getString(7);
			brainStormFormBean.setStudentRegistrationId(callableStatement.getString(6));
			brainStormFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch brainStormFormBean" + e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertBrainStormEaseDetails(" + brainStormFormBean + ") - END");
		return responseString;

	}

	@Override
	public BrainStormFormBean getbrainStormStudentDetails(String applicationNo) {

		// TODO Auto-generated method stub

		long startTime = System.currentTimeMillis();
		logger.info("<START> getbrainStormStudentDetails(" + applicationNo + startTime + ") - START");
		BrainStormFormBean brainStormFormBean = new BrainStormFormBean();

		try {
			callableStatement = con.prepareCall("{call PROC_GET_BrainStorm_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery();
			while (resultSet.next()) {

				brainStormFormBean.setName(resultSet.getString("name"));
				brainStormFormBean.setCollegename(resultSet.getString("collegename"));
				brainStormFormBean.setFathername(resultSet.getString("fathername"));
				brainStormFormBean.setDob(resultSet.getString("birthdate"));
				brainStormFormBean.setMobileNo(resultSet.getString("mobileNo"));
				brainStormFormBean.setCourse(resultSet.getString("course"));

				brainStormFormBean.setTotalFee(resultSet.getString("totalFee"));
				brainStormFormBean.setApplicationNo(applicationNo);
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getbrainStormStudentDetails" + e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END> getbrainStormStudentDetails(" + brainStormFormBean + ") - END");
		return brainStormFormBean;

	}

	@Override
	public List getStudentTranDetailsList_Lukhnow(String referenceId, String branchId) {

		long startTime = System.currentTimeMillis();
		logger.info("getStudentTranDetailsList(" + referenceId + ") - START");
		List horizonCustList = null;

		try {
			logger.info("getStudentTranDetailsList_Lukhnow - " + referenceId);
			callableStatement = con.prepareCall("{call SP_FJT_getPrintEReceiptDetailsLis_Horizon(?,?)}");
			callableStatement.setString(1, referenceId);
			callableStatement.setString(2, branchId);
			resultSet = callableStatement.executeQuery();
			horizonCustList = new ArrayList();
			HorizonOnlineFormBean horizonOnlineFormBean;

			while (resultSet.next()) {
				horizonOnlineFormBean = new HorizonOnlineFormBean();

				horizonOnlineFormBean.setApplicationNo(resultSet.getString("applicationNo"));
				horizonOnlineFormBean.setName(resultSet.getString("name"));
				horizonOnlineFormBean.setRegNo(resultSet.getString("regNo"));
				horizonCustList.add(horizonOnlineFormBean);

			}
			logger.info("getStudentTranDetailsList_Lukhnow - 000" + horizonCustList);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getStudentTranDetailsList_Lukhnow(" + referenceId + ") - END");
		return horizonCustList;

	}

	@Override
	public String insertIceDetails(IceonlineFormBean iceBean, String billerId) {

		long startTime = System.currentTimeMillis();
		String otherCourse = "NA";
		String otherBranch = "NA";
		logger.info("insertIceDetails(" + iceBean + ") - START");
		logger.info("insertIceDetails---billerId : " + billerId);
		if (iceBean.getCourse().equals("OTHERS"))
			otherCourse = iceBean.getOtherCourse();
		if (iceBean.getBranch().equals("OTHERS"))
			otherBranch = iceBean.getOtherBranch();
		String responseString = null;
		/*
		 * try{
		 * 
		 * callableStatement =
		 * con.prepareCall("{call PROC_Ice_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
		 * callableStatement.setString(1,iceBean.getStudentName());
		 * callableStatement.setString(2,iceBean.getMobileNo());
		 * callableStatement.setString(3,iceBean.getEmailId());
		 * callableStatement.setString(4,iceBean.getAddress());
		 * callableStatement.setString(5,iceBean.getDob());
		 * callableStatement.setString(6,iceBean.getCourse());
		 * callableStatement.setString(7,otherCourse);
		 * callableStatement.setString(8,iceBean.getBranch());
		 * callableStatement.setString(9,otherBranch);
		 * callableStatement.setString(10,iceBean.getAmount());
		 * callableStatement.setString(11,iceBean.getRegisteredUserId());
		 * callableStatement.setString(12,billerId);
		 * callableStatement.registerOutParameter(13, Types.VARCHAR);
		 * callableStatement.registerOutParameter(14, Types.VARCHAR);
		 * callableStatement.registerOutParameter(15, Types.VARCHAR);
		 * callableStatement.execute(); responseString =
		 * callableStatement.getString(15);
		 * iceBean.setStudentRegistrationId(callableStatement.getString(14));
		 * iceBean.setApplicationNo(callableStatement.getString(13));
		 * logger.info("responseString : - " + responseString);
		 */
		try {

			callableStatement = con
					.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");

			callableStatement.setString(1, iceBean.getPayment());
			callableStatement.setString(2, iceBean.getApplicationNo());
			callableStatement.setString(3, iceBean.getRegisteredUserId());
			callableStatement.setString(4, billerId);

			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute();
			responseString = callableStatement.getString(7);
			iceBean.setStudentRegistrationId(callableStatement.getString(6));
			iceBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertIceDetails" + e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertIceDetails(" + iceBean + ") - END");
		return responseString;
	}

	@Override
	public IceonlineFormBean getICEStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("<START> getICEStudentDetails(" + applicationNo + startTime + ") - START");
		IceonlineFormBean iceBean = new IceonlineFormBean();

		try {
			callableStatement = con.prepareCall("{call PROC_GET_IceOnline_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery();
			while (resultSet.next()) {

				iceBean.setStudentName(resultSet.getString("name"));
				iceBean.setMobileNo(resultSet.getString("mobileno"));
				iceBean.setEmailId(resultSet.getString("emailid"));
				iceBean.setAddress(resultSet.getString("address"));
				iceBean.setDob(resultSet.getString("DOB"));
				iceBean.setAmount(resultSet.getString("amount"));
				iceBean.setCourse(resultSet.getString("course"));
				iceBean.setOtherCourse(resultSet.getString("othercourse"));
				iceBean.setBranch(resultSet.getString("branch"));
				iceBean.setOtherBranch(resultSet.getString("otherbranch"));
				iceBean.setApplicationNo(resultSet.getString("applicationNo"));
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getICEStudentDetails" + e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END> getICEStudentDetails(" + iceBean + ") - END");
		return iceBean;
	}
	/*
	 * IEI online form start 19Aug19 by 74853
	 */

	@Override
	public String insertIEIIndiaDetails(IEIIndiaOnlineFormBean ieiIndiaOnlineFormBean,String billerId) {

		long startTime = System.currentTimeMillis();
		logger.info("insertIEIIndiaDetails ~START~-------"+startTime);
		logger.info("insertIEIIndiaDetails(" + ieiIndiaOnlineFormBean + ") - START");
		logger.info("insertIEIIndiaDetails---billerId : "+billerId);
		String responseString = null;
		/*try{
			callableStatement = con.prepareCall("{call PROC_IEI_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,ieiIndiaOnlineFormBean.getName());
			callableStatement.setString(2,ieiIndiaOnlineFormBean.getPostalAdd());
			callableStatement.setString(3,ieiIndiaOnlineFormBean.getPincode());
			callableStatement.setString(4,ieiIndiaOnlineFormBean.getState());
			callableStatement.setString(5,ieiIndiaOnlineFormBean.getEmialID());
			callableStatement.setString(6,ieiIndiaOnlineFormBean.getMobileNo());
			callableStatement.setString(7,ieiIndiaOnlineFormBean.getMemberIEIID());
			callableStatement.setString(8,ieiIndiaOnlineFormBean.getPanNo());
			callableStatement.setString(9,ieiIndiaOnlineFormBean.getGstin());
				callableStatement.setString(8,ieiIndiaOnlineFormBean.getPurpose());
			callableStatement.setString(10,ieiIndiaOnlineFormBean.getTotalFee());
			callableStatement.setString(11,ieiIndiaOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(12,billerId);
			callableStatement.registerOutParameter(13, Types.VARCHAR);
			callableStatement.registerOutParameter(14, Types.VARCHAR);
			callableStatement.registerOutParameter(15, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(15); 
			ieiIndiaOnlineFormBean.setStudentRegistrationId(callableStatement.getString(14));
			c.setApplicationNo(callableStatement.getString(13));
			logger.info("IEI ResponseString : - " + responseString);
*/
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,ieiIndiaOnlineFormBean.getTotalFee());
			callableStatement.setString(2,ieiIndiaOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,ieiIndiaOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			ieiIndiaOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			ieiIndiaOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);
		}catch(

	Exception e)
	{
		logger.error("Exception inside catch insertIEIIndiaDetails" + e);
		logger.info(e.getMessage());
	}finally
	{
		try {
			if (resultSet != null) {
				resultSet.close();
			}
			if (callableStatement != null) {
				callableStatement.close();
			}
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
			logger.error("Exception inside catch insertIEIIndiaDetails" + e);
		}
	}

	long endTime = System
			.currentTimeMillis();logger.info("** EXECUTION TIME **"+(endTime-startTime));logger.info("insertIEIIndiaDetails("+ieiIndiaOnlineFormBean+") - END");return responseString;
	}

	@Override
	public IEIIndiaOnlineFormBean getIEIStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("<START> getIEIStudentDetails -----" + startTime +") ");
		logger.info(" getIEIStudentDetails(" + applicationNo +") ");  
		IEIIndiaOnlineFormBean ieiBean = new IEIIndiaOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_IEI_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {

				ieiBean.setName(resultSet.getString("name"));
				ieiBean.setMobileNo(resultSet.getString("mobileno"));
				ieiBean.setEmialID(resultSet.getString("emailid"));
				ieiBean.setPincode(resultSet.getString("pincode"));
				ieiBean.setState(resultSet.getString("state"));
				ieiBean.setPostalAdd(resultSet.getString("postalAdd"));
				ieiBean.setPanNo(resultSet.getString("panNo"));
				ieiBean.setGstin(resultSet.getString("GSTIN"));
				ieiBean.setTotalFee(resultSet.getString("amount"));
				/* ieiBean.setPurpose(resultSet.getString("porpose"));*/
				ieiBean.setMemberIEIID(resultSet.getString("memberIEIID"));
				ieiBean.setApplicationNo(resultSet.getString("applicationNo"));
			}
		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getICEStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("<END> getIEIStudentDetails(" + ieiBean + ") ");
		logger.info("<END> getIEIStudentDetails -----"+endTime);
		return ieiBean;
	}

	@Override
	public String insertNavJagritiDetails(NavJagritiOnlineFormBean navJagritiBean,
			String billerId) {

		long startTime = System.currentTimeMillis();
		String otherCourse="NA";
		String otherBranch="NA";		
		logger.info("insertNavJagritiDetails(" + navJagritiBean + ") - START");
		logger.info("insertNavJagritiDetails---billerId : "+billerId);

		String responseString = null;
		/*try{

			callableStatement = con.prepareCall("{call PROC_NavJagritiNiketan_Details(?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,navJagritiBean.getStudentName());
			callableStatement.setString(2,navJagritiBean.getClassName());
			callableStatement.setString(3,navJagritiBean.getSection());
			callableStatement.setString(4,navJagritiBean.getAdmissionNo());
			callableStatement.setString(5,navJagritiBean.getMobileNo());
			callableStatement.setString(6,navJagritiBean.getTransporationFee());
			callableStatement.setString(7,navJagritiBean.getAmount());
			callableStatement.setString(8,navJagritiBean.getRegisteredUserId());
			callableStatement.setString(9,billerId);
			callableStatement.registerOutParameter(10, Types.VARCHAR);
			callableStatement.registerOutParameter(11, Types.VARCHAR);
			callableStatement.registerOutParameter(12, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(12); 
			navJagritiBean.setStudentRegistrationId(callableStatement.getString(11));
			navJagritiBean.setApplicationNo(callableStatement.getString(10));
			logger.info("responseString : - " + responseString);*/
		
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,navJagritiBean.getAmount());
			callableStatement.setString(2,navJagritiBean.getApplicationNo());
			callableStatement.setString(3,navJagritiBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			navJagritiBean.setStudentRegistrationId(callableStatement.getString(6));
			navJagritiBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertIceDetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertNavJagritiDetails(" + navJagritiBean + ") - END");	
		return responseString;
	}

	@Override
	public NavJagritiOnlineFormBean getNavJagritiStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("<START> getNavJagritiStudentDetails(" + applicationNo + startTime +") - START");  
		NavJagritiOnlineFormBean navJagritiBean = new NavJagritiOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_NavJagriti_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {
				navJagritiBean.setStudentName(resultSet.getString("studentName"));
				navJagritiBean.setClassName(resultSet.getString("className"));
				navJagritiBean.setSection(resultSet.getString("section"));
				navJagritiBean.setAdmissionNo(resultSet.getString("admissionNo"));
				navJagritiBean.setMobileNo(resultSet.getString("mobileNo"));
				navJagritiBean.setTransporationFee(resultSet.getString("transporationFee"));
				navJagritiBean.setAmount(resultSet.getString("totalAmount"));
				navJagritiBean.setApplicationNo(resultSet.getString("applicationNo"));
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getICEStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END> getNavJagritiStudentDetails(" + navJagritiBean + ") - END");
		return navJagritiBean;
	}

	@Override
	public String insertBhartiConceptDetails(BhartiConceptFormBean bhartiConceptFormBean,
			String billerId) {

		long startTime = System.currentTimeMillis();
		String otherCourse="NA";
		String otherBranch="NA";		
		logger.info("insertBhartiConceptDetails(" + bhartiConceptFormBean.toString() + ") - START");
		logger.info("insertBhartiConceptDetails---billerId : "+billerId);

		String responseString = null;
		/*try{

			callableStatement = con.prepareCall("{call PROC_BhartiConcept_Details(?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,bhartiConceptFormBean.getStdName());
			callableStatement.setString(2,bhartiConceptFormBean.getFatherName());
			callableStatement.setString(3,bhartiConceptFormBean.getMobileNo());
			callableStatement.setString(4,bhartiConceptFormBean.getEmailId());
			callableStatement.setString(5,bhartiConceptFormBean.getCourse());
			callableStatement.setString(6,bhartiConceptFormBean.getOthers());
			callableStatement.setString(7,bhartiConceptFormBean.getAmountToBePaid());
			callableStatement.setString(8,bhartiConceptFormBean.getFinalAmount());
			callableStatement.setString(9,bhartiConceptFormBean.getRegisteredUserId());
			callableStatement.setString(10,billerId);
			callableStatement.registerOutParameter(11, Types.VARCHAR);
			callableStatement.registerOutParameter(12, Types.VARCHAR);
			callableStatement.registerOutParameter(13, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(13); 
			bhartiConceptFormBean.setStudentRegistrationId(callableStatement.getString(12));
			bhartiConceptFormBean.setApplicationNo(callableStatement.getString(11));
			logger.info("responseString : - " + responseString);

*/
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,bhartiConceptFormBean.getFinalAmount());
			callableStatement.setString(2,bhartiConceptFormBean.getApplicationNo());
			callableStatement.setString(3,bhartiConceptFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			bhartiConceptFormBean.setStudentRegistrationId(callableStatement.getString(6));
			bhartiConceptFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);
	

		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertIceDetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertBhartiConceptDetails(" + bhartiConceptFormBean.toString() + ") - END");	
		return responseString;
	}

	@Override
	public BhartiConceptFormBean getBhartiConceptStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("<START> getBhartiConceptStudentDetails(" + applicationNo + startTime +") - START");  
		BhartiConceptFormBean bhartiConceptFormBean = new BhartiConceptFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_BhartiConcept_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {
				bhartiConceptFormBean.setStdName(resultSet.getString("stdName"));
				bhartiConceptFormBean.setFatherName(resultSet.getString("fatherName"));
				bhartiConceptFormBean.setMobileNo(resultSet.getString("mobileNo"));
				bhartiConceptFormBean.setEmailId(resultSet.getString("emailId"));
				bhartiConceptFormBean.setCourse(resultSet.getString("course"));
				bhartiConceptFormBean.setOthers(resultSet.getString("others"));
				bhartiConceptFormBean.setAmountToBePaid(resultSet.getString("amountToBePaid"));
				bhartiConceptFormBean.setFinalAmount(resultSet.getString("finalAmount"));
				bhartiConceptFormBean.setApplicationNo(resultSet.getString("applicationNo"));
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getBhartiConceptStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END> getBhartiConceptStudentDetails(" + bhartiConceptFormBean.toString() + ") - END");
		return bhartiConceptFormBean;
	}

	@Override
	public String insertTrinityDetails(TrinityOnlineFormBean trinityBean, String billerId) {

		long startTime = System.currentTimeMillis();
		String otherCourse="NA";
		String otherBranch="NA";		
		logger.info("insertTrinityDetails(" + trinityBean.toString() + ") - START");
		logger.info("insertTrinityDetails---billerId : "+billerId);

		String responseString = null;
		/*try{

			callableStatement = con.prepareCall("{call PROC_Trinity_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,trinityBean.getNameOfStudent());
			callableStatement.setString(2,trinityBean.getPhoneNumber());
			callableStatement.setString(3,trinityBean.getFatherName());
			callableStatement.setString(4,trinityBean.getEnrollmentNumber());
			callableStatement.setString(5,trinityBean.getCourse());
			callableStatement.setString(6,trinityBean.getDob());
			callableStatement.setString(7,trinityBean.getBatch());
			callableStatement.setString(8,trinityBean.getAmountToBePaid());
			callableStatement.setString(9,trinityBean.getTotalAmount());
			callableStatement.setString(10,trinityBean.getRegisteredUserId());
			callableStatement.setString(11,billerId);
			callableStatement.registerOutParameter(12, Types.VARCHAR);
			callableStatement.registerOutParameter(13, Types.VARCHAR);
			callableStatement.registerOutParameter(14, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(14); 
			trinityBean.setStudentRegistrationId(callableStatement.getString(13));
			trinityBean.setApplicationNo(callableStatement.getString(12));
			logger.info("responseString : - " + responseString);
*/
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,trinityBean.getTotalAmount());
			callableStatement.setString(2,trinityBean.getApplicationNo());
			callableStatement.setString(3,trinityBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			trinityBean.setStudentRegistrationId(callableStatement.getString(6));
			trinityBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertTrinityDetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertTrinityDetails(" + trinityBean + ") - END");	
		return responseString;
	}

	@Override
	public TrinityOnlineFormBean getTrinityStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("<START> getTrinityStudentDetails(" + applicationNo + startTime +") - START");  
		TrinityOnlineFormBean trinityOnlineFormBean = new TrinityOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_trinity_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {

				trinityOnlineFormBean.setNameOfStudent(resultSet.getString("nameOfStudent"));
				trinityOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				trinityOnlineFormBean.setDob(resultSet.getString("dob"));
				trinityOnlineFormBean.setCourse(resultSet.getString("course"));
				trinityOnlineFormBean.setBatch(resultSet.getString("batch"));
				trinityOnlineFormBean.setEnrollmentNumber(resultSet.getString("enrollmentNo"));
				trinityOnlineFormBean.setPhoneNumber(resultSet.getString("phoneNumber"));
				trinityOnlineFormBean.setAmountToBePaid(resultSet.getString("amountToBePaid"));
				trinityOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));
				trinityOnlineFormBean.setApplicationNo(resultSet.getString("applicationNo"));
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getTrinityStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END> getTrinityStudentDetails(" + trinityOnlineFormBean.toString() + ") - END");
		return trinityOnlineFormBean;
	}

	@Override
	public String insertRoorkeeDetails(RoorkeeOnlineFornBean roorkeeOnlineFornBean, String billerId) {

		long startTime = System.currentTimeMillis();
		String otherCourse="NA";
		String otherBranch="NA";		
		logger.info("insertRoorkeeDetails(" + roorkeeOnlineFornBean.toString() + ") - START");
		logger.info("insertRoorkeeDetails---billerId : "+billerId);

		String responseString = null;
		try{

			callableStatement = con.prepareCall("{call PROC_Roorkee_Details(?,?,?,?,?,?,?)}");
			callableStatement.setString(1,roorkeeOnlineFornBean.getName());

			callableStatement.setString(2,roorkeeOnlineFornBean.getAmount());
			callableStatement.setString(3,roorkeeOnlineFornBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);
			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			roorkeeOnlineFornBean.setStudentRegistrationId(callableStatement.getString(6));
			roorkeeOnlineFornBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertRoorkeeDetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertRoorkeeDetails(" + roorkeeOnlineFornBean.toString() + ") - END");	
		return responseString;
	}

	@Override
	public RoorkeeOnlineFornBean getRoorkeeStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("<START> getTrinityStudentDetails(" + applicationNo + startTime +") - START");  
		RoorkeeOnlineFornBean roorkeeOnlineFornBean = new RoorkeeOnlineFornBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_Roorkee_DETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {

				roorkeeOnlineFornBean.setName(resultSet.getString("name"));
				roorkeeOnlineFornBean.setAmount(resultSet.getString("amount"));
				roorkeeOnlineFornBean.setApplicationNo(resultSet.getString("applicationNo"));
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getTrinityStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END> getRoorkeeStudentDetails(" + roorkeeOnlineFornBean.toString() + ") - END");
		return roorkeeOnlineFornBean;
	}

	@Override
	public String insertJawaharNavodayaVidyalayaMaharajganjDetails(JawaharNavodayaVidyalayaMaharajganjFormBean jawaharNavodayaVidyalayaMaharajganjFormBean, String billerId) {

		long startTime = System.currentTimeMillis();
		String otherCourse="NA";
		String otherBranch="NA";		
		logger.info("insertJawaharNavodayaVidyalayaMaharajganjDetails(" + jawaharNavodayaVidyalayaMaharajganjFormBean.toString() + ") - START");
		logger.info("insertJawaharNavodayaVidyalayaMaharajganjDetails---billerId : "+billerId);

		String responseString = null;
		try{

			callableStatement = con.prepareCall("{call PROC_JawaharNavodayaVidyalayaMaharajganj_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,jawaharNavodayaVidyalayaMaharajganjFormBean.getStudentId());
			callableStatement.setString(2,jawaharNavodayaVidyalayaMaharajganjFormBean.getStudentName());
			callableStatement.setString(3,jawaharNavodayaVidyalayaMaharajganjFormBean.getFatherName());
			callableStatement.setString(4,jawaharNavodayaVidyalayaMaharajganjFormBean.getMotherName());
			callableStatement.setString(5,jawaharNavodayaVidyalayaMaharajganjFormBean.getStudentClass());
			callableStatement.setString(6,jawaharNavodayaVidyalayaMaharajganjFormBean.getSection());
			callableStatement.setString(7,jawaharNavodayaVidyalayaMaharajganjFormBean.getAmount());
			callableStatement.setString(8,jawaharNavodayaVidyalayaMaharajganjFormBean.getMobileNo());
			callableStatement.setString(9,jawaharNavodayaVidyalayaMaharajganjFormBean.getEmailId()); 
			callableStatement.setString(10,jawaharNavodayaVidyalayaMaharajganjFormBean.getRemarks()); 

			callableStatement.setString(11,jawaharNavodayaVidyalayaMaharajganjFormBean.getRegisteredUserId());
			callableStatement.setString(12,billerId);
			callableStatement.registerOutParameter(13, Types.VARCHAR);
			callableStatement.registerOutParameter(14, Types.VARCHAR);
			callableStatement.registerOutParameter(15, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(15); 
			jawaharNavodayaVidyalayaMaharajganjFormBean.setStudentRegistrationId(callableStatement.getString(14));
			jawaharNavodayaVidyalayaMaharajganjFormBean.setApplicationNo(callableStatement.getString(13));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertJawaharNavodayaVidyalayaMaharajganjDetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertRoorkeeDetails(" + jawaharNavodayaVidyalayaMaharajganjFormBean.toString() + ") - END");	
		return responseString;
	}

	@Override
	public JawaharNavodayaVidyalayaMaharajganjFormBean getJawaharNavodayaVidyalayaMaharajganjDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("<START> getTrinityStudentDetails(" + applicationNo + startTime +") - START");  
		JawaharNavodayaVidyalayaMaharajganjFormBean jawaharNavodayaVidyalayaMaharajganjFormBean = new JawaharNavodayaVidyalayaMaharajganjFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_JawaharNavodayaVidyalayaMaharajganj_DETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {

				jawaharNavodayaVidyalayaMaharajganjFormBean.setStudentId(resultSet.getString("studentId"));
				jawaharNavodayaVidyalayaMaharajganjFormBean.setStudentName(resultSet.getString("studentName"));
				jawaharNavodayaVidyalayaMaharajganjFormBean.setFatherName(resultSet.getString("fatherName"));
				jawaharNavodayaVidyalayaMaharajganjFormBean.setMotherName(resultSet.getString("motherName"));
				jawaharNavodayaVidyalayaMaharajganjFormBean.setStudentClass(resultSet.getString("studentClass"));
				jawaharNavodayaVidyalayaMaharajganjFormBean.setSection(resultSet.getString("section"));
				jawaharNavodayaVidyalayaMaharajganjFormBean.setAmount(resultSet.getString("amount"));
				jawaharNavodayaVidyalayaMaharajganjFormBean.setMobileNo(resultSet.getString("mobileNo"));
				jawaharNavodayaVidyalayaMaharajganjFormBean.setEmailId(resultSet.getString("emailId"));
				jawaharNavodayaVidyalayaMaharajganjFormBean.setRemarks(resultSet.getString("remarks"));
				jawaharNavodayaVidyalayaMaharajganjFormBean.setApplicationNo(resultSet.getString("applicationNo"));
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getJawaharNavodayaVidyalayaMaharajganjDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END> getJawaharNavodayaVidyalayaMaharajganjDetails(" + jawaharNavodayaVidyalayaMaharajganjFormBean.toString() + ") - END");
		return jawaharNavodayaVidyalayaMaharajganjFormBean;
	}

	@Override
	public String insertJawaharNavodayaVidyalayaMauDetails(JawaharNavodayaVidyalayaMauFormBean jawaharNavodayaVidyalayaMauFormBean, String billerId) {

		long startTime = System.currentTimeMillis();
		String otherCourse="NA";
		String otherBranch="NA";		
		logger.info("insertJawaharNavodayaVidyalayaMauDetails(" + jawaharNavodayaVidyalayaMauFormBean.toString() + ") - START");
		logger.info("insertJawaharNavodayaVidyalayaMauDetails---billerId : "+billerId);

		String responseString = null;
		try{

			callableStatement = con.prepareCall("{call PROC_JawaharNavodayaVidyalayaMau_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,jawaharNavodayaVidyalayaMauFormBean.getStudentId());
			callableStatement.setString(2,jawaharNavodayaVidyalayaMauFormBean.getStudentName());
			callableStatement.setString(3,jawaharNavodayaVidyalayaMauFormBean.getFatherName());
			callableStatement.setString(4,jawaharNavodayaVidyalayaMauFormBean.getMotherName());
			callableStatement.setString(5,jawaharNavodayaVidyalayaMauFormBean.getStudentClass());
			callableStatement.setString(6,jawaharNavodayaVidyalayaMauFormBean.getSection());
			callableStatement.setString(7,jawaharNavodayaVidyalayaMauFormBean.getAmount());
			callableStatement.setString(8,jawaharNavodayaVidyalayaMauFormBean.getMobileNo());
			callableStatement.setString(9,jawaharNavodayaVidyalayaMauFormBean.getEmailId()); 
			callableStatement.setString(10,jawaharNavodayaVidyalayaMauFormBean.getRemarks()); 

			callableStatement.setString(11,jawaharNavodayaVidyalayaMauFormBean.getRegisteredUserId());
			callableStatement.setString(12,billerId);
			callableStatement.registerOutParameter(13, Types.VARCHAR);
			callableStatement.registerOutParameter(14, Types.VARCHAR);
			callableStatement.registerOutParameter(15, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(15); 
			jawaharNavodayaVidyalayaMauFormBean.setStudentRegistrationId(callableStatement.getString(14));
			jawaharNavodayaVidyalayaMauFormBean.setApplicationNo(callableStatement.getString(13));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertJawaharNavodayaVidyalayaMauDetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertJawaharNavodayaVidyalayaMauDetails(" + jawaharNavodayaVidyalayaMauFormBean.toString() + ") - END");	
		return responseString;
	}

	@Override
	public JawaharNavodayaVidyalayaMauFormBean getJawaharNavodayaVidyalayaMauDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("<START> getJawaharNavodayaVidyalayaMauDetails(" + applicationNo + startTime +") - START");  
		JawaharNavodayaVidyalayaMauFormBean jawaharNavodayaVidyalayaMauFormBean = new JawaharNavodayaVidyalayaMauFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_JawaharNavodayaVidyalayaMau_DETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {

				jawaharNavodayaVidyalayaMauFormBean.setStudentId(resultSet.getString("studentId"));
				jawaharNavodayaVidyalayaMauFormBean.setStudentName(resultSet.getString("studentName"));
				jawaharNavodayaVidyalayaMauFormBean.setFatherName(resultSet.getString("fatherName"));
				jawaharNavodayaVidyalayaMauFormBean.setMotherName(resultSet.getString("motherName"));
				jawaharNavodayaVidyalayaMauFormBean.setStudentClass(resultSet.getString("studentClass"));
				jawaharNavodayaVidyalayaMauFormBean.setSection(resultSet.getString("section"));
				jawaharNavodayaVidyalayaMauFormBean.setAmount(resultSet.getString("amount"));
				jawaharNavodayaVidyalayaMauFormBean.setMobileNo(resultSet.getString("mobileNo"));
				jawaharNavodayaVidyalayaMauFormBean.setEmailId(resultSet.getString("emailId"));
				jawaharNavodayaVidyalayaMauFormBean.setRemarks(resultSet.getString("remarks"));
				jawaharNavodayaVidyalayaMauFormBean.setApplicationNo(resultSet.getString("applicationNo"));
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getJawaharNavodayaVidyalayaMauDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END> getJawaharNavodayaVidyalayaMauDetails(" + jawaharNavodayaVidyalayaMauFormBean.toString() + ") - END");
		return jawaharNavodayaVidyalayaMauFormBean;
	}

	@Override
	public String insertIndraprasthAeronauticsDetails(
			IndraprasthAeronauticsFormBean indraprasthAeronauticsFormBean,
			String billerId) {

		long startTime = System.currentTimeMillis();
		String otherCourse="NA";
		String otherBranch="NA";		
		logger.info("insertIndraprasthAeronauticsDetails(" + indraprasthAeronauticsFormBean.toString() + ") - START");
		logger.info("insertIndraprasthAeronauticsDetails---billerId : "+billerId);

		String responseString = null;
		try{

			callableStatement = con.prepareCall("{call PROC_IndraprasthAeronautics_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,indraprasthAeronauticsFormBean.getName());
			callableStatement.setString(2,indraprasthAeronauticsFormBean.getFatherName());
			callableStatement.setString(3,indraprasthAeronauticsFormBean.getMotherName());
			callableStatement.setString(4,indraprasthAeronauticsFormBean.getGender());
			callableStatement.setString(5,indraprasthAeronauticsFormBean.getDob());
			callableStatement.setString(6,indraprasthAeronauticsFormBean.getMobileNo());
			callableStatement.setString(7,indraprasthAeronauticsFormBean.getEmailID());
			callableStatement.setString(8,indraprasthAeronauticsFormBean.getAddress());
			callableStatement.setString(9,indraprasthAeronauticsFormBean.getBoard10()); 
			callableStatement.setString(10,indraprasthAeronauticsFormBean.getMarks10());
			callableStatement.setString(11,indraprasthAeronauticsFormBean.getPassingYear10());
			callableStatement.setString(12,indraprasthAeronauticsFormBean.getBoard12()); 
			callableStatement.setString(13,indraprasthAeronauticsFormBean.getMarks12());
			callableStatement.setString(14,indraprasthAeronauticsFormBean.getPassingYear12());
			callableStatement.setString(15,indraprasthAeronauticsFormBean.getDocProof());
			callableStatement.setString(16,indraprasthAeronauticsFormBean.getTotalAmount());
			callableStatement.setString(17,indraprasthAeronauticsFormBean.getRegisteredUserId());
			callableStatement.setString(18,billerId);
			callableStatement.registerOutParameter(19, Types.VARCHAR);
			callableStatement.registerOutParameter(20, Types.VARCHAR);
			callableStatement.registerOutParameter(21, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(21); 
			indraprasthAeronauticsFormBean.setStudentRegistrationId(callableStatement.getString(20));
			indraprasthAeronauticsFormBean.setApplicationNo(callableStatement.getString(19));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch indraprasthAeronauticsFormBean"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("indraprasthAeronauticsFormBean(" + indraprasthAeronauticsFormBean.toString() + ") - END");	
		return responseString;
	}

	@Override
	public IndraprasthAeronauticsFormBean getIndraprasthAeronauticsDetails(
			String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("<START> getIndraprasthAeronauticsDetails(" + applicationNo + startTime +") - START");  
		IndraprasthAeronauticsFormBean indraprasthAeronauticsFormBean = new IndraprasthAeronauticsFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_IndraprasthAeronautics_DETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {

				indraprasthAeronauticsFormBean.setName(resultSet.getString("name"));
				indraprasthAeronauticsFormBean.setFatherName(resultSet.getString("fatherName"));
				indraprasthAeronauticsFormBean.setMotherName(resultSet.getString("motherName"));
				indraprasthAeronauticsFormBean.setGender(resultSet.getString("gender"));
				indraprasthAeronauticsFormBean.setDob(resultSet.getString("dob"));
				indraprasthAeronauticsFormBean.setMobileNo(resultSet.getString("mobileNo"));
				indraprasthAeronauticsFormBean.setEmailID(resultSet.getString("emailID"));
				indraprasthAeronauticsFormBean.setAddress(resultSet.getString("address"));
				indraprasthAeronauticsFormBean.setBoard10(resultSet.getString("board10"));
				indraprasthAeronauticsFormBean.setMarks10(resultSet.getString("marks10"));
				indraprasthAeronauticsFormBean.setPassingYear10(resultSet.getString("passingYear10"));
				indraprasthAeronauticsFormBean.setMarks12(resultSet.getString("marks12"));
				indraprasthAeronauticsFormBean.setBoard12(resultSet.getString("board12"));
				indraprasthAeronauticsFormBean.setPassingYear12(resultSet.getString("passingYear12"));
				indraprasthAeronauticsFormBean.setTotalAmount(resultSet.getString("totalAmount"));
				indraprasthAeronauticsFormBean.setApplicationNo(resultSet.getString("applicationNo"));
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch indraprasthAeronauticsFormBean"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END> getIndraprasthAeronauticsDetails(" + indraprasthAeronauticsFormBean.toString() + ") - END");
		return indraprasthAeronauticsFormBean;
	}

	@Override
	public DronacharyaOnlineFormBean getDronacharyaDetails(
			String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("<START> getLandingNameChangeDetails(" + applicationNo + startTime +") - START");  
		DronacharyaOnlineFormBean dronacharyaOnlineFormBean = new DronacharyaOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_DronacharyaCOE1_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			System.out.println(resultSet);
			while (resultSet.next()) {

				dronacharyaOnlineFormBean.setFirstName(resultSet.getString("firstName"));
				dronacharyaOnlineFormBean.setMiddleName(resultSet.getString("middleName"));
				dronacharyaOnlineFormBean.setSurName(resultSet.getString("surName"));

				dronacharyaOnlineFormBean.setDob(resultSet.getString("dob"));
				dronacharyaOnlineFormBean.setGender(resultSet.getString("gender"));
				dronacharyaOnlineFormBean.setBranchInEngg(resultSet.getString("branchInEngg"));
				dronacharyaOnlineFormBean.setBranchInMTech(resultSet.getString("branchInMTech"));
				dronacharyaOnlineFormBean.setBranchAlloted(resultSet.getString("branchAlloted"));
				dronacharyaOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				dronacharyaOnlineFormBean.setMotherName(resultSet.getString("motherName"));
				dronacharyaOnlineFormBean.setCurrentAddress(resultSet.getString("currentAddress"));
				dronacharyaOnlineFormBean.setCurrentCity(resultSet.getString("currentCity"));
				dronacharyaOnlineFormBean.setCurrentState(resultSet.getString("currentState"));
				dronacharyaOnlineFormBean.setCurrentPinCode(resultSet.getString("currentPinCode"));
				dronacharyaOnlineFormBean.setPermnentAddress(resultSet.getString("permnentAddress"));
				dronacharyaOnlineFormBean.setPermnentCity(resultSet.getString("permnentCity"));
				dronacharyaOnlineFormBean.setPermnentState(resultSet.getString("permnentState"));
				dronacharyaOnlineFormBean.setPermnentPinCode(resultSet.getString("permnentPinCode"));
				dronacharyaOnlineFormBean.setStudEmailId(resultSet.getString("studEmailId"));
				dronacharyaOnlineFormBean.setStudPhoneNumber(resultSet.getString("studPhoneNumber"));
				dronacharyaOnlineFormBean.setParentPhoneNo(resultSet.getString("parentPhoneNo"));
				dronacharyaOnlineFormBean.setParentMobileNo(resultSet.getString("parentMobileNo"));
				dronacharyaOnlineFormBean.setParentEmailId(resultSet.getString("parentEmailId"));

				dronacharyaOnlineFormBean.setRollNo(resultSet.getString("rollNo"));
				dronacharyaOnlineFormBean.setAmountToBePaid(resultSet.getString("amountToBePaid"));
				dronacharyaOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));
				dronacharyaOnlineFormBean.setApplicationNo(resultSet.getString("applicationNo"));
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getDronacharyaStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END> ChangeNameRequestDetails(" + dronacharyaOnlineFormBean.toString() + ") - END");
		return dronacharyaOnlineFormBean;
	}

	@Override
	public String insertDronacharyaGOIstudentDetails(DronacharyaGOIOnlineFormBean dronacharyaGOIOnlineFormBean, String billerId) {

		long startTime = System.currentTimeMillis();
		String otherCourse="NA";
		String otherBranch="NA";		
		logger.info("insertDronacharyaGOIstudentDetails(" + dronacharyaGOIOnlineFormBean.toString() + ") - START");
		logger.info("insertDronacharyaGOIstudentDetails---billerId : "+billerId);

		String responseString = null;
		/*try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,dronacharyaGOIOnlineFormBean.getTotalAmount());
			callableStatement.setString(2,dronacharyaGOIOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,dronacharyaGOIOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			dronacharyaGOIOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			dronacharyaGOIOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);
*/
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,dronacharyaGOIOnlineFormBean.getTotalAmount());
			callableStatement.setString(2,dronacharyaGOIOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,dronacharyaGOIOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			dronacharyaGOIOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			dronacharyaGOIOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);


		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertDronacharyaGOIstudentDetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertDronacharyaGOIstudentDetails(" + dronacharyaGOIOnlineFormBean + ") - END");	
		return responseString;
	}

	@Override
	public String insertDronacharyaDetails(
			DronacharyaOnlineFormBean dronacharyaOnlineFormBean, String billerId) {

		long startTime = System.currentTimeMillis();
		String otherCourse="NA";
		String otherBranch="NA";		
		logger.info("insertTrinityDetails(" + dronacharyaOnlineFormBean.toString() + ") - START");
		logger.info("insertTrinityDetails---billerId : "+billerId);

		String responseString = null;
		/*try{

			callableStatement = con.prepareCall("{call PROC_GET_Dronacharya_students_DETAILS11(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1,dronacharyaOnlineFormBean.getFirstName());
			callableStatement.setString(2,dronacharyaOnlineFormBean.getMiddleName());
			callableStatement.setString(3,dronacharyaOnlineFormBean.getSurName());
			callableStatement.setString(4,dronacharyaOnlineFormBean.getGender());
			callableStatement.setString(5,dronacharyaOnlineFormBean.getDob());
			callableStatement.setString(6,dronacharyaOnlineFormBean.getBranchInEngg());
			callableStatement.setString(7,dronacharyaOnlineFormBean.getBranchInMTech());
			callableStatement.setString(8,dronacharyaOnlineFormBean.getFatherName());
			callableStatement.setString(9,dronacharyaOnlineFormBean.getMotherName());
			callableStatement.setString(10,dronacharyaOnlineFormBean.getBranchAlloted());
			callableStatement.setString(11,dronacharyaOnlineFormBean.getCurrentAddress());
			callableStatement.setString(12,dronacharyaOnlineFormBean.getCurrentCity());
			callableStatement.setString(13,dronacharyaOnlineFormBean.getCurrentState());
			callableStatement.setString(14,dronacharyaOnlineFormBean.getCurrentPinCode());
			callableStatement.setString(15,dronacharyaOnlineFormBean.getPermnentAddress());
			callableStatement.setString(16,dronacharyaOnlineFormBean.getPermnentCity());
			callableStatement.setString(17,dronacharyaOnlineFormBean.getPermnentState());
			callableStatement.setString(18,dronacharyaOnlineFormBean.getPermnentPinCode());
			callableStatement.setString(19,dronacharyaOnlineFormBean.getStudPhoneNumber());
			callableStatement.setString(20,dronacharyaOnlineFormBean.getStudEmailId());
			callableStatement.setString(21,dronacharyaOnlineFormBean.getParentPhoneNo());
			callableStatement.setString(22,dronacharyaOnlineFormBean.getParentMobileNo());
			callableStatement.setString(23,dronacharyaOnlineFormBean.getParentEmailId());


			callableStatement.setString(24,dronacharyaOnlineFormBean.getAmountToBePaid());
			callableStatement.setString(25,dronacharyaOnlineFormBean.getTotalAmount());
			callableStatement.setString(26,dronacharyaOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(27,billerId);
			callableStatement.setString(28,dronacharyaOnlineFormBean.getRollNo());

			callableStatement.registerOutParameter(29, Types.VARCHAR);
			callableStatement.registerOutParameter(30, Types.VARCHAR);
			callableStatement.registerOutParameter(31, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(31); 
			dronacharyaOnlineFormBean.setStudentRegistrationId(callableStatement.getString(30));
			dronacharyaOnlineFormBean.setApplicationNo(callableStatement.getString(29));
			logger.info("responseString : - " + responseString);
*/			
		try{
			
			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");
			
			
			callableStatement.setString(1,dronacharyaOnlineFormBean.getAmountToBePaid());
			callableStatement.setString(2,dronacharyaOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,dronacharyaOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);

			
			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			dronacharyaOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			dronacharyaOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertDronacharyaDetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertDronacharyaDetails(" + dronacharyaOnlineFormBean + ") - END");	
		return responseString;
	}

	// ==================================================================================================
	@Override
	public String insertEduncleDetails(EduncleOnlineFormBean eduncleOnlineFormBean,
			String billerId) {
		long startTime = System.currentTimeMillis();
		String otherCourse="NA";
		String otherBranch="NA";		
		logger.info("insertEduncleDetails(" + eduncleOnlineFormBean.toString() + ") - START");
		logger.info("insertEduncleDetails---billerId : "+billerId);

		String responseString = null;
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_Eduncle_Details(?,?,?,?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1,eduncleOnlineFormBean.getStudName());
			callableStatement.setString(2,eduncleOnlineFormBean.getStudMobileNo());
			callableStatement.setString(3,eduncleOnlineFormBean.getStudEmailId());
			callableStatement.setString(4,eduncleOnlineFormBean.getExam());
			callableStatement.setString(5,eduncleOnlineFormBean.getSubject());


			callableStatement.setString(6,eduncleOnlineFormBean.getAmountToBePaid());
			callableStatement.setString(7,eduncleOnlineFormBean.getTotalAmount());
			callableStatement.setString(8,eduncleOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(9,billerId);
			callableStatement.registerOutParameter(10, Types.VARCHAR);
			callableStatement.registerOutParameter(11, Types.VARCHAR);
			callableStatement.registerOutParameter(12, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(12); 
			eduncleOnlineFormBean.setStudentRegistrationId(callableStatement.getString(11));
			eduncleOnlineFormBean.setApplicationNo(callableStatement.getString(10));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertEduncleDetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertEduncleDetails(" + eduncleOnlineFormBean + ") - END");	
		return responseString;
	}

	@Override
	public EduncleOnlineFormBean getEduncleDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("<START> getEduncleDetails(" + applicationNo + startTime +") - START");  
		EduncleOnlineFormBean eduncleOnlineFormBean = new EduncleOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_eduncle_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			System.out.println(resultSet);
			while (resultSet.next()) {

				eduncleOnlineFormBean.setStudName(resultSet.getString("firstName"));
				eduncleOnlineFormBean.setStudMobileNo(resultSet.getString("studMobileNo"));

				eduncleOnlineFormBean.setStudEmailId(resultSet.getString("studEmailId"));
				eduncleOnlineFormBean.setExam(resultSet.getString("exam"));
				eduncleOnlineFormBean.setSubject(resultSet.getString("examSubject"));

				eduncleOnlineFormBean.setAmountToBePaid(resultSet.getString("amountToBePaid"));
				eduncleOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));
				eduncleOnlineFormBean.setApplicationNo(resultSet.getString("applicationNo"));
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getEduncleDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END> Eduncle Details(" + eduncleOnlineFormBean.toString() + ") - END");
		return eduncleOnlineFormBean;
	}

	// =============================================================================================================
	@Override
	public String insertDpsPanipatDetails(
			DpsPanipatOnlineFormBean dpsPanipatOnlineFormBean, String billerId) {
		long startTime = System.currentTimeMillis();
		String otherCourse="NA";
		String otherBranch="NA";		
		logger.info("insertEduncleDetails(" + dpsPanipatOnlineFormBean.toString() + ") - START");
		logger.info("insertEduncleDetails---billerId : "+billerId);

		String responseString = null;
		/*try{

			callableStatement = con.prepareCall("{call PROC_Insert_DpsPanipat_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1,dpsPanipatOnlineFormBean.getStudAdmissionNo());
			callableStatement.setString(2,dpsPanipatOnlineFormBean.getStudentName());
			callableStatement.setString(3,dpsPanipatOnlineFormBean.getFatherName());
			callableStatement.setString(4,dpsPanipatOnlineFormBean.getMotherName());
			callableStatement.setString(5,dpsPanipatOnlineFormBean.getPhoneNo());
			callableStatement.setString(6,dpsPanipatOnlineFormBean.getStudClass());

			callableStatement.setString(7,dpsPanipatOnlineFormBean.getAmountToBePaid());
			callableStatement.setString(8,dpsPanipatOnlineFormBean.getRemark());
			callableStatement.setString(9,dpsPanipatOnlineFormBean.getTotalAmount());
			callableStatement.setString(10,dpsPanipatOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(11,billerId);
			callableStatement.registerOutParameter(12, Types.VARCHAR);
			callableStatement.registerOutParameter(13, Types.VARCHAR);
			callableStatement.registerOutParameter(14, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(14); 
			dpsPanipatOnlineFormBean.setStudentRegistrationId(callableStatement.getString(13));
			dpsPanipatOnlineFormBean.setApplicationNo(callableStatement.getString(12));
			logger.info("responseString : - " + responseString);*/
		
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,dpsPanipatOnlineFormBean.getTotalAmount());
			callableStatement.setString(2,dpsPanipatOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,dpsPanipatOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			dpsPanipatOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			dpsPanipatOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertEduncleDetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertEduncleDetails(" + dpsPanipatOnlineFormBean + ") - END");	
		return responseString;
	}

	@Override
	public DpsPanipatOnlineFormBean getDpsPanipatStudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("<START> getEduncleDetails(" + applicationNo + startTime +") - START");  
		DpsPanipatOnlineFormBean dpsPanipatOnlineFormBean = new DpsPanipatOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_DpsPanipat_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			System.out.println(resultSet);
			while (resultSet.next()) {

				dpsPanipatOnlineFormBean.setStudAdmissionNo(resultSet.getString("studAdmissionNo"));
				dpsPanipatOnlineFormBean.setStudentName(resultSet.getString("studentName"));

				dpsPanipatOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				dpsPanipatOnlineFormBean.setMotherName(resultSet.getString("motherName"));
				dpsPanipatOnlineFormBean.setPhoneNo(resultSet.getString("phoneNo"));
				dpsPanipatOnlineFormBean.setStudClass(resultSet.getString("studClass"));


				dpsPanipatOnlineFormBean.setAmountToBePaid(resultSet.getString("amountToBePaid"));
				dpsPanipatOnlineFormBean.setRemark(resultSet.getString("remark"));
				dpsPanipatOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));
				dpsPanipatOnlineFormBean.setApplicationNo(resultSet.getString("applicationNo"));
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getEduncleDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END> Eduncle Details(" + dpsPanipatOnlineFormBean.toString() + ") - END");
		return dpsPanipatOnlineFormBean;
	}

	// ------------------TOYOTA start-----
	@Override
	public String insertToyotaWebinarDetails(
			ToyotaOnlineFormBean toyotaOnlineFormBean, String billerId) {
		long startTime = System.currentTimeMillis();
		String otherCourse="NA";
		String otherBranch="NA";		
		logger.info("insertToyotaWebinarDetails(" + toyotaOnlineFormBean.toString() + ") - START");
		logger.info("insertToyotaWebinarDetails---billerId : "+billerId);

		String responseString = null;
		try{

			callableStatement = con.prepareCall("{call PROC__Insert_TOYOTA_WebinarRegistration_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1,toyotaOnlineFormBean.getNameTitle());
			callableStatement.setString(2,toyotaOnlineFormBean.getStudName());
			callableStatement.setString(3,toyotaOnlineFormBean.getStudAge());
			callableStatement.setString(4,toyotaOnlineFormBean.getGender());
			callableStatement.setString(5,toyotaOnlineFormBean.getStudMobileNo());
			callableStatement.setString(6,toyotaOnlineFormBean.getStudEmailId());
			callableStatement.setString(7,toyotaOnlineFormBean.getCity());
			callableStatement.setString(8,toyotaOnlineFormBean.getCountry());
			callableStatement.setString(9,toyotaOnlineFormBean.getStudProfessional());
			callableStatement.setString(10,toyotaOnlineFormBean.getStudCource());
			callableStatement.setString(11,toyotaOnlineFormBean.getStudCourceYear());
			callableStatement.setString(12,toyotaOnlineFormBean.getStudInstituteName());
			callableStatement.setString(13,toyotaOnlineFormBean.getProfDesignation());
			callableStatement.setString(14,toyotaOnlineFormBean.getProfOrganization());

			callableStatement.setString(15,toyotaOnlineFormBean.getProfNOB());
			callableStatement.setString(16,toyotaOnlineFormBean.getChk1());
			callableStatement.setString(17,toyotaOnlineFormBean.getChk2());


			callableStatement.setString(18,toyotaOnlineFormBean.getAmountToBePaid());
			callableStatement.setString(19,toyotaOnlineFormBean.getTotalAmount());
			callableStatement.setString(20,toyotaOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(21,billerId);
			callableStatement.registerOutParameter(22, Types.VARCHAR);
			callableStatement.registerOutParameter(23, Types.VARCHAR);
			callableStatement.registerOutParameter(24, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(24); 
			toyotaOnlineFormBean.setStudentRegistrationId(callableStatement.getString(23));
			toyotaOnlineFormBean.setApplicationNo(callableStatement.getString(22));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertToyotaWebinarDetails"+e);
			}
		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insert Toyota Webinar Details(" + toyotaOnlineFormBean + ") - END");	
		return responseString;
	}

	@Override
	public ToyotaOnlineFormBean getToyotaWebinarDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("<START> getToyotaWebinarDetails(" + applicationNo + startTime +") - START");  
		ToyotaOnlineFormBean toyotaOnlineFormBean = new ToyotaOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_TOYOTA_WebinarRegistrationDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			System.out.println(resultSet);
			while (resultSet.next()) {

				toyotaOnlineFormBean.setNameTitle(resultSet.getString("nameTitle"));
				toyotaOnlineFormBean.setStudName(resultSet.getString("studName"));

				toyotaOnlineFormBean.setStudAge(resultSet.getString("studAge"));
				toyotaOnlineFormBean.setGender(resultSet.getString("gender"));
				toyotaOnlineFormBean.setStudMobileNo(resultSet.getString("studMobileNo"));
				toyotaOnlineFormBean.setStudEmailId(resultSet.getString("studEmailId"));
				toyotaOnlineFormBean.setCity(resultSet.getString("city"));
				toyotaOnlineFormBean.setCountry(resultSet.getString("country"));

				toyotaOnlineFormBean.setStudProfessional(resultSet.getString("studProfessional"));
				toyotaOnlineFormBean.setStudCource(resultSet.getString("studCource"));
				toyotaOnlineFormBean.setStudCourceYear(resultSet.getString("studCourceYear"));
				toyotaOnlineFormBean.setStudInstituteName(resultSet.getString("studInstituteName"));
				toyotaOnlineFormBean.setProfDesignation(resultSet.getString("profDesignation"));
				toyotaOnlineFormBean.setProfOrganization(resultSet.getString("profOrganization"));

				toyotaOnlineFormBean.setProfNOB(resultSet.getString("profNOB"));
				toyotaOnlineFormBean.setChk1(resultSet.getString("chk1"));
				toyotaOnlineFormBean.setChk2(resultSet.getString("chk2"));



				toyotaOnlineFormBean.setAmountToBePaid(resultSet.getString("amountToBePaid"));

				toyotaOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));
				toyotaOnlineFormBean.setApplicationNo(resultSet.getString("applicationNo"));
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getToyotaWebinarDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END> Toyota Webinar Details(" + toyotaOnlineFormBean.toString() + ") - END");
		return toyotaOnlineFormBean;
	}
	// ----------TOYOTA end----------
	/*
	 * @Override public String insertDronacharyaGOIstudentDetails(
	 * DronacharyaGOIOnlineFormBean dronacharyaGOIOnlineFormBean, String billerId) {
	 * 
	 * long startTime = System.currentTimeMillis(); String otherCourse="NA"; String
	 * otherBranch="NA"; logger.info("insertDronacharyaGOIstudentDetails(" +
	 * dronacharyaGOIOnlineFormBean.toString() + ") - START");
	 * logger.info("insertDronacharyaGOIstudentDetails---billerId : "+billerId);
	 * 
	 * String responseString = null; try{
	 * 
	 * callableStatement = con.
	 * prepareCall("{call PROC_Insert_DronacharyaGOI_students_DETAILS(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}"
	 * );
	 * 
	 * callableStatement.setString(1,dronacharyaGOIOnlineFormBean.getFirstName());
	 * callableStatement.setString(2,dronacharyaGOIOnlineFormBean.getMiddleName());
	 * callableStatement.setString(3,dronacharyaGOIOnlineFormBean.getSurName());
	 * callableStatement.setString(4,dronacharyaGOIOnlineFormBean.getGender());
	 * callableStatement.setString(5,dronacharyaGOIOnlineFormBean.getDob());
	 * callableStatement.setString(6,dronacharyaGOIOnlineFormBean.getBranchInEngg())
	 * ;
	 * callableStatement.setString(7,dronacharyaGOIOnlineFormBean.getBranchInMTech()
	 * );
	 * callableStatement.setString(8,dronacharyaGOIOnlineFormBean.getFatherName());
	 * callableStatement.setString(9,dronacharyaGOIOnlineFormBean.getMotherName());
	 * callableStatement.setString(10,dronacharyaGOIOnlineFormBean.getBranchAlloted(
	 * ));
	 * callableStatement.setString(11,dronacharyaGOIOnlineFormBean.getCurrentAddress
	 * ());
	 * callableStatement.setString(12,dronacharyaGOIOnlineFormBean.getCurrentCity())
	 * ;
	 * callableStatement.setString(13,dronacharyaGOIOnlineFormBean.getCurrentState()
	 * );
	 * callableStatement.setString(14,dronacharyaGOIOnlineFormBean.getCurrentPinCode
	 * ()); callableStatement.setString(15,dronacharyaGOIOnlineFormBean.
	 * getPermnentAddress());
	 * callableStatement.setString(16,dronacharyaGOIOnlineFormBean.getPermnentCity()
	 * );
	 * callableStatement.setString(17,dronacharyaGOIOnlineFormBean.getPermnentState(
	 * )); callableStatement.setString(18,dronacharyaGOIOnlineFormBean.
	 * getPermnentPinCode());
	 * callableStatement.setString(19,dronacharyaGOIOnlineFormBean.
	 * getStudPhoneNumber());
	 * callableStatement.setString(20,dronacharyaGOIOnlineFormBean.getStudEmailId())
	 * ;
	 * callableStatement.setString(21,dronacharyaGOIOnlineFormBean.getParentPhoneNo(
	 * ));
	 * callableStatement.setString(22,dronacharyaGOIOnlineFormBean.getParentMobileNo
	 * ());
	 * callableStatement.setString(23,dronacharyaGOIOnlineFormBean.getParentEmailId(
	 * ));
	 * 
	 * 
	 * callableStatement.setString(24,dronacharyaGOIOnlineFormBean.getAmountToBePaid
	 * ());
	 * callableStatement.setString(25,dronacharyaGOIOnlineFormBean.getTotalAmount())
	 * ; callableStatement.setString(26,dronacharyaGOIOnlineFormBean.
	 * getRegisteredUserId()); callableStatement.setString(27,billerId);
	 * callableStatement.setString(28,dronacharyaGOIOnlineFormBean.getRollNo());
	 * 
	 * callableStatement.registerOutParameter(29, Types.VARCHAR);
	 * callableStatement.registerOutParameter(30, Types.VARCHAR);
	 * callableStatement.registerOutParameter(31, Types.VARCHAR);
	 * callableStatement.execute(); responseString =
	 * callableStatement.getString(31);
	 * dronacharyaGOIOnlineFormBean.setStudentRegistrationId(callableStatement.
	 * getString(30));
	 * dronacharyaGOIOnlineFormBean.setApplicationNo(callableStatement.getString(29)
	 * ); logger.info("responseString : - " + responseString);
	 * 
	 * 
	 * 
	 * }catch(Exception e){ e.printStackTrace(); } finally { try { if (resultSet !=
	 * null) { resultSet.close(); } if (callableStatement != null) {
	 * callableStatement.close(); } if (con != null) { con.close(); } } catch
	 * (Exception e) {
	 * logger.error("Exception inside catch insertDronacharyaGOIstudentDetails"+e);
	 * } }
	 * 
	 * long endTime = System.currentTimeMillis(); logger.info("** EXECUTION TIME **"
	 * + (endTime - startTime)); logger.info("insertDronacharyaGOIstudentDetails(" +
	 * dronacharyaGOIOnlineFormBean + ") - END"); return responseString; }
	 */

	@Override
//	public DronacharyaGOIOnlineFormBean getDronacharyaGOIstudentDetails(String AppNo,String institute_Id,
//			 InstituteFormDetailsBean instituteFormDetailsBean) {
	public DronacharyaGOIOnlineFormBean getDronacharyaGOIstudentDetails(
			String applicationNo,String instituteCode) {
//    	String institute_id=getInstituteId(instituteCode);
//    	InstituteFormDetailsBean instituteFormDetailsBean = getInstituteFormDetails(institute_id);
		long startTime = System.currentTimeMillis();
//		PreparedStatement preparedStatement=this.con
		logger.info("<START> getDronacharyaGOIstudentDetails(" + applicationNo + startTime +") - START"); 
		//String billerId = ((FJBean) getUserSessionMap().get("BASEDATA")).getBillerId();
		DronacharyaGOIOnlineFormBean dronacharyaGOIOnlineFormBean = new DronacharyaGOIOnlineFormBean();
		StudentRegistrationService studentRegistrationService = new StudentRegistrationService();
		String merchantID=studentRegistrationService.getMerchantId(instituteCode);
		//InstituteFormDetailsBean instituteFormDetailsBean = studentRegistrationService.getInstituteFormDetails(billerId);

		try{
			ObjectMapper obMapper = new ObjectMapper();
			ObjectNode objNode = obMapper.createObjectNode();
			/*** *** *** Initialization start *** *** ***/
			SecureAPIBuilder secureAPIBuilder = SecureAPIBuilder.getInstance();

			secureAPIBuilder.setUpstreamServerDomain("https://securedev.in.worldline-solutions.com/form-engine/");
			secureAPIBuilder.setUpstreamServerPort(443);

			secureAPIBuilder.setAllowedTLSVersions(new String[] { "TLSv1.3", "TLSv1.2" });
			secureAPIBuilder.setVerifyServerSSL(false);

			//String clientId = "actual-smarthub-node-ip";
			//String clientKeyStr = "30820122300d06092a864886f70d01010105000382010f003082010a028201010084bea95852310b54f24d625dbba542f4e0e465e6e536a2102d22b35241a75d4966cdf84828cbc9388c66841e38b904e0167a060c7d88538485474fc186129890e3e8a097cf49b215de7285816f68bf85f480e40105ac6954001fd9a48bbe95e7093709556f3c51a67760130ef10c3371a4dbf0c38645f5f9b839f2d7c2a20420c7a0897607662d5017d7368875ba247d2694f40ce4e010601201c66d5c18a7e5c4c252d098504253403e769f65ae782542cdcb7e3d0c5aaa45766239267dcd9bf07240251ba745b9b1d61ad4f3ba4fa2f17db00d87713c2a74726a9e7b1a8693d5ac800a07ad18682c2367e8591828fd73bdeaea0a3e2b11095f34c65759cb370203010001";

			//secureAPIBuilder.setAuthenticationAlias(clientId);

			//byte[] clientKey = hexStringToByteArray(clientKeyStr);
			//secureAPIBuilder.setAuthenticationKey(clientKey);

			SecureAPIConnection secureAPI = secureAPIBuilder.build();
			
		SmartHubFetchOnlineFormBean smartHubFetchOnlineFormBean=new SmartHubFetchOnlineFormBean();
		smartHubFetchOnlineFormBean.setApplication_id("SMARTHUB");
		smartHubFetchOnlineFormBean.setForm_name(instituteCode);
		smartHubFetchOnlineFormBean.setContext_id(merchantID);
		smartHubFetchOnlineFormBean.setForm_id(applicationNo);
		logger.info("AppNo From dao "+applicationNo);
		String  jsonString2=obMapper.writeValueAsString(smartHubFetchOnlineFormBean);
		logger.info("jsonString2"+jsonString2);

//		WebTarget webTarget1 = client.target(PropertyReader.getProperty(TPSLConstants.JSON_API_PATH)).path("/get-form-data");
//		Invocation.Builder invocationBuilder1 = webTarget1.request(javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE);
//		
//		Response response1 = invocationBuilder1.post(Entity.json(jsonString2));
		APIResponse apiResponse1 = null;
		apiResponse1 = secureAPI.callSecureAPI("POST", "/api/1/fetch_form_data", jsonString2.toString());

		System.out.println("HTTP version: " + apiResponse1.getHTTPVersion() + ", response code: " + apiResponse1.getResponseCode());

		logger.info("responseString", apiResponse1.toString());

		if (apiResponse1.getResponseCode() != 200) {
			throw new RuntimeException("Failed : HTTP error code : " + apiResponse1.getResponseCode());
		}
		logger.info("Output from Server .... \n");
		String output1 = apiResponse1.getData().toString();
		
		
		logger.info("output1"+output1);
		
		JSONObject jsonObject = new JSONObject(output1);
		
		JSONArray jsonArray = jsonObject.getJSONArray("form_data_set");
		logger.info("jsonArray"+jsonArray);

		JSONObject data=jsonArray.getJSONObject(0);
		JSONObject dataobj=data.getJSONObject("form_data");
		
		String stuName=dataobj.getString("first_name");
		logger.info("stuName"+stuName);
		String roll_no=dataobj.getString("roll_no");
		int amt_paid=dataobj.getInt("amount_tobepaid");
		Long mobile_number=dataobj.getLong("studphone_number");
		
		dronacharyaGOIOnlineFormBean.setFirstName(stuName);
		dronacharyaGOIOnlineFormBean.setRollNo(roll_no);
		dronacharyaGOIOnlineFormBean.setAmountToBePaid(String.valueOf(amt_paid));
		dronacharyaGOIOnlineFormBean.setStudPhoneNumber(String.valueOf(mobile_number));
		dronacharyaGOIOnlineFormBean.setTotalAmount(String.valueOf(amt_paid));
		dronacharyaGOIOnlineFormBean.setApplicationNo(applicationNo);
		

//		logger.info("PROC_GET_DronacharyaGOIgurgaon_STUDENTDETAILS:" + applicationNo ); 
//		callableStatement = con.prepareCall("{call PROC_GET_DronacharyaGOIgurgaon_STUDENTDETAILS(?)}");
//		callableStatement.setString(1, applicationNo);
//		resultSet = callableStatement.executeQuery(); 
//		System.out.println(resultSet);
//		while (resultSet.next()) {
//
//			dronacharyaGOIOnlineFormBean.setFirstName(resultSet.getString("firstName"));
//			dronacharyaGOIOnlineFormBean.setMiddleName(resultSet.getString("middleName"));
//			dronacharyaGOIOnlineFormBean.setSurName(resultSet.getString("surName"));
//
//			dronacharyaGOIOnlineFormBean.setDob(resultSet.getString("dob"));
//			dronacharyaGOIOnlineFormBean.setGender(resultSet.getString("gender"));
//			dronacharyaGOIOnlineFormBean.setBranchInEngg(resultSet.getString("branchInEngg"));
//			dronacharyaGOIOnlineFormBean.setBranchInMTech(resultSet.getString("branchInMTech"));
//			dronacharyaGOIOnlineFormBean.setBranchAlloted(resultSet.getString("branchAlloted"));
//			dronacharyaGOIOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
//			dronacharyaGOIOnlineFormBean.setMotherName(resultSet.getString("motherName"));
//			dronacharyaGOIOnlineFormBean.setCurrentAddress(resultSet.getString("currentAddress"));
//			dronacharyaGOIOnlineFormBean.setCurrentCity(resultSet.getString("currentCity"));
//			dronacharyaGOIOnlineFormBean.setCurrentState(resultSet.getString("currentState"));
//			dronacharyaGOIOnlineFormBean.setCurrentPinCode(resultSet.getString("currentPinCode"));
//			dronacharyaGOIOnlineFormBean.setPermnentAddress(resultSet.getString("permnentAddress"));
//			dronacharyaGOIOnlineFormBean.setPermnentCity(resultSet.getString("permnentCity"));
//			dronacharyaGOIOnlineFormBean.setPermnentState(resultSet.getString("permnentState"));
//			dronacharyaGOIOnlineFormBean.setPermnentPinCode(resultSet.getString("permnentPinCode"));
//			dronacharyaGOIOnlineFormBean.setStudEmailId(resultSet.getString("studEmailId"));
//			dronacharyaGOIOnlineFormBean.setStudPhoneNumber(resultSet.getString("studPhoneNumber"));
//			dronacharyaGOIOnlineFormBean.setParentPhoneNo(resultSet.getString("parentPhoneNo"));
//			dronacharyaGOIOnlineFormBean.setParentMobileNo(resultSet.getString("parentMobileNo"));
//			dronacharyaGOIOnlineFormBean.setParentEmailId(resultSet.getString("parentEmailId"));
//			dronacharyaGOIOnlineFormBean.setAmountToBePaid(resultSet.getString("amountToBePaid"));
//			dronacharyaGOIOnlineFormBean.setRollNo(resultSet.getString("rollNo"));
//			dronacharyaGOIOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));
//			dronacharyaGOIOnlineFormBean.setApplicationNo(resultSet.getString("applicationNo"));


	}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getDronacharyaStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("<END> getDronacharyaGOIStudentDetails(" + dronacharyaGOIOnlineFormBean.toString() + ") - END");
		return dronacharyaGOIOnlineFormBean;
	}

	@Override
	public String insertAlmAcademystudentDetails(
			AlmAcademyOnlineFormBean almAcademyOnlineFormBean, String billerId) {

		long startTime = System.currentTimeMillis();
		logger.info("insertAlmAcademystudentDetails(" + almAcademyOnlineFormBean + ") - START");
		logger.info("insertAlmAcademystudentDetails---billerId : "+billerId);

		String responseString = null;
		/*try{
			callableStatement = con.prepareCall("{call PROC_Insert_ALMAcademy_studentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,almAcademyOnlineFormBean.getAlmFirstName());
			callableStatement.setString(2,almAcademyOnlineFormBean.getAlmLastName());
			callableStatement.setString(3,almAcademyOnlineFormBean.getSchoolName());
			callableStatement.setString(4,almAcademyOnlineFormBean.getDateOfBirth());
			callableStatement.setString(5,almAcademyOnlineFormBean.getEmailId());
			callableStatement.setString(6,almAcademyOnlineFormBean.getMobileNo());
			callableStatement.setString(7,almAcademyOnlineFormBean.getAlmSubject());
			callableStatement.setString(8,almAcademyOnlineFormBean.getAlmClass());
			callableStatement.setString(9,almAcademyOnlineFormBean.getAmountToBePaid());


			callableStatement.setString(10,almAcademyOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(11,billerId);

			callableStatement.registerOutParameter(12, Types.VARCHAR);
			callableStatement.registerOutParameter(13, Types.VARCHAR);
			callableStatement.registerOutParameter(14, Types.VARCHAR);


			callableStatement.execute(); 

			responseString = callableStatement.getString(14); 
			almAcademyOnlineFormBean.setStudentRegistrationId(callableStatement.getString(13));
			almAcademyOnlineFormBean.setApplicationNo(callableStatement.getString(12));
			logger.info("responseString : - " + responseString);
*/
try{
			
			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");
			
			
			callableStatement.setString(1,almAcademyOnlineFormBean.getAmountToBePaid());
			callableStatement.setString(2,almAcademyOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,almAcademyOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);

			
			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			almAcademyOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			almAcademyOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);


		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertAlmAcademystudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("almAcademyOnlineFormBean(" + almAcademyOnlineFormBean + ") - END");
		return responseString;
	}

	@Override
	public AlmAcademyOnlineFormBean getAlmAcademystudentDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getAlmAcademystudentDetails(" + applicationNo + ") - START");  
		AlmAcademyOnlineFormBean almAcademyOnlineFormBean = new AlmAcademyOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_AlmAcademy_studentDetails(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {
				almAcademyOnlineFormBean.setAlmFirstName(resultSet.getString("fName"));
				almAcademyOnlineFormBean.setAlmLastName(resultSet.getString("lName"));
				almAcademyOnlineFormBean.setSchoolName(resultSet.getString("schoolName"));
				almAcademyOnlineFormBean.setDateOfBirth(resultSet.getString("dateOfBirth"));
				almAcademyOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				almAcademyOnlineFormBean.setAlmClass(resultSet.getString("almClass"));
				almAcademyOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));

				almAcademyOnlineFormBean.setAlmSubject(resultSet.getString("almSubject"));
				almAcademyOnlineFormBean.setAmountToBePaid(resultSet.getString("amountToBePaid"));


				almAcademyOnlineFormBean.setApplicationNo(applicationNo);
			}



		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getdpsBudgamDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getdpsBudgamDetails(" + almAcademyOnlineFormBean + ") - END");
		return almAcademyOnlineFormBean;
	}

	@Override
	public List getStudentTranDetailsList_NLUEreceipt(String referenceId, String branchId) {

		long startTime = System.currentTimeMillis();
		logger.info("getStudentTranDetailsList_NLUEreceipt(" + referenceId + ") - START");
		List nulCustList = null;

		try {
			logger.info("getStudentTranDetailsList_NLUEreceipt - " +referenceId);
			callableStatement = con.prepareCall("{call SP_FJT_getPrintEReceiptDetailsLis_NLU(?,?)}");
			callableStatement.setString(1,referenceId);
			callableStatement.setString(2, branchId);
			resultSet = callableStatement.executeQuery();
			nulCustList = new ArrayList();
			NLUOnlineFormBean nulOnlineFormBean;

			while (resultSet.next()) {
				nulOnlineFormBean = new NLUOnlineFormBean();


				nulOnlineFormBean.setApplicationNo(resultSet.getString("applicationNo"));
				nulOnlineFormBean.setStdName(resultSet.getString("stdName"));
				nulOnlineFormBean.setRollno(resultSet.getString("rollno"));
				nulCustList.add(nulOnlineFormBean);

			}
			logger.info("getStudentTranDetailsList_NLUEreceipt - 000"+nulCustList);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getStudentTranDetailsList_NLUEreceipt(" +referenceId + ") - END");
		return nulCustList;


	}

	@Override
	public NLUOnlineFormBean getNLUStudentDetails_EreceiptData(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getNLUStudentDetails_EreceiptData(" + applicationNo + ") - START");  
		NLUOnlineFormBean nluOnlineFormBean = new NLUOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_NLU_STUDENTDETAILS_EReciept(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		            	
				nluOnlineFormBean.setStdName(resultSet.getString("stdName"));
				nluOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				nluOnlineFormBean.setStdDOB(resultSet.getString("stdDOB"));
				nluOnlineFormBean.setRollno(resultSet.getString("rollno"));
				nluOnlineFormBean.setEmail(resultSet.getString("email"));
				nluOnlineFormBean.setMobile(resultSet.getString("mobile"));
				nluOnlineFormBean.setSelectCourse(resultSet.getString("selectCourse"));
				nluOnlineFormBean.setSelectNRI(resultSet.getString("selectNRI"));	            	
				nluOnlineFormBean.setSelectSemester1(resultSet.getString("selectSemester1"));
				nluOnlineFormBean.setRemarks(resultSet.getString("remarks"));	            	
				nluOnlineFormBean.setTotAmount(resultSet.getString("totAmount"));	            	
				nluOnlineFormBean.setApplicationNo(applicationNo);

				String strDate = resultSet.getString("transactionDate");
				SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
				Date convertedDate= new Date();
				convertedDate = dateFormat.parse(strDate);
				SimpleDateFormat sdfnewformat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss.SSS");
				String finalDateString = sdfnewformat.format(convertedDate);

				nluOnlineFormBean.setTransactionDate(finalDateString);

				nluOnlineFormBean.setTransactionId(resultSet.getString("Pmt_Id"));
				nluOnlineFormBean.setTransactionStatus(resultSet.getString("Transaction_Status"));

				break;

			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getNLUStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getNLUStudentDetails(" + nluOnlineFormBean + ") - END");
		return nluOnlineFormBean;
	}

	/* Added for UGI Ereceipt download START */
	@Override
	public List getStudentTranDetailsList_UGIEreceipt(String referenceId, String branchId) {

		long startTime = System.currentTimeMillis();
		logger.info("getStudentTranDetailsList_UGIEreceipt(" + referenceId + ") - START");
		List ugiCustList = null;

		try {
			logger.info("getStudentTranDetailsList_UGIEreceipt - " +referenceId);
			callableStatement = con.prepareCall("{call SP_FJT_getPrintEReceiptDetailsLis_UGI(?,?)}");
			callableStatement.setString(1,referenceId);
			callableStatement.setString(2, branchId);
			resultSet = callableStatement.executeQuery();
			ugiCustList = new ArrayList();
			UGIOnlineFormBean ugiOnlineFormBean;

			while (resultSet.next()) {
				ugiOnlineFormBean = new UGIOnlineFormBean();


				ugiOnlineFormBean.setApplicationNo(resultSet.getString("applicationNo"));
				ugiOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				ugiOnlineFormBean.setStudentId(resultSet.getString("studentId"));
				ugiCustList.add(ugiOnlineFormBean);

			}
			logger.info("getStudentTranDetailsList_UGIEreceipt - 000"+ugiCustList);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getStudentTranDetailsList_NLUEreceipt(" +referenceId + ") - END");
		return ugiCustList;


	}

	@Override
	public UGIOnlineFormBean getUGIStudentDetails_EreceiptData(String applicationNo)
	{
		long startTime = System.currentTimeMillis();
		logger.info("getUGIStudentDetails_EreceiptData(" + applicationNo + ") - START");  
		UGIOnlineFormBean ugiOnlineFormBean = new UGIOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_UGI_STUDENTDETAILS_EReciept(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {			            		         

				ugiOnlineFormBean.setStudentId(resultSet.getString("studentId"));
				ugiOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				ugiOnlineFormBean.setCourse(resultSet.getString("course"));
				ugiOnlineFormBean.setNumofYears(resultSet.getString("numofYears"));
				ugiOnlineFormBean.setYears(resultSet.getString("years"));			            				            				            			
				ugiOnlineFormBean.setChkTutionFee(resultSet.getString("chkTutionFee"));
				ugiOnlineFormBean.setTutionFee(resultSet.getString("tutionFee"));
				ugiOnlineFormBean.setChkBusFee(resultSet.getString("chkBusFee"));            									            	
				ugiOnlineFormBean.setBusFee(resultSet.getString("busFee"));
				ugiOnlineFormBean.setChkHostelFee(resultSet.getString("chkHostelFee"));
				ugiOnlineFormBean.setHostelFee(resultSet.getString("hostelFee"));			            	
				ugiOnlineFormBean.setChkCautionMoney(resultSet.getString("chkCautionMoney"));
				ugiOnlineFormBean.setCautionMoney(resultSet.getString("cautionMoney"));
				ugiOnlineFormBean.setChkOthersFees(resultSet.getString("chkOthersFees"));
				ugiOnlineFormBean.setOthersFees(resultSet.getString("othersFees"));			            	
				ugiOnlineFormBean.setPlsSpecify(resultSet.getString("plsSpecify"));
				ugiOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));
				ugiOnlineFormBean.setTotalAmountinWords(resultSet.getString("totalAmountinWords"));
				ugiOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				ugiOnlineFormBean.setStdMobileNo(resultSet.getString("mobileNo"));
				ugiOnlineFormBean.setSelectBranch(resultSet.getString("selectBranch"));
				ugiOnlineFormBean.setApplicationNo(applicationNo);

				String strDate = resultSet.getString("transactionDate");
				SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
				Date convertedDate= new Date();
				convertedDate = dateFormat.parse(strDate);
				SimpleDateFormat sdfnewformat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss.SSS");
				String finalDateString = sdfnewformat.format(convertedDate);

				ugiOnlineFormBean.setTransactionDate(finalDateString);

				ugiOnlineFormBean.setTransactionId(resultSet.getString("Pmt_Id"));
				ugiOnlineFormBean.setTransactionStatus(resultSet.getString("Transaction_Status"));

				break;

			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getUGIStudentDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getUGIStudentDetails(" + ugiOnlineFormBean + ") - END");
		return ugiOnlineFormBean;
	}

	@Override
	public String insertHisarSchoolDetails(
			HisarSchoolOnlineFormBean hisarSchoolOnlineFormBean, String billerId) {

		long startTime = System.currentTimeMillis();
		logger.info("insertHisarSchoolDetails(" + hisarSchoolOnlineFormBean.toString() + ") - START");
		logger.info("insertHisarSchoolDetails---billerId : "+billerId);

		String responseString = null;
		try{
			callableStatement = con.prepareCall("{call PROC_Insert_IDDAVSchool_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,hisarSchoolOnlineFormBean.getIddavStudName());
			callableStatement.setString(2,hisarSchoolOnlineFormBean.getIddavAdmsnNo());
			callableStatement.setString(3,hisarSchoolOnlineFormBean.getFatherName());
			callableStatement.setString(4,hisarSchoolOnlineFormBean.getMotherName());
			callableStatement.setString(5,hisarSchoolOnlineFormBean.getPhoneNo());
			callableStatement.setString(6,hisarSchoolOnlineFormBean.getIddavClass());
			callableStatement.setString(7,hisarSchoolOnlineFormBean.getIddavSection());
			callableStatement.setString(8,hisarSchoolOnlineFormBean.getTutionFee());

			callableStatement.setString(9,hisarSchoolOnlineFormBean.getBusFee());
			callableStatement.setString(10,hisarSchoolOnlineFormBean.getAnnualFee());
			callableStatement.setString(11,hisarSchoolOnlineFormBean.getInsuranceFee());
			callableStatement.setString(12,hisarSchoolOnlineFormBean.getOtherFee());
			callableStatement.setString(13,hisarSchoolOnlineFormBean.getTotalFee());



			callableStatement.setString(14,hisarSchoolOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(15,billerId);

			callableStatement.registerOutParameter(16, Types.VARCHAR);
			callableStatement.registerOutParameter(17, Types.VARCHAR);
			callableStatement.registerOutParameter(18, Types.VARCHAR);


			callableStatement.execute(); 

			responseString = callableStatement.getString(18); 
			hisarSchoolOnlineFormBean.setStudentRegistrationId(callableStatement.getString(17));
			hisarSchoolOnlineFormBean.setApplicationNo(callableStatement.getString(16));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertHisarSchoolDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("insertHisarSchoolDetails(" + hisarSchoolOnlineFormBean + ") - END");
		return responseString;
	}

	@Override
	public HisarSchoolOnlineFormBean getHisarSchoolDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getHisarSchoolDetails(" + applicationNo + ") - START");  
		HisarSchoolOnlineFormBean hisarSchoolOnlineFormBean = new HisarSchoolOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_IDDAVSchool_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {
				hisarSchoolOnlineFormBean.setIddavStudName(resultSet.getString("iddavStudName"));
				hisarSchoolOnlineFormBean.setIddavAdmsnNo(resultSet.getString("iddavAdmsnNo"));
				hisarSchoolOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				hisarSchoolOnlineFormBean.setMotherName(resultSet.getString("motherName"));
				hisarSchoolOnlineFormBean.setPhoneNo(resultSet.getString("phoneNo"));
				hisarSchoolOnlineFormBean.setIddavClass(resultSet.getString("iddavClass"));
				hisarSchoolOnlineFormBean.setIddavSection(resultSet.getString("iddavSection"));

				hisarSchoolOnlineFormBean.setTutionFee(resultSet.getString("tutionFee"));
				hisarSchoolOnlineFormBean.setBusFee(resultSet.getString("busFee"));
				hisarSchoolOnlineFormBean.setAnnualFee(resultSet.getString("annualFee"));
				hisarSchoolOnlineFormBean.setInsuranceFee(resultSet.getString("insuranceFee"));
				hisarSchoolOnlineFormBean.setOtherFee(resultSet.getString("otherFee"));
				hisarSchoolOnlineFormBean.setTotalFee(resultSet.getString("totalFee"));


				hisarSchoolOnlineFormBean.setApplicationNo(applicationNo);
			}



		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getHisarSchoolDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getHisarSchoolDetails(" + hisarSchoolOnlineFormBean + ") - END");
		return hisarSchoolOnlineFormBean;
	}

	@Override
	public String insertAPSNoidaDetails(
			NoidaApsOnlineFormBean noidaApsOnlineFormBean, String billerId) {

		long startTime = System.currentTimeMillis();
		logger.info("insertAPSNoidaDetails(" + noidaApsOnlineFormBean + ") - START");
		logger.info("insertAPSNoidaDetails---billerId : "+billerId);

		String responseString = null;
		/*try{
			callableStatement = con.prepareCall("{call PROC_Insert_APSNoida_studentDetails(?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,noidaApsOnlineFormBean.getStudentID());
			callableStatement.setString(2,noidaApsOnlineFormBean.getFirstName());
			callableStatement.setString(3,noidaApsOnlineFormBean.getLastName());
			callableStatement.setString(4,noidaApsOnlineFormBean.getEmailId());
			callableStatement.setString(5,noidaApsOnlineFormBean.getContactNo());
			callableStatement.setString(6,noidaApsOnlineFormBean.getClassDiv());
			callableStatement.setString(7,noidaApsOnlineFormBean.getRemarks());
			callableStatement.setString(8,noidaApsOnlineFormBean.getTotalAmount());


			callableStatement.setString(9,noidaApsOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(10,billerId);

			callableStatement.registerOutParameter(11, Types.VARCHAR);
			callableStatement.registerOutParameter(12, Types.VARCHAR);
			callableStatement.registerOutParameter(13, Types.VARCHAR);


			callableStatement.execute(); 

			responseString = callableStatement.getString(13); 
			noidaApsOnlineFormBean.setStudentRegistrationId(callableStatement.getString(12));
			noidaApsOnlineFormBean.setApplicationNo(callableStatement.getString(11));
			logger.info("responseString : - " + responseString);
*/
try{
			
			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");
			
			
			callableStatement.setString(1,noidaApsOnlineFormBean.getTotalAmount());
			callableStatement.setString(2,noidaApsOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,noidaApsOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);

			
			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			noidaApsOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			noidaApsOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertAPSNoidaDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("noidaApsOnlineFormBean(" + noidaApsOnlineFormBean + ") - END");
		return responseString;
	}

	@Override
	public NoidaApsOnlineFormBean getAPSNoidaDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getAPSNoidaDetails(" + applicationNo + ") - START");  
		NoidaApsOnlineFormBean noidaApsOnlineFormBean = new NoidaApsOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_APSNoida_studentDetails(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {
				noidaApsOnlineFormBean.setStudentID(resultSet.getString("studentID"));
				noidaApsOnlineFormBean.setFirstName(resultSet.getString("firstName"));
				noidaApsOnlineFormBean.setLastName(resultSet.getString("lastName"));
				noidaApsOnlineFormBean.setEmailId(resultSet.getString("emailId"));
				noidaApsOnlineFormBean.setClassDiv(resultSet.getString("classDiv"));
				noidaApsOnlineFormBean.setContactNo(resultSet.getString("contactNo"));

				noidaApsOnlineFormBean.setRemarks(resultSet.getString("remarks"));
				noidaApsOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));


				noidaApsOnlineFormBean.setApplicationNo(applicationNo);
			}



		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getAPSNoidaDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getAPSNoidaDetails(" + noidaApsOnlineFormBean + ") - END");
		return noidaApsOnlineFormBean;
	}

	@Override
	public String insertDAVSchoolDetails(
			DAVSchoolOnlineFormBean davschoolOnlineFormBean, String billerId) {

		long startTime = System.currentTimeMillis();
		logger.info("insertDAVSchoolDetails(" + davschoolOnlineFormBean + ") - START");
		logger.info("insertDAVSchoolDetails---billerId : "+billerId);

		String responseString = null;
		/*try{
			callableStatement = con.prepareCall("{call PROC_DAVSchool_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,davschoolOnlineFormBean.getStudentId());
			callableStatement.setString(2,davschoolOnlineFormBean.getFirstName());
			callableStatement.setString(3,davschoolOnlineFormBean.getLastName());
			callableStatement.setString(4,davschoolOnlineFormBean.getFatherName());
			callableStatement.setString(5,davschoolOnlineFormBean.getMailId());
			callableStatement.setString(6,davschoolOnlineFormBean.getContactNo());
			callableStatement.setString(7,davschoolOnlineFormBean.getClassName());
			callableStatement.setString(8,davschoolOnlineFormBean.getRemarks());
			callableStatement.setString(9,davschoolOnlineFormBean.getTotalAmount());


			callableStatement.setString(10,davschoolOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(11,billerId);

			callableStatement.registerOutParameter(12, Types.VARCHAR);
			callableStatement.registerOutParameter(13, Types.VARCHAR);
			callableStatement.registerOutParameter(14, Types.VARCHAR);


			callableStatement.execute(); 

			responseString = callableStatement.getString(14); 
			davschoolOnlineFormBean.setStudentRegistrationId(callableStatement.getString(13));
			davschoolOnlineFormBean.setApplicationNo(callableStatement.getString(12));
			logger.info("responseString : - " + responseString);
*/
try{
			
			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");
			
			
			callableStatement.setString(1,davschoolOnlineFormBean.getTotalAmount());
			callableStatement.setString(2,davschoolOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,davschoolOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);

			
			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			davschoolOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			davschoolOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertDAVSchoolDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("davschoolOnlineFormBean(" + davschoolOnlineFormBean + ") - END");
		return responseString;
	}

	@Override
	public DAVSchoolOnlineFormBean getDAVSchoolDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getDAVSchoolDetails(" + applicationNo + ") - START");  
		DAVSchoolOnlineFormBean davschoolOnlineFormBean = new DAVSchoolOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_DAVSCHOOL_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {
				davschoolOnlineFormBean.setStudentId(resultSet.getString("studentId"));
				davschoolOnlineFormBean.setFirstName(resultSet.getString("firstName"));
				davschoolOnlineFormBean.setLastName(resultSet.getString("lastName"));
				davschoolOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				davschoolOnlineFormBean.setMailId(resultSet.getString("emailId"));
				davschoolOnlineFormBean.setContactNo(resultSet.getString("contactNo"));
				davschoolOnlineFormBean.setClassName(resultSet.getString("class"));
				davschoolOnlineFormBean.setRemarks(resultSet.getString("remarks"));
				davschoolOnlineFormBean.setTotalAmount(resultSet.getString("totalAmount"));


				davschoolOnlineFormBean.setApplicationNo(applicationNo);
			}



		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getDAVSchoolDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getDAVSchoolDetails(" + davschoolOnlineFormBean + ") - END");
		return davschoolOnlineFormBean;
	}

	@Override
	public String insertSatyavatiSchoolDetails(
			SatyavatiSchoolOnlineFormBean satyavatischoolOnlineFormBean, String billerId) {

		long startTime = System.currentTimeMillis();
		logger.info("insertSatyavatiSchoolDetails(" + satyavatischoolOnlineFormBean + ") - START");
		logger.info("insertSatyavatiSchoolDetails---billerId : "+billerId);

		String responseString = null;
		try{
			callableStatement = con.prepareCall("{call PROC_SatyavatiSchool_Details(?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,satyavatischoolOnlineFormBean.getStudentName());
			callableStatement.setString(2,satyavatischoolOnlineFormBean.getStudentenrollmentNo());
			callableStatement.setString(3,satyavatischoolOnlineFormBean.getClassName());
			callableStatement.setString(4,satyavatischoolOnlineFormBean.getRemarks());
			callableStatement.setString(5,satyavatischoolOnlineFormBean.getTotalAmount());


			callableStatement.setString(6,satyavatischoolOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(7,billerId);

			callableStatement.registerOutParameter(8, Types.VARCHAR);
			callableStatement.registerOutParameter(9, Types.VARCHAR);
			callableStatement.registerOutParameter(10, Types.VARCHAR);


			callableStatement.execute(); 

			responseString = callableStatement.getString(10); 
			satyavatischoolOnlineFormBean.setStudentRegistrationId(callableStatement.getString(9));
			satyavatischoolOnlineFormBean.setApplicationNo(callableStatement.getString(8));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSatyavatiSchoolDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("satyavatischoolOnlineFormBean(" + satyavatischoolOnlineFormBean + ") - END");
		return responseString;
	}

	@Override
	public SatyavatiSchoolOnlineFormBean getSatyavatiSchoolDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getSatyavatiSchoolDetails(" + applicationNo + ") - START");  
		SatyavatiSchoolOnlineFormBean satyavatischoolOnlineFormBean = new SatyavatiSchoolOnlineFormBean();

		try{
			callableStatement = con.prepareCall("{call PROC_GET_SATYAVATISCHOOL_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery(); 
			while (resultSet.next()) {
				satyavatischoolOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				satyavatischoolOnlineFormBean.setStudentenrollmentNo(resultSet.getString("studentEnrollmentNo"));

				satyavatischoolOnlineFormBean.setClassName(resultSet.getString("class"));
				satyavatischoolOnlineFormBean.setRemarks(resultSet.getString("remarks"));
				satyavatischoolOnlineFormBean.setTotalAmount(resultSet.getString("amount"));


				satyavatischoolOnlineFormBean.setApplicationNo(applicationNo);
			}



		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getSatyavatiSchoolDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getSatyavatiSchoolDetails(" + satyavatischoolOnlineFormBean + ") - END");
		return satyavatischoolOnlineFormBean;
	}

	@Override
	public String insertSriAurobindoSchoolDetails(
			SriAurobindoSchoolOnlineFormBean sriAurobindoSchoolOnlineFormBean, String billerId) {

		long startTime = System.currentTimeMillis();
		logger.info("insertSriAurobindoSchoolDetails(" + sriAurobindoSchoolOnlineFormBean + ") - START");
		logger.info("insertSriAurobindoSchoolDetails---billerId : "+billerId);

		String responseString = null;
		/*try{
			callableStatement = con.prepareCall("{call PROC_SriAurobindoSchool_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1,sriAurobindoSchoolOnlineFormBean.getCardHolderName());
			callableStatement.setString(2,sriAurobindoSchoolOnlineFormBean.getAddress());
			callableStatement.setString(3,sriAurobindoSchoolOnlineFormBean.getCity());
			callableStatement.setString(4,sriAurobindoSchoolOnlineFormBean.getPostalCode());
			callableStatement.setString(5,sriAurobindoSchoolOnlineFormBean.getEmail());

			callableStatement.setString(6,sriAurobindoSchoolOnlineFormBean.getState());
			callableStatement.setString(7,sriAurobindoSchoolOnlineFormBean.getCountry());
			callableStatement.setString(8,sriAurobindoSchoolOnlineFormBean.getTelePhoneNo());
			callableStatement.setString(9,sriAurobindoSchoolOnlineFormBean.getTotalAmount());
			callableStatement.setString(10,sriAurobindoSchoolOnlineFormBean.getPanNo());


			callableStatement.setString(11,sriAurobindoSchoolOnlineFormBean.getRemarks());
			callableStatement.setString(12,sriAurobindoSchoolOnlineFormBean.getCardNationality());
			callableStatement.setString(13,sriAurobindoSchoolOnlineFormBean.getPassportNo());
			callableStatement.setString(14,sriAurobindoSchoolOnlineFormBean.getCardIssuingCountry());


			callableStatement.setString(15,sriAurobindoSchoolOnlineFormBean.getRegisteredUserId());				
			callableStatement.setString(16,billerId);

			callableStatement.registerOutParameter(17, Types.VARCHAR);
			callableStatement.registerOutParameter(18, Types.VARCHAR);
			callableStatement.registerOutParameter(19, Types.VARCHAR);


			callableStatement.execute(); 

			responseString = callableStatement.getString(19); 
			sriAurobindoSchoolOnlineFormBean.setStudentRegistrationId(callableStatement.getString(18));
			sriAurobindoSchoolOnlineFormBean.setApplicationNo(callableStatement.getString(17));
			logger.info("responseString : - " + responseString);
*/
try{
			
			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");
			
			
			callableStatement.setString(1,sriAurobindoSchoolOnlineFormBean.getTotalAmount());
			callableStatement.setString(2,sriAurobindoSchoolOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,sriAurobindoSchoolOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);

			
			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			sriAurobindoSchoolOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			sriAurobindoSchoolOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);



		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertSriAurobindoSchoolDetails"+e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("sriAurobindoSchoolOnlineFormBean(" + sriAurobindoSchoolOnlineFormBean + ") - END");
		return responseString;
	}

	@Override
	public SriAurobindoSchoolOnlineFormBean getSriAurobindoDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getSriAurobindoSchoolDetails(" + applicationNo + ") - START");
		SriAurobindoSchoolOnlineFormBean sriAurobindoSchoolOnlineFormBean = new SriAurobindoSchoolOnlineFormBean();

		try {
			callableStatement = con.prepareCall("{call PROC_GET_SRIAUROBINDOSCHOOL_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery();
			while (resultSet.next()) {
				sriAurobindoSchoolOnlineFormBean.setCardHolderName(resultSet.getString("cardHolderName"));
				sriAurobindoSchoolOnlineFormBean.setAddress(resultSet.getString("address"));

				sriAurobindoSchoolOnlineFormBean.setCity(resultSet.getString("city"));
				sriAurobindoSchoolOnlineFormBean.setPostalCode(resultSet.getString("postalCode"));

				sriAurobindoSchoolOnlineFormBean.setEmail(resultSet.getString("email"));
				sriAurobindoSchoolOnlineFormBean.setState(resultSet.getString("state"));

				sriAurobindoSchoolOnlineFormBean.setCountry(resultSet.getString("country"));
				sriAurobindoSchoolOnlineFormBean.setTelePhoneNo(resultSet.getString("telePhoneNo"));
				sriAurobindoSchoolOnlineFormBean.setTotalAmount(resultSet.getString("amount"));
				sriAurobindoSchoolOnlineFormBean.setPanNo(resultSet.getString("panNo"));

				sriAurobindoSchoolOnlineFormBean.setRemarks(resultSet.getString("remarks"));
				sriAurobindoSchoolOnlineFormBean.setCardNationality(resultSet.getString("cardNationality"));
				sriAurobindoSchoolOnlineFormBean.setPassportNo(resultSet.getString("passportNo"));
				sriAurobindoSchoolOnlineFormBean.setCardIssuingCountry(resultSet.getString("cardIssuingCountry"));

				sriAurobindoSchoolOnlineFormBean.setApplicationNo(applicationNo);
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getSriAurobindoSchoolDetails" + e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getSriAurobindoSchoolDetails(" + sriAurobindoSchoolOnlineFormBean + ") - END");
		return sriAurobindoSchoolOnlineFormBean;
	}

	@Override
	public String insertGoldCroftDetails(GoldCroftOnlineFormBean goldcroftOnlineFormBean, String billerId) {

		long startTime = System.currentTimeMillis();
		logger.info("insertGoldCroftDetails(" + goldcroftOnlineFormBean + ") - START");
		logger.info("insertGoldCroftDetails---billerId : " + billerId);

		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_GoldCroft_Details(?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1, goldcroftOnlineFormBean.getFlatNo());
			callableStatement.setString(2, goldcroftOnlineFormBean.getName());
			callableStatement.setString(3, goldcroftOnlineFormBean.getMembershipNo());
			callableStatement.setString(4, goldcroftOnlineFormBean.getEmail());
			callableStatement.setString(5, goldcroftOnlineFormBean.getTelePhoneNo());

			callableStatement.setString(6, goldcroftOnlineFormBean.getPaymentType());
			callableStatement.setString(7, goldcroftOnlineFormBean.getOwner());

			callableStatement.setString(8, goldcroftOnlineFormBean.getTotalAmount());

			callableStatement.setString(9, goldcroftOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(10, billerId);

			callableStatement.registerOutParameter(11, Types.VARCHAR);
			callableStatement.registerOutParameter(12, Types.VARCHAR);
			callableStatement.registerOutParameter(13, Types.VARCHAR);

			callableStatement.execute();

			responseString = callableStatement.getString(13);
			goldcroftOnlineFormBean.setStudentRegistrationId(callableStatement.getString(12));
			goldcroftOnlineFormBean.setApplicationNo(callableStatement.getString(11));
			logger.info("responseString : - " + responseString);

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertGoldCroftDetails" + e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("goldcroftOnlineFormBean(" + goldcroftOnlineFormBean + ") - END");
		return responseString;
	}

	@Override
	public GoldCroftOnlineFormBean getGoldCroftDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getGoldCroftDetails(" + applicationNo + ") - START");
		GoldCroftOnlineFormBean goldcroftOnlineFormBean = new GoldCroftOnlineFormBean();

		try {
			callableStatement = con.prepareCall("{call PROC_GET_GOLDCROFT_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery();
			while (resultSet.next()) {
				goldcroftOnlineFormBean.setFlatNo(resultSet.getString("flatNo"));
				goldcroftOnlineFormBean.setName(resultSet.getString("name"));

				goldcroftOnlineFormBean.setMembershipNo(resultSet.getString("membershipNo"));

				goldcroftOnlineFormBean.setEmail(resultSet.getString("email"));

				goldcroftOnlineFormBean.setTelePhoneNo(resultSet.getString("telePhoneNo"));
				goldcroftOnlineFormBean.setTotalAmount(resultSet.getString("amount"));
				goldcroftOnlineFormBean.setPaymentType(resultSet.getString("paymentType"));

				goldcroftOnlineFormBean.setOwner(resultSet.getString("owner"));

				goldcroftOnlineFormBean.setApplicationNo(applicationNo);
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getGoldCroftDetails" + e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getGoldCroftDetails(" + goldcroftOnlineFormBean + ") - END");
		return goldcroftOnlineFormBean;
	}

	@Override
	public String insertDpsBudgamregistrationDetails(
			DpsBudgamRegistrationOnlineFormBean dpsBudgamRegistrationOnlineFormBean, String billerId) {

		long startTime = System.currentTimeMillis();
		logger.info("insertDpsBudgamregistrationDetails(" + dpsBudgamRegistrationOnlineFormBean + ") - START");
		logger.info("insertDpsBudgamregistrationDetails---billerId : " + billerId);

		String responseString = null;
		/*
		 * try { callableStatement = con.
		 * prepareCall("{call PROC_DpsBudgamregistration_Details(?,?,?,?,?,?,?,?,?)}");
		 * callableStatement.setString(1,
		 * dpsBudgamRegistrationOnlineFormBean.getStudentName());
		 * callableStatement.setString(2,
		 * dpsBudgamRegistrationOnlineFormBean.getMobileNo());
		 * callableStatement.setString(3,
		 * dpsBudgamRegistrationOnlineFormBean.getClassText());
		 * callableStatement.setString(4,
		 * dpsBudgamRegistrationOnlineFormBean.getAmount());
		 * 
		 * callableStatement.setString(5,
		 * dpsBudgamRegistrationOnlineFormBean.getRegisteredUserId());
		 * callableStatement.setString(6, billerId);
		 * 
		 * callableStatement.registerOutParameter(7, Types.VARCHAR);
		 * callableStatement.registerOutParameter(8, Types.VARCHAR);
		 * callableStatement.registerOutParameter(9, Types.VARCHAR);
		 * 
		 * callableStatement.execute();
		 * 
		 * responseString = callableStatement.getString(9);
		 * dpsBudgamRegistrationOnlineFormBean.setStudentRegistrationId(
		 * callableStatement.getString(8));
		 * dpsBudgamRegistrationOnlineFormBean.setApplicationNo(callableStatement.
		 * getString(7)); logger.info("responseString : - " + responseString);
		 */
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,dpsBudgamRegistrationOnlineFormBean.getAmount());
			callableStatement.setString(2,dpsBudgamRegistrationOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,dpsBudgamRegistrationOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			dpsBudgamRegistrationOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			dpsBudgamRegistrationOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertDpsBudgamregistrationDetails" + e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("dpsBudgamRegistrationOnlineFormBean(" + dpsBudgamRegistrationOnlineFormBean + ") - END");
		return responseString;
	}

	@Override
	public DpsBudgamRegistrationOnlineFormBean getDpsBudgamRegistrationDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getDpsBudgamRegistrationDetails(" + applicationNo + ") - START");
		DpsBudgamRegistrationOnlineFormBean dpsBudgamRegistrationOnlineFormBean = new DpsBudgamRegistrationOnlineFormBean();

		try {
			callableStatement = con.prepareCall("{call PROC_GET_DPSBUDGAMREGISTRATION_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery();
			while (resultSet.next()) {
				dpsBudgamRegistrationOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				dpsBudgamRegistrationOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));
				dpsBudgamRegistrationOnlineFormBean.setClassText(resultSet.getString("class"));
				dpsBudgamRegistrationOnlineFormBean.setAmount(resultSet.getString("amount"));
				dpsBudgamRegistrationOnlineFormBean.setApplicationNo(applicationNo);
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getDpsBudgamRegistrationDetails" + e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getDpsBudgamRegistrationDetails(" + dpsBudgamRegistrationOnlineFormBean + ") - END");
		return dpsBudgamRegistrationOnlineFormBean;
	}

	@Override
	public String insertInderPrasthaDetails(InderPrasthaOnlineFormBean inderPrasthaOnlineFormBean, String billerId) {

		long startTime = System.currentTimeMillis();
		logger.info("insertInderPrasthaDetails(" + inderPrasthaOnlineFormBean + ") - START");
		logger.info("insertInderPrasthaDetails---billerId : " + billerId);

		String responseString = null;
		/*
		 * try { callableStatement =
		 * con.prepareCall("{call PROC_InderPrastha_Details(?,?,?,?,?,?,?,?,?,?,?,?)}");
		 * callableStatement.setString(1,
		 * inderPrasthaOnlineFormBean.getUniversityRollNo());
		 * callableStatement.setString(2, inderPrasthaOnlineFormBean.getStudentName());
		 * callableStatement.setString(3, inderPrasthaOnlineFormBean.getFatherName());
		 * callableStatement.setString(4, inderPrasthaOnlineFormBean.getBranch());
		 * 
		 * callableStatement.setString(5, inderPrasthaOnlineFormBean.getYear());
		 * callableStatement.setString(6, inderPrasthaOnlineFormBean.getSeater());
		 * 
		 * callableStatement.setString(7, inderPrasthaOnlineFormBean.getAmount());
		 * 
		 * callableStatement.setString(8,
		 * inderPrasthaOnlineFormBean.getRegisteredUserId());
		 * callableStatement.setString(9, billerId);
		 * 
		 * callableStatement.registerOutParameter(10, Types.VARCHAR);
		 * callableStatement.registerOutParameter(11, Types.VARCHAR);
		 * callableStatement.registerOutParameter(12, Types.VARCHAR);
		 * 
		 * callableStatement.execute();
		 * 
		 * responseString = callableStatement.getString(12);
		 * inderPrasthaOnlineFormBean.setStudentRegistrationId(callableStatement.
		 * getString(11));
		 * inderPrasthaOnlineFormBean.setApplicationNo(callableStatement.getString(10));
		 * logger.info("responseString : - " + responseString);
		 */
		
		try{

			callableStatement = con.prepareCall("{call PROC_Insert_SmartHubOnlineForm_students_DETAILS(?,?,?,?,?,?,?)}");


			callableStatement.setString(1,inderPrasthaOnlineFormBean.getAmount());
			callableStatement.setString(2,inderPrasthaOnlineFormBean.getApplicationNo());
			callableStatement.setString(3,inderPrasthaOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(4,billerId);


			callableStatement.registerOutParameter(5, Types.VARCHAR);
			callableStatement.registerOutParameter(6, Types.VARCHAR);
			callableStatement.registerOutParameter(7, Types.VARCHAR);
			callableStatement.execute(); 
			responseString = callableStatement.getString(7); 
			inderPrasthaOnlineFormBean.setStudentRegistrationId(callableStatement.getString(6));
			inderPrasthaOnlineFormBean.setApplicationNo(callableStatement.getString(5));
			logger.info("responseString : - " + responseString);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertInderPrasthaDetails" + e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("inderPrasthaOnlineFormBean(" + inderPrasthaOnlineFormBean + ") - END");
		return responseString;
	}

	@Override
	public InderPrasthaOnlineFormBean getInderPrasthaDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getInderPrasthaDetails(" + applicationNo + ") - START");
		InderPrasthaOnlineFormBean inderPrasthaOnlineFormBean = new InderPrasthaOnlineFormBean();

		try {
			callableStatement = con.prepareCall("{call PROC_GET_INDERPRASTHA_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery();
			while (resultSet.next()) {
				inderPrasthaOnlineFormBean.setUniversityRollNo(resultSet.getString("universityRollNo"));
				inderPrasthaOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				inderPrasthaOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				inderPrasthaOnlineFormBean.setBranch(resultSet.getString("branch"));
				inderPrasthaOnlineFormBean.setYear(resultSet.getString("year"));
				inderPrasthaOnlineFormBean.setSeater(resultSet.getString("seater"));
				inderPrasthaOnlineFormBean.setAmount(resultSet.getString("amount"));
				inderPrasthaOnlineFormBean.setApplicationNo(applicationNo);
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getInderPrasthaDetails" + e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getInderPrasthaDetails(" + inderPrasthaOnlineFormBean + ") - END");
		return inderPrasthaOnlineFormBean;
	}

	@Override
	public String insertInderPrasthaNewDetails(InderPrasthaNewOnlineFormBean inderPrasthaNewOnlineFormBean,
			String billerId) {

		long startTime = System.currentTimeMillis();
		logger.info("insertInderPrasthaNewDetails(" + inderPrasthaNewOnlineFormBean + ") - START");
		logger.info("insertInderPrasthaNewDetails---billerId : " + billerId);

		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_InderPrasthaNew_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

			callableStatement.setString(1, inderPrasthaNewOnlineFormBean.getStudentName());
			callableStatement.setString(2, inderPrasthaNewOnlineFormBean.getMobileNo());
			callableStatement.setString(3, inderPrasthaNewOnlineFormBean.getFatherName());
			callableStatement.setString(4, inderPrasthaNewOnlineFormBean.getYear());
			callableStatement.setString(5, inderPrasthaNewOnlineFormBean.getBranch());
			callableStatement.setString(6, inderPrasthaNewOnlineFormBean.getMailId());

			callableStatement.setString(7, inderPrasthaNewOnlineFormBean.getSeater());
			callableStatement.setString(8, inderPrasthaNewOnlineFormBean.getPartialPayment());
			callableStatement.setString(9, inderPrasthaNewOnlineFormBean.getPartialAmount());

			callableStatement.setString(10, inderPrasthaNewOnlineFormBean.getCollegeFee());

			callableStatement.setString(11, inderPrasthaNewOnlineFormBean.getAmount());

			callableStatement.setString(12, inderPrasthaNewOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(13, billerId);

			callableStatement.registerOutParameter(14, Types.VARCHAR);
			callableStatement.registerOutParameter(15, Types.VARCHAR);
			callableStatement.registerOutParameter(16, Types.VARCHAR);

			callableStatement.execute();

			responseString = callableStatement.getString(16);
			inderPrasthaNewOnlineFormBean.setStudentRegistrationId(callableStatement.getString(15));
			inderPrasthaNewOnlineFormBean.setApplicationNo(callableStatement.getString(14));
			logger.info("responseString : - " + responseString);

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertInderPrasthaNewDetails" + e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("inderPrasthNewOnlineFormBean(" + inderPrasthaNewOnlineFormBean + ") - END");
		return responseString;
	}

	@Override
	public InderPrasthaNewOnlineFormBean getInderPrasthaNewDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getInderPrasthaNewDetails(" + applicationNo + ") - START");
		InderPrasthaNewOnlineFormBean inderPrasthaNewOnlineFormBean = new InderPrasthaNewOnlineFormBean();

		try {
			callableStatement = con.prepareCall("{call PROC_GET_INDERPRASTHANEW_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery();
			while (resultSet.next()) {

				inderPrasthaNewOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				inderPrasthaNewOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));
				inderPrasthaNewOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				inderPrasthaNewOnlineFormBean.setYear(resultSet.getString("year"));
				inderPrasthaNewOnlineFormBean.setBranch(resultSet.getString("branch"));
				inderPrasthaNewOnlineFormBean.setMailId(resultSet.getString("emailId"));

				inderPrasthaNewOnlineFormBean.setSeater(resultSet.getString("seater"));

				inderPrasthaNewOnlineFormBean.setPartialPayment(resultSet.getString("partialPayment"));
				inderPrasthaNewOnlineFormBean.setPartialAmount(resultSet.getString("partialAmount"));

				inderPrasthaNewOnlineFormBean.setCollegeFee(resultSet.getString("collegeFee"));
				inderPrasthaNewOnlineFormBean.setAmount(resultSet.getString("amount"));
				inderPrasthaNewOnlineFormBean.setApplicationNo(applicationNo);
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getInderPrasthaNewDetails" + e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getInderPrasthaNewDetails(" + inderPrasthaNewOnlineFormBean + ") - END");
		return inderPrasthaNewOnlineFormBean;
	}

	@Override
	public String insertInderPrasthaExistDetails(InderPrasthaExistOnlineFormBean inderPrasthaExistOnlineFormBean,
			String billerId) {

		long startTime = System.currentTimeMillis();
		logger.info("insertInderPrasthaExistDetails(" + inderPrasthaExistOnlineFormBean + ") - START");
		logger.info("insertInderPrasthExistDetails---billerId : " + billerId);

		String responseString = null;
		try {
			callableStatement = con.prepareCall("{call PROC_InderPrasthaExist_Details(?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
			callableStatement.setString(1, inderPrasthaExistOnlineFormBean.getRollNo());
			callableStatement.setString(2, inderPrasthaExistOnlineFormBean.getStudentName());
			callableStatement.setString(3, inderPrasthaExistOnlineFormBean.getMobileNo());
			callableStatement.setString(4, inderPrasthaExistOnlineFormBean.getFatherName());
			callableStatement.setString(5, inderPrasthaExistOnlineFormBean.getYear());
			callableStatement.setString(6, inderPrasthaExistOnlineFormBean.getBranch());
			callableStatement.setString(7, inderPrasthaExistOnlineFormBean.getMailId());

			callableStatement.setString(8, inderPrasthaExistOnlineFormBean.getSeater());

			callableStatement.setString(9, inderPrasthaExistOnlineFormBean.getAmount());

			callableStatement.setString(10, inderPrasthaExistOnlineFormBean.getRegisteredUserId());
			callableStatement.setString(11, billerId);

			callableStatement.registerOutParameter(12, Types.VARCHAR);
			callableStatement.registerOutParameter(13, Types.VARCHAR);
			callableStatement.registerOutParameter(14, Types.VARCHAR);

			callableStatement.execute();

			responseString = callableStatement.getString(14);
			inderPrasthaExistOnlineFormBean.setStudentRegistrationId(callableStatement.getString(13));
			inderPrasthaExistOnlineFormBean.setApplicationNo(callableStatement.getString(12));
			logger.info("responseString : - " + responseString);

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch insertInderPrasthaExistDetails" + e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("inderPrasthExistOnlineFormBean(" + inderPrasthaExistOnlineFormBean + ") - END");
		return responseString;
	}

	@Override
	public InderPrasthaExistOnlineFormBean getInderPrasthaExistDetails(String applicationNo) {
		long startTime = System.currentTimeMillis();
		logger.info("getInderPrasthaExistDetails(" + applicationNo + ") - START");
		InderPrasthaExistOnlineFormBean inderPrasthaExistOnlineFormBean = new InderPrasthaExistOnlineFormBean();

		try {
			callableStatement = con.prepareCall("{call PROC_GET_INDERPRASTHAEXIST_STUDENTDETAILS(?)}");
			callableStatement.setString(1, applicationNo);
			resultSet = callableStatement.executeQuery();
			while (resultSet.next()) {
				inderPrasthaExistOnlineFormBean.setRollNo(resultSet.getString("rollNo"));
				inderPrasthaExistOnlineFormBean.setStudentName(resultSet.getString("studentName"));
				inderPrasthaExistOnlineFormBean.setMobileNo(resultSet.getString("mobileNo"));
				inderPrasthaExistOnlineFormBean.setFatherName(resultSet.getString("fatherName"));
				inderPrasthaExistOnlineFormBean.setYear(resultSet.getString("year"));
				inderPrasthaExistOnlineFormBean.setBranch(resultSet.getString("branch"));
				inderPrasthaExistOnlineFormBean.setMailId(resultSet.getString("emailId"));

				inderPrasthaExistOnlineFormBean.setSeater(resultSet.getString("seater"));
				inderPrasthaExistOnlineFormBean.setAmount(resultSet.getString("amount"));
				inderPrasthaExistOnlineFormBean.setApplicationNo(applicationNo);
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Exception inside catch getInderPrasthaExistDetails" + e);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("getInderPrasthaExistDetails(" + inderPrasthaExistOnlineFormBean + ") - END");
		return inderPrasthaExistOnlineFormBean;
	}

	public InderPrasthaExistOnlineFormBean FetchInderPrastaExistData(String rollNo) {
		long startTime = System.currentTimeMillis();
		logger.info("FetchInderPrastaExistData(" + rollNo + ") - START : " + startTime);
		InderPrasthaExistOnlineFormBean inderPrasthaExistOnlineFormBean = new InderPrasthaExistOnlineFormBean();
		try {
			this.callableStatement = this.con.prepareCall("{call PROC_Fech_InderPrastaExist_Student_DETAILS(?)}");

			this.callableStatement.setString(1, rollNo);
			this.resultSet = this.callableStatement.executeQuery();
			while (this.resultSet.next()) {
				inderPrasthaExistOnlineFormBean.setRollNo(this.resultSet.getString("rollNo"));
				inderPrasthaExistOnlineFormBean.setStudentName(this.resultSet.getString("studentName"));
				inderPrasthaExistOnlineFormBean.setFatherName(this.resultSet.getString("fatherName"));
				inderPrasthaExistOnlineFormBean.setYear(this.resultSet.getString("year"));
				inderPrasthaExistOnlineFormBean.setBranch(this.resultSet.getString("branch"));
				inderPrasthaExistOnlineFormBean.setSeater(this.resultSet.getString("seater"));

				inderPrasthaExistOnlineFormBean.setCollegeFee(this.resultSet.getString("collegeFee"));

				inderPrasthaExistOnlineFormBean.setAmount(this.resultSet.getString("amount"));
			}

		} catch (Exception e) {
			e.printStackTrace();

		}

		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME **" + (endTime - startTime));
		logger.info("FetchInderPrastaExistData(" + inderPrasthaExistOnlineFormBean + ") - END");
		return inderPrasthaExistOnlineFormBean;
	}

	public InstituteFormDetailsBean getInstituteFormDetails(String instituteId) {
		logger.info(" InstituteFormDetailsBean getInstituteFormDetails-->" + instituteId);
		InstituteFormDetailsBean instituteFormDetailsBean = new InstituteFormDetailsBean();
		long startTime = System.currentTimeMillis();
		try {

			callableStatement = con.prepareCall("{call SP_FJT_getFormInstituteDetails(?)}");
			callableStatement.setString(1, instituteId);
			resultSet = callableStatement.executeQuery();
			if (resultSet != null) {
				while (resultSet.next()) {

					instituteFormDetailsBean.setInstituteCode(resultSet.getString("Institute_Alias"));
					instituteFormDetailsBean.setMerchantID(resultSet.getString("MerchantID"));

				}
				logger.info(
						"<INSIDE> InstituteFormDetailsBean getInstituteFormDetails-->-->" + instituteFormDetailsBean);
			}

		} catch (Exception e) {
			logger.error("Exception  ", e);
			logger.info(
					"Exception occured in InstituteFormDetailsBean getInstituteFormDetails() while conecting to database : "
							+ e);
		} finally {
			try {
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception ex) {
				logger.info("Exception while closing conection...." + ex);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME ** " + (endTime - startTime));

		logger.info("outside InstituteFormDetailsBean getInstituteFormDetails");
		return instituteFormDetailsBean;
	}
	public String getInstituteId(String instituteId) {
		logger.info(" InstituteFormDetailsBean getInstituteFormDetails-->" + instituteId);
		InstituteFormDetailsBean instituteFormDetailsBean = new InstituteFormDetailsBean();
		long startTime = System.currentTimeMillis();
		String institute_Id=null;
		try {

			PreparedStatement preparedStatement=this.con.prepareStatement("select Institute_ID from fjn_institute_master where institute_alias=?");
			preparedStatement.setString(1, instituteId);
			this.resultSet=preparedStatement.executeQuery();
			if (resultSet != null) {
				while (resultSet.next()) {

					institute_Id=resultSet.getString("Institute_ID");

				}
				logger.info(
						"<INSIDE> InstituteFormDetailsBean getInstituteFormDetails-->-->" + instituteFormDetailsBean);
			}

		} catch (Exception e) {
			logger.error("Exception  ", e);
			logger.info(
					"Exception occured in InstituteFormDetailsBean getInstituteFormDetails() while conecting to database : "
							+ e);
		} finally {
			try {
				if (callableStatement != null) {
					callableStatement.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception ex) {
				logger.info("Exception while closing conection...." + ex);
			}
		}
		long endTime = System.currentTimeMillis();
		logger.info("** EXECUTION TIME ** " + (endTime - startTime));

		logger.info("outside InstituteFormDetailsBean getInstituteFormDetails");
		return institute_Id;
	}
	public String getMerchantId(String instituteCode) {
	    logger.info("getMerchantId(" + instituteCode + ") - Start");
	    String merchantId = "";
	    try {
	        // Assuming you have a table called 'users' or similar
	    	String sqlQuery = "SELECT f.merchantId " +
	                  "FROM fjn_institute_config_master (nolock) f " +
	                  "INNER JOIN fjn_institute_master (nolock) s " +
	                  "ON s.institute_id = f.institute_id " +
	                  "WHERE s.institute_alias = ?";	        // Create a PreparedStatement using the SQL query
	    	 PreparedStatement pstmt = con.prepareStatement(sqlQuery);
 
	            pstmt.setString(1, instituteCode);
 
	            // Execute the query
	            try (ResultSet rs = pstmt.executeQuery()) {
	                // Process the result
	                while (rs.next()) {
	                     merchantId = rs.getString("merchantId");
	                   System.out.println("merchantId" + merchantId);
	                }
          }
      } 
	    catch (Exception e) {
	     logger.error("Exception  " ,e);
	      try
	      {
	        if (this.resultSet != null) {
	          this.resultSet.close();
	        }
	        if (this.callableStatement != null) {
	          this.callableStatement.close();
	        }
	        if (this.con != null)
	          this.con.close();
	      }
	      catch (Exception e1) {
	        e1.printStackTrace();
	      }
	    }
	    finally
	    {
	      try
	      {
	        if (this.resultSet != null) {
	          this.resultSet.close();
	        }
	        if (this.callableStatement != null) {
	          this.callableStatement.close();
	        }
	        if (this.con != null)
	          this.con.close();
	      }
	      catch (Exception e) {
	       logger.error("Exception  " ,e);
	      }
	    }
	    logger.info("getInstituteId(" + instituteCode + ") - END");
	    return  merchantId;
	  }

}
